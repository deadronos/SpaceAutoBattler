{
  "version": 3,
  "sources": ["../src/config/progressionConfig.ts", "../src/simulate.ts", "../src/rng.ts", "../src/config/entitiesConfig.ts", "../src/entities.ts", "../src/behavior.ts", "../src/simWorker.ts"],
  "sourcesContent": ["export const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 + level * 50,\r\n  hpPercentPerLevel: 0.10,\r\n  dmgPercentPerLevel: 0.08,\r\n  shieldPercentPerLevel: 0.06,\r\n};\r\n\r\nexport default progression;\r\n", "// simulate.ts - TypeScript implementation ported from simulate.js\r\nimport { srange, srand, srandom } from './rng';\r\nimport { progression as progressionCfg } from './config/progressionConfig';\r\n\r\nexport type Bounds = { W: number; H: number };\r\n\r\nexport const SIM_DT_MS = 16; // ms\r\nexport const MAX_ACC_MS = 250;\r\n\r\nfunction dist2(a: { x: number; y: number }, b: { x: number; y: number }) {\r\n\tconst dx = a.x - b.x; const dy = a.y - b.y; return dx * dx + dy * dy;\r\n}\r\n\r\nexport function simulateStep(state: any, dtSeconds: number, bounds: Bounds) {\r\n\t// Advance time\r\n\tstate.t = (state.t || 0) + dtSeconds;\r\n\r\n\t// Move bullets\r\n\tfor (let i = (state.bullets || []).length - 1; i >= 0; i--) {\r\n\t\tconst b = state.bullets[i];\r\n\t\tb.x += (b.vx || 0) * dtSeconds;\r\n\t\tb.y += (b.vy || 0) * dtSeconds;\r\n\t\tb.ttl = (b.ttl || 0) - dtSeconds;\r\n\t\tif (b.ttl <= 0) state.bullets.splice(i, 1);\r\n\t}\r\n\r\n\t// Move ships\r\n\tfor (const s of state.ships || []) {\r\n\t\ts.x += (s.vx || 0) * dtSeconds;\r\n\t\ts.y += (s.vy || 0) * dtSeconds;\r\n\t\tif (s.x < 0) s.x += bounds.W; if (s.x > bounds.W) s.x -= bounds.W;\r\n\t\tif (s.y < 0) s.y += bounds.H; if (s.y > bounds.H) s.y -= bounds.H;\r\n\t}\r\n\r\n\t// Bullet collisions\r\n\tfor (let bi = (state.bullets || []).length - 1; bi >= 0; bi--) {\r\n\t\tconst b = state.bullets[bi];\r\n\t\tfor (let si = (state.ships || []).length - 1; si >= 0; si--) {\r\n\t\t\tconst s = state.ships[si];\r\n\t\t\tif (s.team === b.team) continue;\r\n\t\t\tconst r = ((s.radius || 6) + (b.radius || 1));\r\n\t\t\tif (dist2(b, s) <= r * r) {\r\n\t\t\t\tconst attacker = (typeof b.ownerId === 'number' || typeof b.ownerId === 'string')\r\n\t\t\t\t\t? (state.ships || []).find((sh: any) => sh.id === b.ownerId)\r\n\t\t\t\t\t: undefined;\r\n\t\t\t\tlet dealtToShield = 0;\r\n\t\t\t\tlet dealtToHealth = 0;\r\n\t\t\t\tconst shield = s.shield || 0;\r\n\t\t\t\tif (shield > 0) {\r\n\t\t\t\t\tconst absorbed = Math.min(shield, b.damage || 0);\r\n\t\t\t\t\ts.shield = shield - absorbed;\r\n\t\t\t\t\t(state.shieldHits ||= []).push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: absorbed });\r\n\t\t\t\t\tconst remaining = (b.damage || 0) - absorbed;\r\n\t\t\t\t\tif (remaining > 0) {\r\n\t\t\t\t\t\ts.hp -= remaining;\r\n\t\t\t\t\t\t(state.healthHits ||= []).push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: remaining });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdealtToShield = absorbed;\r\n\t\t\t\t\tdealtToHealth = Math.max(0, (b.damage || 0) - absorbed);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts.hp -= (b.damage || 0);\r\n\t\t\t\t\t(state.healthHits ||= []).push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: b.damage || 0 });\r\n\t\t\t\t\tdealtToHealth = (b.damage || 0);\r\n\t\t\t\t}\r\n\t\t\t\t// XP for damage\r\n\t\t\t\tif (attacker) {\r\n\t\t\t\t\tattacker.xp = (attacker.xp || 0) + (dealtToShield + dealtToHealth) * (progressionCfg.xpPerDamage || 0);\r\n\t\t\t\t\twhile ((attacker.xp || 0) >= progressionCfg.xpToLevel((attacker.level || 1))) {\r\n\t\t\t\t\t\tattacker.xp -= progressionCfg.xpToLevel((attacker.level || 1));\r\n\t\t\t\t\t\tattacker.level = (attacker.level || 1) + 1;\r\n\t\t\t\t\t\tconst hpMul = 1 + (progressionCfg.hpPercentPerLevel || 0);\r\n\t\t\t\t\t\tconst shMul = 1 + (progressionCfg.shieldPercentPerLevel || 0);\r\n\t\t\t\t\t\tconst dmgMul = 1 + (progressionCfg.dmgPercentPerLevel || 0);\r\n\t\t\t\t\t\tattacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n\t\t\t\t\t\tattacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n\t\t\t\t\t\tif (typeof attacker.maxShield === 'number') {\r\n\t\t\t\t\t\t\tattacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n\t\t\t\t\t\t\tattacker.shield = Math.min(attacker.maxShield, (attacker.shield || 0) * shMul);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (Array.isArray(attacker.cannons)) {\r\n\t\t\t\t\t\t\tfor (const c of attacker.cannons) {\r\n\t\t\t\t\t\t\t\tif (typeof c.damage === 'number') c.damage *= dmgMul;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tstate.bullets.splice(bi, 1);\r\n\t\t\t\tif (s.hp <= 0) {\r\n\t\t\t\t\tif (attacker) {\r\n\t\t\t\t\t\tattacker.xp = (attacker.xp || 0) + (progressionCfg.xpPerKill || 0);\r\n\t\t\t\t\t\twhile ((attacker.xp || 0) >= progressionCfg.xpToLevel((attacker.level || 1))) {\r\n\t\t\t\t\t\t\tattacker.xp -= progressionCfg.xpToLevel((attacker.level || 1));\r\n\t\t\t\t\t\t\tattacker.level = (attacker.level || 1) + 1;\r\n\t\t\t\t\t\t\tconst hpMul = 1 + (progressionCfg.hpPercentPerLevel || 0);\r\n\t\t\t\t\t\t\tconst shMul = 1 + (progressionCfg.shieldPercentPerLevel || 0);\r\n\t\t\t\t\t\t\tconst dmgMul = 1 + (progressionCfg.dmgPercentPerLevel || 0);\r\n\t\t\t\t\t\t\tattacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n\t\t\t\t\t\t\tattacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n\t\t\t\t\t\t\tif (typeof attacker.maxShield === 'number') {\r\n\t\t\t\t\t\t\t\tattacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n\t\t\t\t\t\t\t\tattacker.shield = Math.min(attacker.maxShield, (attacker.shield || 0) * shMul);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Array.isArray(attacker.cannons)) {\r\n\t\t\t\t\t\t\t\tfor (const c of attacker.cannons) {\r\n\t\t\t\t\t\t\t\t\tif (typeof c.damage === 'number') c.damage *= dmgMul;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t(state.explosions ||= []).push({ x: s.x, y: s.y, team: s.team });\r\n\t\t\t\t\tstate.ships.splice(si, 1);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Shield regen\r\n\tfor (const s of state.ships || []) {\r\n\t\tif (s.maxShield) s.shield = Math.min(s.maxShield, (s.shield || 0) + (s.shieldRegen || 0) * dtSeconds);\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\nexport default { simulateStep, SIM_DT_MS };\r\n", "// src/rng.ts - Seeded RNG utilities (ported from rng.js)\r\nlet _state: number | null = null;\r\n\r\nexport function srand(seed?: number) {\r\n  // Mirror original behavior: accept 32-bit seed and coerce to non-zero; if undefined -> leave null\r\n  if (typeof seed === 'number') {\r\n    _state = (seed >>> 0) || 1;\r\n  } else {\r\n    _state = null;\r\n  }\r\n}\r\n\r\nfunction _next(): number {\r\n  // xorshift/LCG style used in original; keep same constants\r\n  if (_state === null) _state = 1;\r\n  // Math.imul for 32-bit multiply, then add, then >>> 0 to ensure uint32\r\n  _state = (Math.imul(1664525, _state) + 1013904223) >>> 0;\r\n  return _state;\r\n}\r\n\r\nexport function srandom(): number {\r\n  if (_state === null) return Math.random();\r\n  // produce [0,1)\r\n  const v = _next();\r\n  // Use 2^32 to ensure the result is in [0,1), not [0,1].\r\n  // Dividing by 4294967295 could yield 1 when v == 0xffffffff, which breaks exclusive upper-bounds.\r\n  return v / 4294967296; // 2**32\r\n}\r\n\r\nexport function srange(min: number, max: number): number {\r\n  return min + srandom() * (max - min);\r\n}\r\n\r\nexport function srangeInt(min: number, max: number): number {\r\n  // inclusive min, exclusive max to match common patterns\r\n  return Math.floor(srange(min, max));\r\n}\r\n\r\nexport default { srand, srandom, srange, srangeInt };\r\n", "// entitiesConfig.ts - ship-type defaults and visuals helpers (typed)\r\nimport { getShipAsset, getBulletAsset, getTurretAsset } from './assets/assetsConfig';\r\n\r\nexport type CannonCfg = {\r\n  damage: number; rate: number; spread?: number; muzzleSpeed?: number; bulletRadius?: number; bulletTTL?: number;\r\n};\r\n\r\nexport type ShipTypeCfg = {\r\n  maxHp: number; armor?: number; maxShield?: number; shieldRegen?: number; dmg?: number; radius?: number;\r\n  cannons?: CannonCfg[]; accel?: number; turnRate?: number; carrier?: { fighterCooldown: number; maxFighters: number; spawnPerCooldown: number };\r\n};\r\n\r\nexport type ShipConfigMap = Record<string, ShipTypeCfg>;\r\n\r\nexport const ShipConfig: ShipConfigMap = {\r\n  fighter: {\r\n    maxHp: 15, armor: 0, maxShield: 8, shieldRegen: 1.0, dmg: 3, radius: 4,\r\n    cannons: [ { damage: 3, rate: 3, spread: 0.1, muzzleSpeed: 300, bulletRadius: 1.5, bulletTTL: 1.2 } ],\r\n    accel: 600, turnRate: 6,\r\n  },\r\n  corvette: {\r\n    maxHp: 50, armor: 0, maxShield: Math.round(50 * 0.6), shieldRegen: 0.5, dmg: 5, radius: 8,\r\n    accel: 200, turnRate: 3,\r\n    cannons: [ { damage: 6, rate: 1.2, spread: 0.05, muzzleSpeed: 220, bulletRadius: 2, bulletTTL: 2.0 } ],\r\n  },\r\n  frigate: {\r\n    maxHp: 80, armor: 1, maxShield: Math.round(80 * 0.6), shieldRegen: 0.4, dmg: 8, radius: 12,\r\n    cannons: [ { damage: 8, rate: 1.0, spread: 0.06, muzzleSpeed: 200, bulletRadius: 2.5, bulletTTL: 2.2 } ],\r\n    accel: 120, turnRate: 2.2,\r\n  },\r\n  destroyer: {\r\n    maxHp: 120, armor: 2, maxShield: Math.round(120 * 0.6), shieldRegen: 0.3, dmg: 12, radius: 16,\r\n    cannons: new Array(6).fill(0).map(() => ({ damage: 6, rate: 0.8, spread: 0.08, muzzleSpeed: 240, bulletRadius: 2.5, bulletTTL: 2.4 })),\r\n    accel: 80, turnRate: 1.6,\r\n  },\r\n  carrier: {\r\n    maxHp: 200, armor: 3, maxShield: Math.round(200 * 0.6), shieldRegen: 0.2, dmg: 2, radius: 24,\r\n    cannons: new Array(4).fill(0).map(() => ({ damage: 4, rate: 0.6, spread: 0.12, muzzleSpeed: 180, bulletRadius: 3, bulletTTL: 2.8 })),\r\n    accel: 40, turnRate: 0.8,\r\n    carrier: { fighterCooldown: 1.5, maxFighters: 6, spawnPerCooldown: 2 }\r\n  }\r\n};\r\n\r\nexport default ShipConfig;\r\n\r\nexport function setShipConfig(newCfg: Partial<ShipConfigMap> = {}) {\r\n  function merge(target: any, src: any) {\r\n    for (const k of Object.keys(src)) {\r\n      const sv = (src as any)[k];\r\n      if (sv && typeof sv === 'object' && !Array.isArray(sv)) {\r\n        if (!target[k] || typeof target[k] !== 'object') target[k] = {};\r\n        merge(target[k], sv);\r\n      } else if (Array.isArray(sv)) {\r\n        target[k] = sv.map(item => (item && typeof item === 'object' ? Object.assign({}, item) : item));\r\n      } else if (['number', 'string', 'boolean'].includes(typeof sv)) {\r\n        target[k] = sv;\r\n      }\r\n    }\r\n  }\r\n  merge(ShipConfig as any, newCfg as any);\r\n}\r\n\r\nexport function getShipConfig(): ShipConfigMap {\r\n  return JSON.parse(JSON.stringify(ShipConfig)) as ShipConfigMap;\r\n}\r\n\r\nexport const VisualMappingConfig = {\r\n  bulletRadiusThresholds: [\r\n    { threshold: 0.22, kind: 'small' },\r\n    { threshold: 0.32, kind: 'medium' },\r\n    { threshold: Infinity, kind: 'large' }\r\n  ],\r\n  defaultTurretKind: 'basic',\r\n  shipAssetKey: {\r\n    fighter: 'fighter', corvette: 'corvette', frigate: 'frigate', destroyer: 'destroyer', carrier: 'carrier'\r\n  }\r\n};\r\n\r\nexport function bulletKindForRadius(r = 0.2): string {\r\n  for (const t of VisualMappingConfig.bulletRadiusThresholds) {\r\n    if (r <= t.threshold) return t.kind;\r\n  }\r\n  return 'small';\r\n}\r\n\r\nexport function getBulletAssetForCannon(cannon: { bulletRadius?: number; radius?: number } = {}) {\r\n  const r = typeof cannon.bulletRadius === 'number' ? cannon.bulletRadius : (typeof cannon.radius === 'number' ? cannon.radius : 0.2);\r\n  const kind = bulletKindForRadius(r);\r\n  return getBulletAsset(kind as any);\r\n}\r\n\r\nexport function getShipAssetForType(type = 'fighter') {\r\n  const key = (VisualMappingConfig as any).shipAssetKey[type] || type;\r\n  return getShipAsset(key as any);\r\n}\r\n\r\nexport function getTurretAssetForShip(_shipType = 'fighter') {\r\n  return getTurretAsset(VisualMappingConfig.defaultTurretKind as any);\r\n}\r\n\r\nexport function getVisualsForShipType(type = 'fighter', cannon: any = undefined) {\r\n  return { hull: getShipAssetForType(type), turret: getTurretAssetForShip(type), bullet: getBulletAssetForCannon(cannon) };\r\n}\r\n", "// entities.ts - catalog of ships, bullets, cannon configs and simple factories\r\nimport { getShipConfig } from './config/entitiesConfig';\r\n\r\nlet nextId = 1;\r\nexport function genId(): number { return nextId++; }\r\n\r\nexport type Cannon = {\r\n  damage: number;\r\n  rate: number;\r\n  spread?: number;\r\n  muzzleSpeed?: number;\r\n  bulletRadius?: number;\r\n  bulletTTL?: number;\r\n};\r\n\r\nexport type Ship = {\r\n  id: number;\r\n  type: string;\r\n  x: number; y: number;\r\n  vx: number; vy: number;\r\n  hp: number; maxHp: number;\r\n  shield?: number; maxShield?: number;\r\n  team?: string;\r\n  xp?: number; level?: number;\r\n  cannons?: Cannon[];\r\n  accel?: number; turnRate?: number; radius?: number;\r\n};\r\n\r\nexport function createShip(type = 'fighter', x = 0, y = 0, team = 'red'): Ship {\r\n  const cfg = (getShipConfig() as any)[type] || (getShipConfig() as any).fighter;\r\n  return {\r\n    id: genId(),\r\n    type,\r\n    x, y,\r\n    vx: 0, vy: 0,\r\n    hp: cfg.maxHp,\r\n    maxHp: cfg.maxHp,\r\n    shield: cfg.maxShield || 0,\r\n    maxShield: cfg.maxShield || 0,\r\n    team,\r\n    xp: 0,\r\n    level: 1,\r\n    cannons: JSON.parse(JSON.stringify(cfg.cannons || [])),\r\n    accel: cfg.accel || 0,\r\n    turnRate: cfg.turnRate || 0,\r\n    radius: cfg.radius || 6,\r\n  } as Ship;\r\n}\r\n\r\nexport type Bullet = {\r\n  id: number; x: number; y: number; vx: number; vy: number; team: string; ownerId?: number | null; damage: number; ttl: number;\r\n};\r\n\r\nexport function createBullet(x: number, y: number, vx: number, vy: number, team = 'red', ownerId: number | null = null, damage = 1, ttl = 2.0): Bullet {\r\n  return {\r\n    id: genId(),\r\n    x, y, vx, vy, team, ownerId, damage, ttl\r\n  } as Bullet;\r\n}\r\n\r\nexport type GameState = {\r\n  t: number;\r\n  ships: Ship[];\r\n  bullets: Bullet[];\r\n  explosions: any[];\r\n  shieldHits: any[];\r\n  healthHits: any[];\r\n};\r\n\r\nexport function makeInitialState(): GameState {\r\n  return {\r\n    t: 0,\r\n    ships: [],\r\n    bullets: [],\r\n    explosions: [],\r\n    shieldHits: [],\r\n    healthHits: [],\r\n  };\r\n}\r\n\r\nexport default { createShip, createBullet, makeInitialState };\r\n", "/*\r\n  behavior.ts - deterministic, simple AI for steering and firing\r\n\r\n  Developer notes (AI / GameManager contract)\r\n\r\n  Overview\r\n  - This module implements a small, deterministic AI used by the GameManager\r\n    in main-thread simulation mode (when no sim worker is present) and by\r\n    the worker simulation code. The AI is intentionally simple: per-ship\r\n    finite-state behavior (idle, engage, evade), target selection, basic\r\n    steering and firing logic.\r\n\r\n  Determinism and RNG\r\n  - The AI uses the seeded RNG helpers exported from `src/rng`:\r\n      - `srandom()` returns a seeded pseudo-random [0,1) value\r\n      - `srange(a,b)` returns a seeded pseudo-random value in [a,b)\r\n  - Callers (tests and manager) must ensure the RNG seed is set via\r\n    `srand(seed)` before running simulation steps for deterministic\r\n    outcomes. The GameManager may also use a manager-local RNG for\r\n    deterministic spawn behaviour; AI should only rely on `srandom()` and\r\n    `srange()` for deterministic randomness.\r\n\r\n  Per-ship AI\r\n  - Each ship gets a lightweight `__ai` object stored on the ship:\r\n      { state: 'idle'|'engage'|'evade', decisionTimer: number, targetId: any }\r\n  - `applySimpleAI(state, dt, bounds)` updates each ship's velocity and may\r\n    emit bullets into the provided `state.bullets` array (via createBullet).\r\n  - The AI uses `chooseNewTarget(...)` which performs a seeded random pick\r\n    among visible enemies (via `srandom()`), keeping behavior repeatable\r\n    when seeded.\r\n\r\n  Integration points with GameManager\r\n  - GameManager calls `applySimpleAI(state, dt, bounds)` when running the\r\n    simulation on the main thread (i.e., when no worker is used). The\r\n    worker version implements the same logic to maintain parity.\r\n  - The AI only mutates ship/bullet numeric properties; it must not touch\r\n    rendering or DOM APIs (those are the renderer's responsibility).\r\n\r\n  Reinforcements & Tests\r\n  - Unit tests that assert deterministic behaviour should call `srand(seed)`\r\n    before driving the simulation and, when available, call manager-level\r\n    `reseed(seed)` to also align any manager-local RNG.\r\n  - Use `createGameManager({ useWorker: false })` in tests to avoid worker\r\n    timing nondeterminism when asserting AI outcomes.\r\n\r\n  Debugging helpers\r\n  - `getShipAiState(ship)` returns a shallow copy of a ship's `__ai` object\r\n    (excluding `targetId`) to help assertions in tests and UI debugging.\r\n\r\n  Keep this module focused on numeric simulation logic. Any UX-facing\r\n  concerns (timing, delayed UI updates) should be handled outside of this\r\n  module to keep tests deterministic and fast.\r\n*/\r\n\r\n// behavior.ts - deterministic, simple AI for steering and firing (TypeScript)\r\nimport { srange, srandom } from './rng';\r\nimport { createBullet, type Ship } from './entities';\r\n\r\ntype State = { ships: any[]; bullets: any[] };\r\n\r\nfunction len2(vx: number, vy: number) { return vx*vx + vy*vy; }\r\nfunction clampSpeed(s: any, max: number) {\r\n  const v2 = len2(s.vx || 0, s.vy || 0);\r\n  const max2 = max * max;\r\n  if (v2 > max2 && v2 > 0) {\r\n    const inv = max / Math.sqrt(v2);\r\n    s.vx *= inv; s.vy *= inv;\r\n  }\r\n}\r\n\r\nfunction findNearestEnemy(state: State, ship: any) {\r\n  let best: any = null; let bestD2 = Infinity;\r\n  for (const other of state.ships) {\r\n    if (other === ship) continue;\r\n    if (other.team === ship.team) continue;\r\n    const dx = (other.x || 0) - (ship.x || 0); const dy = (other.y || 0) - (ship.y || 0);\r\n    const d2 = dx*dx + dy*dy;\r\n    if (d2 < bestD2) { bestD2 = d2; best = other; }\r\n  }\r\n  return best;\r\n}\r\n\r\nfunction aimWithSpread(from: any, to: any, spread = 0) {\r\n  let dx = (to.x || 0) - (from.x || 0); let dy = (to.y || 0) - (from.y || 0);\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  dx /= d; dy /= d;\r\n  if (spread > 0) {\r\n    const ang = Math.atan2(dy, dx);\r\n    const jitter = (srange(-spread, spread));\r\n    const na = ang + jitter;\r\n    return { x: Math.cos(na), y: Math.sin(na) };\r\n  }\r\n  return { x: dx, y: dy };\r\n}\r\n\r\nfunction tryFire(state: State, ship: any, target: any, dt: number) {\r\n  const cannons: any[] = Array.isArray(ship.cannons) ? ship.cannons : [];\r\n  for (const c of cannons) {\r\n    if (typeof c.__cd !== 'number') c.__cd = 0;\r\n    c.__cd -= dt;\r\n    if (c.__cd > 0) continue;\r\n    const spread = typeof c.spread === 'number' ? c.spread : 0;\r\n    const dir = aimWithSpread(ship, target, spread);\r\n    const speed = typeof c.muzzleSpeed === 'number' ? c.muzzleSpeed : 240;\r\n    const dmg = typeof c.damage === 'number' ? c.damage : 3;\r\n    const ttl = typeof c.bulletTTL === 'number' ? c.bulletTTL : 2.0;\r\n    const radius = typeof c.bulletRadius === 'number' ? c.bulletRadius : 1.5;\r\n    const vx = dir.x * speed; const vy = dir.y * speed;\r\n    const b = Object.assign(\r\n      createBullet(ship.x, ship.y, vx, vy, ship.team, ship.id, dmg, ttl),\r\n      { radius }\r\n    );\r\n    state.bullets.push(b);\r\n    const rate = (typeof c.rate === 'number' && c.rate > 0) ? c.rate : 1;\r\n    c.__cd = 1 / rate;\r\n  }\r\n}\r\n\r\n// Per-ship AI states: 'idle', 'engage', 'evade'\r\nfunction ensureShipAiState(s: any) {\r\n  if (!s.__ai) {\r\n    s.__ai = { state: 'idle', decisionTimer: 0, targetId: null };\r\n  }\r\n  return s.__ai;\r\n}\r\n\r\nfunction chooseNewTarget(state: State, ship: any) {\r\n  // find nearest enemy but sometimes (seeded) pick a slightly further one\r\n  const enemies = (state.ships || []).filter((sh) => sh && sh.team !== ship.team);\r\n  if (!enemies.length) return null;\r\n  // seeded jitter to occasionally pick a different enemy\r\n  const idx = Math.floor(srandom() * enemies.length);\r\n  return enemies[idx];\r\n}\r\n\r\nfunction steerTowards(s: any, tx: number, ty: number, accel: number, dt: number) {\r\n  const dx = tx - (s.x || 0); const dy = ty - (s.y || 0);\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  const nx = dx / d; const ny = dy / d;\r\n  s.vx = (s.vx || 0) + nx * accel * dt;\r\n  s.vy = (s.vy || 0) + ny * accel * dt;\r\n}\r\n\r\nfunction steerAway(s: any, tx: number, ty: number, accel: number, dt: number) {\r\n  const dx = (s.x || 0) - tx; const dy = (s.y || 0) - ty;\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  const nx = dx / d; const ny = dy / d;\r\n  s.vx = (s.vx || 0) + nx * accel * dt;\r\n  s.vy = (s.vy || 0) + ny * accel * dt;\r\n}\r\n\r\nexport function applySimpleAI(state: State, dt: number, _bounds: { W: number; H: number } = { W: 800, H: 600 }) {\r\n  if (!state || !Array.isArray(state.ships)) return;\r\n  for (const s of state.ships) {\r\n    // ensure per-ship ai state\r\n    const ai = ensureShipAiState(s);\r\n    // decrease decision timer\r\n    ai.decisionTimer = Math.max(0, (ai.decisionTimer || 0) - dt);\r\n\r\n    // get target (if any) \u2014 prefer targetId if still valid\r\n    let target = null;\r\n    if (ai.targetId != null) target = (state.ships || []).find(sh => sh && sh.id === ai.targetId);\r\n    if (!target) target = chooseNewTarget(state, s);\r\n    if (target) ai.targetId = target.id;\r\n\r\n    const accel = typeof s.accel === 'number' ? s.accel : 100;\r\n    const maxSpeed = 160;\r\n\r\n    // simple finite state machine\r\n    if (!target) {\r\n      // idle wander\r\n      s.vx = (s.vx || 0) + (srange(-1, 1) * 8) * dt;\r\n      s.vy = (s.vy || 0) + (srange(-1, 1) * 8) * dt;\r\n      ai.state = 'idle';\r\n    } else {\r\n      // decide whether to engage or evade based on hp/shield and seeded randomness\r\n      if (ai.decisionTimer <= 0) {\r\n        // decision influenced by health and a small random factor\r\n        const hpFrac = ((s.hp || 0) / Math.max(1, (s.maxHp || 1)));\r\n        const rnd = srandom();\r\n        if (hpFrac < 0.35 || rnd < 0.15) ai.state = 'evade';\r\n        else if (rnd < 0.85) ai.state = 'engage'; else ai.state = 'idle';\r\n        // set next decision 0.5-2.0s later (seeded)\r\n        ai.decisionTimer = 0.5 + srandom() * 1.5;\r\n      }\r\n\r\n      // behavior per state\r\n      if (ai.state === 'engage') {\r\n        // steer towards target with slight aim jitter\r\n        const aim = aimWithSpread(s, target, 0.05);\r\n        s.vx = (s.vx || 0) + aim.x * accel * dt;\r\n        s.vy = (s.vy || 0) + aim.y * accel * dt;\r\n        tryFire(state, s, target, dt);\r\n      } else if (ai.state === 'evade') {\r\n        // steer away and sometimes strafe\r\n        steerAway(s, target.x || 0, target.y || 0, accel * 0.8, dt);\r\n        // small lateral jitter to avoid predictable straight-line fleeing\r\n        const ang = Math.atan2((s.vy || 0), (s.vx || 0));\r\n        const perp = ang + (Math.PI / 2) * (srandom() < 0.5 ? 1 : -1);\r\n        s.vx += Math.cos(perp) * accel * 0.2 * dt; s.vy += Math.sin(perp) * accel * 0.2 * dt;\r\n      } else {\r\n        // idle or fallback: small random nudges\r\n        s.vx = (s.vx || 0) + (srange(-0.5, 0.5) * 6) * dt;\r\n        s.vy = (s.vy || 0) + (srange(-0.5, 0.5) * 6) * dt;\r\n      }\r\n    }\r\n    clampSpeed(s, maxSpeed);\r\n  }\r\n}\r\n\r\n// Debug helper for tests/UI: read a ship's internal AI state (copy)\r\nexport function getShipAiState(ship: any) {\r\n  if (!ship || !ship.__ai) return null;\r\n  const { targetId, ...rest } = ship.__ai;\r\n  return Object.assign({}, rest);\r\n}\r\n\r\n// also export as named exports for consistent module interop\r\nexport default { applySimpleAI, getShipAiState };\r\n", "// src/simWorker.ts - simulation worker implementation (compiled to JS and loaded as module Worker)\r\nimport { simulateStep } from './simulate';\r\nimport { applySimpleAI } from './behavior';\r\nimport { srand } from './rng';\r\n\r\ntype Bounds = { W: number; H: number };\r\n\r\nlet state: any = null;\r\nlet bounds: Bounds = { W: 800, H: 600 };\r\nlet simDtMs = 16;\r\nlet running = false;\r\nlet acc = 0;\r\nlet last = 0;\r\n\r\nfunction postSnapshot() {\r\n\ttry {\r\n\t\tpostMessage({ type: 'snapshot', state });\r\n\t\t// Clear transient event arrays so the worker does not repeatedly resend\r\n\t\t// the same events on every snapshot. The snapshot is cloned by postMessage\r\n\t\t// so it's safe to clear them here.\r\n\t\ttry { clearTransientEvents(state); } catch (e) { /* ignore */ }\r\n\t} catch (e) {\r\n\t\t// ignore\r\n\t}\r\n}\r\n\r\n// exported for tests: clear transient worker event arrays after snapshot\r\nexport function clearTransientEvents(s: any) {\r\n  if (!s || typeof s !== 'object') return;\r\n  try {\r\n    if (Array.isArray(s.explosions)) s.explosions.length = 0;\r\n    if (Array.isArray(s.shieldHits)) s.shieldHits.length = 0;\r\n    if (Array.isArray(s.healthHits)) s.healthHits.length = 0;\r\n  } catch (e) { /* ignore */ }\r\n}\r\n\r\nfunction tick() {\r\n\tif (!running) return;\r\n\tconst now = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now();\r\n\tif (!last) last = now;\r\n\tacc += now - last; last = now;\r\n\tif (acc > 250) acc = 250;\r\n\t\twhile (acc >= simDtMs) {\r\n\t\t\ttry {\r\n\t\t\t\t\t// Apply deterministic AI before physics step\r\n\t\t\t\t\tapplySimpleAI(state as any, simDtMs / 1000, bounds);\r\n\t\t\t\t\tsimulateStep(state, simDtMs / 1000, bounds);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconst errAny: any = e as any;\r\n\t\t\t\tconst stack = errAny && errAny.stack ? errAny.stack : '';\r\n\t\t\t\tpostMessage({ type: 'error', message: String(e), stack });\r\n\t\t\t}\r\n\t\t\tacc -= simDtMs;\r\n\t\t}\r\n\tpostSnapshot();\r\n\tsetTimeout(tick, 0);\r\n}\r\n\r\n(self as any).onmessage = (ev: MessageEvent) => {\r\n\tconst msg = ev.data;\r\n\ttry {\r\n\t\tswitch (msg && msg.type) {\r\n\t\t\tcase 'init':\r\n\t\t\t\tif (typeof msg.seed === 'number') srand(msg.seed);\r\n\t\t\t\tif (msg.bounds) bounds = msg.bounds;\r\n\t\t\t\tif (typeof msg.simDtMs === 'number') simDtMs = msg.simDtMs;\r\n\t\t\t\tif (msg.state) state = msg.state;\r\n\t\t\t\tpostMessage({ type: 'ready' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'start':\r\n\t\t\t\tif (!state) { postMessage({ type: 'error', message: 'no state' }); break; }\r\n\t\t\t\trunning = true; acc = 0; last = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now(); tick();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'stop':\r\n\t\t\t\trunning = false; break;\r\n\t\t\tcase 'snapshotRequest':\r\n\t\t\t\tpostSnapshot(); break;\r\n\t\t\tcase 'setSeed':\r\n\t\t\t\tif (typeof msg.seed === 'number') { srand(msg.seed); }\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'command':\r\n\t\t\t\tif (msg.cmd === 'spawnShip' && state) {\r\n\t\t\t\t\tstate.ships.push(msg.args.ship);\r\n\t\t\t\t} else if (msg.cmd === 'spawnShipBullet' && state) {\r\n\t\t\t\t\tstate.bullets.push(msg.args.bullet);\r\n\t\t\t\t} else if (msg.cmd === 'setState') {\r\n\t\t\t\t\tstate = msg.args.state;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\t// ignore\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t} catch (err: any) {\r\n\t\t\tconst stack = err && (err as any).stack ? (err as any).stack : '';\r\n\t\t\tpostMessage({ type: 'error', message: String(err), stack });\r\n\t\t}\r\n};\r\n\r\nexport default null;\r\n"],
  "mappings": "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",
  "names": ["state", "bounds", "state", "state"]
}
