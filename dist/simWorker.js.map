{
  "version": 3,
  "sources": ["../src/config/progressionConfig.ts", "../src/simulate.ts", "../src/rng.ts", "../src/config/assets/assetsConfig.ts", "../src/config/entitiesConfig.ts", "../src/entities.ts", "../src/behavior.ts", "../src/simWorker.ts"],
  "sourcesContent": ["// Enhanced progression with diminishing returns and extra per-level scalars\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 * Math.pow(1.25, level - 1),\r\n  hpPercentPerLevel: (level: number) => Math.min(0.10, 0.05 + 0.05 / Math.sqrt(level)),\r\n  dmgPercentPerLevel: 0.08,\r\n  shieldPercentPerLevel: 0.06,\r\n  speedPercentPerLevel: 0.03,\r\n  regenPercentPerLevel: 0.04,\r\n};\r\n\r\nexport default progression;\r\n", "// simulate.ts - TypeScript implementation ported from simulate.js\r\nimport { srange, srand, srandom } from './rng';\r\nimport { progression as progressionCfg } from './config/progressionConfig';\r\n\r\nexport type Bounds = { W: number; H: number };\r\n\r\nexport const SIM_DT_MS = 16; // ms\r\nexport const MAX_ACC_MS = 250;\r\n\r\nfunction dist2(a: { x: number; y: number }, b: { x: number; y: number }) {\r\n\tconst dx = a.x - b.x; const dy = a.y - b.y; return dx * dx + dy * dy;\r\n}\r\n\r\nexport function simulateStep(state: any, dtSeconds: number, bounds: Bounds) {\r\n\t// Advance time\r\n\tstate.t = (state.t || 0) + dtSeconds;\r\n\r\n\t// Move bullets and prune out-of-bounds\r\n\tfor (let i = (state.bullets || []).length - 1; i >= 0; i--) {\r\n\t\tconst b = state.bullets[i];\r\n\t\tb.x += (b.vx || 0) * dtSeconds;\r\n\t\tb.y += (b.vy || 0) * dtSeconds;\r\n\t\tb.ttl = (b.ttl || 0) - dtSeconds;\r\n\t\tif (b.ttl <= 0 || b.x < 0 || b.x >= bounds.W || b.y < 0 || b.y >= bounds.H) {\r\n\t\t\tstate.bullets.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\t// Prune out-of-bounds shieldHits, healthHits, explosions, damageEvents\r\n\tfunction pruneHits(arr: any[], bounds: Bounds) {\r\n\t\tif (!Array.isArray(arr)) return arr;\r\n\t\treturn arr.filter(e => typeof e.x === 'number' && typeof e.y === 'number' && e.x >= 0 && e.x < bounds.W && e.y >= 0 && e.y < bounds.H);\r\n\t}\r\n\tif (Array.isArray(state.shieldHits)) state.shieldHits = pruneHits(state.shieldHits, bounds);\r\n\tif (Array.isArray(state.healthHits)) state.healthHits = pruneHits(state.healthHits, bounds);\r\n\tif (Array.isArray(state.explosions)) state.explosions = pruneHits(state.explosions, bounds);\r\n\tif (Array.isArray(state.damageEvents)) state.damageEvents = pruneHits(state.damageEvents, bounds);\r\n\r\n\t// Move ships and update heading\r\n\tfor (const s of state.ships || []) {\r\n\t\ts.x += (s.vx || 0) * dtSeconds;\r\n\t\ts.y += (s.vy || 0) * dtSeconds;\r\n\t\t// normalize into [0, bounds.W) and [0, bounds.H) using modulo so large\r\n\t\t// displacements that wrap multiple times are handled correctly.\r\n\t\tif (typeof bounds.W === 'number' && bounds.W > 0) {\r\n\t\t\t// ((x % W) + W) % W ensures positive results for negative x\r\n\t\t\ts.x = ((s.x % bounds.W) + bounds.W) % bounds.W;\r\n\t\t}\r\n\t\tif (typeof bounds.H === 'number' && bounds.H > 0) {\r\n\t\t\ts.y = ((s.y % bounds.H) + bounds.H) % bounds.H;\r\n\t\t}\r\n\r\n\t\t// --- Heading/angle update ---\r\n\t\t// If ship is moving, rotate angle toward velocity heading\r\n\t\tconst speed2 = (s.vx || 0) * (s.vx || 0) + (s.vy || 0) * (s.vy || 0);\r\n\t\tconst minSpeed = 0.5; // threshold to avoid jitter when nearly stopped\r\n\t\tif (speed2 > minSpeed * minSpeed) {\r\n\t\t\tconst desired = Math.atan2(s.vy || 0, s.vx || 0);\r\n\t\t\tif (typeof s.angle !== 'number') s.angle = desired;\r\n\t\t\telse {\r\n\t\t\t\tlet a = s.angle;\r\n\t\t\t\tlet da = desired - a;\r\n\t\t\t\t// Wrap to [-PI, PI]\r\n\t\t\t\twhile (da < -Math.PI) da += Math.PI * 2;\r\n\t\t\t\twhile (da > Math.PI) da -= Math.PI * 2;\r\n\t\t\t\tconst turnRate = typeof s.turnRate === 'number' ? s.turnRate : 3; // radians/sec\r\n\t\t\t\tconst maxTurn = turnRate * dtSeconds;\r\n\t\t\t\tif (Math.abs(da) < maxTurn) a = desired;\r\n\t\t\t\telse a += Math.sign(da) * maxTurn;\r\n\t\t\t\t// Wrap to [-PI, PI]\r\n\t\t\t\twhile (a < -Math.PI) a += Math.PI * 2;\r\n\t\t\t\twhile (a > Math.PI) a -= Math.PI * 2;\r\n\t\t\t\ts.angle = a;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Bullet collisions\r\n\tfor (let bi = (state.bullets || []).length - 1; bi >= 0; bi--) {\r\n\t\tconst b = state.bullets[bi];\r\n\t\tfor (let si = (state.ships || []).length - 1; si >= 0; si--) {\r\n\t\t\tconst s = state.ships[si];\r\n\t\t\tif (s.team === b.team) continue;\r\n\t\t\tconst r = ((s.radius || 6) + (b.radius || 1));\r\n\t\t\tif (dist2(b, s) <= r * r) {\r\n\t\t\t\tconst attacker = (typeof b.ownerId === 'number' || typeof b.ownerId === 'string')\r\n\t\t\t\t\t? (state.ships || []).find((sh: any) => sh.id === b.ownerId)\r\n\t\t\t\t\t: undefined;\r\n\t\t\t\tlet dealtToShield = 0;\r\n\t\t\t\tlet dealtToHealth = 0;\r\n\t\t\t\tconst shield = s.shield || 0;\r\n\t\t\t\t\tif (shield > 0) {\r\n\t\t\t\t\tconst absorbed = Math.min(shield, b.damage || 0);\r\n\t\t\t\t\ts.shield = shield - absorbed;\r\n\t\t\t\t\t\t\tconst hitAngle = Math.atan2((b.y || 0) - (s.y || 0), (b.x || 0) - (s.x || 0));\r\n\t\t\t\t\t\t\t(state.shieldHits ||= []).push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: absorbed, hitAngle });\r\n\t\t\t\t\t\t// expose damage event for renderer (shield hit)\r\n\t\t\t\t\t\t(state.damageEvents ||= []).push({ id: s.id, type: 'shield', amount: absorbed, x: b.x, y: b.y, team: s.team, attackerId: attacker && attacker.id });\r\n\t\t\t\t\tconst remaining = (b.damage || 0) - absorbed;\r\n\t\t\t\t\tif (remaining > 0) {\r\n\t\t\t\t\t\ts.hp -= remaining;\r\n\t\t\t\t\t\t\t(state.healthHits ||= []).push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: remaining });\r\n\t\t\t\t\t\t\t// expose damage event for renderer (health hit)\r\n\t\t\t\t\t\t\t(state.damageEvents ||= []).push({ id: s.id, type: 'hp', amount: remaining, x: b.x, y: b.y, team: s.team, attackerId: attacker && attacker.id });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdealtToShield = absorbed;\r\n\t\t\t\t\tdealtToHealth = Math.max(0, (b.damage || 0) - absorbed);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts.hp -= (b.damage || 0);\r\n\t\t\t\t\t\t(state.healthHits ||= []).push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: b.damage || 0 });\r\n\t\t\t\t\t\t// expose damage event for renderer (health hit)\r\n\t\t\t\t\t\t(state.damageEvents ||= []).push({ id: s.id, type: 'hp', amount: b.damage || 0, x: b.x, y: b.y, team: s.team, attackerId: attacker && attacker.id });\r\n\t\t\t\t\tdealtToHealth = (b.damage || 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\t// Update percent fields for renderer convenience\r\n\t\t\t\t\ts.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\r\n\t\t\t\t\ts.shieldPercent = (typeof s.maxShield === 'number' && s.maxShield > 0) ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield)) : 0;\r\n\t\t\t\t// XP for damage\r\n\t\t\t\tif (attacker) {\r\n\t\t\t\t\tattacker.xp = (attacker.xp || 0) + (dealtToShield + dealtToHealth) * (progressionCfg.xpPerDamage || 0);\r\n\t\t\t\t\twhile ((attacker.xp || 0) >= progressionCfg.xpToLevel((attacker.level || 1))) {\r\n\t\t\t\t\t\tattacker.xp -= progressionCfg.xpToLevel((attacker.level || 1));\r\n\t\t\t\t\t\tattacker.level = (attacker.level || 1) + 1;\r\n\t\t\t\t\t\t// Support function or number scalars for progression\r\n\t\t\t\t\t\tconst resolveScalar = (s: any, lvl: number) => (typeof s === 'function' ? s(lvl) : s || 0);\r\n\t\t\t\t\t\tconst lvl = attacker.level || 1;\r\n\t\t\t\t\t\tconst hpScalar = resolveScalar(progressionCfg.hpPercentPerLevel, lvl);\r\n\t\t\t\t\t\tconst shScalar = resolveScalar(progressionCfg.shieldPercentPerLevel, lvl);\r\n\t\t\t\t\t\tconst dmgScalar = resolveScalar(progressionCfg.dmgPercentPerLevel, lvl);\r\n\t\t\t\t\t\tconst speedScalar = resolveScalar((progressionCfg as any).speedPercentPerLevel, lvl);\r\n\t\t\t\t\t\tconst regenScalar = resolveScalar((progressionCfg as any).regenPercentPerLevel, lvl);\r\n\r\n\t\t\t\t\t\tconst hpMul = 1 + hpScalar;\r\n\t\t\t\t\t\tconst shMul = 1 + shScalar;\r\n\t\t\t\t\t\tconst dmgMul = 1 + dmgScalar;\r\n\r\n\t\t\t\t\t\tattacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n\t\t\t\t\t\tattacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n\t\t\t\t\t\tif (typeof attacker.maxShield === 'number') {\r\n\t\t\t\t\t\t\tattacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n\t\t\t\t\t\t\tattacker.shield = Math.min(attacker.maxShield, (attacker.shield || 0) * shMul);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (Array.isArray(attacker.cannons)) {\r\n\t\t\t\t\t\t\tfor (const c of attacker.cannons) {\r\n\t\t\t\t\t\t\t\tif (typeof c.damage === 'number') c.damage *= dmgMul;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Apply optional speed and shield regen increases\r\n\t\t\t\t\t\tif (typeof speedScalar === 'number' && typeof attacker.accel === 'number') attacker.accel = attacker.accel * (1 + speedScalar);\r\n\t\t\t\t\t\tif (typeof regenScalar === 'number' && typeof attacker.shieldRegen === 'number') attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tstate.bullets.splice(bi, 1);\r\n\t\t\t\tif (s.hp <= 0) {\r\n\t\t\t\t\tif (attacker) {\r\n\t\t\t\t\t\tattacker.xp = (attacker.xp || 0) + (progressionCfg.xpPerKill || 0);\r\n\t\t\t\t\t\twhile ((attacker.xp || 0) >= progressionCfg.xpToLevel((attacker.level || 1))) {\r\n\t\t\t\t\t\t\tattacker.xp -= progressionCfg.xpToLevel((attacker.level || 1));\r\n\t\t\t\t\t\t\tattacker.level = (attacker.level || 1) + 1;\r\n\t\t\t\t\t\t\t// Support function or number scalars for progression on kill XP\r\n\t\t\t\t\t\t\tconst resolveScalar = (s: any, lvl: number) => (typeof s === 'function' ? s(lvl) : s || 0);\r\n\t\t\t\t\t\t\tconst lvl = attacker.level || 1;\r\n\t\t\t\t\t\t\tconst hpScalar = resolveScalar(progressionCfg.hpPercentPerLevel, lvl);\r\n\t\t\t\t\t\t\tconst shScalar = resolveScalar(progressionCfg.shieldPercentPerLevel, lvl);\r\n\t\t\t\t\t\t\tconst dmgScalar = resolveScalar(progressionCfg.dmgPercentPerLevel, lvl);\r\n\t\t\t\t\t\t\tconst speedScalar = resolveScalar((progressionCfg as any).speedPercentPerLevel, lvl);\r\n\t\t\t\t\t\t\tconst regenScalar = resolveScalar((progressionCfg as any).regenPercentPerLevel, lvl);\r\n\r\n\t\t\t\t\t\t\tconst hpMul = 1 + hpScalar;\r\n\t\t\t\t\t\t\tconst shMul = 1 + shScalar;\r\n\t\t\t\t\t\t\tconst dmgMul = 1 + dmgScalar;\r\n\t\t\t\t\t\t\tattacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n\t\t\t\t\t\t\tattacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n\t\t\t\t\t\t\tif (typeof attacker.maxShield === 'number') {\r\n\t\t\t\t\t\t\t\tattacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n\t\t\t\t\t\t\t\tattacker.shield = Math.min(attacker.maxShield, (attacker.shield || 0) * shMul);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Array.isArray(attacker.cannons)) {\r\n\t\t\t\t\t\t\t\tfor (const c of attacker.cannons) {\r\n\t\t\t\t\t\t\t\t\tif (typeof c.damage === 'number') c.damage *= dmgMul;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// Apply optional speed and shield regen increases\r\n\t\t\t\t\t\t\tif (typeof speedScalar === 'number' && typeof attacker.accel === 'number') attacker.accel = attacker.accel * (1 + speedScalar);\r\n\t\t\t\t\t\t\tif (typeof regenScalar === 'number' && typeof attacker.shieldRegen === 'number') attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t(state.explosions ||= []).push({ x: s.x, y: s.y, team: s.team });\r\n\t\t\t\t\tstate.ships.splice(si, 1);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Shield regen\r\n\tfor (const s of state.ships || []) {\r\n\t\tif (s.maxShield) s.shield = Math.min(s.maxShield, (s.shield || 0) + (s.shieldRegen || 0) * dtSeconds);\r\n\t}\r\n\r\n\t// refresh percent convenience fields after regen\r\n\tfor (const s of state.ships || []) {\r\n\t\ts.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\r\n\t\ts.shieldPercent = (typeof s.maxShield === 'number' && s.maxShield > 0) ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield)) : 0;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\nexport default { simulateStep, SIM_DT_MS };\r\n", "// src/rng.ts - Seeded RNG utilities (ported from rng.js)\r\nlet _seed = 1;\r\n\r\nexport function srand(seed: number = 1) {\r\n  // store as 32-bit unsigned\r\n  _seed = seed >>> 0;\r\n}\r\n\r\n// mulberry32 PRNG\r\nfunction mulberry32(a: number) {\r\n  return function() {\r\n    let t = (a += 0x6D2B79F5) >>> 0;\r\n    t = Math.imul(t ^ (t >>> 15), t | 1);\r\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nexport function srandom(): number {\r\n  const f = mulberry32(_seed);\r\n  // advance seed deterministically\r\n  _seed = (_seed + 0x9E3779B1) >>> 0;\r\n  return f();\r\n}\r\n\r\nexport function srange(min: number, max: number): number {\r\n  return min + (max - min) * srandom();\r\n}\r\n\r\nexport function srangeInt(min: number, max: number): number {\r\n  // exclusive upper bound to match expectations\r\n  return Math.floor(srange(min, max));\r\n}\r\n\r\nexport default { srand, srandom, srange, srangeInt };\r\n", "// Basic asset templates for 2D top-down rendering with future 3D model placeholders.\r\n// Orientation: shapes face +X (to the right). Scale is in logical units; renderer\r\n// should scale to entity radius and rotate by entity heading if present.\r\n\r\nexport type PolygonShape = {\r\n  type: 'polygon';\r\n  points: number[][]; // [[x,y], ...]\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CircleShape = {\r\n  type: 'circle';\r\n  r: number;\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CompoundPart = PolygonShape | CircleShape;\r\n\r\nexport type CompoundShape = {\r\n  type: 'compound';\r\n  parts: CompoundPart[];\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type Shape2D = PolygonShape | CircleShape | CompoundShape;\r\n\r\nexport type Model3D = {\r\n  url?: string | undefined;\r\n  scale?: number | undefined;\r\n  type?: string | undefined;\r\n  mesh?: string | undefined;\r\n};\r\n\r\nexport type AssetsConfigType = {\r\n  meta: { orientation: string; coordinateSystem: string };\r\n  palette: Record<string, string>;\r\n  shapes2d: Record<string, Shape2D>;\r\n  animations?: Record<string, any>;\r\n  damageStates?: Record<string, { opacity?: number; accentColor?: string }>;\r\n  visualStateDefaults?: Record<string, { engine?: string; shield?: string; damageParticles?: string }>;\r\n};\r\n\r\nexport const AssetsConfig: AssetsConfigType = {\r\n  meta: {\r\n    orientation: '+X',\r\n    coordinateSystem: 'topdown-2d',\r\n  },\r\n  palette: {\r\n    shipHull: '#b0b7c3',\r\n    shipAccent: '#6c7380',\r\n    bullet: '#ffd166',\r\n    turret: '#94a3b8',\r\n    // Scene background color used by renderers\r\n    background: '#0b1220',\r\n  },\r\n  // 2D vector shapes defined as polygons and circles. Points are unit-sized\r\n  // profiles (roughly radius 1). Renderer should multiply by entity radius or\r\n  // provided scale before drawing.\r\n  shapes2d: {\r\n    fighter: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [-0.8, 0.6], [-0.5, 0], [-0.8, -0.6]] },\r\n        { type: 'polygon', points: [[0.0, 0.35], [-0.6, 0.65], [-0.35, 0.0]] },\r\n        { type: 'polygon', points: [[0.0, -0.35], [-0.35, 0.0], [-0.6, -0.65]] }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1, type: 'gltf', mesh: undefined }\r\n    },\r\n    corvette: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.0, 0], [0.2, 0.6], [-0.9, 0.5], [-1.1, 0], [-0.9, -0.5], [0.2, -0.6]] },\r\n        { type: 'polygon', points: [[1.2, 0.18], [1.0, 0.1], [1.0, -0.1], [1.2, -0.18]] }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1.4, type: 'gltf', mesh: undefined }\r\n    },\r\n    frigate: {\r\n      type: 'polygon',\r\n      points: [[1.1, 0], [0.6, 0.55], [-0.2, 0.8], [-1.2, 0.45], [-1.2, -0.45], [-0.2, -0.8], [0.6, -0.55]],\r\n      strokeWidth: 0.1,\r\n      model3d: { url: undefined, scale: 1.8, type: 'gltf', mesh: undefined }\r\n    },\r\n    destroyer: {\r\n      type: 'polygon',\r\n      points: [[1.4, 0], [0.8, 0.5], [0.1, 0.7], [-0.6, 0.6], [-1.4, 0.4], [-1.4, -0.4], [-0.6, -0.6], [0.1, -0.7], [0.8, -0.5]],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 2.2, type: 'gltf', mesh: undefined }\r\n    },\r\n    carrier: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.1, 0], [0.6, 0.7], [-0.5, 0.9], [-1.4, 0.7], [-1.6, 0], [-1.4, -0.7], [-0.5, -0.9], [0.6, -0.7]] },\r\n        { type: 'polygon', points: [[1.4, 0.25], [1.1, 0.15], [1.1, -0.15], [1.4, -0.25]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 3.0, type: 'gltf', mesh: undefined }\r\n    },\r\n    bulletSmall: { type: 'circle', r: 0.18 },\r\n    bulletMedium: { type: 'circle', r: 0.25 },\r\n    bulletLarge: { type: 'circle', r: 0.36 },\r\n    turretBasic: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'circle', r: 0.5 },\r\n        { type: 'polygon', points: [[-0.2, 0.2], [0.7, 0.2], [0.7, -0.2], [-0.2, -0.2]] }\r\n      ],\r\n      strokeWidth: 0.08\r\n    },\r\n    // Small effect/particle shapes for renderer-driven effects\r\n    particleSmall: { type: 'circle', r: 0.12 },\r\n    particleMedium: { type: 'circle', r: 0.22 },\r\n    explosionParticle: { type: 'circle', r: 0.32 },\r\n    shieldRing: { type: 'circle', r: 1.2 }\r\n  }\r\n};\r\n\r\n// Animations and visual defaults (align with JS AssetsConfig)\r\n(AssetsConfig as any).animations = {\r\n  engineFlare: {\r\n    type: 'polygon',\r\n    points: [ [0, 0], [-0.3, 0.15], [-0.5, 0], [-0.3, -0.15] ],\r\n    pulseRate: 8,\r\n    // configurable alpha multiplier for engine overlay\r\n    alpha: 0.4,\r\n    // local-space X offset (negative = behind ship)\r\n    offset: -0.9\r\n  },\r\n  shieldEffect: {\r\n    type: 'circle',\r\n    r: 1.2,\r\n    strokeWidth: 0.1,\r\n    color: '#88ccff',\r\n    pulseRate: 2,\r\n    // map shieldPct -> alpha = base + scale * shieldPct\r\n    alphaBase: 0.25,\r\n    alphaScale: 0.75\r\n  },\r\n  damageParticles: {\r\n    type: 'particles',\r\n    color: '#ff6b6b',\r\n    count: 6,\r\n    lifetime: 0.8,\r\n    spread: 0.6\r\n  }\r\n  ,\r\n  engineTrail: {\r\n    type: 'trail',\r\n    color: '#fffc00', // bright yellow for high contrast\r\n  maxLength: 40,    // much longer trail\r\n    width: 0.35,      // thicker trail line\r\n    fade: 0.35        // slower fading, more persistent\r\n  }\r\n};\r\n\r\n(AssetsConfig as any).damageStates = {\r\n  light: { opacity: 0.9, accentColor: '#b0b7c3' },\r\n  moderate: { opacity: 0.75, accentColor: '#d4a06a' },\r\n  heavy: { opacity: 0.5, accentColor: '#ff6b6b' }\r\n};\r\n\r\n(AssetsConfig as any).visualStateDefaults = {\r\n  fighter:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  corvette:  { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  frigate:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  destroyer: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  carrier:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 }\r\n};\r\n\r\n// thresholds for mapping hpPct -> damage state key\r\n(AssetsConfig as any).damageThresholds = { moderate: 0.66, heavy: 0.33 };\r\n(AssetsConfig as any).shieldArcWidth = Math.PI / 12;\r\n\r\nexport function getVisualConfig(type: string) {\r\n  const shape = getShipAsset(type);\r\n  const visuals = (AssetsConfig as any).visualStateDefaults[type] || (AssetsConfig as any).visualStateDefaults.fighter;\r\n  return { shape, visuals, palette: AssetsConfig.palette, animations: (AssetsConfig as any).animations, damageStates: (AssetsConfig as any).damageStates } as any;\r\n}\r\n\r\nexport function getShipAsset(type: string): Shape2D {\r\n  return AssetsConfig.shapes2d[type] || AssetsConfig.shapes2d.fighter;\r\n}\r\n\r\nexport function getBulletAsset(kind: 'small' | 'medium' | 'large' = 'small'): Shape2D {\r\n  if (kind === 'large') return AssetsConfig.shapes2d.bulletLarge;\r\n  if (kind === 'medium') return AssetsConfig.shapes2d.bulletMedium;\r\n  return AssetsConfig.shapes2d.bulletSmall;\r\n}\r\n\r\nexport function getTurretAsset(_kind: 'basic' = 'basic'): Shape2D {\r\n  return AssetsConfig.shapes2d.turretBasic;\r\n}\r\n\r\nexport default AssetsConfig;\r\n", "// entitiesConfig.ts - ship-type defaults and visuals helpers (typed)\r\nimport { getShipAsset, getBulletAsset, getTurretAsset } from './assets/assetsConfig';\r\n\r\nexport type CannonCfg = {\r\n  damage: number; rate: number; spread?: number; muzzleSpeed?: number; bulletRadius?: number; bulletTTL?: number;\r\n};\r\n\r\nexport type ShipTypeCfg = {\r\n  maxHp: number; armor?: number; maxShield?: number; shieldRegen?: number; dmg?: number; damage?: number; radius?: number;\r\n  cannons?: CannonCfg[]; accel?: number; turnRate?: number; carrier?: { fighterCooldown: number; maxFighters: number; spawnPerCooldown: number };\r\n};\r\n\r\nexport type ShipConfigMap = Record<string, ShipTypeCfg>;\r\n\r\nexport const ShipConfig: ShipConfigMap = {\r\n  fighter: {\r\n    maxHp: 15, armor: 0, maxShield: 8, shieldRegen: 1.0, dmg: 3, damage: 3, radius: 4,\r\n    cannons: [ { damage: 3, rate: 3, spread: 0.1, muzzleSpeed: 300, bulletRadius: 1.5, bulletTTL: 1.2 } ],\r\n    accel: 600, turnRate: 6,\r\n  },\r\n  corvette: {\r\n    maxHp: 50, armor: 0, maxShield: Math.round(50 * 0.6), shieldRegen: 0.5, dmg: 5, damage: 5, radius: 8,\r\n    accel: 200, turnRate: 3,\r\n    cannons: [ { damage: 6, rate: 1.2, spread: 0.05, muzzleSpeed: 220, bulletRadius: 2, bulletTTL: 2.0 } ],\r\n  },\r\n  frigate: {\r\n    maxHp: 80, armor: 1, maxShield: Math.round(80 * 0.6), shieldRegen: 0.4, dmg: 8, damage: 8, radius: 12,\r\n    cannons: [ { damage: 8, rate: 1.0, spread: 0.06, muzzleSpeed: 200, bulletRadius: 2.5, bulletTTL: 2.2 } ],\r\n    accel: 120, turnRate: 2.2,\r\n  },\r\n  destroyer: {\r\n    maxHp: 120, armor: 2, maxShield: Math.round(120 * 0.6), shieldRegen: 0.3, dmg: 12, damage: 12, radius: 16,\r\n    cannons: new Array(6).fill(0).map(() => ({ damage: 6, rate: 0.8, spread: 0.08, muzzleSpeed: 240, bulletRadius: 2.5, bulletTTL: 2.4 })),\r\n    accel: 80, turnRate: 1.6,\r\n  },\r\n  carrier: {\r\n    maxHp: 200, armor: 3, maxShield: Math.round(200 * 0.6), shieldRegen: 0.2, dmg: 2, damage: 2, radius: 24,\r\n    cannons: new Array(4).fill(0).map(() => ({ damage: 4, rate: 0.6, spread: 0.12, muzzleSpeed: 180, bulletRadius: 3, bulletTTL: 2.8 })),\r\n    accel: 40, turnRate: 0.8,\r\n    carrier: { fighterCooldown: 1.5, maxFighters: 6, spawnPerCooldown: 2 }\r\n  }\r\n};\r\n\r\nexport default ShipConfig;\r\n\r\nexport function setShipConfig(newCfg: Partial<ShipConfigMap> = {}) {\r\n  function merge(target: any, src: any) {\r\n    for (const k of Object.keys(src)) {\r\n      const sv = (src as any)[k];\r\n      if (sv && typeof sv === 'object' && !Array.isArray(sv)) {\r\n        if (!target[k] || typeof target[k] !== 'object') target[k] = {};\r\n        merge(target[k], sv);\r\n      } else if (Array.isArray(sv)) {\r\n        target[k] = sv.map(item => (item && typeof item === 'object' ? Object.assign({}, item) : item));\r\n      } else if (['number', 'string', 'boolean'].includes(typeof sv)) {\r\n        target[k] = sv;\r\n      }\r\n    }\r\n  }\r\n  merge(ShipConfig as any, newCfg as any);\r\n}\r\n\r\nexport function getShipConfig(): ShipConfigMap {\r\n  return JSON.parse(JSON.stringify(ShipConfig)) as ShipConfigMap;\r\n}\r\n\r\nexport const VisualMappingConfig = {\r\n  bulletRadiusThresholds: [\r\n    { threshold: 0.22, kind: 'small' },\r\n    { threshold: 0.32, kind: 'medium' },\r\n    { threshold: Infinity, kind: 'large' }\r\n  ],\r\n  defaultTurretKind: 'basic',\r\n  shipAssetKey: {\r\n    fighter: 'fighter', corvette: 'corvette', frigate: 'frigate', destroyer: 'destroyer', carrier: 'carrier'\r\n  }\r\n};\r\n\r\nexport function bulletKindForRadius(r = 0.2): string {\r\n  for (const t of VisualMappingConfig.bulletRadiusThresholds) {\r\n    if (r <= t.threshold) return t.kind;\r\n  }\r\n  return 'small';\r\n}\r\n\r\nexport function getBulletAssetForCannon(cannon: { bulletRadius?: number; radius?: number } = {}) {\r\n  const r = typeof cannon.bulletRadius === 'number' ? cannon.bulletRadius : (typeof cannon.radius === 'number' ? cannon.radius : 0.2);\r\n  const kind = bulletKindForRadius(r);\r\n  return getBulletAsset(kind as any);\r\n}\r\n\r\nexport function getShipAssetForType(type = 'fighter') {\r\n  const key = (VisualMappingConfig as any).shipAssetKey[type] || type;\r\n  return getShipAsset(key as any);\r\n}\r\n\r\nexport function getTurretAssetForShip(_shipType = 'fighter') {\r\n  return getTurretAsset(VisualMappingConfig.defaultTurretKind as any);\r\n}\r\n\r\nexport function getVisualsForShipType(type = 'fighter', cannon: any = undefined) {\r\n  return { hull: getShipAssetForType(type), turret: getTurretAssetForShip(type), bullet: getBulletAssetForCannon(cannon) };\r\n}\r\n\r\nexport function getDefaultShipType(): string {\r\n  const keys = Object.keys(ShipConfig || {} as any);\r\n  return keys.length ? keys[0] as string : 'fighter';\r\n}\r\n", "// entities.ts - catalog of ships, bullets, cannon configs and simple factories\r\nimport { getShipConfig, getDefaultShipType } from './config/entitiesConfig';\r\nimport type { ShipConfigMap, ShipSpec } from './types';\r\n\r\nlet nextId = 1;\r\nexport function genId(): number { return nextId++; }\r\n\r\nexport type Cannon = {\r\n  damage: number;\r\n  rate: number;\r\n  spread?: number;\r\n  muzzleSpeed?: number;\r\n  bulletRadius?: number;\r\n  bulletTTL?: number;\r\n};\r\n\r\nexport type Ship = {\r\n  id: number;\r\n  type: string;\r\n  x: number; y: number;\r\n  vx: number; vy: number;\r\n  hp: number; maxHp: number;\r\n  shield?: number; maxShield?: number;\r\n  team?: string;\r\n  xp?: number; level?: number;\r\n  cannons?: Cannon[];\r\n  accel?: number; turnRate?: number; radius?: number;\r\n  // optional AI runtime slot used by tests and behavior logic\r\n  __ai?: any;\r\n};\r\n\r\nexport function createShip(type: string | undefined = undefined, x = 0, y = 0, team = 'red'): Ship {\r\n  const shipCfg = getShipConfig() as ShipConfigMap;\r\n  const availableTypes = Object.keys(shipCfg || {});\r\n  const resolvedType = (type && shipCfg[type]) ? type : (availableTypes.length ? availableTypes[0] : getDefaultShipType());\r\n  const cfg = (shipCfg[resolvedType] || shipCfg[getDefaultShipType()]) as Partial<ShipSpec>;\r\n  return {\r\n    id: genId(),\r\n    type: resolvedType,\r\n    x, y,\r\n    vx: 0, vy: 0,\r\n    hp: cfg.maxHp,\r\n    maxHp: cfg.maxHp,\r\n    shield: cfg.maxShield || 0,\r\n    maxShield: cfg.maxShield || 0,\r\n    team,\r\n    xp: 0,\r\n    level: 1,\r\n    cannons: JSON.parse(JSON.stringify(cfg.cannons || [])),\r\n    accel: cfg.accel || 0,\r\n    turnRate: cfg.turnRate || 0,\r\n    radius: cfg.radius || 6,\r\n  } as Ship;\r\n}\r\n\r\nexport type Bullet = {\r\n  id: number; x: number; y: number; vx: number; vy: number; team: string; ownerId?: number | null; damage: number; ttl: number;\r\n};\r\n\r\nexport function createBullet(x: number, y: number, vx: number, vy: number, team = 'red', ownerId: number | null = null, damage = 1, ttl = 2.0): Bullet {\r\n  return {\r\n    id: genId(),\r\n    x, y, vx, vy, team, ownerId, damage, ttl\r\n  } as Bullet;\r\n}\r\n\r\nexport type GameState = {\r\n  t: number;\r\n  ships: Ship[];\r\n  bullets: Bullet[];\r\n  explosions: any[];\r\n  shieldHits: any[];\r\n  healthHits: any[];\r\n  engineTrailsEnabled?: boolean;\r\n};\r\n\r\nexport function makeInitialState(): GameState {\r\n  return {\r\n    t: 0,\r\n    ships: [],\r\n    bullets: [],\r\n    explosions: [],\r\n    shieldHits: [],\r\n    healthHits: [],\r\n    engineTrailsEnabled: true,\r\n  };\r\n}\r\n\r\nexport default { createShip, createBullet, makeInitialState };\r\n", "// behavior.ts - deterministic, simple AI for steering and firing\r\n// Uses seeded RNG for any randomness so results are reproducible.\r\nimport { srandom, srange } from './rng';\r\nimport { createBullet } from './entities';\r\n\r\ntype ShipLike = {\r\n  id?: number;\r\n  x?: number; y?: number;\r\n  vx?: number; vy?: number;\r\n  team?: string;\r\n  hp?: number; maxHp?: number;\r\n  cannons?: any[];\r\n  accel?: number; radius?: number; turnRate?: number;\r\n  damage?: number; dmg?: number;\r\n  __ai?: any;\r\n};\r\n\r\ntype State = { ships: ShipLike[]; bullets: any[] };\r\n\r\nfunction len2(vx: number, vy: number) { return vx*vx + vy*vy; }\r\nfunction clampSpeed(s: ShipLike, max: number) {\r\n  const v2 = len2(s.vx || 0, s.vy || 0);\r\n  const max2 = max * max;\r\n  if (v2 > max2 && v2 > 0) {\r\n    const inv = max / Math.sqrt(v2);\r\n    s.vx = (s.vx || 0) * inv;\r\n    s.vy = (s.vy || 0) * inv;\r\n  }\r\n}\r\n\r\nfunction aimWithSpread(from: ShipLike, to: ShipLike, spread = 0) {\r\n  let dx = (to.x || 0) - (from.x || 0); let dy = (to.y || 0) - (from.y || 0);\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  dx /= d; dy /= d;\r\n  if (spread > 0) {\r\n    const ang = Math.atan2(dy, dx);\r\n    const jitter = (srange(-spread, spread));\r\n    const na = ang + jitter;\r\n    return { x: Math.cos(na), y: Math.sin(na) };\r\n  }\r\n  return { x: dx, y: dy };\r\n}\r\n\r\nfunction tryFire(state: State, ship: ShipLike, target: ShipLike, dt: number) {\r\n  if (!Array.isArray(ship.cannons) || ship.cannons.length === 0) return;\r\n  for (const c of ship.cannons) {\r\n    if (typeof c.__cd !== 'number') c.__cd = 0;\r\n    c.__cd -= dt;\r\n    if (c.__cd > 0) continue;\r\n    const spread = typeof c.spread === 'number' ? c.spread : 0;\r\n    const dir = aimWithSpread(ship, target, spread);\r\n    const speed = typeof c.muzzleSpeed === 'number' ? c.muzzleSpeed : 240;\r\n    const dmg = (typeof c.damage === 'number') ? c.damage : (typeof ship.damage === 'number' ? ship.damage : (typeof ship.dmg === 'number' ? ship.dmg : 3));\r\n    const ttl = typeof c.bulletTTL === 'number' ? c.bulletTTL : 2.0;\r\n    const radius = typeof c.bulletRadius === 'number' ? c.bulletRadius : 1.5;\r\n    const vx = dir.x * speed; const vy = dir.y * speed;\r\n    const b = Object.assign(\r\n      createBullet(ship.x || 0, ship.y || 0, vx, vy, ship.team || 'red', ship.id || null, dmg, ttl),\r\n      { radius }\r\n    );\r\n    state.bullets.push(b);\r\n    const rate = (typeof c.rate === 'number' && c.rate > 0) ? c.rate : 1;\r\n    c.__cd = 1 / rate;\r\n  }\r\n}\r\n\r\nfunction ensureShipAiState(s: ShipLike) {\r\n  if (!s.__ai) {\r\n    s.__ai = { state: 'idle', decisionTimer: 0, targetId: null };\r\n  }\r\n  return s.__ai;\r\n}\r\n\r\nfunction chooseNewTarget(state: State, ship: ShipLike) {\r\n  const enemies = (state.ships || []).filter((sh) => sh && sh.team !== ship.team);\r\n  if (!enemies.length) return null;\r\n  const idx = Math.floor(srandom() * enemies.length);\r\n  return enemies[idx];\r\n}\r\n\r\nfunction steerAway(s: ShipLike, tx: number, ty: number, accel: number, dt: number) {\r\n  const dx = (s.x || 0) - tx; const dy = (s.y || 0) - ty;\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  const nx = dx / d; const ny = dy / d;\r\n  s.vx = (s.vx || 0) + nx * accel * dt;\r\n  s.vy = (s.vy || 0) + ny * accel * dt;\r\n}\r\n\r\nexport function applySimpleAI(state: State, dt: number, bounds = { W: 800, H: 600 }) {\r\n  if (!state || !Array.isArray(state.ships)) return;\r\n  for (const s of state.ships) {\r\n    const ai = ensureShipAiState(s);\r\n    ai.decisionTimer = Math.max(0, (ai.decisionTimer || 0) - dt);\r\n\r\n    let target: ShipLike | null = null;\r\n    if (ai.targetId != null) target = (state.ships || []).find(sh => sh && sh.id === ai.targetId) || null;\r\n    if (!target) target = chooseNewTarget(state, s);\r\n    if (target) ai.targetId = target.id;\r\n\r\n    const accel = typeof s.accel === 'number' ? s.accel : 100;\r\n    const maxSpeed = 160;\r\n\r\n    if (!target) {\r\n      s.vx = (s.vx || 0) + (srange(-1, 1) * 8) * dt;\r\n      s.vy = (s.vy || 0) + (srange(-1, 1) * 8) * dt;\r\n      ai.state = 'idle';\r\n    } else {\r\n      if (ai.decisionTimer <= 0) {\r\n        const hpFrac = ((s.hp || 0) / Math.max(1, (s.maxHp || 1)));\r\n        const rnd = srandom();\r\n        if (hpFrac < 0.35 || rnd < 0.15) ai.state = 'evade';\r\n        else if (rnd < 0.85) ai.state = 'engage'; else ai.state = 'idle';\r\n        ai.decisionTimer = 0.5 + srandom() * 1.5;\r\n      }\r\n\r\n      if (ai.state === 'engage') {\r\n        const aim = aimWithSpread(s, target, 0.05);\r\n        s.vx = (s.vx || 0) + aim.x * accel * dt;\r\n        s.vy = (s.vy || 0) + aim.y * accel * dt;\r\n        tryFire(state, s, target, dt);\r\n      } else if (ai.state === 'evade') {\r\n        steerAway(s, target.x || 0, target.y || 0, accel * 0.8, dt);\r\n        const ang = Math.atan2((s.vy || 0), (s.vx || 0));\r\n        const perp = ang + (Math.PI / 2) * (srandom() < 0.5 ? 1 : -1);\r\n        s.vx = (s.vx || 0) + Math.cos(perp) * accel * 0.2 * dt;\r\n        s.vy = (s.vy || 0) + Math.sin(perp) * accel * 0.2 * dt;\r\n      } else {\r\n        s.vx = (s.vx || 0) + (srange(-0.5, 0.5) * 6) * dt;\r\n        s.vy = (s.vy || 0) + (srange(-0.5, 0.5) * 6) * dt;\r\n      }\r\n    }\r\n    clampSpeed(s, maxSpeed);\r\n  }\r\n}\r\n\r\nexport function getShipAiState(ship: ShipLike) {\r\n  if (!ship || !ship.__ai) return null;\r\n  const { targetId, ...rest } = ship.__ai;\r\n  return Object.assign({}, rest);\r\n}\r\n\r\nexport default { applySimpleAI, getShipAiState };\r\n", "// src/simWorker.ts - simulation worker implementation (compiled to JS and loaded as module Worker)\r\nimport { simulateStep } from './simulate';\r\nimport { applySimpleAI } from './behavior';\r\nimport { srand } from './rng';\r\nimport type { /* Bounds type can be extended in src/types if needed */ } from './types';\r\n\r\ntype Bounds = { W: number; H: number };\r\n\r\nlet state: any = null;\r\nlet bounds: Bounds = { W: 800, H: 600 };\r\nlet simDtMs = 16;\r\nlet running = false;\r\nlet acc = 0;\r\nlet last = 0;\r\n\r\nfunction postSnapshot() {\r\n\ttry {\r\n\t\tpostMessage({ type: 'snapshot', state });\r\n\t\t// Clear transient event arrays so the worker does not repeatedly resend\r\n\t\t// the same events on every snapshot. The snapshot is cloned by postMessage\r\n\t\t// so it's safe to clear them here.\r\n\t\ttry { clearTransientEvents(state); } catch (e) { /* ignore */ }\r\n\t} catch (e) {\r\n\t\t// ignore\r\n\t}\r\n}\r\n\r\n// exported for tests: clear transient worker event arrays after snapshot\r\nexport function clearTransientEvents(s: any) {\r\n  if (!s || typeof s !== 'object') return;\r\n  try {\r\n    if (Array.isArray(s.explosions)) s.explosions.length = 0;\r\n    if (Array.isArray(s.shieldHits)) s.shieldHits.length = 0;\r\n    if (Array.isArray(s.healthHits)) s.healthHits.length = 0;\r\n  } catch (e) { /* ignore */ }\r\n}\r\n\r\nfunction tick() {\r\n\tif (!running) return;\r\n\tconst now = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now();\r\n\tif (!last) last = now;\r\n\tacc += now - last; last = now;\r\n\tif (acc > 250) acc = 250;\r\n\t\twhile (acc >= simDtMs) {\r\n\t\t\ttry {\r\n\t\t\t\t\t// Apply deterministic AI before physics step\r\n\t\t\t\t\tapplySimpleAI(state as any, simDtMs / 1000, bounds);\r\n\t\t\t\t\tsimulateStep(state, simDtMs / 1000, bounds);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconst errAny: any = e as any;\r\n\t\t\t\tconst stack = errAny && errAny.stack ? errAny.stack : '';\r\n\t\t\t\tpostMessage({ type: 'error', message: String(e), stack });\r\n\t\t\t}\r\n\t\t\tacc -= simDtMs;\r\n\t\t}\r\n\tpostSnapshot();\r\n\tsetTimeout(tick, 0);\r\n}\r\n\r\n(self as any).onmessage = (ev: MessageEvent) => {\r\n\tconst msg = ev.data;\r\n\ttry {\r\n\t\tswitch (msg && msg.type) {\r\n\t\t\tcase 'init':\r\n\t\t\t\tif (typeof msg.seed === 'number') srand(msg.seed);\r\n\t\t\t\tif (msg.bounds) bounds = msg.bounds;\r\n\t\t\t\tif (typeof msg.simDtMs === 'number') simDtMs = msg.simDtMs;\r\n\t\t\t\tif (msg.state) state = msg.state;\r\n\t\t\t\tpostMessage({ type: 'ready' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'start':\r\n\t\t\t\tif (!state) { postMessage({ type: 'error', message: 'no state' }); break; }\r\n\t\t\t\trunning = true; acc = 0; last = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now(); tick();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'stop':\r\n\t\t\t\trunning = false; break;\r\n\t\t\tcase 'snapshotRequest':\r\n\t\t\t\tpostSnapshot(); break;\r\n\t\t\tcase 'setSeed':\r\n\t\t\t\tif (typeof msg.seed === 'number') { srand(msg.seed); }\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'command':\r\n\t\t\t\tif (msg.cmd === 'spawnShip' && state) {\r\n\t\t\t\t\tstate.ships.push(msg.args.ship);\r\n\t\t\t\t} else if (msg.cmd === 'spawnShipBullet' && state) {\r\n\t\t\t\t\tstate.bullets.push(msg.args.bullet);\r\n\t\t\t\t} else if (msg.cmd === 'setState') {\r\n\t\t\t\t\tstate = msg.args.state;\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\t// ignore\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t} catch (err: any) {\r\n\t\t\tconst stack = err && (err as any).stack ? (err as any).stack : '';\r\n\t\t\tpostMessage({ type: 'error', message: String(err), stack });\r\n\t\t}\r\n};\r\n\r\nexport default null;\r\n"],
  "mappings": "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",
  "names": ["state", "bounds", "s", "lvl", "state", "bounds"]
}
