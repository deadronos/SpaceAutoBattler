{
  "version": 3,
  "sources": ["../src/config/entitiesConfig.ts", "../src/config/progressionConfig.ts", "../src/config/simConfig.ts", "../src/rng.ts", "../src/entities.ts", "../src/config/teamsConfig.ts", "../src/config/behaviorConfig.ts", "../src/behavior.ts", "../src/gamemanager.ts", "../src/config/gamemanagerConfig.ts", "../src/spatialGrid.ts", "../src/simulate.ts", "../src/simWorker.ts"],
  "sourcesContent": ["// entitiesConfig.ts - ship-type defaults and visuals helpers (typed)\r\n//\r\n// Tuning rationale (2025-08-24):\r\n// - Playfield size: 1920x1080\r\n// - Ship speeds (maxSpeed, accel): Higher speed enables kiting and rapid repositioning; slower ships are easier to flank.\r\n// - Turn rates (turnRate): Higher turn rate allows ships to evade, flank, and respond to threats quickly; low turn rate makes ships vulnerable to flanking.\r\n// - Weapon ranges (muzzleSpeed * bulletTTL): Longer range supports kiting and edge play; shorter range requires close engagement and rewards flanking.\r\n// - Weapon rate (rate): Higher fire rate enables sustained pressure and kiting; lower rate rewards timing and positioning.\r\n// - Ship radius: Larger ships are easier to hit and harder to flank; smaller ships excel at flanking and evasion.\r\n// - Boundary options (see simConfig.ts): Enable edge play (wrap, bounce, remove) for tactical escapes and repositioning.\r\n// - See patch history for details\r\nimport {\r\n  getShipAsset,\r\n  getBulletAsset,\r\n  getTurretAsset,\r\n} from \"./assets/assetsConfig\";\r\n\r\n// CannonCfg parameters and tactical impact:\r\n// - damage: Higher damage increases threat, rewards flanking and burst attacks.\r\n// - rate: Higher rate supports kiting and pressure; lower rate rewards timing.\r\n// - spread: More spread makes weapons less accurate, favors close-range flanking.\r\n// - muzzleSpeed: Higher speed increases range and kiting potential.\r\n// - bulletRadius: Larger radius makes shots easier to land, favors area denial.\r\n// - bulletTTL: Longer TTL increases range, supports edge play and kiting.\r\nexport type CannonCfg = {\r\n  damage: number;\r\n  rate: number;\r\n  spread?: number;\r\n  muzzleSpeed?: number;\r\n  bulletRadius?: number;\r\n  bulletTTL?: number;\r\n};\r\n\r\n// ShipTypeCfg parameters and tactical impact:\r\n// - maxHp, armor, maxShield: Higher values increase survivability, allow for riskier flanking and edge play.\r\n// - shieldRegen: Faster regen supports hit-and-run and kiting.\r\n// - damage/dmg: Higher damage rewards successful flanking and burst attacks.\r\n// - radius: Smaller radius makes ships harder to hit and better at flanking; larger radius increases vulnerability.\r\n// - cannons: Weapon loadout affects tactical options (see CannonCfg).\r\n// - accel: Higher acceleration enables rapid repositioning and kiting.\r\n// - turnRate: Higher turn rate allows for quick flanking, evasion, and edge play.\r\n// - maxSpeed: Higher speed supports kiting and edge escapes; lower speed makes ships easier to pursue and flank.\r\n// - turrets: Multiple turrets increase area control, make flanking harder.\r\n// - friction: Lower friction (closer to 1) enables sustained velocity for kiting and edge play; higher friction increases tactical vulnerability to pursuit and flanking.\r\n// All entities and events are pruned immediately upon destruction or expiration, ensuring tactical scenarios remain robust and consistent.\r\nexport type ShipTypeCfg = {\r\n  maxHp: number;\r\n  armor?: number;\r\n  maxShield?: number;\r\n  shieldRegen?: number;\r\n  dmg?: number;\r\n  damage?: number;\r\n  radius?: number;\r\n  cannons?: CannonCfg[];\r\n  accel?: number;\r\n  turnRate?: number;\r\n  maxSpeed?: number;\r\n  carrier?: {\r\n    fighterCooldown: number;\r\n    maxFighters: number;\r\n    spawnPerCooldown: number;\r\n  };\r\n  turrets?: Array<{\r\n    position: [number, number]; // relative to ship center, in radius units\r\n    kind: string; // turret asset kind\r\n    targeting?: \"nearest\" | \"random\" | \"focus\" | \"custom\"; // targeting logic\r\n    cooldown?: number; // seconds between shots\r\n    lastFired?: number; // timestamp of last shot\r\n  }>;\r\n};\r\n\r\nexport type ShipConfigMap = Record<string, ShipTypeCfg>;\r\n\r\nexport const ShipConfig: ShipConfigMap = {\r\n  fighter: {\r\n    maxHp: 15,\r\n    armor: 0,\r\n    maxShield: 8,\r\n    shieldRegen: 1.0,\r\n    dmg: 3,\r\n    damage: 3,\r\n    radius: 12,\r\n      cannons: [\r\n        {\r\n          damage: 3,\r\n          rate: 3,\r\n          spread: 0.1,\r\n    muzzleSpeed: 260, // reduced back (/10)\r\n          bulletRadius: 1.5,\r\n          bulletTTL: 1.1, // was 1.2\r\n        },\r\n      ],\r\n    // Refined tuning: slightly higher accel and a moderate maxSpeed for clearer motion\r\n      accel: 100, // ~10x accel\r\n      turnRate: 6,\r\n      maxSpeed: 2200, // ~10x maxSpeed\r\n  },\r\n  corvette: {\r\n    maxHp: 50,\r\n    armor: 0,\r\n    maxShield: Math.round(50 * 0.6),\r\n    shieldRegen: 0.5,\r\n    dmg: 5,\r\n    damage: 5,\r\n    radius: 20,\r\n      accel: 80,\r\n      turnRate: 3.5, // was 3\r\n      maxSpeed: 1800, // ~10x increased\r\n    cannons: [\r\n      {\r\n        damage: 6,\r\n        rate: 1.2,\r\n        spread: 0.05,\r\n    muzzleSpeed: 180, // reduced back (/10)\r\n        bulletRadius: 2,\r\n        bulletTTL: 1.8, // was 2.0\r\n      },\r\n    ],\r\n  },\r\n  frigate: {\r\n    maxHp: 80,\r\n    armor: 1,\r\n    maxShield: Math.round(80 * 0.6),\r\n    shieldRegen: 0.4,\r\n    dmg: 8,\r\n    damage: 8,\r\n    radius: 24,\r\n    cannons: [\r\n      {\r\n        damage: 8,\r\n        rate: 1.0,\r\n        spread: 0.06,\r\n    muzzleSpeed: 180, // reduced back (/10)\r\n        bulletRadius: 2.5,\r\n        bulletTTL: 2.0, // was 2.2\r\n      },\r\n    ],\r\n      accel: 70,\r\n      turnRate: 2.5, // was 2.2\r\n      maxSpeed: 1500, // ~10x increased\r\n  },\r\n  destroyer: {\r\n    maxHp: 120,\r\n    armor: 2,\r\n    maxShield: Math.round(120 * 0.6),\r\n    shieldRegen: 0.3,\r\n    dmg: 12,\r\n    damage: 12,\r\n    radius: 40,\r\n    cannons: new Array(6).fill(0).map(() => ({\r\n      damage: 6,\r\n      rate: 0.8,\r\n      spread: 0.08,\r\n    muzzleSpeed: 160, // reduced back (/10)\r\n      bulletRadius: 2.5,\r\n      bulletTTL: 1.8, // was 2.4\r\n    })),\r\n      accel: 60,\r\n      turnRate: 2.0, // was 1.6\r\n      maxSpeed: 1300, // ~10x increased\r\n    turrets: [\r\n      {\r\n        position: [1.2, 0.8],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n      {\r\n        position: [-1.2, 0.8],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n      {\r\n        position: [1.2, -0.8],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n      {\r\n        position: [-1.2, -0.8],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n      {\r\n        position: [0, 1.5],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n      {\r\n        position: [0, -1.5],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n    ],\r\n  },\r\n  carrier: {\r\n    maxHp: 200,\r\n    armor: 3,\r\n    maxShield: Math.round(200 * 0.6),\r\n    shieldRegen: 0.2,\r\n    dmg: 2,\r\n    damage: 2,\r\n    radius: 40,\r\n    cannons: new Array(4).fill(0).map(() => ({\r\n      damage: 4,\r\n      rate: 0.6,\r\n      spread: 0.12,\r\n    muzzleSpeed: 140, // reduced back (/10)\r\n      bulletRadius: 3,\r\n      bulletTTL: 2.2, // was 2.8\r\n    })),\r\n      accel: 55,\r\n      turnRate: 1.2, // was 0.8\r\n      maxSpeed: 1100, // ~10x increased\r\n    carrier: { fighterCooldown: 1.5, maxFighters: 6, spawnPerCooldown: 2 },\r\n    turrets: [\r\n      {\r\n        position: [2.0, 1.2],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 1.0,\r\n      },\r\n      {\r\n        position: [-2.0, 1.2],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 1.0,\r\n      },\r\n      {\r\n        position: [2.0, -1.2],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 1.0,\r\n      },\r\n      {\r\n        position: [-2.0, -1.2],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 1.0,\r\n      },\r\n    ],\r\n  },\r\n};\r\n// NOTE: The factory that creates Ship objects (`createShip` in src/entities.ts)\r\n// enforces a positive fallback for `maxSpeed` when the config is missing or\r\n// set to 0. This guards against malformed saved state or partial config\r\n// payloads which would otherwise clamp ship velocity to 0 and prevent\r\n// translation while still allowing rotation/firing (a common source of\r\n// confusing \"ships rotate and shoot but don't move\" bugs).\r\nexport function getShipConfig() {\r\n  return ShipConfig;\r\n}\r\n\r\n// Bullet global defaults (used if not per-ship)\r\nexport const BULLET_DEFAULTS = {\r\n  damage: 1,\r\n  ttl: 2.0,\r\n  radius: 1.5,\r\n  muzzleSpeed: 24,\r\n};\r\n\r\n// Particle defaults (used for generic effects)\r\nexport const PARTICLE_DEFAULTS = {\r\n  ttl: 1,\r\n  color: \"#fff\",\r\n  size: 2,\r\n};\r\n\r\n// Team fallback default\r\n\r\nexport function bulletKindForRadius(r: number): string {\r\n  if (r < 2) return \"small\";\r\n  if (r < 2.5) return \"medium\";\r\n  if (r < 3.5) return \"large\";\r\n  return \"heavy\";\r\n}\r\n\r\nexport function getDefaultShipType(): string {\r\n  return Object.keys(ShipConfig)[0] || \"fighter\";\r\n}\r\n\r\nexport default ShipConfig;\r\n", "// Enhanced progression with diminishing returns and extra per-level scalars\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 * Math.pow(1.25, level - 1),\r\n  hpPercentPerLevel: (level: number) => Math.min(0.10, 0.05 + 0.05 / Math.sqrt(level)),\r\n  dmgPercentPerLevel: 0.08,\r\n  shieldPercentPerLevel: 0.06,\r\n  speedPercentPerLevel: 0.03,\r\n  regenPercentPerLevel: 0.04,\r\n};\r\n\r\nexport default progression;\r\n", "import type { BoundaryBehavior } from \"./types\";\r\n\r\nexport interface SimConfig {\r\n  DT_MS: number;\r\n  MAX_ACC_MS: number;\r\n  bounds: { W: number; H: number };\r\n  friction: number; // Velocity damping factor for ships\r\n  gridCellSize?: number; // spatial grid cell size (px)\r\n}\r\n\r\nexport const SIM: SimConfig = {\r\n  DT_MS: 16,\r\n  MAX_ACC_MS: 250,\r\n  bounds: { W: 1920, H: 1080 }, // Use LOGICAL_MAP for default bounds\r\n  friction: 0.98,\r\n  gridCellSize: 64,\r\n};\r\n// boundaryBehavior: Tactical impact and pruning rationale\r\n// - 'remove': Ships/bullets are eliminated at map edge; punishes edge play, rewards central control. Pruning is immediate for out-of-bounds entities.\r\n// - 'wrap': Ships/bullets reappear on opposite edge; enables edge escapes, flanking via wrap, and kiting around boundaries. Pruning only occurs for expired entities.\r\n// - 'bounce': Ships/bullets reflect off edge; supports tactical repositioning, edge denial, and hit-and-run. Pruning is immediate for expired entities.\r\n// All entities, particles, and events are pruned immediately upon destruction, expiration, or leaving bounds, ensuring robust cleanup and tactical consistency.\r\nexport const boundaryBehavior: {\r\n  ships: BoundaryBehavior;\r\n  bullets: BoundaryBehavior;\r\n} = {\r\n  ships: \"wrap\",\r\n  bullets: \"remove\",\r\n};\r\n\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 + level * 50,\r\n};\r\n\r\nexport const LOGICAL_MAP = { W: 1920, H: 1080 };\r\n\r\nexport function getDefaultBounds() {\r\n  // Fixed logical map size for simulation and rendering\r\n  return { W: LOGICAL_MAP.W, H: LOGICAL_MAP.H };\r\n}\r\n\r\nexport default {\r\n  SIM,\r\n  progression,\r\n  boundaryBehavior,\r\n  LOGICAL_MAP,\r\n  getDefaultBounds,\r\n};\r\n", "// src/rng.ts - Seeded RNG utilities (ported from rng.js)\r\nlet _seed = 1;\r\n\r\nexport function srand(seed: number = 1) {\r\n  // store as 32-bit unsigned\r\n  _seed = seed >>> 0;\r\n}\r\n\r\n// mulberry32 PRNG\r\nfunction mulberry32(a: number) {\r\n  return function() {\r\n    let t = (a += 0x6D2B79F5) >>> 0;\r\n    t = Math.imul(t ^ (t >>> 15), t | 1);\r\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nexport function srandom(): number {\r\n  const f = mulberry32(_seed);\r\n  // advance seed deterministically\r\n  _seed = (_seed + 0x9E3779B1) >>> 0;\r\n  return f();\r\n}\r\n\r\nexport function srange(min: number, max: number): number {\r\n  return min + (max - min) * srandom();\r\n}\r\n\r\nexport function srangeInt(min: number, max: number): number {\r\n  // exclusive upper bound to match expectations\r\n  return Math.floor(srange(min, max));\r\n}\r\n\r\nexport default { srand, srandom, srange, srangeInt };\r\n", "// Effect pooling helpers (typed, per-key)\r\nexport function acquireEffect<T extends object>(state: GameState, key: string, createFn: () => T & Pooled<T>, initArgs?: Partial<T>): T & Pooled<T> {\r\n  const poolMap = state.assetPool.effects as Map<string, PoolEntry<T & Pooled<T>>>;\r\n  const counts = state.assetPool.counts?.effects || new Map<string, number>();\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: new Map(), sprites: new Map(), effects: counts };\r\n  let entry = poolMap.get(key);\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry); }\r\n  const free = entry.freeList as Array<T & Pooled<T>>;\r\n  if (free.length) {\r\n    const obj = free.pop()! as T & Pooled<T>;\r\n    try {\r\n      if (typeof obj.reset === 'function') obj.reset(initArgs);\r\n      else if (initArgs && typeof initArgs === 'object') Object.assign(obj, initArgs);\r\n    } catch {}\r\n    return obj;\r\n  }\r\n  const max = state.assetPool.config.effectPoolSize || 128;\r\n  const strategy = _getStrategy(state.assetPool.config.effectOverflowStrategy, 'discard-oldest');\r\n  const total = entry.allocated || counts.get(key) || 0;\r\n  if (total < max || strategy === 'grow') {\r\n    const e = createFn() as T & Pooled<T>;\r\n    try {\r\n      if (typeof e.reset === 'function') e.reset(initArgs);\r\n      else if (initArgs && typeof initArgs === 'object') Object.assign(e, initArgs);\r\n    } catch {}\r\n    entry.allocated = (entry.allocated || 0) + 1;\r\n    _incCount(counts, key, 1);\r\n    return e;\r\n  }\r\n  if (strategy === 'error') throw new Error(`Effect pool exhausted for key \"${key}\" (max=${max})`);\r\n  const e = createFn() as T & Pooled<T>;\r\n  entry.allocated = (entry.allocated || 0) + 1;\r\n  _incCount(counts, key, 1);\r\n  return e;\r\n}\r\n\r\nexport function releaseEffect<T extends object>(state: GameState, key: string, effect: T & Pooled<T>, disposeFn?: (e: T) => void) {\r\n  const poolMap = state.assetPool.effects as Map<string, PoolEntry<T & Pooled<T>>>;\r\n  const counts = state.assetPool.counts?.effects || new Map<string, number>();\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: new Map(), sprites: new Map(), effects: counts };\r\n  let entry = poolMap.get(key);\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry); }\r\n  const free = entry.freeList as Array<T & Pooled<T>>;\r\n  if (!free.includes(effect)) free.push(effect as T & Pooled<T>);\r\n  const max = state.assetPool.config.effectPoolSize || 128;\r\n  const strategy = _getStrategy(state.assetPool.config.effectOverflowStrategy, 'discard-oldest');\r\n  if (strategy === 'grow') return;\r\n  while (free.length > max) {\r\n    const victim = strategy === 'discard-oldest' ? free.shift()! : free.pop()!;\r\n    try { if (disposeFn) disposeFn(victim as any); } catch {}\r\n    _incCount(counts, key, -1);\r\n  }\r\n  if (strategy === 'error' && free.length > max) {\r\n    const victim = free.pop()!;\r\n    try { if (disposeFn) disposeFn(victim as any); } catch {}\r\n    _incCount(counts, key, -1);\r\n  }\r\n}\r\n// Overwrite file with a clean, consolidated implementation.\r\nimport type { GameState } from './types';\r\nimport { getShipConfig, getDefaultShipType } from './config/entitiesConfig';\r\nimport { TEAM_DEFAULT } from './config/teamsConfig';\r\nimport type { ShipConfigMap, ShipSpec } from './types';\r\n\r\nlet nextId = 1;\r\nexport function genId(): number { return nextId++; }\r\n\r\nexport type Cannon = { damage: number; rate: number; spread?: number; muzzleSpeed?: number; bulletRadius?: number; bulletTTL?: number };\r\n\r\nexport type Ship = {\r\n  id: number; type: string; x: number; y: number; vx: number; vy: number; hp: number; maxHp: number; shield?: number; maxShield?: number; angle: number;\r\n  team?: string; xp?: number; level?: number; cannons?: Cannon[]; accel?: number; currentAccel?: number; throttle?: number; steering?: number; turnRate?: number; radius?: number; maxSpeed?: number;\r\n  trail?: { x: number; y: number }[];\r\n  shieldRegen?: number;\r\n  shieldPercent?: number;\r\n  hpPercent?: number;\r\n};\r\n\r\nexport function createShip(type: string | undefined = undefined, x = 0, y = 0, team = TEAM_DEFAULT): Ship {\r\n  const shipCfg = getShipConfig() as ShipConfigMap;\r\n  const availableTypes = Object.keys(shipCfg || {});\r\n  const resolvedType = type && shipCfg[type] ? type : availableTypes.length ? availableTypes[0] : getDefaultShipType();\r\n  const cfg = (shipCfg[resolvedType] || shipCfg[getDefaultShipType()]) as Partial<ShipSpec>;\r\n  return {\r\n    id: genId(),\r\n    type: resolvedType,\r\n    x,\r\n    y,\r\n    vx: 0,\r\n    vy: 0,\r\n    hp: cfg.maxHp ?? 0,\r\n    maxHp: cfg.maxHp ?? 0,\r\n    shield: cfg.maxShield ?? 0,\r\n    maxShield: cfg.maxShield ?? 0,\r\n    shieldRegen: cfg.shieldRegen ?? 0,\r\n    team,\r\n    xp: 0,\r\n    level: 1,\r\n    cannons: JSON.parse(JSON.stringify(cfg.cannons || [])),\r\n    accel: cfg.accel || 0,\r\n    currentAccel: 0,\r\n    throttle: 0,\r\n    steering: 0,\r\n    turnRate: cfg.turnRate || 0,\r\n    radius: cfg.radius || 6,\r\n  // Ensure maxSpeed is always a sensible positive number. Some saved state\r\n  // or malformed configs may have maxSpeed omitted or set to 0 which causes\r\n  // ships to never translate (they can still rotate/fire). Prefer the\r\n  // configured value but fall back to a safe default > 0.\r\n  maxSpeed: (typeof cfg.maxSpeed === 'number' && cfg.maxSpeed > 0) ? cfg.maxSpeed : 120,\r\n    angle: 0,\r\n    trail: undefined,\r\n    shieldPercent: 1,\r\n    hpPercent: 1,\r\n  } as Ship;\r\n}\r\n\r\nexport type Bullet = { id: number; x: number; y: number; vx: number; vy: number; team: string; ownerId?: number | null; damage: number; ttl: number; radius?: number; bulletRadius?: number; bulletTTL?: number; kind?: string; alive?: boolean; prevX?: number; prevY?: number; _prevX?: number; _prevY?: number };\r\nexport function createBullet(x: number, y: number, vx: number, vy: number, team = TEAM_DEFAULT, ownerId: number | null = null, damage = 1, ttl = 2.0): Bullet {\r\n  // Initialize both legacy prevX/prevY and internal _prevX/_prevY used by\r\n  // swept-collision code so either property is available depending on codepath.\r\n  return { id: genId(), x, y, vx, vy, team, ownerId, damage, ttl, prevX: x, prevY: y, _prevX: x, _prevY: y } as Bullet;\r\n}\r\n\r\nexport interface ExplosionEffect { x: number; y: number; r?: number; alive?: boolean; _pooled?: boolean; [key: string]: unknown }\r\nexport interface ShieldHitEffect { x: number; y: number; magnitude?: number; alive?: boolean; _pooled?: boolean; [key: string]: unknown }\r\nexport interface HealthHitEffect { x: number; y: number; amount?: number; alive?: boolean; _pooled?: boolean; [key: string]: unknown }\r\n\r\nexport function createExplosionEffect(init?: Partial<ExplosionEffect>): ExplosionEffect { return { x: init?.x ?? 0, y: init?.y ?? 0, r: init?.r, alive: true, _pooled: false, ...init } }\r\nexport function resetExplosionEffect(obj: ExplosionEffect, init?: Partial<ExplosionEffect>) { obj.x = init?.x ?? 0; obj.y = init?.y ?? 0; obj.r = init?.r; obj.alive = true; obj._pooled = false; Object.assign(obj, init) }\r\nexport function createShieldHitEffect(init?: Partial<ShieldHitEffect>): ShieldHitEffect { return { x: init?.x ?? 0, y: init?.y ?? 0, magnitude: init?.magnitude, alive: true, _pooled: false, ...init } }\r\nexport function resetShieldHitEffect(obj: ShieldHitEffect, init?: Partial<ShieldHitEffect>) { obj.x = init?.x ?? 0; obj.y = init?.y ?? 0; obj.magnitude = init?.magnitude; obj.alive = true; obj._pooled = false; Object.assign(obj, init) }\r\nexport function createHealthHitEffect(init?: Partial<HealthHitEffect>): HealthHitEffect { return { x: init?.x ?? 0, y: init?.y ?? 0, amount: init?.amount, alive: true, _pooled: false, ...init } }\r\nexport function resetHealthHitEffect(obj: HealthHitEffect, init?: Partial<HealthHitEffect>) { obj.x = init?.x ?? 0; obj.y = init?.y ?? 0; obj.amount = init?.amount; obj.alive = true; obj._pooled = false; Object.assign(obj, init) }\r\n\r\nexport interface Pooled<T = Record<string, unknown>> { reset?: (initArgs?: Partial<T>) => void }\r\nexport type PooledFactory<T extends object> = { create: () => T; reset?: (obj: T, initArgs?: Partial<T>) => void }\r\nexport function createPooledFactory<T extends object>(createOrFactory: (() => T) | PooledFactory<T>, resetFn?: (obj: T, initArgs?: Partial<T>) => void): PooledFactory<T> { if (typeof createOrFactory === 'function') return { create: createOrFactory as () => T, reset: resetFn }; const f = createOrFactory as PooledFactory<T>; return { create: f.create, reset: f.reset } }\r\nexport function makePooled<T extends object>(obj: T, resetFn?: (obj: T, initArgs?: Partial<T>) => void): T & Pooled<T> { const o = obj as T & Pooled<T>; if (typeof o.reset !== 'function') { if (typeof resetFn === 'function') { o.reset = function (initArgs?: Partial<T>) { try { resetFn(o, initArgs) } catch {} } } else { o.reset = function (initArgs?: Partial<T>) { if (initArgs && typeof initArgs === 'object') Object.assign(o, initArgs) } } } return o }\r\n\r\nexport type PoolEntry<T> = { freeList: T[]; allocated: number; config?: { max?: number; strategy?: 'discard-oldest'|'grow'|'error' }; disposer?: (item: T) => void }\r\nexport type TexturePoolEntry = PoolEntry<WebGLTexture>\r\n\r\nfunction _getStrategy(v: unknown, def: 'discard-oldest'|'grow'|'error') { return v === 'grow' || v === 'error' || v === 'discard-oldest' ? (v as 'discard-oldest'|'grow'|'error') : def }\r\nfunction _incCount(map: Map<string, number>, key: string, delta: number) { const cur = map.get(key) || 0; const next = cur + delta; if (next <= 0) map.delete(key); else map.set(key, next) }\r\n\r\nexport function acquireTexture(state: GameState, key: string, createFn: () => WebGLTexture): WebGLTexture {\r\n  const poolMap = state.assetPool.textures as Map<string, TexturePoolEntry>\r\n  const counts = state.assetPool.counts?.textures || new Map<string, number>()\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: counts, sprites: new Map(), effects: new Map() }\r\n  let entry = poolMap.get(key)\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry) }\r\n  const free = entry.freeList\r\n  if (free.length) return free.pop()!\r\n  const max = (entry.config?.max ?? state.assetPool.config.texturePoolSize) || 128\r\n  const strategy = entry.config?.strategy ?? _getStrategy(state.assetPool.config.textureOverflowStrategy, 'discard-oldest')\r\n  const total = entry.allocated || counts.get(key) || 0\r\n  if (total < max || strategy === 'grow') { const tex = createFn(); entry.allocated = (entry.allocated || 0) + 1; _incCount(counts, key, 1); return tex }\r\n  if (strategy === 'error') throw new Error(`Texture pool exhausted for key \"${key}\" (max=${max})`)\r\n  const tex = createFn(); entry.allocated = (entry.allocated || 0) + 1; _incCount(counts, key, 1); return tex\r\n}\r\n\r\nexport function releaseTexture(state: GameState, key: string, tex: WebGLTexture, disposeFn?: (t: WebGLTexture) => void) {\r\n  const poolMap = state.assetPool.textures as Map<string, TexturePoolEntry>\r\n  const counts = state.assetPool.counts?.textures || new Map<string, number>()\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: counts, sprites: new Map(), effects: new Map() }\r\n  let entry = poolMap.get(key)\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry); }\r\n  const free = entry.freeList\r\n  if (!free.includes(tex)) free.push(tex)\r\n  const max = (entry.config?.max ?? state.assetPool.config.texturePoolSize) || 128\r\n  const strategy = entry.config?.strategy ?? _getStrategy(state.assetPool.config.textureOverflowStrategy, 'discard-oldest')\r\n  const countsMap = state.assetPool.counts?.textures || new Map<string, number>()\r\n  if (strategy === 'grow') return\r\n  while (free.length > max) {\r\n    const victim = strategy === 'discard-oldest' ? free.shift()! : free.pop()!\r\n    try { if (entry!.disposer) entry!.disposer(victim as any); else if (disposeFn) disposeFn(victim as any) } catch {}\r\n    _incCount(countsMap, key, -1)\r\n    entry.allocated = Math.max(0, (entry.allocated || 0) - 1)\r\n  }\r\n  if (strategy === 'error' && free.length > max) { const victim = free.pop()!; try { if (entry!.disposer) entry!.disposer(victim as any); else if (disposeFn) disposeFn(victim as any) } catch {} _incCount(countsMap, key, -1); entry.allocated = Math.max(0, (entry.allocated || 0) - 1) }\r\n}\r\n\r\nexport function acquireSprite<T extends object>(state: GameState, key: string, createFn: () => T & Pooled<T>, initArgs?: Partial<T>): T & Pooled<T> {\r\n  const poolMap = state.assetPool.sprites as Map<string, PoolEntry<T & Pooled<T>>>\r\n  const counts = state.assetPool.counts?.sprites || new Map<string, number>()\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: new Map(), sprites: counts, effects: new Map() }\r\n  let entry = poolMap.get(key)\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry); }\r\n  const free = entry.freeList as Array<T & Pooled<T>>\r\n  if (free.length) { const obj = free.pop()! as T & Pooled<T>; try { if (typeof obj.reset === 'function') obj.reset(initArgs); else if (initArgs && typeof initArgs === 'object') Object.assign(obj, initArgs) } catch {} return obj }\r\n  const max = state.assetPool.config.spritePoolSize || 256\r\n  const strategy = _getStrategy(state.assetPool.config.spriteOverflowStrategy, 'discard-oldest')\r\n  const total = entry.allocated || counts.get(key) || 0\r\n  if (total < max || strategy === 'grow') { const s = createFn() as T & Pooled<T>; try { if (typeof s.reset === 'function') s.reset(initArgs); else if (initArgs && typeof initArgs === 'object') Object.assign(s, initArgs) } catch {} entry.allocated = (entry.allocated || 0) + 1; _incCount(counts, key, 1); return s }\r\n  if (strategy === 'error') throw new Error(`Sprite pool exhausted for key \"${key}\" (max=${max})`)\r\n  const s = createFn() as T & Pooled<T>; entry.allocated = (entry.allocated || 0) + 1; _incCount(counts, key, 1); return s\r\n}\r\n\r\nexport function releaseSprite<T extends object>(state: GameState, key: string, sprite: T & Pooled<T>, disposeFn?: (s: T) => void) {\r\n  const poolMap = state.assetPool.sprites as Map<string, PoolEntry<T & Pooled<T>>>;\r\n  const counts = state.assetPool.counts?.sprites || new Map<string, number>();\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: new Map(), sprites: counts, effects: new Map() };\r\n  let entry = poolMap.get(key);\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry); }\r\n  const free = entry.freeList as Array<T & Pooled<T>>;\r\n  if (!free.includes(sprite)) free.push(sprite as T & Pooled<T>);\r\n  const max = state.assetPool.config.spritePoolSize || 256;\r\n  const strategy = _getStrategy(state.assetPool.config.spriteOverflowStrategy, 'discard-oldest');\r\n  if (strategy === 'grow') return;\r\n  while (free.length > max) {\r\n    const victim = strategy === 'discard-oldest' ? free.shift()! : free.pop()!;\r\n    try { if (disposeFn) disposeFn(victim as any); } catch {}\r\n    _incCount(counts, key, -1);\r\n  }\r\n  if (strategy === 'error' && free.length > max) {\r\n    const victim = free.pop()!;\r\n    try { if (disposeFn) disposeFn(victim as any); } catch {}\r\n    _incCount(counts, key, -1);\r\n  }\r\n}\r\n// Provide a default initial GameState for simulation and tests\r\nexport function makeInitialState(): GameState {\r\n  return {\r\n    t: 0,\r\n    ships: [],\r\n    // fast lookup map kept in sync with ships[] where possible\r\n    shipMap: new Map<number, Ship>(),\r\n    // Cached counts per team to avoid per-frame filter allocations\r\n    teamCounts: { red: 0, blue: 0 },\r\n    bullets: [],\r\n    explosions: [],\r\n    shieldHits: [],\r\n    healthHits: [],\r\n    engineTrailsEnabled: true,\r\n    assetPool: {\r\n      textures: new Map<string, PoolEntry<WebGLTexture>>(),\r\n      sprites: new Map<string, PoolEntry<any>>(),\r\n      effects: new Map<string, PoolEntry<any>>(),\r\n      counts: {\r\n        textures: new Map<string, number>(),\r\n        sprites: new Map<string, number>(),\r\n        effects: new Map<string, number>(),\r\n      },\r\n      config: {\r\n        texturePoolSize: 128,\r\n        spritePoolSize: 256,\r\n        effectPoolSize: 128,\r\n        textureOverflowStrategy: 'discard-oldest',\r\n        spriteOverflowStrategy: 'discard-oldest',\r\n        effectOverflowStrategy: 'discard-oldest',\r\n      },\r\n    },\r\n  };\r\n}\r\n\r\n// Update team counts safely. oldTeam/newTeam may be undefined when adding or removing.\r\nexport function updateTeamCount(state: GameState, oldTeam?: string, newTeam?: string) {\r\n  try {\r\n    if (oldTeam) {\r\n      state.teamCounts[oldTeam] = Math.max(0, (state.teamCounts[oldTeam] || 0) - 1);\r\n    }\r\n    if (newTeam) {\r\n      state.teamCounts[newTeam] = (state.teamCounts[newTeam] || 0) + 1;\r\n    }\r\n  } catch (e) {}\r\n}\r\n", "// teamsConfig.ts - Teams and fleet helpers (typed)\r\nimport { getDefaultShipType, getShipConfig } from \"./entitiesConfig\"; // should be './config/entitiesConfig'\r\nexport type Team = { id: string; color: string; label?: string };\r\nexport const TeamsConfig = {\r\n  teams: {\r\n    red: { id: \"red\", color: \"#ff4d4d\", label: \"Red\" },\r\n    blue: { id: \"blue\", color: \"#4da6ff\", label: \"Blue\" },\r\n  },\r\n  defaultFleet: {\r\n    counts: (() => {\r\n      // Build a default counts map from available ShipConfig types so new\r\n      // ship types are automatically included without needing manual edits.\r\n      const shipCfg = getShipConfig();\r\n      const types = Object.keys(shipCfg || {});\r\n      // sane defaults: make fighters most common, others rarer\r\n      const defaultCounts: Record<string, number> = {};\r\n      for (const t of types) {\r\n        if (t === \"fighter\") defaultCounts[t] = 8;\r\n        else if (t === \"corvette\") defaultCounts[t] = 3;\r\n        else if (t === \"frigate\") defaultCounts[t] = 2;\r\n        else if (t === \"destroyer\") defaultCounts[t] = 1;\r\n        else if (t === \"carrier\") defaultCounts[t] = 1;\r\n        else defaultCounts[t] = 1;\r\n      }\r\n      return defaultCounts;\r\n    })(),\r\n    spacing: 28,\r\n    jitter: { x: 80, y: 120 },\r\n  },\r\n  // continuousReinforcement controls: enable/disable, scoreMargin is the\r\n  // imbalance fraction (e.g. 0.12 means reinforce when weakest ratio < 0.38),\r\n  // perTick is the maximum ships considered per reinforcement tick, and\r\n  // shipTypes is an optional array of types to choose from randomly. If\r\n  // omitted, keys from defaultFleet.counts are used.\r\n  continuousReinforcement: {\r\n    enabled: false,\r\n    scoreMargin: 0.12,\r\n    perTick: 1,\r\n    interval: 5.0,\r\n    shipTypes: undefined as string[] | undefined,\r\n  },\r\n};\r\n\r\n// Local seeded PRNG (does not affect global rng)\r\nfunction mulberry32(seed: number) {\r\n  let t = seed >>> 0;\r\n  return function () {\r\n    t += 0x6d2b79f5;\r\n    let r = Math.imul(t ^ (t >>> 15), 1 | t);\r\n    r ^= r + Math.imul(r ^ (r >>> 7), 61 | r);\r\n    return ((r ^ (r >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nfunction hashStringToInt(s: string) {\r\n  let h = 2166136261 >>> 0;\r\n  for (let i = 0; i < s.length; i++) {\r\n    h ^= s.charCodeAt(i);\r\n    h = Math.imul(h, 16777619) >>> 0;\r\n  }\r\n  return h >>> 0;\r\n}\r\n\r\nexport function generateFleetForTeam(\r\n  seed = 0,\r\n  teamId: \"red\" | \"blue\" = \"red\",\r\n  bounds = { W: 800, H: 600 },\r\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\r\n  options: any = {},\r\n) {\r\n  const cfg = Object.assign({}, TeamsConfig.defaultFleet, options.fleet || {});\r\n  const spacing = options.spacing ?? cfg.spacing;\r\n  const jitter = Object.assign({}, cfg.jitter, options.jitter || {});\r\n  const centerY = bounds.H / 2;\r\n  const baseX = teamId === \"red\" ? bounds.W * 0.22 : bounds.W * 0.78;\r\n  const rng = mulberry32((seed >>> 0) + hashStringToInt(teamId));\r\n  const out: any[] = [];\r\n  for (const [type, count] of Object.entries(cfg.counts)) {\r\n    for (let i = 0; i < (count as number); i++) {\r\n      const r = spacing * Math.sqrt(rng());\r\n      const angle = rng() * Math.PI * 2;\r\n      const dx = Math.cos(angle) * r + (rng() - 0.5) * (jitter.x ?? 0);\r\n      const dy = Math.sin(angle) * r + (rng() - 0.5) * (jitter.y ?? 0);\r\n      const x = Math.max(0, Math.min(bounds.W - 1e-6, baseX + dx));\r\n      const y = Math.max(0, Math.min(bounds.H - 1e-6, centerY + dy));\r\n      if (typeof shipFactory === \"function\")\r\n        out.push(shipFactory(type, x, y, teamId));\r\n      else out.push({ type, x, y, team: teamId });\r\n    }\r\n  }\r\n  return out;\r\n}\r\n\r\nexport function makeInitialFleets(\r\n  seed = 0,\r\n  bounds = { W: 800, H: 600 },\r\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\r\n  options: any = {},\r\n) {\r\n  const red = generateFleetForTeam(seed, \"red\", bounds, shipFactory, options);\r\n  const blue = generateFleetForTeam(\r\n    seed + 1,\r\n    \"blue\",\r\n    bounds,\r\n    shipFactory,\r\n    options,\r\n  );\r\n  return red.concat(blue);\r\n}\r\n\r\nexport function chooseReinforcements(\r\n  seed = 0,\r\n  state: any = {},\r\n  options: any = {},\r\n) {\r\n  const cfg = Object.assign({}, TeamsConfig.continuousReinforcement, options);\r\n  // (no-op) merge options onto default continuous reinforcement config\r\n  if (!cfg.enabled) return [] as any[];\r\n  const teamStrength: Record<string, number> = {};\r\n  if (Array.isArray(state.ships)) {\r\n    for (const s of state.ships) {\r\n      if (!s || !s.team) continue;\r\n      const hp = typeof s.hp === \"number\" ? s.hp : 1;\r\n      teamStrength[s.team] = (teamStrength[s.team] || 0) + hp;\r\n    }\r\n  }\r\n  const teams = Object.keys(TeamsConfig.teams);\r\n  if (teams.length === 0) return [];\r\n  for (const t of teams) {\r\n    if (!teamStrength[t]) {\r\n      const cnt = (state.ships || []).filter(\r\n        (s: any) => s && s.team === t,\r\n      ).length;\r\n      teamStrength[t] = cnt > 0 ? cnt : 0;\r\n    }\r\n  }\r\n  let weakest = teams[0];\r\n  let strongest = teams[0];\r\n  for (const t of teams) {\r\n    if (teamStrength[t] < teamStrength[weakest]) weakest = t;\r\n    if (teamStrength[t] > teamStrength[strongest]) strongest = t;\r\n  }\r\n  const total = teams.reduce((s, t) => s + (teamStrength[t] || 0), 0) || 1;\r\n  const weakestRatio = (teamStrength[weakest] || 0) / total;\r\n  if (weakestRatio < 0.5 - cfg.scoreMargin) {\r\n    const orders: any[] = [];\r\n    const rng = mulberry32((seed >>> 0) + hashStringToInt(weakest));\r\n    // determine candidate ship types: either explicit list or keys from defaultFleet\r\n    const candidateTypes =\r\n      Array.isArray(cfg.shipTypes) && cfg.shipTypes.length\r\n        ? cfg.shipTypes\r\n        : Object.keys(TeamsConfig.defaultFleet.counts || { fighter: 1 });\r\n    // Build weights for candidate types using defaultFleet counts when available\r\n    const countsMap =\r\n      TeamsConfig && TeamsConfig.defaultFleet && TeamsConfig.defaultFleet.counts\r\n        ? TeamsConfig.defaultFleet.counts\r\n        : {};\r\n    const weights = candidateTypes.map((t: string) =>\r\n      Math.max(0, Number((countsMap as any)[t]) || 1),\r\n    );\r\n    const totalWeight =\r\n      weights.reduce((s: number, w: number) => s + w, 0) ||\r\n      candidateTypes.length ||\r\n      1;\r\n    // Helper: weighted random pick for ship types\r\n    const weightedPick = () => {\r\n      const r = rng() * totalWeight;\r\n      let acc = 0;\r\n      for (let i = 0; i < candidateTypes.length; i++) {\r\n        acc += weights[i];\r\n        if (r < acc) return candidateTypes[i];\r\n      }\r\n      return candidateTypes[candidateTypes.length - 1];\r\n    };\r\n    // Randomize number to spawn between 1 and cfg.perTick (inclusive)\r\n    const maxPerTick = Math.max(1, Math.floor(Number(cfg.perTick) || 1));\r\n    const spawnCount = Math.max(1, Math.floor(rng() * maxPerTick) + 1);\r\n    // spawnCount computed deterministically from the provided seed\r\n    const b = options.bounds || { W: 800, H: 600 };\r\n    const centerY = b.H / 2;\r\n    const baseX = weakest === \"red\" ? b.W * 0.18 : b.W * 0.82;\r\n    for (let i = 0; i < spawnCount; i++) {\r\n      const x = Math.max(0, Math.min(b.W - 1e-6, baseX + (rng() - 0.5) * 120));\r\n      const y = Math.max(\r\n        0,\r\n        Math.min(b.H - 1e-6, centerY + (rng() - 0.5) * 160),\r\n      );\r\n      const type =\r\n        Array.isArray(cfg.shipTypes) && cfg.shipTypes.length\r\n          ? candidateTypes[Math.floor(rng() * candidateTypes.length)] ||\r\n            getDefaultShipType()\r\n          : weightedPick();\r\n      orders.push({ type, team: weakest, x, y });\r\n    }\r\n    // return deterministic orders\r\n    return orders;\r\n  }\r\n  return [] as any[];\r\n}\r\n\r\n// Team fallback default\r\nexport const TEAM_DEFAULT = \"red\";\r\n\r\nexport default TeamsConfig;\r\n\r\n// Helper: call chooseReinforcements using a manager-derived seed (from global RNG)\r\n// This is convenient for callers (like gamemanager) that want to keep\r\n// reinforcements deterministic relative to the global `srand`/`srandom` state.\r\nimport { srandom } from \"../rng\";\r\nexport function chooseReinforcementsWithManagerSeed(\r\n  state: any = {},\r\n  options: any = {},\r\n) {\r\n  const seed = Math.floor(srandom() * 0xffffffff) >>> 0;\r\n  return chooseReinforcements(seed, state, options);\r\n}\r\n", "export const EVASIVE_DURATION = 0.8; // seconds\r\nexport const TURN_RATES = { default: 4.0 } as const; // radians per second typical turn rate\r\nexport const EVASIVE_THRUST_MULT = 1.5; // multiplier for thrust during evasive maneuvers\r\nexport const SEPARATION_MULT = 0.6; // separation force multiplier between ships\r\n\r\n// AI logic thresholds and decision timer\r\nexport const AI_THRESHOLDS = {\r\n  decisionTimerMin: 0.5,\r\n  decisionTimerMax: 2.0,\r\n  hpEvadeThreshold: 0.35,\r\n  randomLow: 0.15,\r\n  randomHigh: 0.85,\r\n};\r\n\r\n// Ship movement global defaults (used if not per-ship)\r\nexport const SHIP_MOVEMENT_DEFAULTS = {\r\n  maxSpeed: 160,\r\n  maxAccel: 5,\r\n};\r\n\r\nexport default {\r\n  EVASIVE_DURATION,\r\n  TURN_RATES,\r\n  EVASIVE_THRUST_MULT,\r\n  SEPARATION_MULT,\r\n  AI_THRESHOLDS,\r\n  SHIP_MOVEMENT_DEFAULTS,\r\n};\r\n", "// behavior.ts - deterministic, simple AI for steering and firing\r\n// Uses seeded RNG for any randomness so results are reproducible.\r\nimport { srandom, srange } from \"./rng\";\r\nimport { createBullet } from \"./entities\";\r\nimport { AI_THRESHOLDS, SHIP_MOVEMENT_DEFAULTS } from \"./config/behaviorConfig\";\r\nimport { BULLET_DEFAULTS } from \"./config/entitiesConfig\";\r\nimport { TEAM_DEFAULT } from \"./config/teamsConfig\";\r\n\r\ntype ShipLike = {\r\n  id?: number;\r\n  x?: number;\r\n  y?: number;\r\n  vx?: number;\r\n  vy?: number;\r\n  team?: string;\r\n  hp?: number;\r\n  maxHp?: number;\r\n  cannons?: any[];\r\n  accel?: number; // max acceleration from config\r\n  currentAccel?: number; // dynamic, set by AI/gamemanager, 0..accel\r\n  radius?: number;\r\n  turnRate?: number;\r\n  damage?: number;\r\n  dmg?: number;\r\n  maxSpeed?: number; // NEW: max speed per ship\r\n  steering?: number; // NEW: steering intent (-1..1)\r\n  throttle?: number; // NEW: throttle intent (0..1)\r\n  __ai?: any;\r\n  turrets?: any[];\r\n  angle?: number;\r\n  type?: string; // Added for config sync\r\n};\r\n\r\ntype State = { ships: ShipLike[]; bullets: any[] };\r\n\r\nfunction len2(vx: number, vy: number) {\r\n  return vx * vx + vy * vy;\r\n}\r\nfunction clampSpeed(s: ShipLike, max: number) {\r\n  const v2 = len2(s.vx || 0, s.vy || 0);\r\n  const max2 = max * max;\r\n  if (v2 > max2 && v2 > 0) {\r\n    const inv = max / Math.sqrt(v2);\r\n    s.vx = (s.vx || 0) * inv;\r\n    s.vy = (s.vy || 0) * inv;\r\n  }\r\n}\r\n\r\nexport { clampSpeed };\r\n\r\nfunction aimWithSpread(from: ShipLike, to: ShipLike, spread = 0) {\r\n  let dx = (to.x || 0) - (from.x || 0);\r\n  let dy = (to.y || 0) - (from.y || 0);\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  dx /= d;\r\n  dy /= d;\r\n  if (spread > 0) {\r\n    const ang = Math.atan2(dy, dx);\r\n    const jitter = srange(-spread, spread);\r\n    const na = ang + jitter;\r\n    return { x: Math.cos(na), y: Math.sin(na) };\r\n  }\r\n  return { x: dx, y: dy };\r\n}\r\n\r\nfunction tryFire(state: State, ship: ShipLike, target: ShipLike, dt: number) {\r\n  // Legacy cannons (single target, all fire at once)\r\n  if (Array.isArray(ship.cannons) && ship.cannons.length > 0) {\r\n    for (const c of ship.cannons) {\r\n      if (typeof c.__cd !== \"number\") c.__cd = 0;\r\n      c.__cd -= dt;\r\n      if (c.__cd > 0) continue;\r\n      const spread = typeof c.spread === \"number\" ? c.spread : 0;\r\n      const dir = aimWithSpread(ship, target, spread);\r\n      const speed = typeof c.muzzleSpeed === \"number\" ? c.muzzleSpeed : BULLET_DEFAULTS.muzzleSpeed;\r\n      const dmg = typeof c.damage === \"number\"\r\n        ? c.damage\r\n        : typeof ship.damage === \"number\"\r\n          ? ship.damage\r\n          : typeof ship.dmg === \"number\"\r\n            ? ship.dmg\r\n            : BULLET_DEFAULTS.damage;\r\n      const ttl = typeof c.bulletTTL === \"number\" ? c.bulletTTL : BULLET_DEFAULTS.ttl;\r\n      const radius = typeof c.bulletRadius === \"number\" ? c.bulletRadius : BULLET_DEFAULTS.radius;\r\n      const vx = dir.x * speed;\r\n      const vy = dir.y * speed;\r\n      const b = Object.assign(\r\n        createBullet(\r\n          ship.x || 0,\r\n          ship.y || 0,\r\n          vx,\r\n          vy,\r\n          ship.team || TEAM_DEFAULT,\r\n          ship.id || null,\r\n          dmg,\r\n          ttl,\r\n        ),\r\n        { radius },\r\n      );\r\n      state.bullets.push(b);\r\n      const rate = typeof c.rate === \"number\" && c.rate > 0 ? c.rate : 1;\r\n      c.__cd = 1 / rate;\r\n    }\r\n  }\r\n  // Multi-turret support: each turret fires independently\r\n  if (Array.isArray(ship.turrets) && ship.turrets.length > 0) {\r\n    for (const [i, turret] of ship.turrets.entries()) {\r\n      if (!turret) continue;\r\n      if (typeof turret.__cd !== \"number\") turret.__cd = 0;\r\n      turret.__cd -= dt;\r\n      if (turret.__cd > 0) continue;\r\n      // Target selection per turret\r\n      let turretTarget: ShipLike | null = null;\r\n      if (turret.targeting === \"nearest\") {\r\n        const enemies = (state.ships || []).filter((sh) => sh && sh.team !== ship.team);\r\n        let minDist = Infinity;\r\n        for (const enemy of enemies) {\r\n          const dx = (enemy.x || 0) - (ship.x || 0);\r\n          const dy = (enemy.y || 0) - (ship.y || 0);\r\n          const d2 = dx * dx + dy * dy;\r\n          if (d2 < minDist) {\r\n            minDist = d2;\r\n            turretTarget = enemy;\r\n          }\r\n        }\r\n      } else if (turret.targeting === \"random\") {\r\n        const enemies = (state.ships || []).filter((sh) => sh && sh.team !== ship.team);\r\n        if (enemies.length) turretTarget = enemies[Math.floor(srandom() * enemies.length)];\r\n      } else if (turret.targeting === \"focus\") {\r\n        // Use ship's main target if available (O(1) via shipMap)\r\n        if (ship.__ai && ship.__ai.targetId != null) {\r\n          const tId = ship.__ai.targetId as number | string | null;\r\n          turretTarget = (state as any).shipMap && typeof tId !== 'undefined' && tId !== null\r\n            ? (state as any).shipMap.get(Number(tId)) || null\r\n            : ((state.ships || []).find((sh) => sh && sh.id === tId) || null);\r\n        }\r\n      } else {\r\n        // Default: nearest\r\n        const enemies = (state.ships || []).filter((sh) => sh && sh.team !== ship.team);\r\n        let minDist = Infinity;\r\n        for (const enemy of enemies) {\r\n          const dx = (enemy.x || 0) - (ship.x || 0);\r\n          const dy = (enemy.y || 0) - (ship.y || 0);\r\n          const d2 = dx * dx + dy * dy;\r\n          if (d2 < minDist) {\r\n            minDist = d2;\r\n            turretTarget = enemy;\r\n          }\r\n        }\r\n      }\r\n      if (!turretTarget) continue;\r\n      // Fire from turret position (relative to ship center, using config radius)\r\n      const spread = typeof turret.spread === \"number\" ? turret.spread : 0.05;\r\n      const dir = aimWithSpread(ship, turretTarget, spread);\r\n      const speed = typeof turret.muzzleSpeed === \"number\" ? turret.muzzleSpeed : BULLET_DEFAULTS.muzzleSpeed;\r\n      const dmg = typeof turret.damage === \"number\"\r\n        ? turret.damage\r\n        : typeof ship.damage === \"number\"\r\n          ? ship.damage\r\n          : BULLET_DEFAULTS.damage;\r\n      const ttl = typeof turret.bulletTTL === \"number\" ? turret.bulletTTL : BULLET_DEFAULTS.ttl;\r\n      const radius = typeof turret.bulletRadius === \"number\" ? turret.bulletRadius : BULLET_DEFAULTS.radius;\r\n      // Always use config radius for turret position\r\n      const angle = ship.angle || 0;\r\n      // Get latest config radius for this ship type\r\n      const shipType = ship.type || \"fighter\";\r\n      const shipCfg = require(\"./config/entitiesConfig\").getShipConfig()[shipType];\r\n      const configRadius = shipCfg && typeof shipCfg.radius === \"number\" ? shipCfg.radius : (ship.radius || 12);\r\n      const [tx, ty] = turret.position || [0, 0];\r\n      const turretX =\r\n        (ship.x || 0) +\r\n        Math.cos(angle) * tx * configRadius -\r\n        Math.sin(angle) * ty * configRadius;\r\n      const turretY =\r\n        (ship.y || 0) +\r\n        Math.sin(angle) * tx * configRadius +\r\n        Math.cos(angle) * ty * configRadius;\r\n      const vx = dir.x * speed;\r\n      const vy = dir.y * speed;\r\n      const b = Object.assign(\r\n        createBullet(\r\n          turretX,\r\n          turretY,\r\n          vx,\r\n          vy,\r\n          ship.team || TEAM_DEFAULT,\r\n          ship.id || null,\r\n          dmg,\r\n          ttl,\r\n        ),\r\n        { radius },\r\n      );\r\n      state.bullets.push(b);\r\n      turret.__cd =\r\n        typeof turret.cooldown === \"number\" && turret.cooldown > 0\r\n          ? turret.cooldown\r\n          : 1.0;\r\n    }\r\n  }\r\n}\r\n\r\nfunction ensureShipAiState(s: ShipLike) {\r\n  if (!s.__ai) {\r\n    s.__ai = { state: \"idle\", decisionTimer: 0, targetId: null };\r\n  }\r\n  return s.__ai;\r\n}\r\n\r\nfunction chooseNewTarget(state: State, ship: ShipLike) {\r\n  const enemies = (state.ships || []).filter(\r\n    (sh) => sh && sh.team !== ship.team,\r\n  );\r\n  if (!enemies.length) return null;\r\n  const idx = Math.floor(srandom() * enemies.length);\r\n  return enemies[idx];\r\n}\r\n\r\nfunction steerAway(\r\n  s: ShipLike,\r\n  tx: number,\r\n  ty: number,\r\n  accel: number,\r\n  dt: number,\r\n) {\r\n  const dx = (s.x || 0) - tx;\r\n  const dy = (s.y || 0) - ty;\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  const nx = dx / d;\r\n  const ny = dy / d;\r\n  s.vx = (s.vx || 0) + nx * accel * dt;\r\n  s.vy = (s.vy || 0) + ny * accel * dt;\r\n}\r\n\r\nexport function applySimpleAI(\r\n  state: State,\r\n  dt: number,\r\n  bounds = { W: 800, H: 600 },\r\n) {\r\n  if (!state || !Array.isArray(state.ships)) return;\r\n  for (const s of state.ships) {\r\n    const ai = ensureShipAiState(s);\r\n    ai.decisionTimer = Math.max(0, (ai.decisionTimer || 0) - dt);\r\n\r\n    let target: ShipLike | null = null;\r\n    if (ai.targetId != null)\r\n        target = (state as any).shipMap && typeof ai.targetId !== 'undefined' && ai.targetId !== null\r\n          ? (state as any).shipMap.get(Number(ai.targetId)) || null\r\n          : ((state.ships || []).find((sh) => sh && sh.id === ai.targetId) || null);\r\n    if (!target) target = chooseNewTarget(state, s);\r\n    if (target) ai.targetId = target.id;\r\n\r\n    // Set throttle and steering dynamically based on intent\r\n    const maxAccel = typeof s.accel === \"number\" ? s.accel : 100;\r\n    const maxSpeed = typeof s.maxSpeed === \"number\" ? s.maxSpeed : 160;\r\n    s.steering = typeof s.steering === \"number\" ? s.steering : 0;\r\n    s.throttle = typeof s.throttle === \"number\" ? s.throttle : 0;\r\n\r\n    if (!target) {\r\n      // Idle: no acceleration, no steering\r\n      s.throttle = 0;\r\n      s.steering = 0;\r\n      ai.state = \"idle\";\r\n    } else {\r\n      if (ai.decisionTimer <= 0) {\r\n        const hpFrac = (s.hp || 0) / Math.max(1, s.maxHp || 1);\r\n        const rnd = srandom();\r\n        if (hpFrac < AI_THRESHOLDS.hpEvadeThreshold || rnd < AI_THRESHOLDS.randomLow) ai.state = \"evade\";\r\n        else if (rnd < AI_THRESHOLDS.randomHigh) ai.state = \"engage\";\r\n        else ai.state = \"idle\";\r\n        ai.decisionTimer = AI_THRESHOLDS.decisionTimerMin + srandom() * (AI_THRESHOLDS.decisionTimerMax - AI_THRESHOLDS.decisionTimerMin);\r\n      }\r\n\r\n      // Calculate desired angle to target\r\n      const dx = (target.x || 0) - (s.x || 0);\r\n      const dy = (target.y || 0) - (s.y || 0);\r\n      const desiredAngle = Math.atan2(dy, dx);\r\n      const currentAngle = typeof s.angle === \"number\" ? s.angle : 0;\r\n      let da = desiredAngle - currentAngle;\r\n      while (da < -Math.PI) da += Math.PI * 2;\r\n      while (da > Math.PI) da -= Math.PI * 2;\r\n      // Normalize steering to -1..1 using config\r\n      const steeringNorm = Math.PI / 2; // could be config if needed\r\n      const steering = Math.max(-1, Math.min(1, da / steeringNorm));\r\n\r\n      if (ai.state === \"engage\") {\r\n        s.throttle = 1;\r\n        s.steering = steering;\r\n        tryFire(state, s, target, dt);\r\n      } else if (ai.state === \"evade\") {\r\n        s.throttle = 0.8; // could be config if needed\r\n        // Steer away from target\r\n        const awayAngle = Math.atan2(\r\n          (s.y || 0) - (target.y || 0),\r\n          (s.x || 0) - (target.x || 0),\r\n        );\r\n        let daAway = awayAngle - currentAngle;\r\n        while (daAway < -Math.PI) daAway += Math.PI * 2;\r\n        while (daAway > Math.PI) daAway -= Math.PI * 2;\r\n        s.steering = Math.max(-1, Math.min(1, daAway / steeringNorm));\r\n      } else {\r\n        s.throttle = 0;\r\n        s.steering = 0;\r\n      }\r\n    }\r\n    clampSpeed(s, maxSpeed);\r\n  }\r\n}\r\n\r\nexport function getShipAiState(ship: ShipLike) {\r\n  if (!ship || !ship.__ai) return null;\r\n  const { targetId, ...rest } = ship.__ai;\r\n  return Object.assign({}, rest);\r\n}\r\n\r\nexport default { applySimpleAI, getShipAiState };\r\n", "// Minimal TypeScript shim that re-exports the existing JavaScript runtime implementation.\r\n// Import the runtime as a namespace and re-export value bindings to avoid\r\n// circular alias issues. Types are defined in `gamemanager.d.ts`.\r\n\r\n// Ported from gamemanager.js, now canonical TypeScript implementation\r\nimport { makeInitialState, createShip, Ship, Bullet, genId, ExplosionEffect, ShieldHitEffect, HealthHitEffect, createExplosionEffect, resetExplosionEffect, createShieldHitEffect, resetShieldHitEffect, createHealthHitEffect, resetHealthHitEffect } from \"./entities\";\r\nimport { updateTeamCount } from \"./entities\";\r\nimport { PARTICLE_DEFAULTS } from \"./config/entitiesConfig\";\r\nimport { applySimpleAI } from \"./behavior\";\r\nimport { simulateStep } from \"./simulate\";\r\nimport { SIM } from \"./config/simConfig\";\r\nimport { srand, srandom } from \"./rng\";\r\nimport { createSimWorker } from \"./createSimWorker\";\r\nimport { acquireEffect, releaseEffect, acquireSprite, releaseSprite, makePooled } from \"./entities\";\r\nimport {\r\n  SHIELD,\r\n  HEALTH,\r\n  EXPLOSION,\r\n  STARS,\r\n  FALLBACK_POSITIONS,\r\n} from \"./config/gamemanagerConfig\";\r\nimport type { ShipConfigMap, GameState } from \"./types\";\r\nimport { getShipConfig, getDefaultShipType } from \"./config/entitiesConfig\";\r\nimport {\r\n  chooseReinforcementsWithManagerSeed,\r\n  makeInitialFleets,\r\n  TeamsConfig,\r\n} from \"./config/teamsConfig\";\r\n\r\nexport const ships: Ship[] = [];\r\nexport const bullets: Bullet[] = [];\r\nexport const particles: Particle[] = [];\r\nexport const stars: Array<Record<string, unknown>> = [];\r\nexport const flashes: ExplosionEffect[] = [];\r\nexport const shieldFlashes: ShieldHitEffect[] = [];\r\nexport const healthFlashes: HealthHitEffect[] = [];\r\n// Bullet pooling\r\n// Bullets: support optional GameState-backed pooling. If `state` is provided,\r\n// use state.assetPool.sprites keyed by 'bullet', otherwise fallback to legacy in-memory pool.\r\nexport function acquireBullet(state: GameState, opts: Partial<Bullet> = {}): Bullet {\r\n  // Use state-backed sprite pool keyed by 'bullet'\r\n  const key = 'bullet';\r\n  const b = acquireSprite(state, key, () => makePooled({ ...opts, id: genId(), alive: true } as any, (o: any, initArgs?: any) => Object.assign(o, initArgs)), opts) as Bullet & any;\r\n  // push into the state-active array so simulation sees it\r\n  (state.bullets ||= []).push(b as Bullet);\r\n  return b;\r\n}\r\n\r\nexport function releaseBullet(state: GameState, b?: Bullet): void {\r\n  if (!b) return;\r\n  if (!b.alive) return; // Prevent double-free\r\n  b.alive = false;\r\n  // remove from the state's active bullets\r\n  const arr = state.bullets || [] as Bullet[];\r\n  const idx = arr.indexOf(b as Bullet);\r\n  if (idx !== -1) arr.splice(idx, 1);\r\n  releaseSprite(state, 'bullet', b as any, undefined);\r\n}\r\n\r\n// Explosion pooling\r\nexport function acquireExplosion(state: GameState, opts: Partial<ExplosionEffect> = {}): ExplosionEffect {\r\n  const key = 'explosion';\r\n  const e = acquireEffect<ExplosionEffect>(state, key, () => makePooled(createExplosionEffect(opts), resetExplosionEffect), opts);\r\n  (state.explosions ||= []).push(e);\r\n  return e;\r\n}\r\n\r\nexport function releaseExplosion(state: GameState, e?: ExplosionEffect) {\r\n  if (!e) return;\r\n  if (e._pooled) return;\r\n  if (!e.alive) return;\r\n  e.alive = false;\r\n  e._pooled = true;\r\n  const arr = state.explosions || [] as ExplosionEffect[];\r\n  const idx = arr.indexOf(e);\r\n  if (idx !== -1) arr.splice(idx, 1);\r\n  releaseEffect(state, 'explosion', e, undefined);\r\n}\r\n\r\n// ShieldHit pooling\r\nexport function acquireShieldHit(state: GameState, opts: Partial<ShieldHitEffect> = {}): ShieldHitEffect {\r\n  const key = 'shieldHit';\r\n  const sh = acquireEffect<ShieldHitEffect>(state, key, () => makePooled(createShieldHitEffect(opts), resetShieldHitEffect), opts);\r\n  (state.shieldHits ||= []).push(sh);\r\n  return sh;\r\n}\r\n\r\nexport function releaseShieldHit(state: GameState, sh?: ShieldHitEffect) {\r\n  if (!sh) return;\r\n  if (sh._pooled) return;\r\n  const arr = state.shieldHits || [] as ShieldHitEffect[];\r\n  const i = arr.indexOf(sh);\r\n  if (i !== -1) arr.splice(i, 1);\r\n  sh.alive = false;\r\n  sh._pooled = true;\r\n  releaseEffect(state, 'shieldHit', sh, undefined);\r\n}\r\n\r\n// HealthHit pooling\r\nexport function acquireHealthHit(state: GameState, opts: Partial<HealthHitEffect> = {}): HealthHitEffect {\r\n  const key = 'healthHit';\r\n  const hh = acquireEffect<HealthHitEffect>(state, key, () => makePooled(createHealthHitEffect(opts), resetHealthHitEffect), opts);\r\n  (state.healthHits ||= []).push(hh);\r\n  return hh;\r\n}\r\n\r\nexport function releaseHealthHit(state: GameState, hh?: HealthHitEffect) {\r\n  if (!hh) return;\r\n  if (hh._pooled) return;\r\n  const arr = state.healthHits || [] as HealthHitEffect[];\r\n  const i = arr.indexOf(hh);\r\n  if (i !== -1) arr.splice(i, 1);\r\n  hh.alive = false;\r\n  hh._pooled = true;\r\n  releaseEffect(state, 'healthHit', hh, undefined);\r\n}\r\n\r\nexport const config = {\r\n  shield: { ...SHIELD },\r\n  health: { ...HEALTH },\r\n  explosion: { ...EXPLOSION },\r\n  stars: { ...STARS },\r\n};\r\n\r\nlet _seed: number | null = null;\r\nlet _reinforcementInterval: number =\r\n  TeamsConfig.continuousReinforcement?.interval ?? 5.0;\r\nlet _reinforcementAccumulator = 0;\r\nlet _starCanvasVersion = 0;\r\nlet starCanvas: HTMLCanvasElement | null = null;\r\nlet _lastSimulateFrameId: number | null = null;\r\nlet _doubleSimStrict = false;\r\n\r\nexport function setDoubleSimStrict(v: boolean = false) {\r\n  _doubleSimStrict = !!v;\r\n}\r\n\r\nexport class Particle {\r\n  x: number;\r\n  y: number;\r\n  vx: number;\r\n  vy: number;\r\n  ttl: number;\r\n  life: number;\r\n  color: string;\r\n  size: number;\r\n  alive: boolean;\r\n  _pooled?: boolean; // Add pooled flag to prevent double-free\r\n  constructor(x = 0, y = 0, vx = 0, vy = 0, ttl = 1, color = \"#fff\", size = 2) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.vx = vx;\r\n    this.vy = vy;\r\n    this.ttl = ttl;\r\n    this.life = ttl;\r\n    this.color = color;\r\n    this.size = size;\r\n    this.alive = true;\r\n    this._pooled = false;\r\n  }\r\n}\r\n\r\nexport function acquireParticle(state: GameState, x: number, y: number, opts: Partial<Particle> = {}): Particle {\r\n  const key = 'particle';\r\n  const p = acquireEffect(state, key, () => makePooled(new Particle(x, y, opts.vx ?? 0, opts.vy ?? 0, opts.ttl ?? PARTICLE_DEFAULTS.ttl, opts.color ?? PARTICLE_DEFAULTS.color, opts.size ?? PARTICLE_DEFAULTS.size), (o: any, initArgs?: any) => Object.assign(o, initArgs)), { x, y, vx: opts.vx ?? 0, vy: opts.vy ?? 0, ttl: opts.ttl ?? PARTICLE_DEFAULTS.ttl, color: opts.color ?? PARTICLE_DEFAULTS.color, size: opts.size ?? PARTICLE_DEFAULTS.size });\r\n  // rehydrate\r\n  p.x = x;\r\n  p.y = y;\r\n  p.vx = opts.vx ?? 0;\r\n  p.vy = opts.vy ?? 0;\r\n  p.ttl = opts.ttl ?? PARTICLE_DEFAULTS.ttl;\r\n  p.life = p.ttl;\r\n  p.color = opts.color ?? PARTICLE_DEFAULTS.color;\r\n  p.size = opts.size ?? PARTICLE_DEFAULTS.size;\r\n  p.alive = true;\r\n  (state.particles ||= []).push(p);\r\n  return p;\r\n}\r\n\r\nexport function releaseParticle(state: GameState, p?: Particle) {\r\n  if (!p) return;\r\n  const key = 'particle';\r\n  try { releaseEffect(state, key, p, (x) => { /* no-op */ }); } catch {}\r\n  const idx = (state.particles || []).indexOf(p);\r\n  if (idx !== -1) (state.particles || []).splice(idx, 1);\r\n}\r\n\r\nexport function reset(seedValue: number | null = null) {\r\n  ships.length = 0;\r\n  bullets.length = 0;\r\n  particles.length = 0;\r\n  stars.length = 0;\r\n  flashes.length = 0;\r\n  shieldFlashes.length = 0;\r\n  healthFlashes.length = 0;\r\n  _reinforcementAccumulator = 0;\r\n  if (typeof seedValue === \"number\") {\r\n    _seed = seedValue >>> 0;\r\n    srand(_seed);\r\n  }\r\n}\r\n\r\nexport function initStars(state: GameState, W = 800, H = 600, count = 140) {\r\n  if (!state || !Array.isArray(state.stars)) return;\r\n  state.stars.length = 0;\r\n  for (let i = 0; i < count; i++) {\r\n    const x = srandom() * W;\r\n    const y = srandom() * H;\r\n    const r = 0.3 + srandom() * 1.3;\r\n    const a = 0.3 + srandom() * 0.7;\r\n    const twPhase = srandom() * Math.PI * 2;\r\n    const twSpeed = 0.5 + srandom() * 1.5;\r\n    state.stars.push({ x, y, r, a, baseA: a, twPhase, twSpeed });\r\n  }\r\n}\r\n\r\nexport function createStarCanvas(\r\n  state: GameState,\r\n  W = 800,\r\n  H = 600,\r\n  bg = \"#041018\",\r\n): HTMLCanvasElement | null {\r\n  if (!state || !Array.isArray(state.stars)) return null;\r\n  try {\r\n    const c =\r\n      typeof document !== \"undefined\" && document.createElement\r\n        ? document.createElement(\"canvas\")\r\n        : null;\r\n    if (!c) return null;\r\n    c.width = Math.max(1, Math.floor(W));\r\n    c.height = Math.max(1, Math.floor(H));\r\n    const ctx = c.getContext && c.getContext(\"2d\");\r\n    if (ctx) {\r\n      ctx.fillStyle = bg;\r\n      ctx.fillRect(0, 0, c.width, c.height);\r\n      for (const s of state.stars) {\r\n        const alpha = Math.max(\r\n          0,\r\n          Math.min(1, s.a != null ? s.a : s.baseA != null ? s.baseA : 1),\r\n        );\r\n        ctx.beginPath();\r\n        ctx.fillStyle = `rgba(255,255,255,${alpha})`;\r\n        const rr = Math.max(0.2, s.r || 0.5);\r\n        ctx.arc(s.x || 0, s.y || 0, rr, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      }\r\n    }\r\n    _starCanvasVersion = (_starCanvasVersion || 0) + 1;\r\n    (c as any)._version = _starCanvasVersion;\r\n    starCanvas = c;\r\n    return c;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function getStarCanvasVersion() {\r\n  return _starCanvasVersion;\r\n}\r\n\r\nexport function setReinforcementInterval(seconds: number) {\r\n  _reinforcementInterval =\r\n    Number(seconds) || (TeamsConfig.continuousReinforcement?.interval ?? 5.0);\r\n}\r\nexport function getReinforcementInterval() {\r\n  return _reinforcementInterval;\r\n}\r\n\r\nfunction emitManagerEvent(\r\n  map: Map<string, Function[]>,\r\n  type: string,\r\n  data: any,\r\n) {\r\n  const arr = map.get(type) || [];\r\n  for (const cb of arr.slice()) {\r\n    try {\r\n      if (typeof cb === \"function\") cb(data);\r\n    } catch (e) {}\r\n  }\r\n}\r\n\r\nfunction evaluateReinforcement(\r\n  dt: number,\r\n  state: GameState,\r\n  continuousOptions: any = {},\r\n): { spawned: any[] } | null {\r\n  _reinforcementAccumulator += dt;\r\n  if (_reinforcementAccumulator >= _reinforcementInterval) {\r\n    _reinforcementAccumulator = 0;\r\n    try {\r\n      if (typeof chooseReinforcementsWithManagerSeed === \"function\") {\r\n        const orders = chooseReinforcementsWithManagerSeed(state, {\r\n          ...continuousOptions,\r\n          bounds: SIM.bounds,\r\n          enabled: true,\r\n        });\r\n        if (Array.isArray(orders) && orders.length) {\r\n          const spawned: any[] = [];\r\n          for (const o of orders) {\r\n            try {\r\n              const ship = createShip(\r\n                o.type || getDefaultShipType(),\r\n                o.x || 100,\r\n                o.y || 100,\r\n                o.team || \"red\",\r\n              );\r\n              state.ships.push(ship);\r\n                  try { (state as any).shipMap && (state as any).shipMap.set(ship.id, ship); } catch (e) {}\r\n                  try { updateTeamCount(state, undefined, ship.team); } catch (e) {}\r\n              spawned.push(ship);\r\n            } catch (e) {}\r\n          }\r\n          return { spawned };\r\n        }\r\n      }\r\n      const fallback = getDefaultShipType();\r\n      const r = createShip(\r\n        fallback,\r\n        FALLBACK_POSITIONS[0].x,\r\n        FALLBACK_POSITIONS[0].y,\r\n        FALLBACK_POSITIONS[0].team,\r\n      );\r\n      const b = createShip(\r\n        fallback,\r\n        FALLBACK_POSITIONS[1].x,\r\n        FALLBACK_POSITIONS[1].y,\r\n        FALLBACK_POSITIONS[1].team,\r\n      );\r\n      state.ships.push(r);\r\n  try { (state as any).shipMap && (state as any).shipMap.set(r.id, r); } catch (e) {}\r\n  try { updateTeamCount(state, undefined, String(r.team)); } catch (e) {}\r\n      state.ships.push(b);\r\n  try { (state as any).shipMap && (state as any).shipMap.set(b.id, b); } catch (e) {}\r\n  try { updateTeamCount(state, undefined, String(b.team)); } catch (e) {}\r\n      return { spawned: [r, b] };\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport interface GameManagerOptions {\r\n  useWorker?: boolean;\r\n  renderer?: any;\r\n  seed?: number;\r\n  createSimWorker?: typeof createSimWorker;\r\n}\r\n\r\nexport function createGameManager({\r\n  useWorker = true,\r\n  renderer = null,\r\n  seed = 12345,\r\n  createSimWorker: createSimWorkerFactory,\r\n}: GameManagerOptions = {}) {\r\n  let state: GameState = makeInitialState();\r\n  let running = false;\r\n  const listeners = new Map<string, Function[]>();\r\n  const workerReadyCbs: Function[] = [];\r\n  let simWorker: any = null;\r\n  // Worker event handler refs (declared here so destroy() can unregister them)\r\n  let _workerReadyHandler: Function | null = null;\r\n  let _workerSnapshotHandler: Function | null = null;\r\n  let _workerReinforcementsHandler: Function | null = null;\r\n  let workerReady = false;\r\n  let lastReinforcement: { spawned: any[]; timestamp: number; options: any } = {\r\n    spawned: [],\r\n    timestamp: 0,\r\n    options: {},\r\n  };\r\n  let continuous = false;\r\n  let continuousOptions: any = {};\r\n\r\n  function emit(type: string, msg: any) {\r\n    emitManagerEvent(listeners, type, msg);\r\n  }\r\n  function _mgr_random() {\r\n    return srandom();\r\n  }\r\n\r\n  try {\r\n    if (useWorker) {\r\n      const factory = createSimWorkerFactory || createSimWorker;\r\n      let simWorkerUrl;\r\n      try {\r\n        // Only use import.meta.url if available (ES2022+)\r\n        simWorkerUrl =\r\n          typeof import.meta !== \"undefined\" && import.meta.url\r\n            ? new URL(\"./simWorker.js\", import.meta.url).href\r\n            : \"./simWorker.js\";\r\n      } catch (e) {\r\n        simWorkerUrl = \"./simWorker.js\";\r\n      }\r\n      simWorker = factory(simWorkerUrl);\r\n      // Keep references to worker handler functions so they can be removed on destroy\r\n\r\n      _workerReadyHandler = () => {\r\n        workerReady = true;\r\n        for (const cb of workerReadyCbs.slice()) {\r\n          try {\r\n            cb();\r\n          } catch (e) {}\r\n        }\r\n      };\r\n      simWorker.on && simWorker.on(\"ready\", _workerReadyHandler);\r\n\r\n      _workerSnapshotHandler = (m: any) => {\r\n        if (m && m.state) {\r\n          state = m.state;\r\n          try {\r\n            (state as any).shipMap = new Map<number, any>();\r\n            state.teamCounts = { red: 0, blue: 0 };\r\n            for (const s of (state.ships || [])) if (s && typeof s.id !== 'undefined') { (state as any).shipMap.set(s.id, s); try { const t = String((s as any).team || ''); state.teamCounts[t] = (state.teamCounts[t] || 0) + 1; } catch (e) {} }\r\n          } catch (e) {}\r\n        }\r\n      };\r\n      simWorker.on && simWorker.on(\"snapshot\", _workerSnapshotHandler);\r\n\r\n      // When running the sim in a worker, render from the fresh snapshot the\r\n      // worker posts instead of rendering the (possibly stale) manager state\r\n      // during step(). This prevents a 1-frame lag where bullets may appear\r\n      // but ship positions are not yet updated in the renderer.\r\n      const _origWorkerSnapshotHandler = _workerSnapshotHandler;\r\n      _workerSnapshotHandler = (m: any) => {\r\n        try {\r\n          if (m && m.state) {\r\n            state = m.state;\r\n            try {\r\n              (state as any).shipMap = new Map<number, any>();\r\n              state.teamCounts = { red: 0, blue: 0 };\r\n              for (const s of (state.ships || [])) if (s && typeof s.id !== 'undefined') { (state as any).shipMap.set(s.id, s); try { const t = String((s as any).team || ''); state.teamCounts[t] = (state.teamCounts[t] || 0) + 1; } catch (e) {} }\r\n            } catch (e) {}\r\n            // Render the freshly-received snapshot so visuals reflect the\r\n            // worker-applied AI+physics immediately.\r\n            try {\r\n              if (renderer && typeof renderer.renderState === \"function\") {\r\n                try {\r\n                  renderer.renderState({\r\n                    ships: state.ships,\r\n                    bullets: state.bullets,\r\n                    flashes,\r\n                    shieldFlashes,\r\n                    healthFlashes,\r\n                    t: state.t,\r\n                  });\r\n                } catch (e) {\r\n                  // swallow render errors\r\n                }\r\n              }\r\n            } catch (e) {}\r\n          }\r\n        } catch (e) {}\r\n      };\r\n      // replace the handler on the worker\r\n      simWorker.on && simWorker.off && simWorker.off(\"snapshot\", _origWorkerSnapshotHandler);\r\n      simWorker.on && simWorker.on(\"snapshot\", _workerSnapshotHandler);\r\n\r\n      _workerReinforcementsHandler = (m: any) => {\r\n        emit(\"reinforcements\", m);\r\n      };\r\n      simWorker.on &&\r\n        simWorker.on(\"reinforcements\", _workerReinforcementsHandler);\r\n      try {\r\n        simWorker.post({\r\n          type: \"init\",\r\n          seed,\r\n          bounds: SIM.bounds,\r\n          simDtMs: SIM.DT_MS,\r\n          state,\r\n        });\r\n        simWorker.post({ type: \"start\" });\r\n      } catch (e) {}\r\n    }\r\n  } catch (e) {\r\n    simWorker = null;\r\n  }\r\n\r\n  function _evaluateAndEmit(dt: number) {\r\n    const result = evaluateReinforcement(dt, state, continuousOptions);\r\n    if (result && Array.isArray(result.spawned) && result.spawned.length) {\r\n      lastReinforcement = {\r\n        spawned: result.spawned,\r\n        timestamp: Date.now(),\r\n        options: { ...continuousOptions },\r\n      };\r\n      emit(\"reinforcements\", { spawned: result.spawned });\r\n    }\r\n  }\r\n\r\n  function step(dtSeconds: number) {\r\n    // Clamp dtSeconds to a max of 0.05 to prevent teleportation on lag spikes\r\n    const clampedDt = Math.min(dtSeconds, 0.05);\r\n    if (!simWorker) {\r\n      // Run AI logic before simulation step\r\n      try {\r\n        applySimpleAI(state, clampedDt, SIM.bounds);\r\n      } catch (e) {}\r\n      try {\r\n        simulateStep(state, clampedDt, SIM.bounds);\r\n      } catch (e) {}\r\n    } else {\r\n      try {\r\n        simWorker.post && simWorker.post({ type: \"snapshotRequest\" });\r\n      } catch (e) {}\r\n    }\r\n    _evaluateAndEmit(clampedDt);\r\n    // Flashes and event arrays are pruned by simulation now; no need for decay/splice/filter here.\r\n    if (renderer && typeof renderer.renderState === \"function\") {\r\n      try {\r\n        renderer.renderState({\r\n          ships: state.ships,\r\n          bullets: state.bullets,\r\n          flashes,\r\n          shieldFlashes,\r\n          healthFlashes,\r\n          t: state.t,\r\n        });\r\n      } catch (e) {}\r\n    }\r\n  }\r\n\r\n  let last =\r\n    typeof performance !== \"undefined\" && performance.now\r\n      ? performance.now()\r\n      : Date.now();\r\n  let acc = 0;\r\n  function runLoop() {\r\n    if (!running) return;\r\n    const now =\r\n      typeof performance !== \"undefined\" && performance.now\r\n        ? performance.now()\r\n        : Date.now();\r\n    acc += now - last;\r\n    last = now;\r\n    if (acc > 250) acc = 250;\r\n    while (acc >= SIM.DT_MS) {\r\n      step(SIM.DT_MS / 1000);\r\n      acc -= SIM.DT_MS;\r\n    }\r\n    try {\r\n      requestAnimationFrame(runLoop);\r\n    } catch (e) {\r\n      setTimeout(runLoop, SIM.DT_MS);\r\n    }\r\n  }\r\n\r\n  function on(evt: string, cb: Function) {\r\n    const arr = listeners.get(evt) || [];\r\n    arr.push(cb);\r\n    listeners.set(evt, arr);\r\n  }\r\n  function off(evt: string, cb: Function) {\r\n    const arr = listeners.get(evt) || [];\r\n    const i = arr.indexOf(cb);\r\n    if (i !== -1) arr.splice(i, 1);\r\n  }\r\n  /**\r\n   * destroy()\r\n   * ---------\r\n   * Tear down all internal resources owned by the GameManager.\r\n   * - Stops the run loop (idempotent).\r\n   * - Unregisters any internal worker event handlers that were attached\r\n   *   to the sim worker so external references are not retained.\r\n   * - Terminates/closes the sim worker if possible, or posts a stop\r\n   *   message as a best-effort fallback.\r\n   * - Clears internal worker-ready callbacks and resets worker state.\r\n   *\r\n   * Contract and guarantees:\r\n   * - Safe to call multiple times (idempotent).\r\n   * - Will not throw on missing or partially-initialized worker.\r\n   * - Designed to be called before higher-level cleanup (e.g. UI dispose)\r\n   *   so that worker-side handlers are removed while manager internals\r\n   *   are still available.\r\n   */\r\n  function destroy() {\r\n    // Stop running loop\r\n    running = false;\r\n    // Tear down worker and its handlers\r\n    try {\r\n      if (simWorker) {\r\n        try {\r\n          if (typeof simWorker.off === \"function\") {\r\n            try {\r\n              if (_workerReadyHandler)\r\n                simWorker.off(\"ready\", _workerReadyHandler);\r\n            } catch (e) {}\r\n            try {\r\n              if (_workerSnapshotHandler)\r\n                simWorker.off(\"snapshot\", _workerSnapshotHandler);\r\n            } catch (e) {}\r\n            try {\r\n              if (_workerReinforcementsHandler)\r\n                simWorker.off(\"reinforcements\", _workerReinforcementsHandler);\r\n            } catch (e) {}\r\n          }\r\n        } catch (e) {}\r\n        try {\r\n          if (typeof simWorker.terminate === \"function\") simWorker.terminate();\r\n          else if (typeof simWorker.close === \"function\") simWorker.close();\r\n          else if (typeof simWorker.post === \"function\")\r\n            simWorker.post({ type: \"stop\" });\r\n        } catch (e) {}\r\n        simWorker = null;\r\n      }\r\n    } catch (e) {}\r\n    workerReady = false;\r\n    workerReadyCbs.length = 0;\r\n    // Dispose renderer assets if possible\r\n    if (renderer && typeof renderer.dispose === \"function\") {\r\n      try {\r\n        renderer.dispose();\r\n      } catch (e) {}\r\n    }\r\n    // Clear asset references in GameState\r\n    starCanvas = null;\r\n  }\r\n  function start() {\r\n    if (!running) {\r\n      running = true;\r\n      last =\r\n        typeof performance !== \"undefined\" && performance.now\r\n          ? performance.now()\r\n          : Date.now();\r\n      runLoop();\r\n    }\r\n  }\r\n  function pause() {\r\n    running = false;\r\n  }\r\n  function resetManager() {\r\n    state = makeInitialState();\r\n    if (simWorker)\r\n      try {\r\n        simWorker.post({ type: \"command\", cmd: \"setState\", args: { state } });\r\n      } catch (e) {}\r\n  }\r\n  function stepOnce(dt = SIM.DT_MS / 1000) {\r\n    const n = Number(dt) || SIM.DT_MS / 1000;\r\n    step(n);\r\n  }\r\n  function setContinuousEnabled(v: boolean = false) {\r\n    continuous = !!v;\r\n    if (simWorker) {\r\n      try {\r\n        simWorker.post({ type: \"setContinuous\", value: !!v });\r\n      } catch (e) {}\r\n    } else {\r\n      if (continuous) {\r\n        const result = evaluateReinforcement(\r\n          SIM.DT_MS / 1000,\r\n          state,\r\n          continuousOptions,\r\n        );\r\n        if (result && Array.isArray(result.spawned) && result.spawned.length) {\r\n          lastReinforcement = {\r\n            spawned: result.spawned,\r\n            timestamp: Date.now(),\r\n            options: { ...continuousOptions },\r\n          };\r\n          emit(\"reinforcements\", { spawned: result.spawned });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  function isContinuousEnabled() {\r\n    return !!continuous;\r\n  }\r\n  function setContinuousOptions(opts: any = {}) {\r\n    continuousOptions = { ...continuousOptions, ...opts };\r\n    if (simWorker)\r\n      try {\r\n        simWorker.post({\r\n          type: \"setContinuousOptions\",\r\n          opts: continuousOptions,\r\n        });\r\n      } catch (e) {}\r\n  }\r\n  function getContinuousOptions() {\r\n    return { ...continuousOptions };\r\n  }\r\n  function setReinforcementIntervalManager(seconds: number) {\r\n    setReinforcementInterval(seconds);\r\n    if (simWorker)\r\n      try {\r\n        simWorker.post({ type: \"setReinforcementInterval\", seconds });\r\n      } catch (e) {}\r\n  }\r\n  function getReinforcementIntervalManager() {\r\n    return getReinforcementInterval();\r\n  }\r\n  function isRunning() {\r\n    return running;\r\n  }\r\n  function isWorker() {\r\n    return !!simWorker && !!workerReady;\r\n  }\r\n  function onWorkerReady(cb: Function) {\r\n    if (typeof cb === \"function\") workerReadyCbs.push(cb);\r\n  }\r\n  function offWorkerReady(cb: Function) {\r\n    const i = workerReadyCbs.indexOf(cb);\r\n    if (i !== -1) workerReadyCbs.splice(i, 1);\r\n  }\r\n  function spawnShip(team: string = \"red\") {\r\n    try {\r\n      const type = getDefaultShipType();\r\n      const b = SIM.bounds;\r\n      const x = Math.max(0, Math.min(b.W - 1e-6, srandom() * b.W));\r\n      const y = Math.max(0, Math.min(b.H - 1e-6, srandom() * b.H));\r\n      const ship = createShip(type, x, y, team);\r\n      state.ships.push(ship);\r\n      try { (state as any).shipMap && (state as any).shipMap.set(ship.id, ship); } catch (e) {}\r\n  try { updateTeamCount(state, undefined, String(ship.team)); } catch (e) {}\r\n      return ship;\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Fleet formation (config-driven)\r\n  function formFleets() {\r\n    try {\r\n      // Remove all ships\r\n  // Clear ships and reset counts\r\n  state.ships.length = 0;\r\n  try { (state as any).shipMap && (state as any).shipMap.clear(); } catch (e) {}\r\n  try { state.teamCounts = { red: 0, blue: 0 }; } catch (e) {}\r\n      // Use makeInitialFleets from teamsConfig (static import)\r\n      const bounds = SIM.bounds;\r\n      const seed = Math.floor(srandom() * 0xffffffff) >>> 0;\r\n      const ships = makeInitialFleets(seed, bounds, createShip);\r\n      for (const ship of ships) {\r\n        state.ships.push(ship);\r\n        try { (state as any).shipMap && (state as any).shipMap.set(ship.id, ship); } catch (e) {}\r\n        try { updateTeamCount(state, undefined, ship.team); } catch (e) {}\r\n      }\r\n    } catch (e) {\r\n      /* ignore errors */\r\n    }\r\n  }\r\n  function reseedManager(newSeed: number = Math.floor(srandom() * 0xffffffff)) {\r\n    _seed = newSeed >>> 0;\r\n    srand(_seed);\r\n    if (simWorker)\r\n      try {\r\n        simWorker.post({ type: \"setSeed\", seed: _seed });\r\n      } catch (e) {}\r\n  }\r\n  function getLastReinforcement() {\r\n    return { ...lastReinforcement };\r\n  }\r\n  function snapshot() {\r\n    return {\r\n      ships: state.ships.slice(),\r\n      bullets: state.bullets.slice(),\r\n      t: state.t,\r\n      teamCounts: { ...(state.teamCounts || {}) },\r\n    };\r\n  }\r\n  const score = { red: 0, blue: 0 };\r\n  const internal = { state, bounds: SIM.bounds };\r\n\r\n  return {\r\n    on,\r\n    off,\r\n    start,\r\n    pause,\r\n    reset: resetManager,\r\n    stepOnce,\r\n    setContinuousEnabled,\r\n    isContinuousEnabled,\r\n    setContinuousOptions,\r\n    getContinuousOptions,\r\n    setReinforcementInterval: setReinforcementIntervalManager,\r\n    getReinforcementInterval: getReinforcementIntervalManager,\r\n    isRunning,\r\n    isWorker,\r\n    onWorkerReady,\r\n    offWorkerReady,\r\n    spawnShip,\r\n    reseed: reseedManager,\r\n    getLastReinforcement,\r\n    snapshot,\r\n    score,\r\n    formFleets,\r\n    destroy,\r\n    _internal: internal,\r\n  };\r\n}\r\n\r\nexport function simulate(dt: number, W = 800, H = 600) {\r\n  try {\r\n    const now =\r\n      typeof performance !== \"undefined\" && performance.now\r\n        ? performance.now()\r\n        : Date.now();\r\n    const frame = Math.floor(now / 4);\r\n    if (_lastSimulateFrameId === frame) {\r\n      const msg =\r\n        \"[gamemanager] detected simulate() called multiple times in same frame\";\r\n      if (_doubleSimStrict) throw new Error(msg);\r\n      else console.warn(msg);\r\n    }\r\n    _lastSimulateFrameId = frame;\r\n  } catch (e) {}\r\n  // Build a canonical GameState using makeInitialState to ensure assetPool exists\r\n  const base = makeInitialState();\r\n  (base as any).t = 0;\r\n  (base as any).ships = ships;\r\n  (base as any).bullets = bullets;\r\n  (base as any).explosions = [];\r\n  (base as any).shieldHits = [];\r\n  (base as any).healthHits = [];\r\n  (base as any).particles = particles;\r\n  (base as any).stars = stars;\r\n  (base as any).flashes = flashes;\r\n  (base as any).shieldFlashes = shieldFlashes;\r\n  (base as any).healthFlashes = healthFlashes;\r\n  (base as any).starCanvas = starCanvas || undefined;\r\n  const state: GameState = base as any;\r\n  // Populate shipMap from backing ships array for O(1) lookups\r\n  try {\r\n    (state as any).shipMap = new Map<number, any>();\r\n    for (const s of (state.ships || [])) {\r\n      if (s && typeof s.id !== 'undefined') (state as any).shipMap.set(s.id, s);\r\n    }\r\n  } catch (e) {}\r\n  // (Previously exposed state globally via _lastGameState for legacy helpers.)\r\n  // We now pass `state` explicitly to pooling helpers to avoid global state.\r\n  evaluateReinforcement(dt, state);\r\n  try {\r\n    simulateStep(state, dt, SIM.bounds);\r\n  } catch (e) {}\r\n  for (const ex of state.explosions) {\r\n    if (ex && typeof ex === \"object\") flashes.push(ex);\r\n    try {\r\n      const count = 12;\r\n      for (let i = 0; i < count; i++) {\r\n        const ang = srandom() * Math.PI * 2;\r\n        const sp = 30 + srandom() * 90;\r\n        acquireParticle(state, (ex as any).x || 0, (ex as any).y || 0, {\r\n          vx: Math.cos(ang) * sp,\r\n          vy: Math.sin(ang) * sp,\r\n          ttl: 0.6,\r\n          color: \"rgba(255,200,100,0.95)\",\r\n          size: 3,\r\n        });\r\n      }\r\n    } catch (e) {}\r\n  }\r\n  for (const h of state.shieldHits) {\r\n    if (h && typeof h === \"object\") shieldFlashes.push(h);\r\n  }\r\n  for (const h of state.healthHits) {\r\n    if (h && typeof h === \"object\") healthFlashes.push(h);\r\n  }\r\n  // No global state to clear; callers should pass `state` explicitly to helpers.\r\n  return {\r\n    ships,\r\n    bullets,\r\n    particles,\r\n    flashes,\r\n    shieldFlashes,\r\n    healthFlashes,\r\n    stars,\r\n    starCanvas,\r\n  };\r\n}\r\n\r\nexport function processStateEvents(state: any, dt: number = 0) {\r\n  return state;\r\n}\r\n\r\nexport default createGameManager;\r\n", "export const SHIELD = {\r\n  ttl: 0.4, particleCount: 6, particleTTL: 0.5, particleColor: '#88ccff', particleSize: 2,\r\n  // arcWidth (radians) for shield hit visual/particle spread centered on hitAngle\r\n  // NOTE: Used in assetsConfig.ts visualStateDefaults and renderer logic. If not consumed, consider removing.\r\n  arcWidth: Math.PI / 6, // TODO: Ensure renderer/particle logic uses this or remove if redundant\r\n};\r\n\r\nexport const HEALTH = {\r\n  ttl: 0.6, particleCount: 8, particleTTL: 0.6, particleColor: '#ffb3b3', particleSize: 2.5,\r\n};\r\n\r\nexport const EXPLOSION = {\r\n  particleCount: 30, particleTTL: 1.2, particleColor: '#ffaa33', particleSize: 3, minSpeed: 20, maxSpeed: 140,\r\n  // TODO: Unify particle effect configs with assetsConfig.ts animations for maintainability\r\n};\r\n\r\nexport const FALLBACK_POSITIONS = [\r\n  { x: 100, y: 100, team: 'red' },\r\n  { x: 700, y: 500, team: 'blue' }\r\n];\r\n\r\nexport const STARS = { twinkle: true, redrawInterval: 500, count: 140 };\r\n\r\nexport default { SHIELD, HEALTH, EXPLOSION, STARS, FALLBACK_POSITIONS };\r\n", "// Lightweight spatial grid for 2D entity partitioning\r\n// Lightweight spatial grid for 2D entity partitioning\r\nexport default class SpatialGrid {\r\n  private cellSize: number;\r\n  private grid: Map<string, any[]>;\r\n\r\n  // simple pooled instances to avoid per-frame allocations\r\n  // pool keyed by cellSize to avoid reuse mismatch; cap instances per key\r\n  private static _pools: Map<number, SpatialGrid[]> = new Map();\r\n  private static _perKeyCap = 4;\r\n\r\n  static acquire(cellSize: number = 64) {\r\n    const key = cellSize | 0;\r\n    const pool = this._pools.get(key) || [];\r\n    const inst = pool.pop();\r\n    if (inst) {\r\n      inst.cellSize = cellSize;\r\n      return inst;\r\n    }\r\n    return new SpatialGrid(cellSize);\r\n  }\r\n\r\n  static release(inst: SpatialGrid) {\r\n    const key = (inst.cellSize || 64) | 0;\r\n    inst.clear();\r\n    let pool = this._pools.get(key);\r\n    if (!pool) {\r\n      pool = [];\r\n      this._pools.set(key, pool);\r\n    }\r\n    if (pool.length < this._perKeyCap) pool.push(inst);\r\n    // else drop instance and let GC collect\r\n  }\r\n\r\n  constructor(cellSize: number = 64) {\r\n    this.cellSize = cellSize;\r\n    this.grid = new Map();\r\n  }\r\n\r\n  private key(cx: number, cy: number) {\r\n    return cx + \",\" + cy;\r\n  }\r\n\r\n  insert(entity: any) {\r\n    const cx = Math.floor((entity.x || 0) / this.cellSize);\r\n    const cy = Math.floor((entity.y || 0) / this.cellSize);\r\n    const k = this.key(cx, cy);\r\n    let bucket = this.grid.get(k);\r\n    if (!bucket) {\r\n      bucket = [];\r\n      this.grid.set(k, bucket);\r\n    }\r\n    bucket.push(entity);\r\n  }\r\n\r\n  queryRadius(x: number, y: number, radius: number) {\r\n    const minCx = Math.floor((x - radius) / this.cellSize);\r\n    const maxCx = Math.floor((x + radius) / this.cellSize);\r\n    const minCy = Math.floor((y - radius) / this.cellSize);\r\n    const maxCy = Math.floor((y + radius) / this.cellSize);\r\n    const results: any[] = [];\r\n    const seen = new Set<any>();\r\n    for (let cx = minCx; cx <= maxCx; cx++) {\r\n      for (let cy = minCy; cy <= maxCy; cy++) {\r\n        const bucket = this.grid.get(this.key(cx, cy));\r\n        if (!bucket) continue;\r\n        for (const e of bucket) {\r\n          if (!seen.has(e)) {\r\n            seen.add(e);\r\n            results.push(e);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n\r\n  // clear internal storage for reuse\r\n  clear() {\r\n    this.grid.clear();\r\n  }\r\n}\r\n\r\n// Utility: segment-circle intersection test used for swept collisions\r\nexport function segmentIntersectsCircle(\r\n  x1: number,\r\n  y1: number,\r\n  x2: number,\r\n  y2: number,\r\n  cx: number,\r\n  cy: number,\r\n  r: number,\r\n) {\r\n  // Translate so circle at origin\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  const fx = x1 - cx;\r\n  const fy = y1 - cy;\r\n\r\n  const a = dx * dx + dy * dy;\r\n  const b = 2 * (fx * dx + fy * dy);\r\n  const c = fx * fx + fy * fy - r * r;\r\n\r\n  // Solve quadratic a*t^2 + b*t + c = 0\r\n  let discriminant = b * b - 4 * a * c;\r\n  if (discriminant < 0) return false;\r\n  discriminant = Math.sqrt(discriminant);\r\n  const t1 = (-b - discriminant) / (2 * a);\r\n  const t2 = (-b + discriminant) / (2 * a);\r\n  // If either t within [0,1], segment intersects\r\n  if ((t1 >= 0 && t1 <= 1) || (t2 >= 0 && t2 <= 1)) return true;\r\n  return false;\r\n}\r\n", "// simulate.ts - TypeScript implementation ported from simulate.js\r\nimport { srange, srand, srandom } from \"./rng\";\r\nimport { progression as progressionCfg } from \"./config/progressionConfig\";\r\nimport { SIM, boundaryBehavior } from \"./config/simConfig\";\r\nimport { clampSpeed } from \"./behavior\";\r\nimport { acquireBullet, releaseBullet, acquireExplosion, releaseExplosion, acquireShieldHit, releaseShieldHit, acquireHealthHit, releaseHealthHit, releaseParticle } from \"./gamemanager\";\r\nimport type { GameState } from \"./types\";\r\nimport * as SpatialGridModule from \"./spatialGrid\";\r\n// typed as any to avoid strict import/typing issues in this hotpath\r\nconst SpatialGrid: any = (SpatialGridModule as any).default || SpatialGridModule;\r\nconst segmentIntersectsCircle: any = (SpatialGridModule as any).segmentIntersectsCircle;\r\n\r\nexport type Bounds = { W: number; H: number };\r\n\r\n// SIM constants migrated to simConfig.ts\r\n// Use SIM.DT_MS and SIM.MAX_ACC_MS instead\r\n\r\nfunction dist2(a: { x: number; y: number }, b: { x: number; y: number }) {\r\n  const dx = a.x - b.x;\r\n  const dy = a.y - b.y;\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\nexport function simulateStep(state: GameState, dtSeconds: number, bounds: Bounds) {\r\n  pruneAll(state, dtSeconds, bounds);\r\n  // Advance time\r\n  state.t = (state.t || 0) + dtSeconds;\r\n\r\n  // Move bullets and handle boundary behavior\r\n  for (let i = (state.bullets || []).length - 1; i >= 0; i--) {\r\n    const b = state.bullets[i];\r\n    // store previous position for swept collision tests (both legacy and\r\n    // internal names). Some compiled code reads _prevX/_prevY while other\r\n    // paths read prevX/prevY; keep them synchronized.\r\n    const prevXVal = typeof b.x === 'number' ? b.x : 0;\r\n    const prevYVal = typeof b.y === 'number' ? b.y : 0;\r\n    b.prevX = prevXVal;\r\n    b.prevY = prevYVal;\r\n    (b as any)._prevX = prevXVal;\r\n    (b as any)._prevY = prevYVal;\r\n    b.x += (b.vx || 0) * dtSeconds;\r\n    b.y += (b.vy || 0) * dtSeconds;\r\n    b.ttl = (b.ttl || 0) - dtSeconds;\r\n    let outX = b.x < 0 || b.x >= bounds.W;\r\n    let outY = b.y < 0 || b.y >= bounds.H;\r\n    let outOfBounds = outX || outY;\r\n    let remove = false;\r\n    if (b.ttl <= 0) remove = true;\r\n    else if (outOfBounds) {\r\n      switch (boundaryBehavior.bullets) {\r\n        case 'remove':\r\n          remove = true;\r\n          break;\r\n        case 'wrap':\r\n          if (b.x < 0) b.x += bounds.W;\r\n          if (b.x >= bounds.W) b.x -= bounds.W;\r\n          if (b.y < 0) b.y += bounds.H;\r\n          if (b.y >= bounds.H) b.y -= bounds.H;\r\n          break;\r\n        case 'bounce':\r\n          if (outX) {\r\n            b.vx = -(b.vx || 0);\r\n            b.x = Math.max(0, Math.min(bounds.W, b.x));\r\n          }\r\n          if (outY) {\r\n            b.vy = -(b.vy || 0);\r\n            b.y = Math.max(0, Math.min(bounds.H, b.y));\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  if (remove) releaseBullet(state, b);\r\n  }\r\n  // Batched in-place pruning for all high-frequency event arrays\r\nfunction pruneAll(state: GameState, dtSeconds: number, bounds: Bounds) {\r\n  // Ensure all event arrays are initialized\r\n  state.particles = state.particles || [];\r\n  state.explosions = state.explosions || [];\r\n  state.shieldHits = state.shieldHits || [];\r\n  state.healthHits = state.healthHits || [];\r\n  // Bullets: prune expired/out-of-bounds\r\n  let writeBullet = 0;\r\n  for (let read = 0; read < state.bullets.length; read++) {\r\n    const b = state.bullets[read];\r\n    const prevXVal = typeof b.x === 'number' ? b.x : 0;\r\n    const prevYVal = typeof b.y === 'number' ? b.y : 0;\r\n    b.prevX = prevXVal;\r\n    b.prevY = prevYVal;\r\n    (b as any)._prevX = prevXVal;\r\n    (b as any)._prevY = prevYVal;\r\n    b.x += (b.vx || 0) * dtSeconds;\r\n    b.y += (b.vy || 0) * dtSeconds;\r\n    b.ttl = (b.ttl || 0) - dtSeconds;\r\n    let outX = b.x < 0 || b.x >= bounds.W;\r\n    let outY = b.y < 0 || b.y >= bounds.H;\r\n    let outOfBounds = outX || outY;\r\n    let remove = false;\r\n    if (b.ttl <= 0) remove = true;\r\n    else if (outOfBounds) {\r\n      switch (boundaryBehavior.bullets) {\r\n        case 'remove':\r\n          remove = true;\r\n          break;\r\n        case 'wrap':\r\n          if (b.x < 0) b.x += bounds.W;\r\n          if (b.x >= bounds.W) b.x -= bounds.W;\r\n          if (b.y < 0) b.y += bounds.H;\r\n          if (b.y >= bounds.H) b.y -= bounds.H;\r\n          break;\r\n        case 'bounce':\r\n          if (outX) {\r\n            b.vx = -(b.vx || 0);\r\n            b.x = Math.max(0, Math.min(bounds.W, b.x));\r\n          }\r\n          if (outY) {\r\n            b.vy = -(b.vy || 0);\r\n            b.y = Math.max(0, Math.min(bounds.H, b.y));\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    if (!remove) {\r\n      state.bullets[writeBullet++] = b;\r\n    } else {\r\n  releaseBullet(state, b);\r\n    }\r\n  }\r\n  state.bullets.length = writeBullet;\r\n\r\n  // Particles: prune expired\r\n  let writeParticle = 0;\r\n  for (let read = 0; read < state.particles.length; read++) {\r\n    const p = state.particles[read];\r\n    p.life = (p.life || p.ttl || 0) - dtSeconds;\r\n    if (p.life > 0) {\r\n      state.particles[writeParticle++] = p;\r\n    } else {\r\n      releaseParticle(p);\r\n    }\r\n  }\r\n  state.particles.length = writeParticle;\r\n\r\n  // Explosions: prune expired\r\n  let writeExplosion = 0;\r\n  for (let read = 0; read < state.explosions.length; read++) {\r\n    const e = state.explosions[read];\r\n    e.life = (e.life || e.ttl || 0) - dtSeconds;\r\n    if (e.life > 0) {\r\n      state.explosions[writeExplosion++] = e;\r\n    } else {\r\n      releaseExplosion(e);\r\n    }\r\n  }\r\n  state.explosions.length = writeExplosion;\r\n\r\n  // ShieldHits: prune out-of-bounds\r\n  let writeShield = 0;\r\n  for (let read = 0; read < state.shieldHits.length; read++) {\r\n    const sh = state.shieldHits[read];\r\n    if (\r\n      typeof sh.x === \"number\" &&\r\n      typeof sh.y === \"number\" &&\r\n      sh.x >= 0 && sh.x < bounds.W &&\r\n      sh.y >= 0 && sh.y < bounds.H\r\n    ) {\r\n      state.shieldHits[writeShield++] = sh;\r\n    } else {\r\n      releaseShieldHit(sh);\r\n    }\r\n  }\r\n  state.shieldHits.length = writeShield;\r\n\r\n  // HealthHits: prune out-of-bounds\r\n  let writeHealth = 0;\r\n  for (let read = 0; read < state.healthHits.length; read++) {\r\n    const hh = state.healthHits[read];\r\n    if (\r\n      typeof hh.x === \"number\" &&\r\n      typeof hh.y === \"number\" &&\r\n      hh.x >= 0 && hh.x < bounds.W &&\r\n      hh.y >= 0 && hh.y < bounds.H\r\n    ) {\r\n      state.healthHits[writeHealth++] = hh;\r\n    } else {\r\n      releaseHealthHit(hh);\r\n    }\r\n  }\r\n  state.healthHits.length = writeHealth;\r\n}\r\n\r\n  // Move ships and update heading\r\n  for (let si = (state.ships || []).length - 1; si >= 0; si--) {\r\n    const s = state.ships[si];\r\n    // --- Physics-based movement ---\r\n    const throttle = typeof s.throttle === \"number\" ? s.throttle : 0;\r\n    const steering = typeof s.steering === \"number\" ? s.steering : 0;\r\n    const accel = typeof s.accel === \"number\" ? s.accel : 0;\r\n    const turnRate = typeof s.turnRate === \"number\" ? s.turnRate : 3;\r\n    const maxSpeed = typeof s.maxSpeed === \"number\" ? s.maxSpeed : 160;\r\n    const angle = typeof s.angle === \"number\" ? s.angle : 0;\r\n\r\n    // Update angle based on steering\r\n    const maxTurn = turnRate * Math.abs(steering) * dtSeconds;\r\n    if (steering !== 0) {\r\n      let a = angle + Math.sign(steering) * maxTurn;\r\n      while (a < -Math.PI) a += Math.PI * 2;\r\n      while (a > Math.PI) a -= Math.PI * 2;\r\n      s.angle = a;\r\n    }\r\n\r\n    // Update velocity based on throttle and angle\r\n    const actualAccel = accel * throttle;\r\n    if (actualAccel > 0) {\r\n      s.vx = (s.vx || 0) + Math.cos(s.angle || 0) * actualAccel * dtSeconds;\r\n      s.vy = (s.vy || 0) + Math.sin(s.angle || 0) * actualAccel * dtSeconds;\r\n    }\r\n\r\n  // Apply friction/damping to velocity (from simConfig)\r\n  const friction = typeof SIM.friction === \"number\" ? SIM.friction : 0.98;\r\n  s.vx = (s.vx || 0) * friction;\r\n  s.vy = (s.vy || 0) * friction;\r\n\r\n    // Clamp speed using shared function\r\n    clampSpeed(s, maxSpeed);\r\n\r\n    // Move ship\r\n    s.x += (s.vx || 0) * dtSeconds;\r\n    s.y += (s.vy || 0) * dtSeconds;\r\n    // Boundary behavior for ships\r\n    const r = typeof s.radius === \"number\" ? s.radius : 12;\r\n    let outX = s.x < -r || s.x > bounds.W + r;\r\n    let outY = s.y < -r || s.y > bounds.H + r;\r\n    let outOfBounds = outX || outY;\r\n    let remove = false;\r\n    if (outOfBounds) {\r\n      switch (boundaryBehavior.ships) {\r\n        case 'remove':\r\n          remove = true;\r\n          break;\r\n        case 'wrap':\r\n          if (s.x < -r) s.x += bounds.W + r * 2;\r\n          if (s.x > bounds.W + r) s.x -= bounds.W + r * 2;\r\n          if (s.y < -r) s.y += bounds.H + r * 2;\r\n          if (s.y > bounds.H + r) s.y -= bounds.H + r * 2;\r\n          break;\r\n        case 'bounce':\r\n          if (outX) {\r\n            s.vx = -(s.vx || 0);\r\n            s.x = Math.max(-r, Math.min(bounds.W + r, s.x));\r\n          }\r\n          if (outY) {\r\n            s.vy = -(s.vy || 0);\r\n            s.y = Math.max(-r, Math.min(bounds.H + r, s.y));\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    if (remove) {\r\n      const rem = state.ships.splice(si, 1);\r\n      if (rem && rem.length) {\r\n        try { (state as any).shipMap && (state as any).shipMap.delete(rem[0].id); } catch (e) {}\r\n        try { if (rem[0] && rem[0].team) state.teamCounts[rem[0].team] = Math.max(0, (state.teamCounts[rem[0].team] || 0) - 1); } catch (e) {}\r\n      }\r\n    }\r\n  }\r\n\r\n  // Bullet collisions\r\n  // Use spatial grid to reduce collision checks from O(N*M) to local queries\r\n  // Acquire a pooled grid instance and reuse it between frames to avoid allocations\r\n  const cellSize = (SIM && (SIM as any).gridCellSize) || 64;\r\n  const grid = SpatialGrid.acquire(cellSize);\r\n  const ships = state.ships || [];\r\n  for (let i = 0; i < ships.length; i++) grid.insert(ships[i]);\r\n  // Track ships removed during collision processing to avoid double-collision\r\n  const removedShipIds = new Set<any>();\r\n\r\n  for (let bi = (state.bullets || []).length - 1; bi >= 0; bi--) {\r\n    const b = state.bullets[bi];\r\n    const searchRadius = (b.radius || 1) + 64; // conservative search radius (cell-sized)\r\n    const candidates = grid.queryRadius(b.x || 0, b.y || 0, searchRadius);\r\n    let collided = false;\r\n    for (let ci = 0; ci < candidates.length; ci++) {\r\n      const s = candidates[ci];\r\n      if (!s || removedShipIds.has(s.id)) continue;\r\n      if (s.team === b.team) continue;\r\n      const r = (s.radius || 6) + (b.radius || 1);\r\n      // Swept collision: check segment from previous bullet pos (if available) to current pos\r\n  const bxPrev = typeof (b as any)._prevX === 'number' ? (b as any)._prevX : b.x - (b.vx || 0) * dtSeconds;\r\n  const byPrev = typeof (b as any)._prevY === 'number' ? (b as any)._prevY : b.y - (b.vy || 0) * dtSeconds;\r\n      const didHit =\r\n        dist2(b, s) <= r * r ||\r\n        segmentIntersectsCircle(bxPrev, byPrev, b.x || 0, b.y || 0, s.x || 0, s.y || 0, r);\r\n      if (didHit) {\r\n        const attacker = (typeof b.ownerId === \"number\" || typeof b.ownerId === \"string\")\r\n          ? (state as any).shipMap && (state as any).shipMap.get(Number(b.ownerId))\r\n          : (undefined as any);\r\n        let dealtToShield = 0;\r\n        let dealtToHealth = 0;\r\n        const shield = s.shield || 0;\r\n        if (shield > 0) {\r\n          const absorbed = Math.min(shield, b.damage || 0);\r\n          s.shield = shield - absorbed;\r\n          const hitAngle = Math.atan2(\r\n            (b.y || 0) - (s.y || 0),\r\n            (b.x || 0) - (s.x || 0),\r\n          );\r\n          (state.shieldHits ||= []).push(acquireShieldHit(state, {\r\n            id: s.id,\r\n            x: b.x,\r\n            y: b.y,\r\n            team: s.team,\r\n            amount: absorbed,\r\n            hitAngle,\r\n          }));\r\n          // expose damage event for renderer (shield hit)\r\n          (state.damageEvents ||= []).push({\r\n            id: s.id,\r\n            type: \"shield\",\r\n            amount: absorbed,\r\n            x: b.x,\r\n            y: b.y,\r\n            team: s.team,\r\n            attackerId: attacker && attacker.id,\r\n          });\r\n          const remaining = (b.damage || 0) - absorbed;\r\n          if (remaining > 0) {\r\n            s.hp -= remaining;\r\n            (state.healthHits ||= []).push(acquireHealthHit(state, {\r\n              id: s.id,\r\n              x: b.x,\r\n              y: b.y,\r\n              team: s.team,\r\n              amount: remaining,\r\n            }));\r\n            // expose damage event for renderer (health hit)\r\n            (state.damageEvents ||= []).push({\r\n              id: s.id,\r\n              type: \"hp\",\r\n              amount: remaining,\r\n              x: b.x,\r\n              y: b.y,\r\n              team: s.team,\r\n              attackerId: attacker && attacker.id,\r\n            });\r\n          }\r\n          dealtToShield = absorbed;\r\n          dealtToHealth = Math.max(0, (b.damage || 0) - absorbed);\r\n        } else {\r\n          s.hp -= b.damage || 0;\r\n            (state.healthHits ||= []).push(acquireHealthHit(state, {\r\n              id: s.id,\r\n              x: b.x,\r\n              y: b.y,\r\n              team: s.team,\r\n              amount: b.damage || 0,\r\n            }));\r\n          // expose damage event for renderer (health hit)\r\n          (state.damageEvents ||= []).push({\r\n            id: s.id,\r\n            type: \"hp\",\r\n            amount: b.damage || 0,\r\n            x: b.x,\r\n            y: b.y,\r\n            team: s.team,\r\n            attackerId: attacker && attacker.id,\r\n          });\r\n          dealtToHealth = b.damage || 0;\r\n        }\r\n\r\n        // Update percent fields for renderer convenience\r\n        s.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\r\n        s.shieldPercent =\r\n          typeof s.maxShield === \"number\" && s.maxShield > 0\r\n            ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield))\r\n            : 0;\r\n        // XP for damage\r\n        if (attacker) {\r\n          attacker.xp =\r\n            (attacker.xp || 0) +\r\n            (dealtToShield + dealtToHealth) * (progressionCfg.xpPerDamage || 0);\r\n          while (\r\n            (attacker.xp || 0) >= progressionCfg.xpToLevel(attacker.level || 1)\r\n          ) {\r\n            attacker.xp -= progressionCfg.xpToLevel(attacker.level || 1);\r\n            attacker.level = (attacker.level || 1) + 1;\r\n            // Support function or number scalars for progression\r\n            const resolveScalar = (s: any, lvl: number) =>\r\n              typeof s === \"function\" ? s(lvl) : s || 0;\r\n            const lvl = attacker.level || 1;\r\n            const hpScalar = resolveScalar(\r\n              progressionCfg.hpPercentPerLevel,\r\n              lvl,\r\n            );\r\n            const shScalar = resolveScalar(\r\n              progressionCfg.shieldPercentPerLevel,\r\n              lvl,\r\n            );\r\n            const dmgScalar = resolveScalar(\r\n              progressionCfg.dmgPercentPerLevel,\r\n              lvl,\r\n            );\r\n            const speedScalar = resolveScalar(\r\n              (progressionCfg as any).speedPercentPerLevel,\r\n              lvl,\r\n            );\r\n            const regenScalar = resolveScalar(\r\n              (progressionCfg as any).regenPercentPerLevel,\r\n              lvl,\r\n            );\r\n\r\n            const hpMul = 1 + hpScalar;\r\n            const shMul = 1 + shScalar;\r\n            const dmgMul = 1 + dmgScalar;\r\n\r\n            attacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n            attacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n            if (typeof attacker.maxShield === \"number\") {\r\n              attacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n              attacker.shield = Math.min(\r\n                attacker.maxShield,\r\n                (attacker.shield || 0) * shMul,\r\n              );\r\n            }\r\n            if (Array.isArray(attacker.cannons)) {\r\n              for (const c of attacker.cannons) {\r\n                if (typeof c.damage === \"number\") c.damage *= dmgMul;\r\n              }\r\n            }\r\n            // Apply optional speed and shield regen increases\r\n            if (\r\n              typeof speedScalar === \"number\" &&\r\n              typeof attacker.accel === \"number\"\r\n            )\r\n              attacker.accel = attacker.accel * (1 + speedScalar);\r\n            if (\r\n              typeof regenScalar === \"number\" &&\r\n              typeof attacker.shieldRegen === \"number\"\r\n            )\r\n              attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\r\n          }\r\n        }\r\n\r\n        state.bullets.splice(bi, 1);\r\n        collided = true;\r\n  // No need to check other candidates for this bullet\r\n        if (s.hp <= 0) {\r\n          if (attacker) {\r\n            attacker.xp = (attacker.xp || 0) + (progressionCfg.xpPerKill || 0);\r\n            while (\r\n              (attacker.xp || 0) >=\r\n              progressionCfg.xpToLevel(attacker.level || 1)\r\n            ) {\r\n              attacker.xp -= progressionCfg.xpToLevel(attacker.level || 1);\r\n              attacker.level = (attacker.level || 1) + 1;\r\n              const resolveScalar = (s: any, lvl: number) =>\r\n                typeof s === \"function\" ? s(lvl) : s || 0;\r\n              const lvl = attacker.level || 1;\r\n              const hpScalar = resolveScalar(\r\n                progressionCfg.hpPercentPerLevel,\r\n                lvl,\r\n              );\r\n              const shScalar = resolveScalar(\r\n                progressionCfg.shieldPercentPerLevel,\r\n                lvl,\r\n              );\r\n              const dmgScalar = resolveScalar(\r\n                progressionCfg.dmgPercentPerLevel,\r\n                lvl,\r\n              );\r\n              const speedScalar = resolveScalar(\r\n                (progressionCfg as any).speedPercentPerLevel,\r\n                lvl,\r\n              );\r\n              const regenScalar = resolveScalar(\r\n                (progressionCfg as any).regenPercentPerLevel,\r\n                lvl,\r\n              );\r\n\r\n              const hpMul = 1 + hpScalar;\r\n              const shMul = 1 + shScalar;\r\n              const dmgMul = 1 + dmgScalar;\r\n              attacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n              attacker.hp = Math.min(\r\n                attacker.maxHp,\r\n                (attacker.hp || 0) * hpMul,\r\n              );\r\n              if (typeof attacker.maxShield === \"number\") {\r\n                attacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n                attacker.shield = Math.min(\r\n                  attacker.maxShield,\r\n                  (attacker.shield || 0) * shMul,\r\n                );\r\n              }\r\n              if (Array.isArray(attacker.cannons)) {\r\n                for (const c of attacker.cannons) {\r\n                  if (typeof c.damage === \"number\") c.damage *= dmgMul;\r\n                }\r\n              }\r\n              if (\r\n                typeof speedScalar === \"number\" &&\r\n                typeof attacker.accel === \"number\"\r\n              )\r\n                attacker.accel = attacker.accel * (1 + speedScalar);\r\n              if (\r\n                typeof regenScalar === \"number\" &&\r\n                typeof attacker.shieldRegen === \"number\"\r\n              )\r\n                attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\r\n            }\r\n          }\r\n          (state.explosions ||= []).push(acquireExplosion(state, { x: s.x, y: s.y, team: s.team, life: 0.5, ttl: 0.5 }));\r\n          // remove from ships array and mark as removed for this frame\r\n          const idx = (state.ships || []).findIndex((sh: any) => sh && sh.id === s.id);\r\n          if (idx >= 0) {\r\n            state.ships.splice(idx, 1);\r\n            try { (state as any).shipMap && (state as any).shipMap.delete(s.id); } catch (e) {}\r\n            try { if (s && s.team) state.teamCounts[s.team] = Math.max(0, (state.teamCounts[s.team] || 0) - 1); } catch (e) {}\r\n          }\r\n          removedShipIds.add(s.id);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n    // continue to next bullet\r\n  }\r\n  // release pooled grid for reuse next frame\r\n  SpatialGrid.release(grid);\r\n\r\n  // Shield regen\r\n  for (const s of state.ships || []) {\r\n    if (s.maxShield)\r\n      s.shield = Math.min(\r\n        s.maxShield,\r\n        (s.shield || 0) + (s.shieldRegen || 0) * dtSeconds,\r\n      );\r\n  }\r\n\r\n  // refresh percent convenience fields after regen\r\n  for (const s of state.ships || []) {\r\n    s.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\r\n    s.shieldPercent =\r\n      typeof s.maxShield === \"number\" && s.maxShield > 0\r\n        ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield))\r\n        : 0;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default { simulateStep };\r\n", "// src/simWorker.ts - simulation worker implementation (compiled to JS and loaded as module Worker)\r\nimport { simulateStep } from './simulate';\r\nimport { applySimpleAI } from './behavior';\r\nimport { srand } from './rng';\r\nimport type { /* Bounds type can be extended in src/types if needed */ } from './types';\r\n\r\ntype Bounds = { W: number; H: number };\r\n\r\nlet state: any = null;\r\nlet bounds: Bounds = { W: 800, H: 600 };\r\nlet simDtMs = 16;\r\nlet running = false;\r\nlet acc = 0;\r\nlet last = 0;\r\n\r\nfunction postSnapshot() {\r\n\ttry {\r\n\t\tpostMessage({ type: 'snapshot', state });\r\n\t\t// Clear transient event arrays so the worker does not repeatedly resend\r\n\t\t// the same events on every snapshot. The snapshot is cloned by postMessage\r\n\t\t// so it's safe to clear them here.\r\n\t\ttry { clearTransientEvents(state); } catch (e) { /* ignore */ }\r\n\t} catch (e) {\r\n\t\t// ignore\r\n\t}\r\n}\r\n\r\n// exported for tests: clear transient worker event arrays after snapshot\r\nexport function clearTransientEvents(s: any) {\r\n  if (!s || typeof s !== 'object') return;\r\n  try {\r\n    if (Array.isArray(s.explosions)) s.explosions.length = 0;\r\n    if (Array.isArray(s.shieldHits)) s.shieldHits.length = 0;\r\n    if (Array.isArray(s.healthHits)) s.healthHits.length = 0;\r\n  } catch (e) { /* ignore */ }\r\n}\r\n\r\nfunction tick() {\r\n\tif (!running) return;\r\n\tconst now = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now();\r\n\tif (!last) last = now;\r\n\tacc += now - last; last = now;\r\n\tif (acc > 250) acc = 250;\r\n\t\twhile (acc >= simDtMs) {\r\n\t\t\ttry {\r\n\t\t\t\t\t// Apply deterministic AI before physics step\r\n\t\t\t\t\tapplySimpleAI(state as any, simDtMs / 1000, bounds);\r\n\t\t\t\t\tsimulateStep(state, simDtMs / 1000, bounds);\r\n\t\t\t} catch (e) {\r\n\t\t\t\tconst errAny: any = e as any;\r\n\t\t\t\tconst stack = errAny && errAny.stack ? errAny.stack : '';\r\n\t\t\t\tpostMessage({ type: 'error', message: String(e), stack });\r\n\t\t\t}\r\n\t\t\tacc -= simDtMs;\r\n\t\t}\r\n\tpostSnapshot();\r\n\tsetTimeout(tick, 0);\r\n}\r\n\r\n(self as any).onmessage = (ev: MessageEvent) => {\r\n\tconst msg = ev.data;\r\n\ttry {\r\n\t\tswitch (msg && msg.type) {\r\n\t\t\tcase 'init':\r\n\t\t\t\tif (typeof msg.seed === 'number') srand(msg.seed);\r\n\t\t\t\tif (msg.bounds) bounds = msg.bounds;\r\n\t\t\t\tif (typeof msg.simDtMs === 'number') simDtMs = msg.simDtMs;\r\n\t\t\t\tif (msg.state) state = msg.state;\r\n\t\t\t\tpostMessage({ type: 'ready' });\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'start':\r\n\t\t\t\tif (!state) { postMessage({ type: 'error', message: 'no state' }); break; }\r\n\t\t\t\trunning = true; acc = 0; last = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now(); tick();\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'stop':\r\n\t\t\t\trunning = false; break;\r\n\t\t\tcase 'snapshotRequest':\r\n\t\t\t\tpostSnapshot(); break;\r\n\t\t\tcase 'setSeed':\r\n\t\t\t\tif (typeof msg.seed === 'number') { srand(msg.seed); }\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'command':\r\n\t\t\t\tif (msg.cmd === 'spawnShip' && state) {\r\n\t\t\t\t\tstate.ships.push(msg.args.ship);\r\n\t\t\t\t\ttry { (state as any).shipMap && (state as any).shipMap.set(msg.args.ship.id, msg.args.ship); } catch (e) {}\r\n\t\t\t\t\ttry { const tt = String((msg.args.ship as any).team || ''); state.teamCounts[tt] = (state.teamCounts[tt] || 0) + 1; } catch (e) {}\r\n\t\t\t\t} else if (msg.cmd === 'spawnShipBullet' && state) {\r\n\t\t\t\t\tstate.bullets.push(msg.args.bullet);\r\n\t\t\t\t} else if (msg.cmd === 'setState') {\r\n\t\t\t\t\tstate = msg.args.state;\r\n\t\t\t\t\ttry { (state as any).shipMap = new Map<number, any>(); state.teamCounts = { red: 0, blue: 0 }; for (const s of (state.ships || [])) if (s && typeof s.id !== 'undefined') { (state as any).shipMap.set(s.id, s); try { const t = String((s as any).team || ''); state.teamCounts[t] = (state.teamCounts[t] || 0) + 1; } catch (e) {} } } catch (e) {}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\t// ignore\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t} catch (err: any) {\r\n\t\t\tconst stack = err && (err as any).stack ? (err as any).stack : '';\r\n\t\t\tpostMessage({ type: 'error', message: String(err), stack });\r\n\t\t}\r\n};\r\n\r\nexport default null;\r\n"],
  "mappings": "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",
  "names": ["state", "e", "state", "state", "state", "bounds", "state", "state", "SpatialGrid", "segmentIntersectsCircle", "state", "bounds", "dtSeconds", "s", "lvl"]
}
