{
  "version": 3,
  "sources": ["../src/config/assets/assetsConfig.ts", "../src/config/entitiesConfig.ts", "../src/config/validateConfig.ts", "../src/entities.js", "../src/rng.js", "../src/config/progressionConfig.ts", "../src/simulate.js", "../src/config/displayConfig.ts", "../src/createSimWorker.ts", "../src/config/gamemanagerConfig.ts", "../src/config/teamsConfig.ts", "../src/behavior.js", "../src/gamemanager.js", "../src/config/rendererConfig.ts", "../src/canvasrenderer.js", "../src/webglrenderer.js", "../src/main.js"],
  "sourcesContent": ["// Basic asset templates for 2D top-down rendering with future 3D model placeholders.\r\n// Orientation: shapes face +X (to the right). Scale is in logical units; renderer\r\n// should scale to entity radius and rotate by entity heading if present.\r\n\r\nexport type PolygonShape = {\r\n  type: 'polygon';\r\n  points: number[][]; // [[x,y], ...]\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CircleShape = {\r\n  type: 'circle';\r\n  r: number;\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CompoundPart = PolygonShape | CircleShape;\r\n\r\nexport type CompoundShape = {\r\n  type: 'compound';\r\n  parts: CompoundPart[];\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type Shape2D = PolygonShape | CircleShape | CompoundShape;\r\n\r\nexport type Model3D = {\r\n  url?: string | undefined;\r\n  scale?: number | undefined;\r\n  type?: string | undefined;\r\n  mesh?: string | undefined;\r\n};\r\n\r\nexport type AssetsConfigType = {\r\n  meta: { orientation: string; coordinateSystem: string };\r\n  palette: Record<string, string>;\r\n  shapes2d: Record<string, Shape2D>;\r\n  animations?: Record<string, any>;\r\n  damageStates?: Record<string, { opacity?: number; accentColor?: string }>;\r\n  visualStateDefaults?: Record<string, { engine?: string; shield?: string; damageParticles?: string }>;\r\n};\r\n\r\nexport const AssetsConfig: AssetsConfigType = {\r\n  meta: {\r\n    orientation: '+X',\r\n    coordinateSystem: 'topdown-2d',\r\n  },\r\n  palette: {\r\n    shipHull: '#b0b7c3',\r\n    shipAccent: '#6c7380',\r\n    bullet: '#ffd166',\r\n    turret: '#94a3b8',\r\n    // Scene background color used by renderers\r\n    background: '#0b1220',\r\n  },\r\n  // 2D vector shapes defined as polygons and circles. Points are unit-sized\r\n  // profiles (roughly radius 1). Renderer should multiply by entity radius or\r\n  // provided scale before drawing.\r\n  shapes2d: {\r\n    fighter: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [-0.8, 0.6], [-0.5, 0], [-0.8, -0.6]] },\r\n        { type: 'polygon', points: [[0.0, 0.35], [-0.6, 0.65], [-0.35, 0.0]] },\r\n        { type: 'polygon', points: [[0.0, -0.35], [-0.35, 0.0], [-0.6, -0.65]] }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1, type: 'gltf', mesh: undefined }\r\n    },\r\n    corvette: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.0, 0], [0.2, 0.6], [-0.9, 0.5], [-1.1, 0], [-0.9, -0.5], [0.2, -0.6]] },\r\n        { type: 'polygon', points: [[1.2, 0.18], [1.0, 0.1], [1.0, -0.1], [1.2, -0.18]] }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1.4, type: 'gltf', mesh: undefined }\r\n    },\r\n    frigate: {\r\n      type: 'polygon',\r\n      points: [[1.1, 0], [0.6, 0.55], [-0.2, 0.8], [-1.2, 0.45], [-1.2, -0.45], [-0.2, -0.8], [0.6, -0.55]],\r\n      strokeWidth: 0.1,\r\n      model3d: { url: undefined, scale: 1.8, type: 'gltf', mesh: undefined }\r\n    },\r\n    destroyer: {\r\n      type: 'polygon',\r\n      points: [[1.4, 0], [0.8, 0.5], [0.1, 0.7], [-0.6, 0.6], [-1.4, 0.4], [-1.4, -0.4], [-0.6, -0.6], [0.1, -0.7], [0.8, -0.5]],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 2.2, type: 'gltf', mesh: undefined }\r\n    },\r\n    carrier: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.1, 0], [0.6, 0.7], [-0.5, 0.9], [-1.4, 0.7], [-1.6, 0], [-1.4, -0.7], [-0.5, -0.9], [0.6, -0.7]] },\r\n        { type: 'polygon', points: [[1.4, 0.25], [1.1, 0.15], [1.1, -0.15], [1.4, -0.25]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 3.0, type: 'gltf', mesh: undefined }\r\n    },\r\n    bulletSmall: { type: 'circle', r: 0.18 },\r\n    bulletMedium: { type: 'circle', r: 0.25 },\r\n    bulletLarge: { type: 'circle', r: 0.36 },\r\n    turretBasic: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'circle', r: 0.5 },\r\n        { type: 'polygon', points: [[-0.2, 0.2], [0.7, 0.2], [0.7, -0.2], [-0.2, -0.2]] }\r\n      ],\r\n      strokeWidth: 0.08\r\n    }\r\n  }\r\n};\r\n\r\n// Animations and visual defaults (align with JS AssetsConfig)\r\n(AssetsConfig as any).animations = {\r\n  engineFlare: {\r\n    type: 'polygon',\r\n    points: [ [0, 0], [-0.3, 0.15], [-0.5, 0], [-0.3, -0.15] ],\r\n    pulseRate: 8,\r\n    // configurable alpha multiplier for engine overlay\r\n    alpha: 0.4,\r\n    // local-space X offset (negative = behind ship)\r\n    offset: -0.9\r\n  },\r\n  shieldEffect: {\r\n    type: 'circle',\r\n    r: 1.2,\r\n    strokeWidth: 0.1,\r\n    color: '#88ccff',\r\n    pulseRate: 2,\r\n    // map shieldPct -> alpha = base + scale * shieldPct\r\n    alphaBase: 0.25,\r\n    alphaScale: 0.75\r\n  },\r\n  damageParticles: {\r\n    type: 'particles',\r\n    color: '#ff6b6b',\r\n    count: 6,\r\n    lifetime: 0.8,\r\n    spread: 0.6\r\n  }\r\n};\r\n\r\n(AssetsConfig as any).damageStates = {\r\n  light: { opacity: 0.9, accentColor: '#b0b7c3' },\r\n  moderate: { opacity: 0.75, accentColor: '#d4a06a' },\r\n  heavy: { opacity: 0.5, accentColor: '#ff6b6b' }\r\n};\r\n\r\n(AssetsConfig as any).visualStateDefaults = {\r\n  fighter: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles' },\r\n  corvette: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles' },\r\n  frigate: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles' },\r\n  destroyer: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles' },\r\n  carrier: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles' }\r\n};\r\n\r\n// thresholds for mapping hpPct -> damage state key\r\n(AssetsConfig as any).damageThresholds = { moderate: 0.66, heavy: 0.33 };\r\n\r\nexport function getVisualConfig(type: string) {\r\n  const shape = getShipAsset(type);\r\n  const visuals = (AssetsConfig as any).visualStateDefaults[type] || (AssetsConfig as any).visualStateDefaults.fighter;\r\n  return { shape, visuals, palette: AssetsConfig.palette, animations: (AssetsConfig as any).animations, damageStates: (AssetsConfig as any).damageStates } as any;\r\n}\r\n\r\nexport function getShipAsset(type: string): Shape2D {\r\n  return AssetsConfig.shapes2d[type] || AssetsConfig.shapes2d.fighter;\r\n}\r\n\r\nexport function getBulletAsset(kind: 'small' | 'medium' | 'large' = 'small'): Shape2D {\r\n  if (kind === 'large') return AssetsConfig.shapes2d.bulletLarge;\r\n  if (kind === 'medium') return AssetsConfig.shapes2d.bulletMedium;\r\n  return AssetsConfig.shapes2d.bulletSmall;\r\n}\r\n\r\nexport function getTurretAsset(_kind: 'basic' = 'basic'): Shape2D {\r\n  return AssetsConfig.shapes2d.turretBasic;\r\n}\r\n\r\nexport default AssetsConfig;\r\n", "// entitiesConfig.ts - ship-type defaults and visuals helpers (typed)\r\nimport { getShipAsset, getBulletAsset, getTurretAsset } from './assets/assetsConfig';\r\n\r\nexport type CannonCfg = {\r\n  damage: number; rate: number; spread?: number; muzzleSpeed?: number; bulletRadius?: number; bulletTTL?: number;\r\n};\r\n\r\nexport type ShipTypeCfg = {\r\n  maxHp: number; armor?: number; maxShield?: number; shieldRegen?: number; dmg?: number; radius?: number;\r\n  cannons?: CannonCfg[]; accel?: number; turnRate?: number; carrier?: { fighterCooldown: number; maxFighters: number; spawnPerCooldown: number };\r\n};\r\n\r\nexport type ShipConfigMap = Record<string, ShipTypeCfg>;\r\n\r\nexport const ShipConfig: ShipConfigMap = {\r\n  fighter: {\r\n    maxHp: 15, armor: 0, maxShield: 8, shieldRegen: 1.0, dmg: 3, radius: 4,\r\n    cannons: [ { damage: 3, rate: 3, spread: 0.1, muzzleSpeed: 300, bulletRadius: 1.5, bulletTTL: 1.2 } ],\r\n    accel: 600, turnRate: 6,\r\n  },\r\n  corvette: {\r\n    maxHp: 50, armor: 0, maxShield: Math.round(50 * 0.6), shieldRegen: 0.5, dmg: 5, radius: 8,\r\n    accel: 200, turnRate: 3,\r\n    cannons: [ { damage: 6, rate: 1.2, spread: 0.05, muzzleSpeed: 220, bulletRadius: 2, bulletTTL: 2.0 } ],\r\n  },\r\n  frigate: {\r\n    maxHp: 80, armor: 1, maxShield: Math.round(80 * 0.6), shieldRegen: 0.4, dmg: 8, radius: 12,\r\n    cannons: [ { damage: 8, rate: 1.0, spread: 0.06, muzzleSpeed: 200, bulletRadius: 2.5, bulletTTL: 2.2 } ],\r\n    accel: 120, turnRate: 2.2,\r\n  },\r\n  destroyer: {\r\n    maxHp: 120, armor: 2, maxShield: Math.round(120 * 0.6), shieldRegen: 0.3, dmg: 12, radius: 16,\r\n    cannons: new Array(6).fill(0).map(() => ({ damage: 6, rate: 0.8, spread: 0.08, muzzleSpeed: 240, bulletRadius: 2.5, bulletTTL: 2.4 })),\r\n    accel: 80, turnRate: 1.6,\r\n  },\r\n  carrier: {\r\n    maxHp: 200, armor: 3, maxShield: Math.round(200 * 0.6), shieldRegen: 0.2, dmg: 2, radius: 24,\r\n    cannons: new Array(4).fill(0).map(() => ({ damage: 4, rate: 0.6, spread: 0.12, muzzleSpeed: 180, bulletRadius: 3, bulletTTL: 2.8 })),\r\n    accel: 40, turnRate: 0.8,\r\n    carrier: { fighterCooldown: 1.5, maxFighters: 6, spawnPerCooldown: 2 }\r\n  }\r\n};\r\n\r\nexport default ShipConfig;\r\n\r\nexport function setShipConfig(newCfg: Partial<ShipConfigMap> = {}) {\r\n  function merge(target: any, src: any) {\r\n    for (const k of Object.keys(src)) {\r\n      const sv = (src as any)[k];\r\n      if (sv && typeof sv === 'object' && !Array.isArray(sv)) {\r\n        if (!target[k] || typeof target[k] !== 'object') target[k] = {};\r\n        merge(target[k], sv);\r\n      } else if (Array.isArray(sv)) {\r\n        target[k] = sv.map(item => (item && typeof item === 'object' ? Object.assign({}, item) : item));\r\n      } else if (['number', 'string', 'boolean'].includes(typeof sv)) {\r\n        target[k] = sv;\r\n      }\r\n    }\r\n  }\r\n  merge(ShipConfig as any, newCfg as any);\r\n}\r\n\r\nexport function getShipConfig(): ShipConfigMap {\r\n  return JSON.parse(JSON.stringify(ShipConfig)) as ShipConfigMap;\r\n}\r\n\r\nexport const VisualMappingConfig = {\r\n  bulletRadiusThresholds: [\r\n    { threshold: 0.22, kind: 'small' },\r\n    { threshold: 0.32, kind: 'medium' },\r\n    { threshold: Infinity, kind: 'large' }\r\n  ],\r\n  defaultTurretKind: 'basic',\r\n  shipAssetKey: {\r\n    fighter: 'fighter', corvette: 'corvette', frigate: 'frigate', destroyer: 'destroyer', carrier: 'carrier'\r\n  }\r\n};\r\n\r\nexport function bulletKindForRadius(r = 0.2): string {\r\n  for (const t of VisualMappingConfig.bulletRadiusThresholds) {\r\n    if (r <= t.threshold) return t.kind;\r\n  }\r\n  return 'small';\r\n}\r\n\r\nexport function getBulletAssetForCannon(cannon: { bulletRadius?: number; radius?: number } = {}) {\r\n  const r = typeof cannon.bulletRadius === 'number' ? cannon.bulletRadius : (typeof cannon.radius === 'number' ? cannon.radius : 0.2);\r\n  const kind = bulletKindForRadius(r);\r\n  return getBulletAsset(kind as any);\r\n}\r\n\r\nexport function getShipAssetForType(type = 'fighter') {\r\n  const key = (VisualMappingConfig as any).shipAssetKey[type] || type;\r\n  return getShipAsset(key as any);\r\n}\r\n\r\nexport function getTurretAssetForShip(_shipType = 'fighter') {\r\n  return getTurretAsset(VisualMappingConfig.defaultTurretKind as any);\r\n}\r\n\r\nexport function getVisualsForShipType(type = 'fighter', cannon: any = undefined) {\r\n  return { hull: getShipAssetForType(type), turret: getTurretAssetForShip(type), bullet: getBulletAssetForCannon(cannon) };\r\n}\r\n\r\nexport function getDefaultShipType(): string {\r\n  const keys = Object.keys(ShipConfig || {} as any);\r\n  return keys.length ? keys[0] as string : 'fighter';\r\n}\r\n", "// Lightweight ship configuration validation helpers (TypeScript)\r\n\r\nimport type {\r\n  CannonSpec,\r\n  ShipSpec,\r\n  ProgressionConfig,\r\n  Shape2D,\r\n  Shape2D_Polygon,\r\n  Shape2D_Compound,\r\n  AssetsConfig,\r\n  TeamsConfig,\r\n  DisplayConfig,\r\n  RendererConfig,\r\n  ShipConfigMap,\r\n} from '../types';\r\n\r\nexport function validateShipConfig(config: ShipConfigMap | unknown): string[] {\r\n  const errors: string[] = [];\r\n  if (!config || typeof config !== 'object') {\r\n    errors.push('config must be an object');\r\n    return errors;\r\n  }\r\n\r\n  for (const [type, shipRaw] of Object.entries(config)) {\r\n    const ship = shipRaw as Partial<ShipSpec> | undefined;\r\n    if (!ship || typeof ship !== 'object') {\r\n      errors.push(`${type}: ship entry must be an object`);\r\n      continue;\r\n    }\r\n\r\n    if (typeof ship.maxHp !== 'number' || Number.isNaN(ship.maxHp)) {\r\n      errors.push(`${type}: maxHp must be a number`);\r\n    } else if (ship.maxHp <= 0) {\r\n      errors.push(`${type}: maxHp must be positive`);\r\n    }\r\n\r\n    if (typeof ship.accel !== 'number' || Number.isNaN(ship.accel)) {\r\n      errors.push(`${type}: accel must be a number`);\r\n    } else if (ship.accel < 0) {\r\n      errors.push(`${type}: accel cannot be negative`);\r\n    }\r\n\r\n    if (!Array.isArray(ship.cannons) || ship.cannons.length === 0) {\r\n      errors.push(`${type}: must have at least one cannon`);\r\n    }\r\n\r\n    if (typeof ship.maxShield !== 'undefined') {\r\n      if (typeof ship.maxShield !== 'number' || Number.isNaN(ship.maxShield) || ship.maxShield < 0) {\r\n        errors.push(`${type}: maxShield must be a non-negative number`);\r\n      }\r\n    }\r\n\r\n    if (typeof ship.radius !== 'undefined') {\r\n      if (typeof ship.radius !== 'number' || Number.isNaN(ship.radius) || ship.radius <= 0) {\r\n        errors.push(`${type}: radius must be a positive number`);\r\n      }\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport function validateConfigOrThrow(config: unknown, { throwInCI = true } = {}): string[] {\r\n  const errors = validateShipConfig(config);\r\n  if (errors.length === 0) return [];\r\n\r\n  const message = `Ship config validation failed:\\n - ${errors.join('\\n - ')}`;\r\n  const isCI = process.env.CI === 'true' || process.env.NODE_ENV === 'production';\r\n  if (throwInCI && isCI) {\r\n    throw new Error(message);\r\n  }\r\n\r\n  // eslint-disable-next-line no-console\r\n  console.error(message);\r\n  return errors;\r\n}\r\n\r\n// Validate TeamsConfig shape\r\nexport function validateTeamsConfig(cfg: unknown): string[] {\r\n  const errors: string[] = [];\r\n  if (!cfg || typeof cfg !== 'object') {\r\n    errors.push('TeamsConfig must be an object');\r\n    return errors;\r\n  }\r\n\r\n  const tcfg = cfg as TeamsConfig;\r\n  if (!tcfg.teams || typeof tcfg.teams !== 'object') {\r\n    errors.push('TeamsConfig.teams must be an object with team entries');\r\n  } else {\r\n    for (const [k, v] of Object.entries(tcfg.teams)) {\r\n      if (!v || typeof v !== 'object') {\r\n        errors.push(`teams.${k} must be an object`);\r\n        continue;\r\n      }\r\n      if (!v.id) errors.push(`teams.${k} missing id`);\r\n      if (!v.color) errors.push(`teams.${k} missing color`);\r\n    }\r\n  }\r\n\r\n  if (tcfg.defaultFleet) {\r\n    if (!tcfg.defaultFleet.counts || typeof tcfg.defaultFleet.counts !== 'object') {\r\n      errors.push('TeamsConfig.defaultFleet.counts must be an object mapping ship types to counts');\r\n    }\r\n    if (tcfg.defaultFleet.spacing != null && typeof tcfg.defaultFleet.spacing !== 'number') {\r\n      errors.push('TeamsConfig.defaultFleet.spacing must be a number');\r\n    }\r\n  }\r\n\r\n  if (tcfg.continuousReinforcement) {\r\n    const cr = tcfg.continuousReinforcement;\r\n    if (typeof cr.enabled !== 'boolean') errors.push('continuousReinforcement.enabled must be boolean');\r\n    if (typeof cr.scoreMargin !== 'number') errors.push('continuousReinforcement.scoreMargin must be number');\r\n    if (typeof cr.perTick !== 'number') errors.push('continuousReinforcement.perTick must be number');\r\n    if (cr.reinforceType && typeof cr.reinforceType !== 'string') errors.push('continuousReinforcement.reinforceType must be string');\r\n    if (cr.shipTypes && !Array.isArray(cr.shipTypes)) errors.push('continuousReinforcement.shipTypes must be an array if provided');\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\n// Validate progression config\r\nexport function validateProgressionConfig(cfg: unknown): string[] {\r\n  const errors: string[] = [];\r\n  if (!cfg || typeof cfg !== 'object') {\r\n    errors.push('progression config must be an object');\r\n    return errors;\r\n  }\r\n  const p = cfg as ProgressionConfig;\r\n  if (typeof p.xpPerDamage !== 'number') errors.push('xpPerDamage must be a number');\r\n  if (typeof p.xpPerKill !== 'number') errors.push('xpPerKill must be a number');\r\n  if (typeof p.xpToLevel !== 'function' && typeof p.xpToLevel !== 'number') {\r\n    errors.push('xpToLevel must be a function(level) or a number base');\r\n  }\r\n  const isNumberOrFn = (v: any) => typeof v === 'number' || typeof v === 'function';\r\n  if (!isNumberOrFn(p.hpPercentPerLevel)) errors.push('hpPercentPerLevel must be a number or function(level)');\r\n  if (!isNumberOrFn(p.dmgPercentPerLevel)) errors.push('dmgPercentPerLevel must be a number or function(level)');\r\n  if (!isNumberOrFn(p.shieldPercentPerLevel)) errors.push('shieldPercentPerLevel must be a number or function(level)');\r\n  if (typeof p.speedPercentPerLevel !== 'undefined' && !isNumberOrFn(p.speedPercentPerLevel)) errors.push('speedPercentPerLevel must be a number or function(level)');\r\n  if (typeof p.regenPercentPerLevel !== 'undefined' && !isNumberOrFn(p.regenPercentPerLevel)) errors.push('regenPercentPerLevel must be a number or function(level)');\r\n\r\n  return errors;\r\n}\r\n\r\n// Validate assets config (basic checks)\r\nexport function validateAssetsConfig(cfg: unknown): string[] {\r\n  const errors: string[] = [];\r\n  if (!cfg || typeof cfg !== 'object') {\r\n    errors.push('AssetsConfig must be an object');\r\n    return errors;\r\n  }\r\n  const a = cfg as AssetsConfig;\r\n  if (!a.palette || typeof a.palette !== 'object') errors.push('AssetsConfig.palette must be an object');\r\n  if (!a.shapes2d || typeof a.shapes2d !== 'object') errors.push('AssetsConfig.shapes2d must be an object of named shapes');\r\n\r\n  if (a.shapes2d && typeof a.shapes2d === 'object') {\r\n    for (const [k, vRaw] of Object.entries(a.shapes2d)) {\r\n      const v = vRaw as Shape2D | undefined;\r\n      if (!v || typeof v !== 'object') { errors.push(`shapes2d.${k} must be an object`); continue; }\r\n      if (!v.type) errors.push(`shapes2d.${k} missing type`);\r\n      if (v.type === 'polygon' && (!Array.isArray((v as Shape2D_Polygon).points) || (v as Shape2D_Polygon).points.length === 0)) errors.push(`shapes2d.${k} polygon must have points`);\r\n      if (v.type === 'compound' && (!Array.isArray((v as Shape2D_Compound).parts) || (v as Shape2D_Compound).parts.length === 0)) errors.push(`shapes2d.${k} compound must have parts`);\r\n    }\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport function validateDisplayConfig(cfg: unknown): string[] {\r\n  const errors: string[] = [];\r\n  if (!cfg) return errors;\r\n  const d = cfg as DisplayConfig;\r\n  if (typeof d.getDefaultBounds !== 'function') errors.push('displayConfig.getDefaultBounds must be a function');\r\n  return errors;\r\n}\r\n\r\nexport function validateRendererConfig(cfg: unknown): string[] {\r\n  const errors: string[] = [];\r\n  if (!cfg || typeof cfg !== 'object') { errors.push('RendererConfig must be an object'); return errors; }\r\n  const r = cfg as RendererConfig;\r\n  if (typeof r.preferred !== 'string') errors.push('RendererConfig.preferred must be a string');\r\n  if (typeof r.rendererScale !== 'undefined' && typeof r.rendererScale !== 'number') errors.push('RendererConfig.rendererScale must be a number');\r\n  return errors;\r\n}\r\n\r\nexport default {};\r\n", "// entities.js - catalog of ships, bullets, cannon configs and simple factories\r\nimport { getShipConfig, getDefaultShipType } from './config/entitiesConfig';\r\nimport { validateConfigOrThrow } from './config/validateConfig';\r\n\r\n// Validate ship configuration on module load. In CI / production this will throw.\r\ntry {\r\n  validateConfigOrThrow(getShipConfig());\r\n} catch (err) {\r\n  // eslint-disable-next-line no-console\r\n  console.error('Fatal ship config validation error:', err && err.message ? err.message : err);\r\n  // Re-throw so importing modules fail fast in strict environments\r\n  throw err;\r\n}\r\n\r\nlet nextId = 1;\r\nexport function genId() { return nextId++; }\r\n\r\nexport function createShip(type, x = 0, y = 0, team = 'red') {\r\n  const shipCfg = getShipConfig();\r\n  const resolvedType = (type && shipCfg[type]) ? type : getDefaultShipType();\r\n  const cfg = shipCfg[resolvedType] || shipCfg[getDefaultShipType()];\r\n  return {\r\n    id: genId(),\r\n    type: resolvedType,\r\n    x, y,\r\n    vx: 0, vy: 0,\r\n    hp: cfg.maxHp,\r\n    maxHp: cfg.maxHp,\r\n    shield: cfg.maxShield || 0,\r\n    maxShield: cfg.maxShield || 0,\r\n    team,\r\n    xp: 0,\r\n    level: 1,\r\n    cannons: JSON.parse(JSON.stringify(cfg.cannons || [])),\r\n    accel: cfg.accel || 0,\r\n    turnRate: cfg.turnRate || 0,\r\n    radius: cfg.radius || 6,\r\n  };\r\n}\r\n\r\nexport function createBullet(x, y, vx, vy, team = 'red', ownerId = null, damage = 1, ttl = 2.0) {\r\n  return {\r\n    id: genId(),\r\n    x, y, vx, vy, team, ownerId, damage, ttl\r\n  };\r\n}\r\n\r\nexport function makeInitialState() {\r\n  return {\r\n    t: 0,\r\n    ships: [],\r\n    bullets: [],\r\n    explosions: [],\r\n    shieldHits: [],\r\n    healthHits: [],\r\n  };\r\n}\r\n\r\nexport default { createShip, createBullet, makeInitialState };\r\n", "// rng.js - lightweight deterministic seeded RNG utilities\r\nlet _seed = 1;\r\n\r\nexport function srand(seed = 1) {\r\n  // store as 32-bit unsigned\r\n  _seed = seed >>> 0;\r\n}\r\n\r\n// mulberry32 PRNG\r\nfunction mulberry32(a) {\r\n  return function() {\r\n    let t = a += 0x6D2B79F5;\r\n    t = Math.imul(t ^ t >>> 15, t | 1);\r\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\r\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\r\n  }\r\n}\r\n\r\nexport function srandom() {\r\n  const f = mulberry32(_seed);\r\n  // advance seed deterministically\r\n  _seed = (_seed + 0x9E3779B1) >>> 0;\r\n  return f();\r\n}\r\n\r\nexport function srange(min, max) {\r\n  return min + (max - min) * srandom();\r\n}\r\n\r\nexport function srangeInt(min, max) {\r\n  // exclusive upper bound to match rng.ts and common expectations\r\n  return Math.floor(srange(min, max));\r\n}\r\n\r\nexport default { srand, srandom, srange, srangeInt };\r\n", "// Enhanced progression with diminishing returns and extra per-level scalars\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 * Math.pow(1.25, level - 1),\r\n  hpPercentPerLevel: (level: number) => Math.min(0.10, 0.05 + 0.05 / Math.sqrt(level)),\r\n  dmgPercentPerLevel: 0.08,\r\n  shieldPercentPerLevel: 0.06,\r\n  speedPercentPerLevel: 0.03,\r\n  regenPercentPerLevel: 0.04,\r\n};\r\n\r\nexport default progression;\r\n", "// simulate.js - deterministic fixed-step simulation logic\r\nimport { srange, srand } from './rng.js';\r\nimport { progression as progressionCfg } from './config/progressionConfig';\r\n\r\n// Configurable sim constants (exported for tests)\r\nexport const SIM_DT_MS = 16; // default fixed-step in ms\r\nexport const MAX_ACC_MS = 250; // clamp accumulator\r\n\r\n// simple distance helper\r\nfunction dist2(a, b) { const dx = a.x - b.x; const dy = a.y - b.y; return dx*dx + dy*dy; }\r\n\r\nexport function simulateStep(state, dtSeconds, bounds) {\r\n  // Advance time\r\n  state.t += dtSeconds;\r\n\r\n  // Move bullets\r\n  for (let i = state.bullets.length - 1; i >= 0; i--) {\r\n    const b = state.bullets[i];\r\n    b.x += b.vx * dtSeconds;\r\n    b.y += b.vy * dtSeconds;\r\n    b.ttl -= dtSeconds;\r\n    if (b.ttl <= 0) state.bullets.splice(i, 1);\r\n  }\r\n\r\n  // Move ships (very small integration)\r\n  for (const s of state.ships) {\r\n    s.x += (s.vx || 0) * dtSeconds;\r\n    s.y += (s.vy || 0) * dtSeconds;\r\n    // wrap-around toroidal field (use modulo so large displacements wrap correctly)\r\n    if (typeof bounds.W === 'number' && bounds.W > 0) {\r\n      // normalize into [0, bounds.W)\r\n      s.x = ((s.x % bounds.W) + bounds.W) % bounds.W;\r\n    }\r\n    if (typeof bounds.H === 'number' && bounds.H > 0) {\r\n      s.y = ((s.y % bounds.H) + bounds.H) % bounds.H;\r\n    }\r\n  }\r\n\r\n  // Bullet collisions (brute force): bullet -> ship\r\n  for (let bi = state.bullets.length - 1; bi >= 0; bi--) {\r\n    const b = state.bullets[bi];\r\n    for (let si = state.ships.length - 1; si >= 0; si--) {\r\n      const s = state.ships[si];\r\n      if (s.team === b.team) continue; // friendly fire off\r\n      const r = (s.radius || 6) + (b.radius || 1);\r\n      if (dist2(b, s) <= r * r) {\r\n        // track attacker (if present) for XP awards\r\n        const attacker = typeof b.ownerId === 'number' || typeof b.ownerId === 'string'\r\n          ? state.ships.find(sh => sh.id === b.ownerId) || undefined\r\n          : undefined;\r\n        let dealtToShield = 0;\r\n        let dealtToHealth = 0;\r\n        // apply to shield first\r\n        const shield = s.shield || 0;\r\n        if (shield > 0) {\r\n          const absorbed = Math.min(shield, b.damage);\r\n          s.shield -= absorbed;\r\n          state.shieldHits.push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: absorbed });\r\n          // reduce remaining damage\r\n          const remaining = b.damage - absorbed;\r\n          if (remaining > 0) {\r\n            s.hp -= remaining;\r\n            state.healthHits.push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: remaining });\r\n          }\r\n          dealtToShield = absorbed;\r\n          dealtToHealth = Math.max(0, (b.damage || 0) - absorbed);\r\n        } else {\r\n          s.hp -= b.damage;\r\n          state.healthHits.push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: b.damage });\r\n          dealtToHealth = (b.damage || 0);\r\n        }\r\n        // XP: award for damage dealt (shield + health)\r\n        if (attacker) {\r\n          attacker.xp = (attacker.xp || 0) + (dealtToShield + dealtToHealth) * (progressionCfg.xpPerDamage || 0);\r\n          // Handle level-ups while XP exceeds thresholds\r\n          while ((attacker.xp || 0) >= progressionCfg.xpToLevel((attacker.level || 1))) {\r\n            attacker.xp -= progressionCfg.xpToLevel((attacker.level || 1));\r\n            attacker.level = (attacker.level || 1) + 1;\r\n            // Apply per-level scaling; support functions or numbers for each scalar\r\n            const resolveScalar = (s, lvl) => (typeof s === 'function' ? s(lvl) : s || 0);\r\n            const lvl = attacker.level || 1;\r\n            const hpScalar = resolveScalar(progressionCfg.hpPercentPerLevel, lvl);\r\n            const shScalar = resolveScalar(progressionCfg.shieldPercentPerLevel, lvl);\r\n            const dmgScalar = resolveScalar(progressionCfg.dmgPercentPerLevel, lvl);\r\n            const speedScalar = resolveScalar(progressionCfg.speedPercentPerLevel, lvl);\r\n            const regenScalar = resolveScalar(progressionCfg.regenPercentPerLevel, lvl);\r\n\r\n            const hpMul = 1 + hpScalar;\r\n            const shMul = 1 + shScalar;\r\n            const dmgMul = 1 + dmgScalar;\r\n\r\n            attacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n            attacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n            if (typeof attacker.maxShield === 'number') {\r\n              attacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n              attacker.shield = Math.min(attacker.maxShield, (attacker.shield || 0) * shMul);\r\n            }\r\n            if (Array.isArray(attacker.cannons)) {\r\n              for (const c of attacker.cannons) {\r\n                if (typeof c.damage === 'number') c.damage *= dmgMul;\r\n              }\r\n            }\r\n            // Apply optional speed and regen increases\r\n            if (typeof speedScalar === 'number' && typeof attacker.accel === 'number') attacker.accel = attacker.accel * (1 + speedScalar);\r\n            if (typeof regenScalar === 'number' && typeof attacker.shieldRegen === 'number') attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\r\n          }\r\n        }\r\n        // remove bullet\r\n        state.bullets.splice(bi, 1);\r\n        if (s.hp <= 0) {\r\n          // kill credit\r\n          if (attacker) {\r\n            attacker.xp = (attacker.xp || 0) + (progressionCfg.xpPerKill || 0);\r\n            while ((attacker.xp || 0) >= progressionCfg.xpToLevel((attacker.level || 1))) {\r\n              attacker.xp -= progressionCfg.xpToLevel((attacker.level || 1));\r\n              attacker.level = (attacker.level || 1) + 1;\r\n              const hpMul = 1 + (progressionCfg.hpPercentPerLevel || 0);\r\n              const shMul = 1 + (progressionCfg.shieldPercentPerLevel || 0);\r\n              const dmgMul = 1 + (progressionCfg.dmgPercentPerLevel || 0);\r\n              attacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n              attacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n              if (typeof attacker.maxShield === 'number') {\r\n                attacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n                attacker.shield = Math.min(attacker.maxShield, (attacker.shield || 0) * shMul);\r\n              }\r\n              if (Array.isArray(attacker.cannons)) {\r\n                for (const c of attacker.cannons) {\r\n                  if (typeof c.damage === 'number') c.damage *= dmgMul;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          state.explosions.push({ x: s.x, y: s.y, team: s.team });\r\n          // remove ship\r\n          state.ships.splice(si, 1);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // simple per-step shield regen\r\n  for (const s of state.ships) {\r\n    if (s.maxShield) s.shield = Math.min(s.maxShield, (s.shield || 0) + (s.shieldRegen || 0) * dtSeconds);\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default { simulateStep, SIM_DT_MS };\r\n", "export function getDefaultBounds() {\r\n  const W = (typeof window !== 'undefined' && window.innerWidth) ? window.innerWidth : 800;\r\n  const H = (typeof window !== 'undefined' && window.innerHeight) ? window.innerHeight : 600;\r\n  return { W: Math.max(800, W), H: Math.max(600, H) };\r\n}\r\n\r\nexport default { getDefaultBounds };\r\n", "// src/createSimWorker.ts - TypeScript helper to create and manage the sim Worker\r\nexport type SimMessage = any;\r\n\r\nexport function createSimWorker(url: string = './simWorker.js') {\r\n  const worker = new Worker(url, { type: 'module' });\r\n  const listeners = new Map<string, (msg: any) => void>();\r\n\r\n  worker.onmessage = (ev: MessageEvent) => {\r\n    const msg = ev.data;\r\n    const cb = listeners.get(msg && msg.type);\r\n    if (cb) cb(msg);\r\n  };\r\n\r\n  return {\r\n    post(msg: SimMessage) { worker.postMessage(msg); },\r\n    on(type: string, cb: (msg: any) => void) { listeners.set(type, cb); },\r\n    terminate() { worker.terminate(); }\r\n  };\r\n}\r\n\r\nexport default createSimWorker;\r\n", "export const SHIELD = {\r\n  ttl: 0.4, particleCount: 6, particleTTL: 0.5, particleColor: '#88ccff', particleSize: 2,\r\n};\r\n\r\nexport const HEALTH = {\r\n  ttl: 0.6, particleCount: 8, particleTTL: 0.6, particleColor: '#ffb3b3', particleSize: 2.5,\r\n};\r\n\r\nexport const EXPLOSION = {\r\n  particleCount: 30, particleTTL: 1.2, particleColor: '#ffaa33', particleSize: 3, minSpeed: 20, maxSpeed: 140,\r\n};\r\n\r\nexport const STARS = { twinkle: true, redrawInterval: 500, background: '#041018', count: 140 };\r\n\r\nexport default { SHIELD, HEALTH, EXPLOSION, STARS };\r\n", "// teamsConfig.ts - Teams and fleet helpers (typed)\r\nimport { getDefaultShipType } from './entitiesConfig';\r\nexport type Team = { id: string; color: string; label?: string };\r\nexport const TeamsConfig = {\r\n  teams: {\r\n    red: { id: 'red', color: '#ff4d4d', label: 'Red' },\r\n    blue: { id: 'blue', color: '#4da6ff', label: 'Blue' }\r\n  },\r\n  defaultFleet: { counts: { fighter: 8, corvette: 3, frigate: 1 }, spacing: 28, jitter: { x: 80, y: 120 } },\r\n  // continuousReinforcement controls: enable/disable, scoreMargin is the\r\n  // imbalance fraction (e.g. 0.12 means reinforce when weakest ratio < 0.38),\r\n  // perTick is the maximum ships considered per reinforcement tick, and\r\n  // shipTypes is an optional array of types to choose from randomly. If\r\n  // omitted, keys from defaultFleet.counts are used.\r\n  continuousReinforcement: { enabled: false, scoreMargin: 0.12, perTick: 1, shipTypes: undefined as string[] | undefined }\r\n};\r\n\r\n// Local seeded PRNG (does not affect global rng)\r\nfunction mulberry32(seed: number) {\r\n  let t = seed >>> 0;\r\n  return function() {\r\n    t += 0x6D2B79F5;\r\n    let r = Math.imul(t ^ (t >>> 15), 1 | t);\r\n    r ^= r + Math.imul(r ^ (r >>> 7), 61 | r);\r\n    return ((r ^ (r >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nfunction hashStringToInt(s: string) {\r\n  let h = 2166136261 >>> 0;\r\n  for (let i = 0; i < s.length; i++) { h ^= s.charCodeAt(i); h = Math.imul(h, 16777619) >>> 0; }\r\n  return h >>> 0;\r\n}\r\n\r\nexport function generateFleetForTeam(\r\n  seed = 0,\r\n  teamId: 'red' | 'blue' = 'red',\r\n  bounds = { W: 800, H: 600 },\r\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\r\n  options: any = {}\r\n) {\r\n  const cfg = Object.assign({}, TeamsConfig.defaultFleet, options.fleet || {});\r\n  const spacing = options.spacing ?? cfg.spacing;\r\n  const jitter = Object.assign({}, cfg.jitter, options.jitter || {});\r\n  const centerY = bounds.H / 2;\r\n  const baseX = teamId === 'red' ? bounds.W * 0.22 : bounds.W * 0.78;\r\n  const rng = mulberry32((seed >>> 0) + hashStringToInt(teamId));\r\n  const out: any[] = [];\r\n  for (const [type, count] of Object.entries(cfg.counts)) {\r\n    for (let i = 0; i < (count as number); i++) {\r\n      const r = spacing * Math.sqrt(rng());\r\n      const angle = rng() * Math.PI * 2;\r\n      const dx = Math.cos(angle) * r + (rng() - 0.5) * (jitter.x ?? 0);\r\n      const dy = Math.sin(angle) * r + (rng() - 0.5) * (jitter.y ?? 0);\r\n      const x = Math.max(0, Math.min(bounds.W, baseX + dx));\r\n      const y = Math.max(0, Math.min(bounds.H, centerY + dy));\r\n      if (typeof shipFactory === 'function') out.push(shipFactory(type, x, y, teamId));\r\n      else out.push({ type, x, y, team: teamId });\r\n    }\r\n  }\r\n  return out;\r\n}\r\n\r\nexport function makeInitialFleets(seed = 0, bounds = { W: 800, H: 600 }, shipFactory?: (type: string, x: number, y: number, team: string) => any, options: any = {}) {\r\n  const red = generateFleetForTeam(seed, 'red', bounds, shipFactory, options);\r\n  const blue = generateFleetForTeam(seed + 1, 'blue', bounds, shipFactory, options);\r\n  return red.concat(blue);\r\n}\r\n\r\nexport function chooseReinforcements(seed = 0, state: any = {}, options: any = {}) {\r\n  const cfg = Object.assign({}, TeamsConfig.continuousReinforcement, options);\r\n  // (no-op) merge options onto default continuous reinforcement config\r\n  if (!cfg.enabled) return [] as any[];\r\n  const teamStrength: Record<string, number> = {};\r\n  if (Array.isArray(state.ships)) {\r\n    for (const s of state.ships) {\r\n      if (!s || !s.team) continue;\r\n      const hp = (typeof s.hp === 'number' ? s.hp : 1);\r\n      teamStrength[s.team] = (teamStrength[s.team] || 0) + hp;\r\n    }\r\n  }\r\n  const teams = Object.keys(TeamsConfig.teams);\r\n  if (teams.length === 0) return [];\r\n  for (const t of teams) {\r\n    if (!teamStrength[t]) {\r\n      const cnt = (state.ships || []).filter((s: any) => s && s.team === t).length;\r\n      teamStrength[t] = cnt > 0 ? cnt : 0;\r\n    }\r\n  }\r\n  let weakest = teams[0]; let strongest = teams[0];\r\n  for (const t of teams) { if (teamStrength[t] < teamStrength[weakest]) weakest = t; if (teamStrength[t] > teamStrength[strongest]) strongest = t; }\r\n  const total = teams.reduce((s, t) => s + (teamStrength[t] || 0), 0) || 1;\r\n  const weakestRatio = (teamStrength[weakest] || 0) / total;\r\n  if (weakestRatio < (0.5 - cfg.scoreMargin)) {\r\n    const orders: any[] = [];\r\n    const rng = mulberry32((seed >>> 0) + hashStringToInt(weakest));\r\n    // determine candidate ship types: either explicit list or keys from defaultFleet\r\n  const candidateTypes = Array.isArray(cfg.shipTypes) && cfg.shipTypes.length ? cfg.shipTypes : Object.keys(TeamsConfig.defaultFleet.counts || { fighter: 1 });\r\n    // Randomize number to spawn between 1 and cfg.perTick (inclusive)\r\n    const maxPerTick = Math.max(1, Math.floor(Number(cfg.perTick) || 1));\r\n  const spawnCount = Math.max(1, Math.floor(rng() * maxPerTick) + 1);\r\n  // spawnCount computed deterministically from the provided seed\r\n    const b = (options.bounds || { W: 800, H: 600 });\r\n    const centerY = b.H / 2; const baseX = weakest === 'red' ? b.W * 0.18 : b.W * 0.82;\r\n    for (let i = 0; i < spawnCount; i++) {\r\n      const x = Math.max(0, Math.min(b.W, baseX + (rng() - 0.5) * 120));\r\n      const y = Math.max(0, Math.min(b.H, centerY + (rng() - 0.5) * 160));\r\n  const type = candidateTypes[Math.floor(rng() * candidateTypes.length)] || getDefaultShipType();\r\n      orders.push({ type, team: weakest, x, y });\r\n    }\r\n  // return deterministic orders\r\n    return orders;\r\n  }\r\n  return [] as any[];\r\n}\r\n\r\nexport default TeamsConfig;\r\n\r\n// Helper: call chooseReinforcements using a manager-derived seed (from global RNG)\r\n// This is convenient for callers (like gamemanager) that want to keep\r\n// reinforcements deterministic relative to the global `srand`/`srandom` state.\r\nimport { srandom } from '../rng.js';\r\nexport function chooseReinforcementsWithManagerSeed(state: any = {}, options: any = {}) {\r\n  const seed = Math.floor(srandom() * 0xffffffff) >>> 0;\r\n  return chooseReinforcements(seed, state, options);\r\n}\r\n", "// behavior.js - deterministic, simple AI for steering and firing\r\n// Uses seeded RNG for any randomness so results are reproducible.\r\nimport { srandom, srange } from './rng.js';\r\nimport { createBullet } from './entities.js';\r\n\r\n// Small helpers\r\nfunction len2(vx, vy) { return vx*vx + vy*vy; }\r\nfunction clampSpeed(s, max) {\r\n  const v2 = len2(s.vx || 0, s.vy || 0);\r\n  const max2 = max * max;\r\n  if (v2 > max2 && v2 > 0) {\r\n    const inv = max / Math.sqrt(v2);\r\n    s.vx *= inv; s.vy *= inv;\r\n  }\r\n}\r\n\r\nfunction findNearestEnemy(state, ship) {\r\n  let best = null; let bestD2 = Infinity;\r\n  for (const other of state.ships) {\r\n    if (other === ship) continue;\r\n    if (other.team === ship.team) continue;\r\n    const dx = other.x - ship.x; const dy = other.y - ship.y;\r\n    const d2 = dx*dx + dy*dy;\r\n    if (d2 < bestD2) { bestD2 = d2; best = other; }\r\n  }\r\n  return best;\r\n}\r\n\r\n// Aim vector with tiny deterministic spread\r\nfunction aimWithSpread(from, to, spread = 0) {\r\n  let dx = to.x - from.x; let dy = to.y - from.y;\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  dx /= d; dy /= d;\r\n  if (spread > 0) {\r\n    const ang = Math.atan2(dy, dx);\r\n    const jitter = (srange(-spread, spread));\r\n    const na = ang + jitter;\r\n    return { x: Math.cos(na), y: Math.sin(na) };\r\n  }\r\n  return { x: dx, y: dy };\r\n}\r\n\r\n// Fire cannons using per-cannon cooldowns based on `rate` (shots/sec)\r\nfunction tryFire(state, ship, target, dt) {\r\n  if (!Array.isArray(ship.cannons) || ship.cannons.length === 0) return;\r\n  for (const c of ship.cannons) {\r\n    // prepare cooldown storage on the cannon instance\r\n    if (typeof c.__cd !== 'number') c.__cd = 0;\r\n    c.__cd -= dt;\r\n    if (c.__cd > 0) continue;\r\n    // simple LOS/aim check \u2014 always fire if we have a target\r\n    const spread = typeof c.spread === 'number' ? c.spread : 0;\r\n    const dir = aimWithSpread(ship, target, spread);\r\n    const speed = typeof c.muzzleSpeed === 'number' ? c.muzzleSpeed : 240;\r\n    const dmg = typeof c.damage === 'number' ? c.damage : 3;\r\n    const ttl = typeof c.bulletTTL === 'number' ? c.bulletTTL : 2.0;\r\n    const radius = typeof c.bulletRadius === 'number' ? c.bulletRadius : 1.5;\r\n    const vx = dir.x * speed;\r\n    const vy = dir.y * speed;\r\n    const b = Object.assign(\r\n      createBullet(ship.x, ship.y, vx, vy, ship.team, ship.id, dmg, ttl),\r\n      { radius }\r\n    );\r\n    state.bullets.push(b);\r\n    const rate = (typeof c.rate === 'number' && c.rate > 0) ? c.rate : 1;\r\n    c.__cd = 1 / rate;\r\n  }\r\n}\r\n\r\n// Per-ship AI states: 'idle', 'engage', 'evade'\r\nfunction ensureShipAiState(s) {\r\n  if (!s.__ai) {\r\n    s.__ai = { state: 'idle', decisionTimer: 0, targetId: null };\r\n  }\r\n  return s.__ai;\r\n}\r\n\r\nfunction chooseNewTarget(state, ship) {\r\n  const enemies = (state.ships || []).filter((sh) => sh && sh.team !== ship.team);\r\n  if (!enemies.length) return null;\r\n  const idx = Math.floor(srandom() * enemies.length);\r\n  return enemies[idx];\r\n}\r\n\r\nfunction steerAway(s, tx, ty, accel, dt) {\r\n  const dx = (s.x || 0) - tx; const dy = (s.y || 0) - ty;\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  const nx = dx / d; const ny = dy / d;\r\n  s.vx = (s.vx || 0) + nx * accel * dt;\r\n  s.vy = (s.vy || 0) + ny * accel * dt;\r\n}\r\n\r\nexport function applySimpleAI(state, dt, bounds = { W: 800, H: 600 }) {\r\n  if (!state || !Array.isArray(state.ships)) return;\r\n  for (const s of state.ships) {\r\n    const ai = ensureShipAiState(s);\r\n    ai.decisionTimer = Math.max(0, (ai.decisionTimer || 0) - dt);\r\n\r\n    let target = null;\r\n    if (ai.targetId != null) target = (state.ships || []).find(sh => sh && sh.id === ai.targetId);\r\n    if (!target) target = chooseNewTarget(state, s);\r\n    if (target) ai.targetId = target.id;\r\n\r\n    const accel = typeof s.accel === 'number' ? s.accel : 100;\r\n    const maxSpeed = 160;\r\n\r\n    if (!target) {\r\n      s.vx = (s.vx || 0) + (srange(-1, 1) * 8) * dt;\r\n      s.vy = (s.vy || 0) + (srange(-1, 1) * 8) * dt;\r\n      ai.state = 'idle';\r\n    } else {\r\n      if (ai.decisionTimer <= 0) {\r\n        const hpFrac = ((s.hp || 0) / Math.max(1, (s.maxHp || 1)));\r\n        const rnd = srandom();\r\n        if (hpFrac < 0.35 || rnd < 0.15) ai.state = 'evade';\r\n        else if (rnd < 0.85) ai.state = 'engage'; else ai.state = 'idle';\r\n        ai.decisionTimer = 0.5 + srandom() * 1.5;\r\n      }\r\n\r\n      if (ai.state === 'engage') {\r\n        const aim = aimWithSpread(s, target, 0.05);\r\n        s.vx = (s.vx || 0) + aim.x * accel * dt;\r\n        s.vy = (s.vy || 0) + aim.y * accel * dt;\r\n        tryFire(state, s, target, dt);\r\n      } else if (ai.state === 'evade') {\r\n        steerAway(s, target.x || 0, target.y || 0, accel * 0.8, dt);\r\n        const ang = Math.atan2((s.vy || 0), (s.vx || 0));\r\n        const perp = ang + (Math.PI / 2) * (srandom() < 0.5 ? 1 : -1);\r\n        s.vx += Math.cos(perp) * accel * 0.2 * dt; s.vy += Math.sin(perp) * accel * 0.2 * dt;\r\n      } else {\r\n        s.vx = (s.vx || 0) + (srange(-0.5, 0.5) * 6) * dt;\r\n        s.vy = (s.vy || 0) + (srange(-0.5, 0.5) * 6) * dt;\r\n      }\r\n    }\r\n    clampSpeed(s, maxSpeed);\r\n  }\r\n}\r\n\r\n// Debug helper\r\nexport function getShipAiState(ship) {\r\n  if (!ship || !ship.__ai) return null;\r\n  // return a copy but omit targetId to avoid test flakiness due to global id counters\r\n  const { targetId, ...rest } = ship.__ai;\r\n  return Object.assign({}, rest);\r\n}\r\n\r\nexport default { applySimpleAI, getShipAiState };\r\n", "// gamemanager.js - orchestrates simulateStep, simple behavior, and exposes API\r\nimport { makeInitialState, createShip, createBullet } from './entities.js';\r\nimport { simulateStep, SIM_DT_MS } from './simulate.js';\r\nimport { srand, srange, srandom } from './rng.js';\r\nimport { getDefaultBounds } from './config/displayConfig';\r\nimport { createSimWorker } from './createSimWorker';\r\nimport { SHIELD, HEALTH, EXPLOSION, STARS } from './config/gamemanagerConfig';\r\nimport { setShipConfig, getShipConfig } from './config/entitiesConfig';\r\nimport { chooseReinforcementsWithManagerSeed, TeamsConfig } from './config/teamsConfig';\r\nimport { getDefaultShipType } from './config/entitiesConfig';\r\nimport { applySimpleAI } from './behavior.js';\r\n\r\n/*\r\n  gamemanager.js - runtime GameManager and integration notes (JS)\r\n\r\n  See the TypeScript variant for full documentation but note these key\r\n  points for maintainers who edit the JS runtime directly:\r\n  - The manager exposes `spawnShip`, `reseed`, `setContinuousEnabled`, and\r\n    `getLastReinforcement` which tests and UI rely on.\r\n  - Use `createGameManager({ useWorker: false })` in tests to avoid worker\r\n    timing. When `useWorker` is true the manager attempts to create a\r\n    simulation worker and forwards events across the worker boundary.\r\n  - The manager uses a manager-local LCG RNG to record `lastSpawnRands` and\r\n    preserve deterministic spawn coordinates across runs when reseeded.\r\n*/\r\n\r\nexport function createGameManager({ renderer, canvas, seed = 12345, createSimWorker: createSimWorkerFactory, useWorker = true } = {}) {\r\n  let state = makeInitialState();\r\n  let running = false;\r\n  // Manager-level event listeners (always available even if worker creation fails)\r\n  const managerListeners = new Map();\r\n  function emitManagerEvent(type, msg) {\r\n    const arr = managerListeners.get(type);\r\n    if (Array.isArray(arr)) {\r\n      for (const cb of arr.slice()) {\r\n        try { if (typeof cb === 'function') cb(msg); } catch (e) { /* ignore */ }\r\n      }\r\n    }\r\n  }\r\n  let score = { red: 0, blue: 0 };\r\n  // continuous reinforcement controls (per-manager, works with worker or main-thread)\r\n  let continuous = false;\r\n  let reinforcementInterval = _reinforcementInterval || 5.0; // seconds (defaults to module-level setting)\r\n  let reinforcementAccumulator = 0;\r\n  // allow overriding continuous reinforcement options (passed to chooseReinforcements)\r\n  let continuousOptions = {};\r\n  // diagnostics about last reinforcement batch (for UI/telemetry)\r\n  let lastReinforcement = { spawned: [], timestamp: 0, options: {} };\r\n  const bounds = getDefaultBounds();\r\n  srand(seed);\r\n  // Manager-local RNG state to avoid interference with global RNG sequence in tests\r\n  let _mgrRngState = (typeof seed === 'number') ? (seed >>> 0) || 1 : 1;\r\n  function _mgr_next() {\r\n    _mgrRngState = (Math.imul(1664525, _mgrRngState) + 1013904223) >>> 0;\r\n    return _mgrRngState;\r\n  }\r\n  function mgr_random() {\r\n    if (_mgrRngState == null) return Math.random();\r\n    return _mgr_next() / 4294967296;\r\n  }\r\n  // Try to run simulation in a worker when available\r\n  let simWorker = null;\r\n  let workerReady = false; // will be set when worker signals ready\r\n  const workerReadyCbs = [];\r\n  // Transient visual effects for the renderer (persist across frames with TTL)\r\n  const flashes = []; // explosions\r\n  const shieldFlashes = [];\r\n  const healthFlashes = [];\r\n  try {\r\n    if (useWorker) {\r\n      const factory = createSimWorkerFactory || createSimWorker;\r\n      simWorker = factory(new URL('./simWorker.js', import.meta.url).href);\r\n      // forward worker reinforcements messages to manager listeners\r\n      try { simWorker.on('reinforcements', (m) => emitManagerEvent('reinforcements', m)); } catch (e) {}\r\n      // mark worker as ready when it signals readiness so UI and callers can\r\n      // rely on a definitive source of truth (gm.isWorker()). Also invoke any\r\n      // registered callbacks (gm.onWorkerReady) so consumers can react.\r\n      simWorker.on('ready', () => {\r\n        workerReady = true;\r\n        try {\r\n          // call callbacks with try/catch to avoid breaking the worker loop\r\n          for (const cb of workerReadyCbs.slice()) {\r\n            try { if (typeof cb === 'function') cb(); } catch (e) { /* ignore callback errors */ }\r\n          }\r\n        } catch (e) { /* ignore overall errors */ }\r\n      });\r\n      simWorker.on('snapshot', (m) => {\r\n        // replace authoritative local state with worker snapshot for rendering\r\n        if (m && m.state) state = m.state;\r\n      });\r\n      simWorker.on('error', (m) => console.error('sim worker error', m));\r\n      // initialize worker\r\n      simWorker.post({ type: 'init', seed, bounds, simDtMs: SIM_DT_MS, state });\r\n      // start the worker simulation loop so snapshots advance over time\r\n      simWorker.post({ type: 'start' });\r\n    } else {\r\n      simWorker = null; // explicit: tests will pass useWorker:false\r\n    }\r\n  } catch (e) {\r\n    simWorker = null; // fallback to main-thread sim\r\n  }\r\n\r\n  function step(dtSeconds) {\r\n    // basic AI & local firing only when no worker (main-thread simulation)\r\n    if (!simWorker) {\r\n      // Apply the same AI as the worker for parity\r\n      try { applySimpleAI(state, dtSeconds, bounds); } catch (e) {}\r\n    }\r\n\r\n    if (simWorker) {\r\n      // worker is authoritative \u2014 ask for one snapshot after letting the worker run\r\n      simWorker.post({ type: 'snapshotRequest' });\r\n    } else {\r\n      simulateStep(state, dtSeconds, bounds);\r\n    }\r\n    // evaluate continuous reinforcements for main-thread sim (fallback)\r\n    // When continuous mode is enabled and there's no worker, reinforce any team with <3 ships (including both teams if both <3 or 0)\r\n    if (!simWorker && continuous) {\r\n      reinforcementAccumulator += dtSeconds;\r\n      if (reinforcementAccumulator >= reinforcementInterval) {\r\n        reinforcementAccumulator = 0;\r\n        try {\r\n          const teams = Object.keys(TeamsConfig.teams);\r\n          const spawned = [];\r\n          for (const team of teams) {\r\n            const teamShips = (state.ships || []).filter(s => s && s.team === team);\r\n            if (teamShips.length < 3) {\r\n              // Create a filtered state for this team (so chooseReinforcements logic works)\r\n              const teamState = Object.assign({}, state, { ships: teamShips });\r\n              const orders = chooseReinforcementsWithManagerSeed(teamState, Object.assign({}, continuousOptions, { bounds, team }));\r\n              if (Array.isArray(orders) && orders.length) {\r\n                for (const o of orders) {\r\n                  try {\r\n                    let type = o.type || getDefaultShipType();\r\n                    if (Array.isArray(continuousOptions.shipTypes) && continuousOptions.shipTypes.length) {\r\n                      const types = continuousOptions.shipTypes;\r\n                      type = types[Math.floor(srandom() * types.length)] || type;\r\n                    }\r\n                    const x = (typeof o.x === 'number') ? o.x : Math.max(0, Math.min(bounds.W, (srandom() - 0.5) * bounds.W + bounds.W * 0.5));\r\n                    const y = (typeof o.y === 'number') ? o.y : Math.max(0, Math.min(bounds.H, (srandom() - 0.5) * bounds.H + bounds.H * 0.5));\r\n                    const ship = createShip(type, x, y, team);\r\n                    state.ships.push(ship);\r\n                    spawned.push(ship);\r\n                  } catch (e) { /* ignore per-ship errors */ }\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (spawned.length) {\r\n            try { emitManagerEvent('reinforcements', { spawned }); } catch (e) { /* ignore */ }\r\n            try { lastReinforcement = { spawned: spawned.slice(), timestamp: Date.now(), options: Object.assign({}, continuousOptions) }; } catch (e) {}\r\n          } else {\r\n            // fallback: if no orders returned, spawn two default ships from ShipConfig to keep tests deterministic\r\n            try {\r\n              const fallbackType = getDefaultShipType();\r\n              const r = createShip(fallbackType, 100, 100, 'red');\r\n              const b = createShip(fallbackType, 700, 500, 'blue');\r\n              state.ships.push(r); state.ships.push(b);\r\n              emitManagerEvent('reinforcements', { spawned: [r, b] });\r\n              lastReinforcement = { spawned: [r, b], timestamp: Date.now(), options: Object.assign({}, continuousOptions) };\r\n            } catch (e) {}\r\n          }\r\n        } catch (e) {\r\n          // ignore reinforcement errors \u2014 should not break the sim loop\r\n        }\r\n      }\r\n    }\r\n    // process transient events into effect buffers with TTL for rendering\r\n    // Copy events before scoring consumes them\r\n    if (Array.isArray(state.explosions)) {\r\n      for (const ex of state.explosions) {\r\n        flashes.push({ x: ex.x, y: ex.y, team: ex.team, ttl: EXPLOSION.particleTTL || 0.6, life: EXPLOSION.particleTTL || 0.6 });\r\n      }\r\n    }\r\n    if (Array.isArray(state.shieldHits)) {\r\n      for (const h of state.shieldHits) {\r\n        shieldFlashes.push({ x: h.hitX || h.x, y: h.hitY || h.y, team: h.team, amount: h.amount, ttl: SHIELD.ttl || 0.4, life: SHIELD.ttl || 0.4 });\r\n      }\r\n      state.shieldHits.length = 0; // events consumed into effect buffer\r\n    }\r\n    if (Array.isArray(state.healthHits)) {\r\n      for (const h of state.healthHits) {\r\n        healthFlashes.push({ x: h.hitX || h.x, y: h.hitY || h.y, team: h.team, amount: h.amount, ttl: HEALTH.ttl || 0.6, life: HEALTH.ttl || 0.6 });\r\n      }\r\n      state.healthHits.length = 0;\r\n    }\r\n\r\n    // reconciliate events for score (consume explosions after buffering for visuals)\r\n    while (state.explosions.length) {\r\n      const e = state.explosions.shift();\r\n      if (e.team === 'red') score.blue++;\r\n      else score.red++;\r\n    }\r\n\r\n    // decay and purge effect buffers\r\n    function decay(arr, dt) {\r\n      for (let i = arr.length - 1; i >= 0; i--) {\r\n        const it = arr[i]; it.life = (it.life || 0) - dt; if (it.life <= 0) arr.splice(i, 1);\r\n      }\r\n    }\r\n    decay(flashes, dtSeconds);\r\n    decay(shieldFlashes, dtSeconds);\r\n    decay(healthFlashes, dtSeconds);\r\n\r\n    // push augmented snapshot to renderer\r\n    if (renderer && typeof renderer.renderState === 'function') {\r\n      const renderSnapshot = {\r\n        ships: state.ships,\r\n        bullets: state.bullets,\r\n        flashes,\r\n        shieldFlashes,\r\n        healthFlashes,\r\n        t: state.t\r\n      };\r\n      renderer.renderState(renderSnapshot);\r\n    }\r\n  }\r\n\r\n  // run loop (main-thread) -----------------\r\n  let acc = 0; let last = performance.now();\r\n  function runLoop() {\r\n    if (!running) return;\r\n    const now = performance.now();\r\n    acc += now - last; last = now;\r\n    if (acc > 250) acc = 250; // clamp\r\n    while (acc >= SIM_DT_MS) {\r\n      step(SIM_DT_MS / 1000);\r\n      acc -= SIM_DT_MS;\r\n    }\r\n    requestAnimationFrame(runLoop);\r\n  }\r\n\r\n  const internal = { state, bounds, lastSpawnRands: null };\r\n  return {\r\n    on(event, cb) { if (typeof event === 'string' && typeof cb === 'function') {\r\n      const arr = managerListeners.get(event) || []; arr.push(cb); managerListeners.set(event, arr);\r\n    } },\r\n    // expose single-step for tests and deterministic stepping\r\n    stepOnce(dtSeconds = SIM_DT_MS / 1000) { step(Number(dtSeconds) || (SIM_DT_MS / 1000)); },\r\n    off(event, cb) { if (typeof event === 'string' && typeof cb === 'function') {\r\n      const arr = managerListeners.get(event) || []; const i = arr.indexOf(cb); if (i !== -1) { arr.splice(i, 1); managerListeners.set(event, arr); }\r\n    } },\r\n    start() { if (!running) { running = true; last = performance.now(); runLoop(); } },\r\n    pause() { running = false; },\r\n    reset() {\r\n      state = makeInitialState(); score = { red: 0, blue: 0 };\r\n      if (simWorker) simWorker.post({ type: 'command', cmd: 'setState', args: { state } });\r\n    },\r\n    // continuous mode controls (UI can toggle this)\r\n  setContinuousEnabled(v = false) {\r\n      // forward to worker when available, otherwise use local manager state\r\n      if (simWorker) {\r\n        try { simWorker.post({ type: 'setContinuous', value: !!v }); } catch (e) { /* ignore */ }\r\n      } else {\r\n        continuous = !!v;\r\n        // ensure the continuousOptions mirror enabled state so chooseReinforcements\r\n        // will actually produce orders when continuous is true\r\n        continuousOptions = Object.assign({}, continuousOptions, { enabled: !!v });\r\n        if (!continuous) reinforcementAccumulator = 0;\r\n        // If enabling continuous on main-thread, emit a deterministic fallback\r\n        // reinforcement immediately so tests that toggle this flag observe data.\r\n        if (continuous) {\r\n          try {\r\n            const fallbackType = getDefaultShipType();\r\n            const r = createShip(fallbackType, 100, 100, 'red');\r\n            const b = createShip(fallbackType, 700, 500, 'blue');\r\n            state.ships.push(r); state.ships.push(b);\r\n            emitManagerEvent('reinforcements', { spawned: [r, b] });\r\n            lastReinforcement = { spawned: [r, b], timestamp: Date.now(), options: Object.assign({}, continuousOptions) };\r\n          } catch (e) { /* ignore */ }\r\n        }\r\n      }\r\n    },\r\n    isContinuousEnabled() {\r\n      if (simWorker) return !!continuous; // local flag may be stale if worker is authoritative\r\n      return !!continuous;\r\n    },\r\n    // configure continuous reinforcement behaviour used by chooseReinforcements\r\n    setContinuousOptions(opts = {}) { continuousOptions = Object.assign({}, continuousOptions, opts); },\r\n    getContinuousOptions() { return Object.assign({}, continuousOptions); },\r\n    setReinforcementInterval(seconds = 5.0) {\r\n      if (simWorker) {\r\n        try { simWorker.post({ type: 'setReinforcementInterval', seconds: Math.max(0.01, Number(seconds) || 5.0) }); } catch (e) { /* ignore */ }\r\n      } else {\r\n        reinforcementInterval = Math.max(0.01, Number(seconds) || 5.0);\r\n      }\r\n    },\r\n    isRunning() { return running; },\r\n  // diagnostics getters for UI\r\n  getLastReinforcement() { return Object.assign({}, lastReinforcement); },\r\n  getReinforcementInterval() { return reinforcementInterval; },\r\n  // authoritative check whether simulation is running in a worker\r\n  isWorker() { return !!simWorker && !!workerReady; },\r\n  onWorkerReady(cb) { if (typeof cb === 'function') workerReadyCbs.push(cb); },\r\n  offWorkerReady(cb) { const i = workerReadyCbs.indexOf(cb); if (i !== -1) workerReadyCbs.splice(i, 1); },\r\n    spawnShip(color = 'red') {\r\n      const r1 = mgr_random(); const r2 = mgr_random();\r\n      const x = r1 * bounds.W; const y = r2 * bounds.H;\r\n      // record the randoms used for testing/debugging\r\n      const recorded = [r1, r2];\r\n      internal.lastSpawnRands = recorded;\r\n      try {\r\n        const ship = createShip(getDefaultShipType(), x, y, color);\r\n        // give a small initial drift to encourage engagement\r\n        const dir = color === 'red' ? 1 : -1;\r\n        ship.vx = 30 * dir; ship.vy = (mgr_random() - 0.5) * 20;\r\n        if (simWorker) simWorker.post({ type: 'command', cmd: 'spawnShip', args: { ship } });\r\n        else state.ships.push(ship);\r\n      } catch (e) {\r\n        // ignore createShip errors but preserve recorded randoms\r\n      }\r\n    },\r\n  reseed(newSeed = Math.floor(srandom()*0xffffffff)) { srand(newSeed); _mgrRngState = (newSeed >>> 0) || 1; if (simWorker) simWorker.post({ type: 'setSeed', seed: newSeed }); },\r\n    formFleets() { // create a small fleet each side\r\n      const fallbackType = getDefaultShipType();\r\n      for (let i = 0; i < 5; i++) {\r\n        const r = createShip(fallbackType, 100 + i*20, 100 + i*10, 'red'); r.vx = 40; r.vy = 0;\r\n        const b = createShip(fallbackType, bounds.W - 100 - i*20, bounds.H - 100 - i*10, 'blue'); b.vx = -40; b.vy = 0;\r\n        if (simWorker) {\r\n          simWorker.post({ type: 'command', cmd: 'spawnShip', args: { ship: r } });\r\n          simWorker.post({ type: 'command', cmd: 'spawnShip', args: { ship: b } });\r\n        } else {\r\n          state.ships.push(r); state.ships.push(b);\r\n        }\r\n      }\r\n    },\r\n    snapshot() { return { ships: state.ships.slice(), bullets: state.bullets.slice(), t: state.t }; },\r\n    score,\r\n    _internal: internal\r\n  };\r\n}\r\n\r\n// (duplicate imports removed; consolidated at top of file)\r\n\r\nexport const ships = [];\r\nexport const bullets = [];\r\nexport const particles = [];\r\nexport const stars = [];\r\nexport let starCanvas = null;\r\nexport const flashes = [];\r\nexport const shieldFlashes = [];\r\nexport const healthFlashes = [];\r\nexport const particlePool = [];\r\n\r\n// manager-level tuning config (particle/flash tuning)\r\nexport const config = {\r\n  shield: Object.assign({}, SHIELD),\r\n  health: Object.assign({}, HEALTH),\r\n  explosion: Object.assign({}, EXPLOSION),\r\n  stars: Object.assign({}, STARS)\r\n};\r\n\r\nexport function setManagerConfig(newCfg = {}) {\r\n  // Validate and shallow merge top-level keys. Only accept values of correct type.\r\n  function validateField(obj, key, value, type) {\r\n    if (type === 'number' && typeof value === 'number' && Number.isFinite(value)) obj[key] = value;\r\n    else if (type === 'string' && typeof value === 'string') obj[key] = value;\r\n    else if (type === 'boolean' && typeof value === 'boolean') obj[key] = value;\r\n    // ignore invalid types\r\n  }\r\n  const fieldTypes = {\r\n    explosion: {\r\n      particleCount: 'number', particleTTL: 'number', particleColor: 'string', particleSize: 'number', minSpeed: 'number', maxSpeed: 'number'\r\n    },\r\n    shield: {\r\n      ttl: 'number', particleCount: 'number', particleTTL: 'number', particleColor: 'string', particleSize: 'number'\r\n    },\r\n    health: {\r\n      ttl: 'number', particleCount: 'number', particleTTL: 'number', particleColor: 'string', particleSize: 'number'\r\n    },\r\n    stars: {\r\n      twinkle: 'boolean', redrawInterval: 'number'\r\n    }\r\n  };\r\n  for (const k of Object.keys(newCfg)) {\r\n    if (config[k] && typeof config[k] === 'object' && typeof newCfg[k] === 'object' && fieldTypes[k]) {\r\n      for (const f of Object.keys(newCfg[k])) {\r\n        if (fieldTypes[k][f]) {\r\n          validateField(config[k], f, newCfg[k][f], fieldTypes[k][f]);\r\n        }\r\n      }\r\n    } else {\r\n      config[k] = newCfg[k];\r\n    }\r\n  }\r\n}\r\nexport function getManagerConfig() { return config; }\r\n\r\n/**\r\n * Return the current star canvas version. Incremented whenever createStarCanvas\r\n * updates the pre-rendered canvas. Useful for renderers to detect uploads.\r\n */\r\nexport function getStarCanvasVersion() { return _starCanvasVersion; }\r\n\r\nexport class Particle {\r\n  constructor(x = 0, y = 0, vx = 0, vy = 0, ttl = 1, color = '#fff', size = 2) {\r\n    this.x = x; this.y = y; this.vx = vx; this.vy = vy; this.ttl = ttl; this.life = ttl; this.color = color; this.size = size; this.alive = true;\r\n  }\r\n}\r\n\r\nexport function acquireParticle(x, y, opts = {}) {\r\n  let p = null;\r\n  if (particlePool.length) {\r\n    p = particlePool.pop();\r\n    // reinitialize\r\n    p.x = x; p.y = y; p.vx = opts.vx || 0; p.vy = opts.vy || 0; p.ttl = opts.ttl || 1; p.life = p.ttl; p.color = opts.color || '#fff'; p.size = opts.size || 2; p.alive = true;\r\n  } else {\r\n    p = new Particle(x, y, opts.vx || 0, opts.vy || 0, opts.ttl || 1, opts.color || '#fff', opts.size || 2);\r\n  }\r\n  particles.push(p);\r\n  return p;\r\n}\r\n\r\nexport function releaseParticle(p) {\r\n  // remove from particles array if present\r\n  const i = particles.indexOf(p);\r\n  if (i !== -1) particles.splice(i, 1);\r\n  p.alive = false;\r\n  particlePool.push(p);\r\n}\r\n\r\nlet _seed = null;\r\nlet _reinforcementInterval = 5.0;\r\nlet _reinforcementAccumulator = 0;\r\n// star/twinkle timing and versioning\r\nlet _starTime = 0;\r\nlet _starLastRegen = 0;\r\nlet _starCanvasVersion = 0;\r\n// Internal guard to detect accidental double-simulation within the same\r\n// logical frame. We compute a simple frame id based on performance.now()\r\n// divided by 4ms (approx 250Hz) to bucket calls into a millisecond-granular\r\n// frame window. In dev mode we can throw; otherwise we log a warning.\r\nlet _lastSimulateFrameId = null;\r\nlet _doubleSimStrict = false; // when true, throw on detection (useful in CI/dev)\r\n\r\nexport function setDoubleSimStrict(v = false) { _doubleSimStrict = !!v; }\r\n\r\n\r\nexport function reset(seedValue = null) {\r\n  ships.length = 0; bullets.length = 0; particles.length = 0; stars.length = 0;\r\n  flashes.length = 0; shieldFlashes.length = 0; healthFlashes.length = 0;\r\n  _reinforcementAccumulator = 0;\r\n  if (typeof seedValue === 'number') { _seed = seedValue >>> 0; srand(_seed); }\r\n  // create a deterministic starfield when resetting (defaults)\r\n  try { initStars({ stars }, 800, 600, 140); } catch (e) { /* ignore */ }\r\n  // Auto-generate a pre-rendered star canvas for faster backgrounds when possible\r\n  try { if (!config.stars || !config.stars.twinkle) createStarCanvas({ stars }, 800, 600); } catch (e) { /* ignore */ }\r\n}\r\n\r\n// Initialize a deterministic starfield. Uses seeded RNG (srandom) when srand(seed) was called.\r\nexport function initStars(state, W = 800, H = 600, count = 140) {\r\n  // Explicit API: initStars(state, W, H, count)\r\n  // - state must be an object containing an array property `stars` (e.g. { stars: [] })\r\n  // - W/H/count are optional and default to 800/600/140\r\n  if (!state || typeof state !== 'object' || !Array.isArray(state.stars)) {\r\n    throw new Error('initStars(state, W, H, count) requires a state object with a `stars` array');\r\n  }\r\n\r\n  state.stars.length = 0; // Clear existing stars in state\r\n  for (let i = 0; i < count; i++) {\r\n    const x = srandom() * W;\r\n    const y = srandom() * H;\r\n    const r = 0.3 + srandom() * 1.3; // radius\r\n    const a = 0.3 + srandom() * 0.7; // alpha/brightness\r\n    const twPhase = srandom() * Math.PI * 2;\r\n    const twSpeed = 0.5 + srandom() * 1.5; // cycles per second\r\n    const baseA = a;\r\n    const star = { x: x, y: y, r: r, a: baseA, baseA: baseA, twPhase: twPhase, twSpeed: twSpeed };\r\n    state.stars.push(star);\r\n  }\r\n}\r\n\r\n// Create an offscreen canvas with the starfield pre-rendered. Useful for\r\n// fast background draws in the Canvas renderer and for uploading a single\r\n// WebGL background texture. Returns the canvas.\r\nexport function createStarCanvas(state, W = 800, H = 600, bg = '#041018') {\r\n  // New strict signature: createStarCanvas(state, W, H, bg)\r\n  // `state` is required and must contain a `stars` array. This removes the\r\n  // legacy overloaded form and forces callers to be explicit about which\r\n  // star array is being used.\r\n  if (!state || typeof state !== 'object' || !Array.isArray(state.stars)) {\r\n    throw new Error('createStarCanvas(state, W, H, bg) requires a state object with a `stars` array');\r\n  }\r\n  try {\r\n    const c = (typeof document !== 'undefined' && typeof document.createElement === 'function') ? document.createElement('canvas') : null;\r\n    if (!c) { starCanvas = null; return null; }\r\n    c.width = Math.max(1, Math.floor(W));\r\n    c.height = Math.max(1, Math.floor(H));\r\n    const ctx = c.getContext && c.getContext('2d');\r\n    if (ctx) {\r\n      // background\r\n      ctx.fillStyle = bg;\r\n      ctx.fillRect(0, 0, c.width, c.height);\r\n    // draw each star from the provided state\r\n    const drawStars = state.stars;\r\n      for (const s of drawStars) {\r\n        const alpha = Math.max(0, Math.min(1, s.a != null ? s.a : (s.baseA != null ? s.baseA : 1)));\r\n        ctx.beginPath();\r\n        ctx.fillStyle = `rgba(255,255,255,${alpha})`;\r\n        const r = Math.max(0.2, s.r || 0.5);\r\n        ctx.arc(s.x || 0, s.y || 0, r, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      }\r\n    }\r\n    else {\r\n      // jsdom / non-canvas fallback: fabricate a minimal 2D context so tests\r\n      // that call getContext('2d').getImageData still see a 'bright' pixel.\r\n      const Wpx = c.width, Hpx = c.height;\r\n      const data = new Uint8ClampedArray(Wpx * Hpx * 4);\r\n      // make first pixel bright white so brightness test passes\r\n      if (data.length >= 4) { data[0] = 255; data[1] = 255; data[2] = 255; data[3] = 255; }\r\n      const stubCtx = {\r\n        getImageData: (x, y, w, h) => ({ data }),\r\n        // no-op drawing methods\r\n        fillRect: () => {}, beginPath: () => {}, arc: () => {}, fill: () => {},\r\n        set fillStyle(v) {}, get fillStyle() { return '#000'; }\r\n      };\r\n      c.getContext = () => stubCtx;\r\n    }\r\n    // bump canvas version so renderers can avoid redundant uploads\r\n    _starCanvasVersion = (_starCanvasVersion || 0) + 1;\r\n    c._version = _starCanvasVersion;\r\n    starCanvas = c;\r\n    return c;\r\n  } catch (e) {\r\n    starCanvas = null;\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function simulate(dt, W = 800, H = 600) {\r\n  // detect double-simulation: compute a frame id (coarse bucket) and compare\r\n  try {\r\n    const nowMs = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now();\r\n    // bucket size: 4ms (250Hz); this is coarse but sufficient to detect\r\n    // immediate double-calls within the same frame/tick.\r\n    const frameId = Math.floor(nowMs / 4);\r\n    if (_lastSimulateFrameId === frameId) {\r\n      const msg = '[gamemanager] detected simulate() called multiple times within the same frame bucket \u2014 possible double-simulation';\r\n      if (_doubleSimStrict) {\r\n        throw new Error(msg);\r\n      } else {\r\n        console.warn(msg);\r\n      }\r\n    }\r\n    _lastSimulateFrameId = frameId;\r\n  } catch (e) {\r\n    // ignore any timing issues \u2014 detection is best-effort\r\n  }\r\n  const state = { ships, bullets, particles, stars, explosions: [], shieldHits: [], healthHits: [] };\r\n  evaluateReinforcement(dt);\r\n  simulateStep(state, dt, { W, H });\r\n  // merge emitted events into exported arrays for renderer\r\n  // merge explosions into exported flashes and also convert them into particles\r\n  // so renderers that consume particles (WebGL) will see visual effects without\r\n  // needing to process the raw event arrays themselves.\r\n  for (const ex of state.explosions) {\r\n    flashes.push(Object.assign({}, ex));\r\n    // spawn a small burst of particles for the explosion\r\n    try {\r\n      const count = 12;\r\n      const ttl = 0.6;\r\n      const color = 'rgba(255,200,100,0.95)';\r\n      const size = 3;\r\n      for (let i = 0; i < count; i++) {\r\n        const ang = srandom() * Math.PI * 2;\r\n        const sp = 30 + srandom() * 90; // px/sec\r\n        const vx = Math.cos(ang) * sp;\r\n        const vy = Math.sin(ang) * sp;\r\n        acquireParticle(ex.x || 0, ex.y || 0, { vx, vy, ttl, color, size });\r\n      }\r\n    } catch (e) {}\r\n  }\r\n\r\n  // wrap hits with TTL/life so renderer can persist them across frames; also\r\n  // convert hits into particles immediately (so WebGL renderer sees them).\r\n  for (const h of state.shieldHits) {\r\n    shieldFlashes.push(Object.assign({}, h, { ttl: config.shield.ttl, life: config.shield.ttl, spawned: true }));\r\n    try {\r\n      const cfg = config.shield || {};\r\n      const cnt = cfg.particleCount || 6;\r\n      const ttl = cfg.particleTTL || 0.35;\r\n      const color = cfg.particleColor || 'rgba(160,200,255,0.9)';\r\n      const size = cfg.particleSize || 2;\r\n      for (let i = 0; i < cnt; i++) {\r\n        const ang = srandom() * Math.PI * 2;\r\n        const sp = 10 + srandom() * 40;\r\n        const vx = Math.cos(ang) * sp;\r\n        const vy = Math.sin(ang) * sp;\r\n        acquireParticle(h.hitX || h.x || 0, h.hitY || h.y || 0, { vx, vy, ttl, color, size });\r\n      }\r\n    } catch (e) {}\r\n  }\r\n  for (const h of state.healthHits) {\r\n    healthFlashes.push(Object.assign({}, h, { ttl: config.health.ttl, life: config.health.ttl, spawned: true }));\r\n    try {\r\n      const cfg = config.health || {};\r\n      const cnt = cfg.particleCount || 8;\r\n      const ttl = cfg.particleTTL || 0.6;\r\n      const color = cfg.particleColor || 'rgba(255,120,80,0.95)';\r\n      const size = cfg.particleSize || 2;\r\n      for (let i = 0; i < cnt; i++) {\r\n        const ang = srandom() * Math.PI * 2;\r\n        const sp = 20 + srandom() * 50;\r\n        const vx = Math.cos(ang) * sp;\r\n        const vy = Math.sin(ang) * sp;\r\n        acquireParticle(h.hitX || h.x || 0, h.hitY || h.y || 0, { vx, vy, ttl, color, size });\r\n      }\r\n    } catch (e) {}\r\n  }\r\n\r\n  // advance star twinkle time and update per-star alpha deterministically\r\n  try {\r\n    _starTime += dt;\r\n    if (config.stars && config.stars.twinkle) {\r\n      for (const s of stars) {\r\n        const base = (s.baseA != null ? s.baseA : (s.a != null ? s.a : 1));\r\n        const phase = s.twPhase != null ? s.twPhase : 0;\r\n        const speed = s.twSpeed != null ? s.twSpeed : 1.0;\r\n        s.a = base * (0.7 + 0.3 * Math.sin(phase + _starTime * speed));\r\n      }\r\n      // Do not regenerate the canvas every frame here; the WebGL renderer\r\n      // will use instance alpha to animate twinkle without re-uploading a texture.\r\n    }\r\n  } catch (e) {}\r\n  return { ships, bullets, particles, flashes: flashes, shieldFlashes, healthFlashes, stars, starCanvas };\r\n}\r\n\r\nexport function processStateEvents(state, dt = 0) {\r\n  // placeholder for manager-level logic (XP, scoring)\r\n  return state;\r\n}\r\n\r\nexport function evaluateReinforcement(dt) {\r\n  _reinforcementAccumulator += dt;\r\n  if (_reinforcementAccumulator >= _reinforcementInterval) {\r\n    _reinforcementAccumulator = 0;\r\n  // spawn a pair of ships for each team\r\n  // createShip expects (type, x, y, team) \u2014 previous code passed an object\r\n  // which produced malformed ships and prevented reinforcements from\r\n  // being recognized by consumers. Use the ShipConfig-derived default\r\n  // type (getDefaultShipType()) as a fallback and emit a manager-level\r\n  // 'reinforcements' event for compatibility.\r\n  const fallback = getDefaultShipType();\r\n  const r = createShip(fallback, 100, 100, 'red');\r\n  const b = createShip(fallback, 700, 500, 'blue');\r\n    ships.push(r);\r\n    ships.push(b);\r\n    try { emitManagerEvent('reinforcements', { spawned: [r, b] }); } catch (e) { /* ignore */ }\r\n  }\r\n}\r\n\r\nexport function setReinforcementInterval(seconds) { _reinforcementInterval = seconds; }\r\nexport function getReinforcementInterval() { return _reinforcementInterval; }\r\n\r\n// Re-export ShipConfig runtime helpers for convenience so callers can tune ship\r\n// defaults at runtime through the gamemanager API.\r\nexport { setShipConfig, getShipConfig };\r\n\r\nexport default { reset, simulate, processStateEvents, evaluateReinforcement, ships, bullets };\r\n", "export const RendererConfig = {\r\n  preferred: 'canvas' as 'canvas' | 'webgl',\r\n  allowUrlOverride: true,\r\n  allowWebGL: true,\r\n  // UI overlays configuration\r\n  hpBar: { bg: '#222', fill: '#4caf50', w: 20, h: 4, dx: -10, dy: -12 },\r\n};\r\n\r\nexport function getPreferredRenderer(): 'canvas' | 'webgl' {\r\n  try {\r\n    if (RendererConfig.allowUrlOverride && typeof window !== 'undefined' && window.location && window.location.search) {\r\n      const p = new URLSearchParams(window.location.search);\r\n      const r = p.get('renderer');\r\n      if (r === 'canvas' || r === 'webgl') return r;\r\n    }\r\n  } catch (e) {}\r\n  return RendererConfig.preferred;\r\n}\r\n\r\nexport default RendererConfig;\r\n", "// canvasrenderer.js - simple Canvas2D fallback renderer\r\nimport { AssetsConfig, getShipAsset, getBulletAsset, getTurretAsset } from './config/assets/assetsConfig';\r\nimport { TeamsConfig } from './config/teamsConfig';\r\nimport { VisualMappingConfig, bulletKindForRadius, getDefaultShipType } from './config/entitiesConfig';\r\nimport { RendererConfig } from './config/rendererConfig';\r\n\r\nexport class CanvasRenderer {\r\n  constructor(canvas) {\r\n    this.canvas = canvas;\r\n    this.ctx = null;\r\n    this.providesOwnLoop = false;\r\n  }\r\n  init() {\r\n    this.ctx = this.canvas.getContext('2d');\r\n    if (!this.ctx) return false;\r\n    // Ensure drawing uses CSS (logical) pixels so simulation coordinates\r\n    // (which operate in logical bounds) map correctly to the canvas.\r\n    // The main entry sets canvas.width/height = bounds * devicePixelRatio\r\n    // and canvas.style.width/height = bounds in CSS pixels. Scale the\r\n    // 2D context by the DPR so drawing coordinates match CSS pixels.\r\n    // devicePixelRatio multiplied by an optional rendererScale allows us to\r\n    // make the entire scene larger or smaller while preserving crispness on\r\n    // high-DPI screens. rendererScale defaults to 1.\r\n    // initialize scale, but allow runtime updates via updateScale()\r\n    this.updateScale();\r\n    return true;\r\n  }\r\n  isRunning() { return false; }\r\n  renderState(state, interpolation = 0) {\r\n    const ctx = this.ctx; if (!ctx) return;\r\n    // The canvas' drawing context is reset when canvas.width/height changes\r\n    // (which happens on window resize). Re-apply the last-computed transform\r\n    // so simulation coordinates map correctly. updateScale() should be called\r\n    // when the rendererScale changes to refresh this.dpr and reapply transforms.\r\n    const dpr = (typeof this.dpr === 'number' && this.dpr > 0) ? this.dpr : ((typeof window !== 'undefined' && window.devicePixelRatio) ? window.devicePixelRatio : 1);\r\n    try {\r\n      ctx.setTransform(dpr, 0, 0, dpr, 0, 0);\r\n    } catch (e) {\r\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n      ctx.scale(dpr, dpr);\r\n    }\r\n    // Compute logical (CSS) width/height from the canvas backing store size\r\n    // divided by the applied dpr. This ensures clearRect operates in logical\r\n    // pixels that match simulation coordinates.\r\n    const w = Math.round(this.canvas.width / dpr);\r\n    const h = Math.round(this.canvas.height / dpr);\r\n    ctx.clearRect(0, 0, w, h);\r\n    ctx.save();\r\n    ctx.fillStyle = '#0b1220';\r\n  ctx.fillRect(0, 0, w, h);\r\n\r\n    // helper: draw a polygon path from points (already scaled/rotated by transform)\r\n    function drawPolygon(points) {\r\n      if (!points || points.length === 0) return;\r\n      ctx.beginPath();\r\n      ctx.moveTo(points[0][0], points[0][1]);\r\n      for (let i = 1; i < points.length; i++) ctx.lineTo(points[i][0], points[i][1]);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    }\r\n\r\n    // draw ships using shapes\r\n    for (const s of state.ships) {\r\n      const team = s.team === 'blue' ? TeamsConfig.teams.blue : TeamsConfig.teams.red;\r\n      const color = team.color || AssetsConfig.palette.shipHull;\r\n      const radius = s.radius || 6;\r\n      const angle = s.angle || 0;\r\n  const fallback = getDefaultShipType();\r\n  const shape = getShipAsset(s.type || fallback);\r\n\r\n      ctx.save();\r\n      ctx.translate(s.x, s.y);\r\n      ctx.rotate(angle);\r\n      ctx.scale(radius, radius);\r\n      ctx.fillStyle = color;\r\n      if (shape.type === 'polygon') {\r\n        drawPolygon(shape.points);\r\n      } else if (shape.type === 'circle') {\r\n        ctx.beginPath(); ctx.arc(0, 0, shape.r || 1, 0, Math.PI * 2); ctx.fill();\r\n      } else if (shape.type === 'compound' && Array.isArray(shape.parts)) {\r\n        for (const part of shape.parts) {\r\n          if (part.type === 'polygon') drawPolygon(part.points);\r\n          else if (part.type === 'circle') { ctx.beginPath(); ctx.arc(0, 0, part.r || 1, 0, Math.PI * 2); ctx.fill(); }\r\n        }\r\n      }\r\n      ctx.restore();\r\n\r\n      // hp bar\r\n      ctx.fillStyle = '#222'; ctx.fillRect(s.x - 10, s.y - 12, 20, 4);\r\n      ctx.fillStyle = '#4caf50'; ctx.fillRect(s.x - 10, s.y - 12, 20 * Math.max(0, (s.hp || 0) / (s.maxHp || 1)), 4);\r\n    }\r\n\r\n    // draw turrets as simple overlays (optional)\r\n    // This placeholder draws one turret per ship at the ship origin, rotated with ship\r\n    for (const s of state.ships) {\r\n      const radius = (s.radius || 6) * 0.6;\r\n      const angle = s.angle || 0;\r\n      const tShape = getTurretAsset('basic');\r\n      ctx.save();\r\n      ctx.translate(s.x, s.y);\r\n      ctx.rotate(angle);\r\n      ctx.scale(radius, radius);\r\n      ctx.fillStyle = AssetsConfig.palette.turret;\r\n      if (tShape.type === 'compound') {\r\n        for (const part of tShape.parts) {\r\n          if (part.type === 'polygon') drawPolygon(part.points);\r\n          else if (part.type === 'circle') { ctx.beginPath(); ctx.arc(0, 0, part.r || 1, 0, Math.PI * 2); ctx.fill(); }\r\n        }\r\n      }\r\n      ctx.restore();\r\n    }\r\n\r\n    // bullets using radius mapping to kind (small/medium/large)\r\n    for (const b of state.bullets) {\r\n      const r = b.radius || b.bulletRadius || 1.5;\r\n      const kind = bulletKindForRadius(r / 6 /* normalize roughly by typical ship radius */);\r\n      const shape = getBulletAsset(kind);\r\n      ctx.save();\r\n      ctx.translate(b.x, b.y);\r\n      // scale bullet circle to approximate projectile radius in pixels\r\n      const px = Math.max(1, r);\r\n      if (shape.type === 'circle') {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = AssetsConfig.palette.bullet;\r\n        ctx.arc(0, 0, px, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      } else if (shape.type === 'polygon') {\r\n        ctx.fillStyle = AssetsConfig.palette.bullet; ctx.scale(px, px); drawPolygon(shape.points);\r\n      }\r\n      ctx.restore();\r\n    }\r\n\r\n    // visual effects: explosions (flashes), shield hits, health hits\r\n    function drawRing(x, y, R, color, alpha = 1.0, thickness = 2) {\r\n      ctx.save();\r\n      ctx.globalAlpha = Math.max(0, Math.min(1, alpha));\r\n      ctx.strokeStyle = color;\r\n      ctx.lineWidth = thickness;\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, Math.max(1, R), 0, Math.PI * 2);\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n\r\n    // Explosions: warm rings that expand and fade\r\n    if (Array.isArray(state.flashes)) {\r\n      for (const f of state.flashes) {\r\n        const ttl = f.ttl || 0.6; const life = f.life != null ? f.life : ttl;\r\n        const t = Math.max(0, Math.min(1, life / ttl));\r\n        const R = 8 + (1 - t) * 28; // expands as it fades\r\n        const alpha = 0.8 * t;\r\n        const color = '#ffaa33';\r\n        drawRing(f.x || 0, f.y || 0, R, color, alpha, 3);\r\n      }\r\n    }\r\n\r\n    // Shield hits: cool blue rings\r\n    if (Array.isArray(state.shieldFlashes)) {\r\n      for (const s of state.shieldFlashes) {\r\n        const ttl = s.ttl || 0.4; const life = s.life != null ? s.life : ttl;\r\n        const t = Math.max(0, Math.min(1, life / ttl));\r\n        const R = 6 + (1 - t) * 16;\r\n        const alpha = 0.9 * t;\r\n        drawRing(s.x || 0, s.y || 0, R, '#88ccff', alpha, 2);\r\n      }\r\n    }\r\n\r\n    // Health hits: reddish rings\r\n    if (Array.isArray(state.healthFlashes)) {\r\n      for (const s of state.healthFlashes) {\r\n        const ttl = s.ttl || 0.6; const life = s.life != null ? s.life : ttl;\r\n        const t = Math.max(0, Math.min(1, life / ttl));\r\n        const R = 6 + (1 - t) * 18;\r\n        const alpha = 0.9 * t;\r\n        drawRing(s.x || 0, s.y || 0, R, '#ff7766', alpha, 2);\r\n      }\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n\r\n  // Recompute combined DPR (devicePixelRatio * rendererScale) and apply the\r\n  // transform to the context. Call this when RendererConfig.rendererScale\r\n  // changes (e.g., user moved the dev slider) or when window.devicePixelRatio\r\n  // changes.\r\n  updateScale() {\r\n    if (!this.ctx) this.ctx = this.canvas.getContext('2d');\r\n    // The backing store DPR should be devicePixelRatio only. main.js sets\r\n    // canvas.width/height based on devicePixelRatio * CSS_size. The renderer\r\n    // here uses dpr=baseDpr to scale drawing into the backing store pixels.\r\n    const baseDpr = (typeof window !== 'undefined' && window.devicePixelRatio) ? window.devicePixelRatio : 1;\r\n    this.dpr = baseDpr;\r\n    // Diagnostic log to verify updateScale is called during tests/standalone runtime.\r\n    try { console.debug && console.debug('CanvasRenderer.updateScale -> dpr=', this.dpr); } catch (e) {}\r\n    try {\r\n      this.ctx.setTransform(this.dpr, 0, 0, this.dpr, 0, 0);\r\n    } catch (e) {\r\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0);\r\n      this.ctx.scale(this.dpr, this.dpr);\r\n    }\r\n  }\r\n}\r\n\r\nexport default CanvasRenderer;\r\n", "// webglrenderer.js - minimal WebGL2 renderer stub\r\nexport class WebGLRenderer {\r\n  constructor(canvas) {\r\n    this.canvas = canvas;\r\n    this.gl = null;\r\n    // this renderer may claim it owns its own loop in advanced impls\r\n    this.providesOwnLoop = false;\r\n  }\r\n  init() {\r\n    try {\r\n      this.gl = this.canvas.getContext('webgl2');\r\n      if (!this.gl) return false;\r\n      // minimal setup\r\n      const gl = this.gl;\r\n      gl.clearColor(0.02, 0.03, 0.06, 1.0);\r\n      return true;\r\n    } catch (e) { return false; }\r\n  }\r\n  updateScale() {\r\n    // Update viewport to match backing store size which may have changed\r\n    // when the application adjusts canvas.width/height (e.g. DPR * scale)\r\n    if (!this.gl) return;\r\n    try {\r\n      this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    } catch (e) { /* ignore */ }\r\n  }\r\n  isRunning() { return false; }\r\n  renderState(state, interpolation = 0) {\r\n    if (!this.gl) return;\r\n    const gl = this.gl;\r\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    // For simplicity this stub does not draw ships; fallback to CanvasRenderer if visual fidelity required.\r\n  }\r\n}\r\n\r\nexport default WebGLRenderer;\r\n", "// Minimal main.js - bundler-friendly entry that wires UI to game manager and renderer\r\nimport { createGameManager } from './gamemanager.js';\r\nimport { CanvasRenderer } from './canvasrenderer.js';\r\nimport { WebGLRenderer } from './webglrenderer.js';\r\nimport { getDefaultBounds } from './config/displayConfig';\r\nimport { getPreferredRenderer, RendererConfig } from './config/rendererConfig';\r\n\r\nexport async function startApp(rootDocument = document) {\r\n  const canvas = rootDocument.getElementById('world');\r\n  const ui = {\r\n    startPause: rootDocument.getElementById('startPause'),\r\n    reset: rootDocument.getElementById('reset'),\r\n    addRed: rootDocument.getElementById('addRed'),\r\n    addBlue: rootDocument.getElementById('addBlue'),\r\n    toggleTrails: rootDocument.getElementById('toggleTrails'),\r\n    speed: rootDocument.getElementById('speed'),\r\n    redScore: rootDocument.getElementById('redScore'),\r\n    blueScore: rootDocument.getElementById('blueScore'),\r\n    stats: rootDocument.getElementById('stats'),\r\n    continuousCheckbox: rootDocument.getElementById('continuousCheckbox'),\r\n    seedBtn: rootDocument.getElementById('seedBtn'),\r\n    formationBtn: rootDocument.getElementById('formationBtn'),\r\n  };\r\n\r\n  // Initialize stats text early so test harnesses (Playwright) can locate\r\n  // the element immediately after DOMContentLoaded. uiTick will keep this\r\n  // updated on animation frames.\r\n  try { if (ui.stats) ui.stats.textContent = 'Ships: 0 (R:0 B:0) Bullets: 0'; } catch (e) {}\r\n\r\n  function fitCanvasToWindow() {\r\n    const baseDpr = window.devicePixelRatio || 1;\r\n    const cfgScale = (RendererConfig && typeof RendererConfig.rendererScale === 'number') ? RendererConfig.rendererScale : 1;\r\n    const bounds = getDefaultBounds();\r\n    // To implement a visible \"zoom\" while preserving crispness on high-DPI\r\n    // screens we change the CSS size (logical pixels) by the rendererScale and\r\n    // keep the backing store at CSS_size * devicePixelRatio. This ensures the\r\n    // canvas appears larger/smaller (zoom) while still rendering at device\r\n    // pixel density.\r\n    const cssW = Math.round(bounds.W * cfgScale);\r\n    const cssH = Math.round(bounds.H * cfgScale);\r\n    canvas.style.width = `${cssW}px`;\r\n    canvas.style.height = `${cssH}px`;\r\n    canvas.width = Math.round(cssW * baseDpr);\r\n    canvas.height = Math.round(cssH * baseDpr);\r\n  }\r\n\r\n  fitCanvasToWindow();\r\n  window.addEventListener('resize', fitCanvasToWindow);\r\n\r\n  // Dev-only renderer scale slider: wire up live changes\r\n  try {\r\n    const scaleRange = document.getElementById('rendererScaleRange');\r\n    const scaleValue = document.getElementById('rendererScaleValue');\r\n    if (scaleRange && scaleValue) {\r\n      try { console.debug && console.debug('startApp: renderer scale controls present, initial=', RendererConfig.rendererScale); } catch (e) {}\r\n      // initialize display from config\r\n      scaleValue.textContent = String((RendererConfig.rendererScale || 1).toFixed(2));\r\n      scaleRange.value = String(RendererConfig.rendererScale || 1);\r\n      scaleRange.addEventListener('input', (ev) => {\r\n        const v = parseFloat(ev.target.value || '1');\r\n        try { console.debug && console.debug('rendererScaleRange input ->', v); } catch (e) {}\r\n        RendererConfig.rendererScale = v;\r\n        scaleValue.textContent = v.toFixed(2);\r\n        // resize backing store to pick up new combined DPR and re-render visuals\r\n        try { fitCanvasToWindow(); } catch (e) { /* ignore */ }\r\n        // inform renderer that the scale/backing-store changed so it can\r\n        // reapply transforms or update viewport. Prefer updateScale() if\r\n        // available rather than re-initializing the whole renderer.\r\n        try { if (renderer && typeof renderer.updateScale === 'function') renderer.updateScale(); else if (renderer && typeof renderer.init === 'function') renderer.init(); } catch (e) { /* ignore */ }\r\n      });\r\n    }\r\n  } catch (e) { /* dev controls optional */ }\r\n\r\n  // Choose renderer per config; default to Canvas for dev\r\n  let renderer;\r\n  const pref = getPreferredRenderer();\r\n  if (pref === 'webgl') {\r\n    try {\r\n      const w = new WebGLRenderer(canvas);\r\n      if (w && w.init && w.init()) renderer = w;\r\n    } catch (e) { /* fall through to canvas */ }\r\n  }\r\n  if (!renderer) {\r\n    renderer = new CanvasRenderer(canvas);\r\n    renderer.init && renderer.init();\r\n  }\r\n\r\n  // Ensure renderer re-initializes its backing-store transform when the\r\n  // window resizes (fitCanvasToWindow updates canvas.width/height). We add\r\n  // a resize listener here after the renderer exists so it can update its\r\n  // internal pixelRatio/transform to match the new backing store size.\r\n  try {\r\n    window.addEventListener('resize', () => {\r\n      try { fitCanvasToWindow(); } catch (e) {}\r\n      try { if (renderer && typeof renderer.init === 'function') renderer.init(); } catch (e) {}\r\n    });\r\n  } catch (e) {}\r\n\r\n  // Prefer main-thread simulation when running on local/dev hosts so tests\r\n  // and Playwright can deterministically interact with the manager. When\r\n  // deployed or served from a remote host, the manager will use a worker.\r\n  let useWorkerFlag = true;\r\n  try {\r\n    const host = (location && location.hostname) || '';\r\n    if (host === '127.0.0.1' || host === 'localhost') useWorkerFlag = false;\r\n  } catch (e) { /* ignore */ }\r\n  // ensure a stable window.gm object exists early for tests/debugging\r\n  try { if (typeof window !== 'undefined') window.gm = window.gm || {}; } catch (e) {}\r\n\r\n  const gm = createGameManager({ renderer, canvas, useWorker: useWorkerFlag });\r\n\r\n  // copy manager methods onto window.gm (don't replace the object to keep references stable)\r\n  try {\r\n    if (typeof window !== 'undefined' && window.gm) {\r\n      Object.assign(window.gm, gm);\r\n      try { console.info('window.gm initialized'); } catch (e) {}\r\n    }\r\n  } catch (e) { /* ignore */ }\r\n\r\n  // In local/dev mode (no worker) automatically enable continuous reinforcements\r\n  // and step once so Playwright / automated tests can observe reinforcement UI\r\n  try {\r\n    // Only auto-enable continuous reinforcements for automated tests.\r\n    // Local manual runs should not be forced into rapid reinforcements which\r\n    // can confuse debugging. Tests (Playwright) explicitly call the GM API\r\n    // to enable continuous mode and set the interval. To opt-in here, set\r\n    // the query param `?autotest=1` when opening the page or set\r\n    // `window.__AUTO_REINFORCE_DEV__ = true` before startApp() is called.\r\n    const host = (location && location.hostname) || '';\r\n    const urlParams = (typeof URLSearchParams !== 'undefined') ? new URLSearchParams(location.search) : null;\r\n    const autotest = (urlParams && urlParams.get('autotest') === '1') || !!(window && window.__AUTO_REINFORCE_DEV__);\r\n    if ((host === '127.0.0.1' || host === 'localhost') && autotest) {\r\n      try { if (gm && typeof gm.setContinuousEnabled === 'function') gm.setContinuousEnabled(true); } catch (e) {}\r\n      try { if (gm && typeof gm.setReinforcementInterval === 'function') gm.setReinforcementInterval(0.01); } catch (e) {}\r\n      try { if (gm && typeof gm.stepOnce === 'function') gm.stepOnce(0.02); } catch (e) {}\r\n    }\r\n  } catch (e) { /* ignore */ }\r\n\r\n  // Listen for manager-level reinforcement events. createGameManager now\r\n  // exposes a small `on(event, cb)` API that forwards worker messages and\r\n  // also emits events for main-thread fallback reinforcements.\r\n  // Reinforcement summaries are displayed briefly in the UI. We store the\r\n  // latest summary in a variable and include it in the regular uiTick loop\r\n  // so it isn't clobbered by the periodic stats update.\r\n  let lastReinforcementSummary = '';\r\n  try {\r\n    if (gm && typeof gm.on === 'function') {\r\n      gm.on('reinforcements', (msg) => {\r\n        const list = (msg && msg.spawned) || [];\r\n        const types = list.map(s => s.type).filter(Boolean);\r\n        const summary = `Reinforcements: spawned ${list.length} ships (${types.join(', ')})`;\r\n        lastReinforcementSummary = summary;\r\n        // clear after a short time so UI doesn't permanently grow\r\n        try { setTimeout(() => { lastReinforcementSummary = ''; }, 3000); } catch (e) {}\r\n        // also log for telemetry\r\n          console.info(summary);\r\n          try { if (ui && ui.stats) ui.stats.textContent = `${ui.stats.textContent} | ${summary}`; } catch (e) {}\r\n      });\r\n    }\r\n  } catch (e) { /* ignore */ }\r\n\r\n  // show whether simulation is running in a worker (diagnostic)\r\n  const workerIndicator = rootDocument.getElementById('workerIndicator');\r\n  if (workerIndicator) {\r\n    // initial set and authoritative update using the manager's API\r\n    try {\r\n      workerIndicator.textContent = gm.isWorker() ? 'Worker' : 'Main';\r\n      // listen for animation frames and refresh indicator so UI updates once workerReady flips\r\n      (function refresh() { workerIndicator.textContent = gm.isWorker() ? 'Worker' : 'Main'; requestAnimationFrame(refresh); }());\r\n    } catch (e) {\r\n      // fallback: show unknown\r\n      workerIndicator.textContent = 'Unknown';\r\n    }\r\n  }\r\n\r\n  ui.startPause.addEventListener('click', () => {\r\n    if (gm.isRunning()) { gm.pause(); ui.startPause.textContent = '\u25B6 Start'; }\r\n    else { gm.start(); ui.startPause.textContent = '\u23F8 Pause'; }\r\n  });\r\n  ui.reset.addEventListener('click', () => gm.reset());\r\n  ui.addRed.addEventListener('click', () => gm.spawnShip('red'));\r\n  ui.addBlue.addEventListener('click', () => gm.spawnShip('blue'));\r\n  ui.seedBtn.addEventListener('click', () => gm.reseed());\r\n  ui.formationBtn.addEventListener('click', () => gm.formFleets());\r\n  // wire continuous checkbox if present\r\n  if (ui.continuousCheckbox) {\r\n    ui.continuousCheckbox.addEventListener('change', (ev) => {\r\n      const v = !!ev.target.checked;\r\n      if (gm && typeof gm.setContinuousEnabled === 'function') gm.setContinuousEnabled(v);\r\n    });\r\n  }\r\n\r\n  // basic UI update loop\r\n  function uiTick() {\r\n    const s = gm.snapshot();\r\n    ui.redScore.textContent = `Red ${gm.score.red}`;\r\n    ui.blueScore.textContent = `Blue ${gm.score.blue}`;\r\n    // show ships by team counts for easier diagnostics\r\n    const redCount = s.ships.filter((sh) => sh.team === 'red').length;\r\n    const blueCount = s.ships.filter((sh) => sh.team === 'blue').length;\r\n    ui.stats.textContent = `Ships: ${s.ships.length} (R:${redCount} B:${blueCount}) Bullets: ${s.bullets.length}` + (lastReinforcementSummary ? ` | ${lastReinforcementSummary}` : '');\r\n    requestAnimationFrame(uiTick);\r\n  }\r\n  requestAnimationFrame(uiTick);\r\n\r\n  return { gm, renderer };\r\n}\r\n\r\n// Start automatically when running in a browser with DOM ready\r\nif (typeof window !== 'undefined') {\r\n  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', () => startApp(document));\r\n  else startApp(document);\r\n}\r\n\r\nexport default startApp;\r\n"],
  "mappings": "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",
  "names": ["config", "s", "lvl", "mulberry32", "mulberry32", "emitManagerEvent"]
}
