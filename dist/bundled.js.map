{
  "version": 3,
  "sources": ["../src/config/entitiesConfig.ts", "../src/config/assets/assetsConfig.ts", "../src/entities.ts", "../src/config/teamsConfig.ts", "../src/rng.ts", "../src/gamemanager.ts", "../src/config/behaviorConfig.ts", "../src/behavior.ts", "../src/config/progressionConfig.ts", "../src/config/simConfig.ts", "../src/simulate.ts", "../src/createSimWorker.ts", "../src/config/gamemanagerConfig.ts", "../src/config/displayConfig.ts", "../src/config/rendererConfig.ts", "../src/canvasrenderer.ts", "../src/webglrenderer.ts", "../src/main.ts"],
  "sourcesContent": ["// entitiesConfig.ts - ship-type defaults and visuals helpers (typed)\r\n//\r\n// Tuning rationale (2025-08-24):\r\n// - Playfield size: 1920x1080\r\n// - Ship speeds (maxSpeed, accel): Higher speed enables kiting and rapid repositioning; slower ships are easier to flank.\r\n// - Turn rates (turnRate): Higher turn rate allows ships to evade, flank, and respond to threats quickly; low turn rate makes ships vulnerable to flanking.\r\n// - Weapon ranges (muzzleSpeed * bulletTTL): Longer range supports kiting and edge play; shorter range requires close engagement and rewards flanking.\r\n// - Weapon rate (rate): Higher fire rate enables sustained pressure and kiting; lower rate rewards timing and positioning.\r\n// - Ship radius: Larger ships are easier to hit and harder to flank; smaller ships excel at flanking and evasion.\r\n// - Boundary options (see simConfig.ts): Enable edge play (wrap, bounce, remove) for tactical escapes and repositioning.\r\n// - See patch history for details\r\nimport {\r\n  getShipAsset,\r\n  getBulletAsset,\r\n  getTurretAsset,\r\n} from \"./assets/assetsConfig\";\r\n\r\n// CannonCfg parameters and tactical impact:\r\n// - damage: Higher damage increases threat, rewards flanking and burst attacks.\r\n// - rate: Higher rate supports kiting and pressure; lower rate rewards timing.\r\n// - spread: More spread makes weapons less accurate, favors close-range flanking.\r\n// - muzzleSpeed: Higher speed increases range and kiting potential.\r\n// - bulletRadius: Larger radius makes shots easier to land, favors area denial.\r\n// - bulletTTL: Longer TTL increases range, supports edge play and kiting.\r\nexport type CannonCfg = {\r\n  damage: number;\r\n  rate: number;\r\n  spread?: number;\r\n  muzzleSpeed?: number;\r\n  bulletRadius?: number;\r\n  bulletTTL?: number;\r\n};\r\n\r\n// ShipTypeCfg parameters and tactical impact:\r\n// - maxHp, armor, maxShield: Higher values increase survivability, allow for riskier flanking and edge play.\r\n// - shieldRegen: Faster regen supports hit-and-run and kiting.\r\n// - damage/dmg: Higher damage rewards successful flanking and burst attacks.\r\n// - radius: Smaller radius makes ships harder to hit and better at flanking; larger radius increases vulnerability.\r\n// - cannons: Weapon loadout affects tactical options (see CannonCfg).\r\n// - accel: Higher acceleration enables rapid repositioning and kiting.\r\n// - turnRate: Higher turn rate allows for quick flanking, evasion, and edge play.\r\n// - maxSpeed: Higher speed supports kiting and edge escapes; lower speed makes ships easier to pursue and flank.\r\n// - turrets: Multiple turrets increase area control, make flanking harder.\r\n// - friction: Lower friction (closer to 1) enables sustained velocity for kiting and edge play; higher friction increases tactical vulnerability to pursuit and flanking.\r\n// All entities and events are pruned immediately upon destruction or expiration, ensuring tactical scenarios remain robust and consistent.\r\nexport type ShipTypeCfg = {\r\n  maxHp: number;\r\n  armor?: number;\r\n  maxShield?: number;\r\n  shieldRegen?: number;\r\n  dmg?: number;\r\n  damage?: number;\r\n  radius?: number;\r\n  cannons?: CannonCfg[];\r\n  accel?: number;\r\n  turnRate?: number;\r\n  maxSpeed?: number;\r\n  carrier?: {\r\n    fighterCooldown: number;\r\n    maxFighters: number;\r\n    spawnPerCooldown: number;\r\n  };\r\n  turrets?: Array<{\r\n    position: [number, number]; // relative to ship center, in radius units\r\n    kind: string; // turret asset kind\r\n    targeting?: \"nearest\" | \"random\" | \"focus\" | \"custom\"; // targeting logic\r\n    cooldown?: number; // seconds between shots\r\n    lastFired?: number; // timestamp of last shot\r\n  }>;\r\n};\r\n\r\nexport type ShipConfigMap = Record<string, ShipTypeCfg>;\r\n\r\nexport const ShipConfig: ShipConfigMap = {\r\n  fighter: {\r\n    maxHp: 15,\r\n    armor: 0,\r\n    maxShield: 8,\r\n    shieldRegen: 1.0,\r\n    dmg: 3,\r\n    damage: 3,\r\n    radius: 12,\r\n    cannons: [\r\n      {\r\n        damage: 3,\r\n        rate: 3,\r\n        spread: 0.1,\r\n        muzzleSpeed: 260, // was 300\r\n        bulletRadius: 1.5,\r\n        bulletTTL: 1.1, // was 1.2\r\n      },\r\n    ],\r\n    accel: 5,\r\n    turnRate: 6,\r\n    maxSpeed: 160,\r\n  },\r\n  corvette: {\r\n    maxHp: 50,\r\n    armor: 0,\r\n    maxShield: Math.round(50 * 0.6),\r\n    shieldRegen: 0.5,\r\n    dmg: 5,\r\n    damage: 5,\r\n    radius: 20,\r\n    accel: 5,\r\n    turnRate: 3.5, // was 3\r\n    maxSpeed: 145, // was 140\r\n    cannons: [\r\n      {\r\n        damage: 6,\r\n        rate: 1.2,\r\n        spread: 0.05,\r\n        muzzleSpeed: 180, // was 220\r\n        bulletRadius: 2,\r\n        bulletTTL: 1.8, // was 2.0\r\n      },\r\n    ],\r\n  },\r\n  frigate: {\r\n    maxHp: 80,\r\n    armor: 1,\r\n    maxShield: Math.round(80 * 0.6),\r\n    shieldRegen: 0.4,\r\n    dmg: 8,\r\n    damage: 8,\r\n    radius: 24,\r\n    cannons: [\r\n      {\r\n        damage: 8,\r\n        rate: 1.0,\r\n        spread: 0.06,\r\n        muzzleSpeed: 180, // was 200\r\n        bulletRadius: 2.5,\r\n        bulletTTL: 2.0, // was 2.2\r\n      },\r\n    ],\r\n    accel: 5,\r\n    turnRate: 2.5, // was 2.2\r\n    maxSpeed: 125, // was 120\r\n  },\r\n  destroyer: {\r\n    maxHp: 120,\r\n    armor: 2,\r\n    maxShield: Math.round(120 * 0.6),\r\n    shieldRegen: 0.3,\r\n    dmg: 12,\r\n    damage: 12,\r\n    radius: 40,\r\n    cannons: new Array(6).fill(0).map(() => ({\r\n      damage: 6,\r\n      rate: 0.8,\r\n      spread: 0.08,\r\n      muzzleSpeed: 160, // was 240\r\n      bulletRadius: 2.5,\r\n      bulletTTL: 1.8, // was 2.4\r\n    })),\r\n    accel: 5,\r\n    turnRate: 2.0, // was 1.6\r\n    maxSpeed: 110, // was 100\r\n    turrets: [\r\n      {\r\n        position: [1.2, 0.8],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n      {\r\n        position: [-1.2, 0.8],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n      {\r\n        position: [1.2, -0.8],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n      {\r\n        position: [-1.2, -0.8],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n      {\r\n        position: [0, 1.5],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n      {\r\n        position: [0, -1.5],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 0.8,\r\n      },\r\n    ],\r\n  },\r\n  carrier: {\r\n    maxHp: 200,\r\n    armor: 3,\r\n    maxShield: Math.round(200 * 0.6),\r\n    shieldRegen: 0.2,\r\n    dmg: 2,\r\n    damage: 2,\r\n    radius: 40,\r\n    cannons: new Array(4).fill(0).map(() => ({\r\n      damage: 4,\r\n      rate: 0.6,\r\n      spread: 0.12,\r\n      muzzleSpeed: 140, // was 180\r\n      bulletRadius: 3,\r\n      bulletTTL: 2.2, // was 2.8\r\n    })),\r\n    accel: 5,\r\n    turnRate: 1.2, // was 0.8\r\n    maxSpeed: 95, // was 80\r\n    carrier: { fighterCooldown: 1.5, maxFighters: 6, spawnPerCooldown: 2 },\r\n    turrets: [\r\n      {\r\n        position: [2.0, 1.2],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 1.0,\r\n      },\r\n      {\r\n        position: [-2.0, 1.2],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 1.0,\r\n      },\r\n      {\r\n        position: [2.0, -1.2],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 1.0,\r\n      },\r\n      {\r\n        position: [-2.0, -1.2],\r\n        kind: \"basic\",\r\n        targeting: \"nearest\",\r\n        cooldown: 1.0,\r\n      },\r\n    ],\r\n  },\r\n};\r\nexport function getShipConfig() {\r\n  return ShipConfig;\r\n}\r\n\r\n// Bullet global defaults (used if not per-ship)\r\nexport const BULLET_DEFAULTS = {\r\n  damage: 1,\r\n  ttl: 2.0,\r\n  radius: 1.5,\r\n  muzzleSpeed: 240,\r\n};\r\n\r\n// Particle defaults (used for generic effects)\r\nexport const PARTICLE_DEFAULTS = {\r\n  ttl: 1,\r\n  color: \"#fff\",\r\n  size: 2,\r\n};\r\n\r\n// Team fallback default\r\n\r\nexport function bulletKindForRadius(r: number): string {\r\n  if (r < 2) return \"small\";\r\n  if (r < 2.5) return \"medium\";\r\n  if (r < 3.5) return \"large\";\r\n  return \"heavy\";\r\n}\r\n\r\nexport function getDefaultShipType(): string {\r\n  return Object.keys(ShipConfig)[0] || \"fighter\";\r\n}\r\n\r\nexport default ShipConfig;\r\n", "/**\r\n * Returns the engine trail config for a given ship type.\r\n * If not present, returns the default engineTrail animation config.\r\n */\r\nexport function getEngineTrailConfig(type: string): any {\r\n  const vconf = getVisualConfig(type);\r\n  const trailName = (vconf.visuals && vconf.visuals.engineTrail) || 'engineTrail';\r\n  return (AssetsConfig.animations && AssetsConfig.animations[trailName]) || (AssetsConfig.animations && AssetsConfig.animations.engineTrail);\r\n}\r\n/**\r\n * Asset-agnostic sprite provider: returns a sprite object for a given type.\r\n * Supports fallback to vector shapes, 3D models, or SVG files.\r\n * Usage: getSpriteAsset('fighter'), getSpriteAsset('carrier'), etc.\r\n */\r\nexport function getSpriteAsset(type: string): { shape?: Shape2D; model3d?: Model3D; svg?: string } {\r\n  // Prefer SVG if available (future: load from assets/svg/)\r\n  // For now, check for a .svg property in shapes2d config\r\n  const shapeEntry = AssetsConfig.shapes2d[type] || AssetsConfig.shapes2d.fighter;\r\n  // If shapeEntry has an svg property, use it\r\n  if ((shapeEntry as any).svg) {\r\n    return { svg: (shapeEntry as any).svg };\r\n  }\r\n  // If model3d is present, use it\r\n  if (shapeEntry.model3d && shapeEntry.model3d.url) {\r\n    return { model3d: shapeEntry.model3d };\r\n  }\r\n  // Fallback to vector shape\r\n  return { shape: shapeEntry };\r\n}\r\n// Basic asset templates for 2D top-down rendering with future 3D model placeholders.\r\n// Orientation: shapes face +X (to the right). Scale is in logical units; renderer\r\n// should scale to entity radius and rotate by entity heading if present.\r\n\r\nexport type PolygonShape = {\r\n  type: 'polygon';\r\n  points: number[][]; // [[x,y], ...]\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CircleShape = {\r\n  type: 'circle';\r\n  r: number;\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CompoundPart = PolygonShape | CircleShape;\r\n\r\nexport type CompoundShape = {\r\n  type: 'compound';\r\n  parts: CompoundPart[];\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type Shape2D = PolygonShape | CircleShape | CompoundShape;\r\nexport type TurretVisualConfig = {\r\n  kind: string;\r\n  position: [number, number]; // relative to ship center, in radius units\r\n};\r\n\r\nexport type Model3D = {\r\n  url?: string | undefined;\r\n  scale?: number | undefined;\r\n  type?: string | undefined;\r\n  mesh?: string | undefined;\r\n};\r\n\r\nexport type AssetsConfigType = {\r\n  meta: { orientation: string; coordinateSystem: string };\r\n  palette: Record<string, string>;\r\n  shapes2d: Record<string, Shape2D & { turrets?: TurretVisualConfig[] }>;\r\n  animations?: Record<string, any>;\r\n  damageStates?: Record<string, { opacity?: number; accentColor?: string }>;\r\n  visualStateDefaults?: Record<string, { engine?: string; shield?: string; damageParticles?: string }>;\r\n};\r\n\r\nexport const AssetsConfig: AssetsConfigType = {\r\n  meta: {\r\n    orientation: '+X',\r\n    coordinateSystem: 'topdown-2d',\r\n  },\r\n  palette: {\r\n    shipHull: '#b0b7c3',\r\n    shipAccent: '#6c7380',\r\n    bullet: '#ffd166',\r\n    turret: '#94a3b8',\r\n    // Scene background color used by renderers\r\n    background: '#0b1220',\r\n  },\r\n  // 2D vector shapes defined as polygons and circles. Points are unit-sized\r\n  // profiles (roughly radius 1). Renderer should multiply by entity radius or\r\n  // provided scale before drawing.\r\n  shapes2d: {\r\n    fighter: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [-0.8, 0.6], [-0.5, 0], [-0.8, -0.6]] },\r\n        { type: 'polygon', points: [[0.0, 0.35], [-0.6, 0.65], [-0.35, 0.0]] },\r\n        { type: 'polygon', points: [[0.0, -0.35], [-0.35, 0.0], [-0.6, -0.65]] },\r\n        { type: 'circle', r: 0.5 }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1, type: 'gltf', mesh: undefined }\r\n    },\r\n    corvette: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [0.4, 0.7], [-1.0, 0.6], [-1.2, 0], [-1.0, -0.6], [0.4, -0.7]] },\r\n        { type: 'polygon', points: [[1.4, 0.22], [1.2, 0.12], [1.2, -0.12], [1.4, -0.22]] },\r\n        { type: 'circle', r: 0.6 }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1.4, type: 'gltf', mesh: undefined }\r\n    },\r\n    frigate: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.3, 0], [0.7, 0.65], [-0.3, 1.0], [-1.3, 0.55], [-1.3, -0.55], [-0.3, -1.0], [0.7, -0.65]] },\r\n        { type: 'circle', r: 0.7 }\r\n      ],\r\n      strokeWidth: 0.1,\r\n      model3d: { url: undefined, scale: 1.8, type: 'gltf', mesh: undefined }\r\n    },\r\n    destroyer: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.8, 0], [1.0, 0.7], [0.2, 1.0], [-0.8, 0.9], [-1.8, 0.6], [-1.8, -0.6], [-0.8, -0.9], [0.2, -1.0], [1.0, -0.7]] },\r\n        { type: 'circle', r: 1.0 },\r\n        { type: 'polygon', points: [[2.0, 0.3], [1.8, 0.2], [1.8, -0.2], [2.0, -0.3]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 2.2, type: 'gltf', mesh: undefined },\r\n      turrets: [\r\n        { kind: 'basic', position: [1.2, 0.8] },\r\n        { kind: 'basic', position: [-1.2, 0.8] },\r\n        { kind: 'basic', position: [1.2, -0.8] },\r\n        { kind: 'basic', position: [-1.2, -0.8] },\r\n        { kind: 'basic', position: [0, 1.5] },\r\n        { kind: 'basic', position: [0, -1.5] }\r\n      ]\r\n    },\r\n    carrier: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[2.2, 0], [1.2, 1.2], [-1.0, 1.6], [-2.8, 1.2], [-3.2, 0], [-2.8, -1.2], [-1.0, -1.6], [1.2, -1.2]] },\r\n        { type: 'circle', r: 1.2 },\r\n        { type: 'polygon', points: [[2.6, 0.5], [2.2, 0.3], [2.2, -0.3], [2.6, -0.5]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 3.0, type: 'gltf', mesh: undefined },\r\n      turrets: [\r\n        { kind: 'basic', position: [2.0, 1.2] },\r\n        { kind: 'basic', position: [-2.0, 1.2] },\r\n        { kind: 'basic', position: [2.0, -1.2] },\r\n        { kind: 'basic', position: [-2.0, -1.2] }\r\n      ]\r\n    },\r\n    bulletSmall: { type: 'circle', r: 0.18 },\r\n    bulletMedium: { type: 'circle', r: 0.25 },\r\n    bulletLarge: { type: 'circle', r: 0.36 },\r\n    turretBasic: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'circle', r: 0.5 },\r\n        { type: 'polygon', points: [[-0.2, 0.2], [0.7, 0.2], [0.7, -0.2], [-0.2, -0.2]] }\r\n      ],\r\n      strokeWidth: 0.08\r\n    },\r\n    // Small effect/particle shapes for renderer-driven effects\r\n    particleSmall: { type: 'circle', r: 0.12 },\r\n    particleMedium: { type: 'circle', r: 0.22 },\r\n    explosionParticle: { type: 'circle', r: 0.32 },\r\n    shieldRing: { type: 'circle', r: 1.2 }\r\n  }\r\n};\r\n\r\n// Animations and visual defaults (align with JS AssetsConfig)\r\n(AssetsConfig as any).animations = {\r\n  engineFlare: {\r\n    type: 'polygon',\r\n    points: [ [0, 0], [-0.3, 0.15], [-0.5, 0], [-0.3, -0.15] ],\r\n    pulseRate: 8,\r\n    // configurable alpha multiplier for engine overlay\r\n    alpha: 0.4,\r\n    // local-space X offset (negative = behind ship)\r\n    offset: -0.9\r\n  },\r\n  shieldEffect: {\r\n    type: 'circle',\r\n    r: 1.2,\r\n    strokeWidth: 0.1,\r\n    color: '#88ccff',\r\n    pulseRate: 2,\r\n    // map shieldPct -> alpha = base + scale * shieldPct\r\n    alphaBase: 0.25,\r\n    alphaScale: 0.75\r\n  },\r\n  damageParticles: {\r\n    type: 'particles',\r\n    color: '#ff6b6b',\r\n    count: 6,\r\n    lifetime: 0.8,\r\n    spread: 0.6\r\n  }\r\n  ,\r\n  engineTrail: {\r\n    type: 'trail',\r\n    color: '#fffc00', // bright yellow for high contrast\r\n  maxLength: 40,    // much longer trail\r\n    width: 0.35,      // thicker trail line\r\n    fade: 0.35        // slower fading, more persistent\r\n  }\r\n};\r\n\r\n(AssetsConfig as any).damageStates = {\r\n  light: { opacity: 0.9, accentColor: '#b0b7c3' },\r\n  moderate: { opacity: 0.75, accentColor: '#d4a06a' },\r\n  heavy: { opacity: 0.5, accentColor: '#ff6b6b' }\r\n};\r\n\r\n(AssetsConfig as any).visualStateDefaults = {\r\n  fighter:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  corvette:  { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  frigate:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  destroyer: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  carrier:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 }\r\n};\r\n\r\n// thresholds for mapping hpPct -> damage state key\r\n(AssetsConfig as any).damageThresholds = { moderate: 0.66, heavy: 0.33 };\r\n(AssetsConfig as any).shieldArcWidth = Math.PI / 12;\r\n\r\nexport function getVisualConfig(type: string) {\r\n  const shape = getShipAsset(type);\r\n  const visuals = (AssetsConfig as any).visualStateDefaults[type] || (AssetsConfig as any).visualStateDefaults.fighter;\r\n  return { shape, visuals, palette: AssetsConfig.palette, animations: (AssetsConfig as any).animations, damageStates: (AssetsConfig as any).damageStates } as any;\r\n}\r\n\r\nexport function getShipAsset(type: string): Shape2D {\r\n  return AssetsConfig.shapes2d[type] || AssetsConfig.shapes2d.fighter;\r\n}\r\n\r\nexport function getBulletAsset(kind: 'small' | 'medium' | 'large' = 'small'): Shape2D {\r\n  if (kind === 'large') return AssetsConfig.shapes2d.bulletLarge;\r\n  if (kind === 'medium') return AssetsConfig.shapes2d.bulletMedium;\r\n  return AssetsConfig.shapes2d.bulletSmall;\r\n}\r\n\r\nexport function getTurretAsset(_kind: 'basic' = 'basic'): Shape2D {\r\n  return AssetsConfig.shapes2d.turretBasic;\r\n}\r\n\r\nexport default AssetsConfig;\r\n", "// Effect pooling helpers (typed, per-key)\r\nexport function acquireEffect<T extends object>(state: GameState, key: string, createFn: () => T & Pooled<T>, initArgs?: Partial<T>): T & Pooled<T> {\r\n  const poolMap = state.assetPool.effects as Map<string, PoolEntry<T & Pooled<T>>>;\r\n  const counts = state.assetPool.counts?.effects || new Map<string, number>();\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: new Map(), sprites: new Map(), effects: counts };\r\n  let entry = poolMap.get(key);\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry); }\r\n  const free = entry.freeList as Array<T & Pooled<T>>;\r\n  if (free.length) {\r\n    const obj = free.pop()! as T & Pooled<T>;\r\n    try {\r\n      if (typeof obj.reset === 'function') obj.reset(initArgs);\r\n      else if (initArgs && typeof initArgs === 'object') Object.assign(obj, initArgs);\r\n    } catch {}\r\n    return obj;\r\n  }\r\n  const max = state.assetPool.config.effectPoolSize || 128;\r\n  const strategy = _getStrategy(state.assetPool.config.effectOverflowStrategy, 'discard-oldest');\r\n  const total = entry.allocated || counts.get(key) || 0;\r\n  if (total < max || strategy === 'grow') {\r\n    const e = createFn() as T & Pooled<T>;\r\n    try {\r\n      if (typeof e.reset === 'function') e.reset(initArgs);\r\n      else if (initArgs && typeof initArgs === 'object') Object.assign(e, initArgs);\r\n    } catch {}\r\n    entry.allocated = (entry.allocated || 0) + 1;\r\n    _incCount(counts, key, 1);\r\n    return e;\r\n  }\r\n  if (strategy === 'error') throw new Error(`Effect pool exhausted for key \"${key}\" (max=${max})`);\r\n  const e = createFn() as T & Pooled<T>;\r\n  entry.allocated = (entry.allocated || 0) + 1;\r\n  _incCount(counts, key, 1);\r\n  return e;\r\n}\r\n\r\nexport function releaseEffect<T extends object>(state: GameState, key: string, effect: T & Pooled<T>, disposeFn?: (e: T) => void) {\r\n  const poolMap = state.assetPool.effects as Map<string, PoolEntry<T & Pooled<T>>>;\r\n  const counts = state.assetPool.counts?.effects || new Map<string, number>();\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: new Map(), sprites: new Map(), effects: counts };\r\n  let entry = poolMap.get(key);\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry); }\r\n  const free = entry.freeList as Array<T & Pooled<T>>;\r\n  if (!free.includes(effect)) free.push(effect as T & Pooled<T>);\r\n  const max = state.assetPool.config.effectPoolSize || 128;\r\n  const strategy = _getStrategy(state.assetPool.config.effectOverflowStrategy, 'discard-oldest');\r\n  if (strategy === 'grow') return;\r\n  while (free.length > max) {\r\n    const victim = strategy === 'discard-oldest' ? free.shift()! : free.pop()!;\r\n    try { if (disposeFn) disposeFn(victim as any); } catch {}\r\n    _incCount(counts, key, -1);\r\n  }\r\n  if (strategy === 'error' && free.length > max) {\r\n    const victim = free.pop()!;\r\n    try { if (disposeFn) disposeFn(victim as any); } catch {}\r\n    _incCount(counts, key, -1);\r\n  }\r\n}\r\n// Overwrite file with a clean, consolidated implementation.\r\nimport type { GameState } from './types';\r\nimport { getShipConfig, getDefaultShipType } from './config/entitiesConfig';\r\nimport { TEAM_DEFAULT } from './config/teamsConfig';\r\nimport type { ShipConfigMap, ShipSpec } from './types';\r\n\r\nlet nextId = 1;\r\nexport function genId(): number { return nextId++; }\r\n\r\nexport type Cannon = { damage: number; rate: number; spread?: number; muzzleSpeed?: number; bulletRadius?: number; bulletTTL?: number };\r\n\r\nexport type Ship = {\r\n  id: number; type: string; x: number; y: number; vx: number; vy: number; hp: number; maxHp: number; shield?: number; maxShield?: number; angle: number;\r\n  team?: string; xp?: number; level?: number; cannons?: Cannon[]; accel?: number; currentAccel?: number; throttle?: number; steering?: number; turnRate?: number; radius?: number; maxSpeed?: number;\r\n  trail?: { x: number; y: number }[];\r\n  shieldRegen?: number;\r\n  shieldPercent?: number;\r\n  hpPercent?: number;\r\n};\r\n\r\nexport function createShip(type: string | undefined = undefined, x = 0, y = 0, team = TEAM_DEFAULT): Ship {\r\n  const shipCfg = getShipConfig() as ShipConfigMap;\r\n  const availableTypes = Object.keys(shipCfg || {});\r\n  const resolvedType = type && shipCfg[type] ? type : availableTypes.length ? availableTypes[0] : getDefaultShipType();\r\n  const cfg = (shipCfg[resolvedType] || shipCfg[getDefaultShipType()]) as Partial<ShipSpec>;\r\n  return {\r\n    id: genId(),\r\n    type: resolvedType,\r\n    x,\r\n    y,\r\n    vx: 0,\r\n    vy: 0,\r\n    hp: cfg.maxHp ?? 0,\r\n    maxHp: cfg.maxHp ?? 0,\r\n    shield: cfg.maxShield ?? 0,\r\n    maxShield: cfg.maxShield ?? 0,\r\n    shieldRegen: cfg.shieldRegen ?? 0,\r\n    team,\r\n    xp: 0,\r\n    level: 1,\r\n    cannons: JSON.parse(JSON.stringify(cfg.cannons || [])),\r\n    accel: cfg.accel || 0,\r\n    currentAccel: 0,\r\n    throttle: 0,\r\n    steering: 0,\r\n    turnRate: cfg.turnRate || 0,\r\n    radius: cfg.radius || 6,\r\n    maxSpeed: cfg.maxSpeed,\r\n    angle: 0,\r\n    trail: undefined,\r\n    shieldPercent: 1,\r\n    hpPercent: 1,\r\n  } as Ship;\r\n}\r\n\r\nexport type Bullet = { id: number; x: number; y: number; vx: number; vy: number; team: string; ownerId?: number | null; damage: number; ttl: number; radius?: number; bulletRadius?: number; bulletTTL?: number; kind?: string; alive?: boolean };\r\nexport function createBullet(x: number, y: number, vx: number, vy: number, team = TEAM_DEFAULT, ownerId: number | null = null, damage = 1, ttl = 2.0): Bullet {\r\n  return { id: genId(), x, y, vx, vy, team, ownerId, damage, ttl } as Bullet;\r\n}\r\n\r\nexport interface ExplosionEffect { x: number; y: number; r?: number; alive?: boolean; _pooled?: boolean; [key: string]: unknown }\r\nexport interface ShieldHitEffect { x: number; y: number; magnitude?: number; alive?: boolean; _pooled?: boolean; [key: string]: unknown }\r\nexport interface HealthHitEffect { x: number; y: number; amount?: number; alive?: boolean; _pooled?: boolean; [key: string]: unknown }\r\n\r\nexport function createExplosionEffect(init?: Partial<ExplosionEffect>): ExplosionEffect { return { x: init?.x ?? 0, y: init?.y ?? 0, r: init?.r, alive: true, _pooled: false, ...init } }\r\nexport function resetExplosionEffect(obj: ExplosionEffect, init?: Partial<ExplosionEffect>) { obj.x = init?.x ?? 0; obj.y = init?.y ?? 0; obj.r = init?.r; obj.alive = true; obj._pooled = false; Object.assign(obj, init) }\r\nexport function createShieldHitEffect(init?: Partial<ShieldHitEffect>): ShieldHitEffect { return { x: init?.x ?? 0, y: init?.y ?? 0, magnitude: init?.magnitude, alive: true, _pooled: false, ...init } }\r\nexport function resetShieldHitEffect(obj: ShieldHitEffect, init?: Partial<ShieldHitEffect>) { obj.x = init?.x ?? 0; obj.y = init?.y ?? 0; obj.magnitude = init?.magnitude; obj.alive = true; obj._pooled = false; Object.assign(obj, init) }\r\nexport function createHealthHitEffect(init?: Partial<HealthHitEffect>): HealthHitEffect { return { x: init?.x ?? 0, y: init?.y ?? 0, amount: init?.amount, alive: true, _pooled: false, ...init } }\r\nexport function resetHealthHitEffect(obj: HealthHitEffect, init?: Partial<HealthHitEffect>) { obj.x = init?.x ?? 0; obj.y = init?.y ?? 0; obj.amount = init?.amount; obj.alive = true; obj._pooled = false; Object.assign(obj, init) }\r\n\r\nexport interface Pooled<T = Record<string, unknown>> { reset?: (initArgs?: Partial<T>) => void }\r\nexport type PooledFactory<T extends object> = { create: () => T; reset?: (obj: T, initArgs?: Partial<T>) => void }\r\nexport function createPooledFactory<T extends object>(createOrFactory: (() => T) | PooledFactory<T>, resetFn?: (obj: T, initArgs?: Partial<T>) => void): PooledFactory<T> { if (typeof createOrFactory === 'function') return { create: createOrFactory as () => T, reset: resetFn }; const f = createOrFactory as PooledFactory<T>; return { create: f.create, reset: f.reset } }\r\nexport function makePooled<T extends object>(obj: T, resetFn?: (obj: T, initArgs?: Partial<T>) => void): T & Pooled<T> { const o = obj as T & Pooled<T>; if (typeof o.reset !== 'function') { if (typeof resetFn === 'function') { o.reset = function (initArgs?: Partial<T>) { try { resetFn(o, initArgs) } catch {} } } else { o.reset = function (initArgs?: Partial<T>) { if (initArgs && typeof initArgs === 'object') Object.assign(o, initArgs) } } } return o }\r\n\r\nexport type PoolEntry<T> = { freeList: T[]; allocated: number; config?: { max?: number; strategy?: 'discard-oldest'|'grow'|'error' }; disposer?: (item: T) => void }\r\nexport type TexturePoolEntry = PoolEntry<WebGLTexture>\r\n\r\nfunction _getStrategy(v: unknown, def: 'discard-oldest'|'grow'|'error') { return v === 'grow' || v === 'error' || v === 'discard-oldest' ? (v as 'discard-oldest'|'grow'|'error') : def }\r\nfunction _incCount(map: Map<string, number>, key: string, delta: number) { const cur = map.get(key) || 0; const next = cur + delta; if (next <= 0) map.delete(key); else map.set(key, next) }\r\n\r\nexport function acquireTexture(state: GameState, key: string, createFn: () => WebGLTexture): WebGLTexture {\r\n  const poolMap = state.assetPool.textures as Map<string, TexturePoolEntry>\r\n  const counts = state.assetPool.counts?.textures || new Map<string, number>()\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: counts, sprites: new Map(), effects: new Map() }\r\n  let entry = poolMap.get(key)\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry) }\r\n  const free = entry.freeList\r\n  if (free.length) return free.pop()!\r\n  const max = (entry.config?.max ?? state.assetPool.config.texturePoolSize) || 128\r\n  const strategy = entry.config?.strategy ?? _getStrategy(state.assetPool.config.textureOverflowStrategy, 'discard-oldest')\r\n  const total = entry.allocated || counts.get(key) || 0\r\n  if (total < max || strategy === 'grow') { const tex = createFn(); entry.allocated = (entry.allocated || 0) + 1; _incCount(counts, key, 1); return tex }\r\n  if (strategy === 'error') throw new Error(`Texture pool exhausted for key \"${key}\" (max=${max})`)\r\n  const tex = createFn(); entry.allocated = (entry.allocated || 0) + 1; _incCount(counts, key, 1); return tex\r\n}\r\n\r\nexport function releaseTexture(state: GameState, key: string, tex: WebGLTexture, disposeFn?: (t: WebGLTexture) => void) {\r\n  const poolMap = state.assetPool.textures as Map<string, TexturePoolEntry>\r\n  const counts = state.assetPool.counts?.textures || new Map<string, number>()\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: counts, sprites: new Map(), effects: new Map() }\r\n  let entry = poolMap.get(key)\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry); }\r\n  const free = entry.freeList\r\n  if (!free.includes(tex)) free.push(tex)\r\n  const max = (entry.config?.max ?? state.assetPool.config.texturePoolSize) || 128\r\n  const strategy = entry.config?.strategy ?? _getStrategy(state.assetPool.config.textureOverflowStrategy, 'discard-oldest')\r\n  const countsMap = state.assetPool.counts?.textures || new Map<string, number>()\r\n  if (strategy === 'grow') return\r\n  while (free.length > max) {\r\n    const victim = strategy === 'discard-oldest' ? free.shift()! : free.pop()!\r\n    try { if (entry!.disposer) entry!.disposer(victim as any); else if (disposeFn) disposeFn(victim as any) } catch {}\r\n    _incCount(countsMap, key, -1)\r\n    entry.allocated = Math.max(0, (entry.allocated || 0) - 1)\r\n  }\r\n  if (strategy === 'error' && free.length > max) { const victim = free.pop()!; try { if (entry!.disposer) entry!.disposer(victim as any); else if (disposeFn) disposeFn(victim as any) } catch {} _incCount(countsMap, key, -1); entry.allocated = Math.max(0, (entry.allocated || 0) - 1) }\r\n}\r\n\r\nexport function acquireSprite<T extends object>(state: GameState, key: string, createFn: () => T & Pooled<T>, initArgs?: Partial<T>): T & Pooled<T> {\r\n  const poolMap = state.assetPool.sprites as Map<string, PoolEntry<T & Pooled<T>>>\r\n  const counts = state.assetPool.counts?.sprites || new Map<string, number>()\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: new Map(), sprites: counts, effects: new Map() }\r\n  let entry = poolMap.get(key)\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry); }\r\n  const free = entry.freeList as Array<T & Pooled<T>>\r\n  if (free.length) { const obj = free.pop()! as T & Pooled<T>; try { if (typeof obj.reset === 'function') obj.reset(initArgs); else if (initArgs && typeof initArgs === 'object') Object.assign(obj, initArgs) } catch {} return obj }\r\n  const max = state.assetPool.config.spritePoolSize || 256\r\n  const strategy = _getStrategy(state.assetPool.config.spriteOverflowStrategy, 'discard-oldest')\r\n  const total = entry.allocated || counts.get(key) || 0\r\n  if (total < max || strategy === 'grow') { const s = createFn() as T & Pooled<T>; try { if (typeof s.reset === 'function') s.reset(initArgs); else if (initArgs && typeof initArgs === 'object') Object.assign(s, initArgs) } catch {} entry.allocated = (entry.allocated || 0) + 1; _incCount(counts, key, 1); return s }\r\n  if (strategy === 'error') throw new Error(`Sprite pool exhausted for key \"${key}\" (max=${max})`)\r\n  const s = createFn() as T & Pooled<T>; entry.allocated = (entry.allocated || 0) + 1; _incCount(counts, key, 1); return s\r\n}\r\n\r\nexport function releaseSprite<T extends object>(state: GameState, key: string, sprite: T & Pooled<T>, disposeFn?: (s: T) => void) {\r\n  const poolMap = state.assetPool.sprites as Map<string, PoolEntry<T & Pooled<T>>>;\r\n  const counts = state.assetPool.counts?.sprites || new Map<string, number>();\r\n  if (!state.assetPool.counts) state.assetPool.counts = { textures: new Map(), sprites: counts, effects: new Map() };\r\n  let entry = poolMap.get(key);\r\n  if (!entry) { entry = { freeList: [], allocated: 0 }; poolMap.set(key, entry); }\r\n  const free = entry.freeList as Array<T & Pooled<T>>;\r\n  if (!free.includes(sprite)) free.push(sprite as T & Pooled<T>);\r\n  const max = state.assetPool.config.spritePoolSize || 256;\r\n  const strategy = _getStrategy(state.assetPool.config.spriteOverflowStrategy, 'discard-oldest');\r\n  if (strategy === 'grow') return;\r\n  while (free.length > max) {\r\n    const victim = strategy === 'discard-oldest' ? free.shift()! : free.pop()!;\r\n    try { if (disposeFn) disposeFn(victim as any); } catch {}\r\n    _incCount(counts, key, -1);\r\n  }\r\n  if (strategy === 'error' && free.length > max) {\r\n    const victim = free.pop()!;\r\n    try { if (disposeFn) disposeFn(victim as any); } catch {}\r\n    _incCount(counts, key, -1);\r\n  }\r\n}\r\n// Provide a default initial GameState for simulation and tests\r\nexport function makeInitialState(): GameState {\r\n  return {\r\n    t: 0,\r\n    ships: [],\r\n    bullets: [],\r\n    explosions: [],\r\n    shieldHits: [],\r\n    healthHits: [],\r\n    engineTrailsEnabled: true,\r\n    assetPool: {\r\n      textures: new Map<string, PoolEntry<WebGLTexture>>(),\r\n      sprites: new Map<string, PoolEntry<any>>(),\r\n      effects: new Map<string, PoolEntry<any>>(),\r\n      counts: {\r\n        textures: new Map<string, number>(),\r\n        sprites: new Map<string, number>(),\r\n        effects: new Map<string, number>(),\r\n      },\r\n      config: {\r\n        texturePoolSize: 128,\r\n        spritePoolSize: 256,\r\n        effectPoolSize: 128,\r\n        textureOverflowStrategy: 'discard-oldest',\r\n        spriteOverflowStrategy: 'discard-oldest',\r\n        effectOverflowStrategy: 'discard-oldest',\r\n      },\r\n    },\r\n  };\r\n}\r\n", "// teamsConfig.ts - Teams and fleet helpers (typed)\r\nimport { getDefaultShipType, getShipConfig } from \"./entitiesConfig\"; // should be './config/entitiesConfig'\r\nexport type Team = { id: string; color: string; label?: string };\r\nexport const TeamsConfig = {\r\n  teams: {\r\n    red: { id: \"red\", color: \"#ff4d4d\", label: \"Red\" },\r\n    blue: { id: \"blue\", color: \"#4da6ff\", label: \"Blue\" },\r\n  },\r\n  defaultFleet: {\r\n    counts: (() => {\r\n      // Build a default counts map from available ShipConfig types so new\r\n      // ship types are automatically included without needing manual edits.\r\n      const shipCfg = getShipConfig();\r\n      const types = Object.keys(shipCfg || {});\r\n      // sane defaults: make fighters most common, others rarer\r\n      const defaultCounts: Record<string, number> = {};\r\n      for (const t of types) {\r\n        if (t === \"fighter\") defaultCounts[t] = 8;\r\n        else if (t === \"corvette\") defaultCounts[t] = 3;\r\n        else if (t === \"frigate\") defaultCounts[t] = 2;\r\n        else if (t === \"destroyer\") defaultCounts[t] = 1;\r\n        else if (t === \"carrier\") defaultCounts[t] = 1;\r\n        else defaultCounts[t] = 1;\r\n      }\r\n      return defaultCounts;\r\n    })(),\r\n    spacing: 28,\r\n    jitter: { x: 80, y: 120 },\r\n  },\r\n  // continuousReinforcement controls: enable/disable, scoreMargin is the\r\n  // imbalance fraction (e.g. 0.12 means reinforce when weakest ratio < 0.38),\r\n  // perTick is the maximum ships considered per reinforcement tick, and\r\n  // shipTypes is an optional array of types to choose from randomly. If\r\n  // omitted, keys from defaultFleet.counts are used.\r\n  continuousReinforcement: {\r\n    enabled: false,\r\n    scoreMargin: 0.12,\r\n    perTick: 1,\r\n    interval: 5.0,\r\n    shipTypes: undefined as string[] | undefined,\r\n  },\r\n};\r\n\r\n// Local seeded PRNG (does not affect global rng)\r\nfunction mulberry32(seed: number) {\r\n  let t = seed >>> 0;\r\n  return function () {\r\n    t += 0x6d2b79f5;\r\n    let r = Math.imul(t ^ (t >>> 15), 1 | t);\r\n    r ^= r + Math.imul(r ^ (r >>> 7), 61 | r);\r\n    return ((r ^ (r >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nfunction hashStringToInt(s: string) {\r\n  let h = 2166136261 >>> 0;\r\n  for (let i = 0; i < s.length; i++) {\r\n    h ^= s.charCodeAt(i);\r\n    h = Math.imul(h, 16777619) >>> 0;\r\n  }\r\n  return h >>> 0;\r\n}\r\n\r\nexport function generateFleetForTeam(\r\n  seed = 0,\r\n  teamId: \"red\" | \"blue\" = \"red\",\r\n  bounds = { W: 800, H: 600 },\r\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\r\n  options: any = {},\r\n) {\r\n  const cfg = Object.assign({}, TeamsConfig.defaultFleet, options.fleet || {});\r\n  const spacing = options.spacing ?? cfg.spacing;\r\n  const jitter = Object.assign({}, cfg.jitter, options.jitter || {});\r\n  const centerY = bounds.H / 2;\r\n  const baseX = teamId === \"red\" ? bounds.W * 0.22 : bounds.W * 0.78;\r\n  const rng = mulberry32((seed >>> 0) + hashStringToInt(teamId));\r\n  const out: any[] = [];\r\n  for (const [type, count] of Object.entries(cfg.counts)) {\r\n    for (let i = 0; i < (count as number); i++) {\r\n      const r = spacing * Math.sqrt(rng());\r\n      const angle = rng() * Math.PI * 2;\r\n      const dx = Math.cos(angle) * r + (rng() - 0.5) * (jitter.x ?? 0);\r\n      const dy = Math.sin(angle) * r + (rng() - 0.5) * (jitter.y ?? 0);\r\n      const x = Math.max(0, Math.min(bounds.W - 1e-6, baseX + dx));\r\n      const y = Math.max(0, Math.min(bounds.H - 1e-6, centerY + dy));\r\n      if (typeof shipFactory === \"function\")\r\n        out.push(shipFactory(type, x, y, teamId));\r\n      else out.push({ type, x, y, team: teamId });\r\n    }\r\n  }\r\n  return out;\r\n}\r\n\r\nexport function makeInitialFleets(\r\n  seed = 0,\r\n  bounds = { W: 800, H: 600 },\r\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\r\n  options: any = {},\r\n) {\r\n  const red = generateFleetForTeam(seed, \"red\", bounds, shipFactory, options);\r\n  const blue = generateFleetForTeam(\r\n    seed + 1,\r\n    \"blue\",\r\n    bounds,\r\n    shipFactory,\r\n    options,\r\n  );\r\n  return red.concat(blue);\r\n}\r\n\r\nexport function chooseReinforcements(\r\n  seed = 0,\r\n  state: any = {},\r\n  options: any = {},\r\n) {\r\n  const cfg = Object.assign({}, TeamsConfig.continuousReinforcement, options);\r\n  // (no-op) merge options onto default continuous reinforcement config\r\n  if (!cfg.enabled) return [] as any[];\r\n  const teamStrength: Record<string, number> = {};\r\n  if (Array.isArray(state.ships)) {\r\n    for (const s of state.ships) {\r\n      if (!s || !s.team) continue;\r\n      const hp = typeof s.hp === \"number\" ? s.hp : 1;\r\n      teamStrength[s.team] = (teamStrength[s.team] || 0) + hp;\r\n    }\r\n  }\r\n  const teams = Object.keys(TeamsConfig.teams);\r\n  if (teams.length === 0) return [];\r\n  for (const t of teams) {\r\n    if (!teamStrength[t]) {\r\n      const cnt = (state.ships || []).filter(\r\n        (s: any) => s && s.team === t,\r\n      ).length;\r\n      teamStrength[t] = cnt > 0 ? cnt : 0;\r\n    }\r\n  }\r\n  let weakest = teams[0];\r\n  let strongest = teams[0];\r\n  for (const t of teams) {\r\n    if (teamStrength[t] < teamStrength[weakest]) weakest = t;\r\n    if (teamStrength[t] > teamStrength[strongest]) strongest = t;\r\n  }\r\n  const total = teams.reduce((s, t) => s + (teamStrength[t] || 0), 0) || 1;\r\n  const weakestRatio = (teamStrength[weakest] || 0) / total;\r\n  if (weakestRatio < 0.5 - cfg.scoreMargin) {\r\n    const orders: any[] = [];\r\n    const rng = mulberry32((seed >>> 0) + hashStringToInt(weakest));\r\n    // determine candidate ship types: either explicit list or keys from defaultFleet\r\n    const candidateTypes =\r\n      Array.isArray(cfg.shipTypes) && cfg.shipTypes.length\r\n        ? cfg.shipTypes\r\n        : Object.keys(TeamsConfig.defaultFleet.counts || { fighter: 1 });\r\n    // Build weights for candidate types using defaultFleet counts when available\r\n    const countsMap =\r\n      TeamsConfig && TeamsConfig.defaultFleet && TeamsConfig.defaultFleet.counts\r\n        ? TeamsConfig.defaultFleet.counts\r\n        : {};\r\n    const weights = candidateTypes.map((t: string) =>\r\n      Math.max(0, Number((countsMap as any)[t]) || 1),\r\n    );\r\n    const totalWeight =\r\n      weights.reduce((s: number, w: number) => s + w, 0) ||\r\n      candidateTypes.length ||\r\n      1;\r\n    // Helper: weighted random pick for ship types\r\n    const weightedPick = () => {\r\n      const r = rng() * totalWeight;\r\n      let acc = 0;\r\n      for (let i = 0; i < candidateTypes.length; i++) {\r\n        acc += weights[i];\r\n        if (r < acc) return candidateTypes[i];\r\n      }\r\n      return candidateTypes[candidateTypes.length - 1];\r\n    };\r\n    // Randomize number to spawn between 1 and cfg.perTick (inclusive)\r\n    const maxPerTick = Math.max(1, Math.floor(Number(cfg.perTick) || 1));\r\n    const spawnCount = Math.max(1, Math.floor(rng() * maxPerTick) + 1);\r\n    // spawnCount computed deterministically from the provided seed\r\n    const b = options.bounds || { W: 800, H: 600 };\r\n    const centerY = b.H / 2;\r\n    const baseX = weakest === \"red\" ? b.W * 0.18 : b.W * 0.82;\r\n    for (let i = 0; i < spawnCount; i++) {\r\n      const x = Math.max(0, Math.min(b.W - 1e-6, baseX + (rng() - 0.5) * 120));\r\n      const y = Math.max(\r\n        0,\r\n        Math.min(b.H - 1e-6, centerY + (rng() - 0.5) * 160),\r\n      );\r\n      const type =\r\n        Array.isArray(cfg.shipTypes) && cfg.shipTypes.length\r\n          ? candidateTypes[Math.floor(rng() * candidateTypes.length)] ||\r\n            getDefaultShipType()\r\n          : weightedPick();\r\n      orders.push({ type, team: weakest, x, y });\r\n    }\r\n    // return deterministic orders\r\n    return orders;\r\n  }\r\n  return [] as any[];\r\n}\r\n\r\n// Team fallback default\r\nexport const TEAM_DEFAULT = \"red\";\r\n\r\nexport default TeamsConfig;\r\n\r\n// Helper: call chooseReinforcements using a manager-derived seed (from global RNG)\r\n// This is convenient for callers (like gamemanager) that want to keep\r\n// reinforcements deterministic relative to the global `srand`/`srandom` state.\r\nimport { srandom } from \"../rng\";\r\nexport function chooseReinforcementsWithManagerSeed(\r\n  state: any = {},\r\n  options: any = {},\r\n) {\r\n  const seed = Math.floor(srandom() * 0xffffffff) >>> 0;\r\n  return chooseReinforcements(seed, state, options);\r\n}\r\n", "// src/rng.ts - Seeded RNG utilities (ported from rng.js)\r\nlet _seed = 1;\r\n\r\nexport function srand(seed: number = 1) {\r\n  // store as 32-bit unsigned\r\n  _seed = seed >>> 0;\r\n}\r\n\r\n// mulberry32 PRNG\r\nfunction mulberry32(a: number) {\r\n  return function() {\r\n    let t = (a += 0x6D2B79F5) >>> 0;\r\n    t = Math.imul(t ^ (t >>> 15), t | 1);\r\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nexport function srandom(): number {\r\n  const f = mulberry32(_seed);\r\n  // advance seed deterministically\r\n  _seed = (_seed + 0x9E3779B1) >>> 0;\r\n  return f();\r\n}\r\n\r\nexport function srange(min: number, max: number): number {\r\n  return min + (max - min) * srandom();\r\n}\r\n\r\nexport function srangeInt(min: number, max: number): number {\r\n  // exclusive upper bound to match expectations\r\n  return Math.floor(srange(min, max));\r\n}\r\n\r\nexport default { srand, srandom, srange, srangeInt };\r\n", "// Minimal TypeScript shim that re-exports the existing JavaScript runtime implementation.\n// Import the runtime as a namespace and re-export value bindings to avoid\n// circular alias issues. Types are defined in `gamemanager.d.ts`.\n\n// Ported from gamemanager.js, now canonical TypeScript implementation\nimport { makeInitialState, createShip, Ship, Bullet, genId, ExplosionEffect, ShieldHitEffect, HealthHitEffect, createExplosionEffect, resetExplosionEffect, createShieldHitEffect, resetShieldHitEffect, createHealthHitEffect, resetHealthHitEffect } from \"./entities\";\nimport { PARTICLE_DEFAULTS } from \"./config/entitiesConfig\";\nimport { applySimpleAI } from \"./behavior\";\nimport { simulateStep } from \"./simulate\";\nimport { SIM } from \"./config/simConfig\";\nimport { srand, srandom } from \"./rng\";\nimport { createSimWorker } from \"./createSimWorker\";\nimport { acquireEffect, releaseEffect, acquireSprite, releaseSprite, makePooled } from \"./entities\";\nimport {\n  SHIELD,\n  HEALTH,\n  EXPLOSION,\n  STARS,\n  FALLBACK_POSITIONS,\n} from \"./config/gamemanagerConfig\";\nimport type { ShipConfigMap, GameState } from \"./types\";\nimport { getShipConfig, getDefaultShipType } from \"./config/entitiesConfig\";\nimport {\n  chooseReinforcementsWithManagerSeed,\n  makeInitialFleets,\n  TeamsConfig,\n} from \"./config/teamsConfig\";\n\nexport const ships: Ship[] = [];\nexport const bullets: Bullet[] = [];\nexport const particles: Particle[] = [];\nexport const stars: Array<Record<string, unknown>> = [];\nexport const flashes: ExplosionEffect[] = [];\nexport const shieldFlashes: ShieldHitEffect[] = [];\nexport const healthFlashes: HealthHitEffect[] = [];\n// Bullet pooling\n// Bullets: support optional GameState-backed pooling. If `state` is provided,\n// use state.assetPool.sprites keyed by 'bullet', otherwise fallback to legacy in-memory pool.\nexport function acquireBullet(state: GameState, opts: Partial<Bullet> = {}): Bullet {\n  // Use state-backed sprite pool keyed by 'bullet'\n  const key = 'bullet';\n  const b = acquireSprite(state, key, () => makePooled({ ...opts, id: genId(), alive: true } as any, (o: any, initArgs?: any) => Object.assign(o, initArgs)), opts) as Bullet & any;\n  // push into the state-active array so simulation sees it\n  (state.bullets ||= []).push(b as Bullet);\n  return b;\n}\n\nexport function releaseBullet(state: GameState, b?: Bullet): void {\n  if (!b) return;\n  if (!b.alive) return; // Prevent double-free\n  b.alive = false;\n  // remove from the state's active bullets\n  const arr = state.bullets || [] as Bullet[];\n  const idx = arr.indexOf(b as Bullet);\n  if (idx !== -1) arr.splice(idx, 1);\n  releaseSprite(state, 'bullet', b as any, undefined);\n}\n\n// Explosion pooling\nexport function acquireExplosion(state: GameState, opts: Partial<ExplosionEffect> = {}): ExplosionEffect {\n  const key = 'explosion';\n  const e = acquireEffect<ExplosionEffect>(state, key, () => makePooled(createExplosionEffect(opts), resetExplosionEffect), opts);\n  (state.explosions ||= []).push(e);\n  return e;\n}\n\nexport function releaseExplosion(state: GameState, e?: ExplosionEffect) {\n  if (!e) return;\n  if (e._pooled) return;\n  if (!e.alive) return;\n  e.alive = false;\n  e._pooled = true;\n  const arr = state.explosions || [] as ExplosionEffect[];\n  const idx = arr.indexOf(e);\n  if (idx !== -1) arr.splice(idx, 1);\n  releaseEffect(state, 'explosion', e, undefined);\n}\n\n// ShieldHit pooling\nexport function acquireShieldHit(state: GameState, opts: Partial<ShieldHitEffect> = {}): ShieldHitEffect {\n  const key = 'shieldHit';\n  const sh = acquireEffect<ShieldHitEffect>(state, key, () => makePooled(createShieldHitEffect(opts), resetShieldHitEffect), opts);\n  (state.shieldHits ||= []).push(sh);\n  return sh;\n}\n\nexport function releaseShieldHit(state: GameState, sh?: ShieldHitEffect) {\n  if (!sh) return;\n  if (sh._pooled) return;\n  const arr = state.shieldHits || [] as ShieldHitEffect[];\n  const i = arr.indexOf(sh);\n  if (i !== -1) arr.splice(i, 1);\n  sh.alive = false;\n  sh._pooled = true;\n  releaseEffect(state, 'shieldHit', sh, undefined);\n}\n\n// HealthHit pooling\nexport function acquireHealthHit(state: GameState, opts: Partial<HealthHitEffect> = {}): HealthHitEffect {\n  const key = 'healthHit';\n  const hh = acquireEffect<HealthHitEffect>(state, key, () => makePooled(createHealthHitEffect(opts), resetHealthHitEffect), opts);\n  (state.healthHits ||= []).push(hh);\n  return hh;\n}\n\nexport function releaseHealthHit(state: GameState, hh?: HealthHitEffect) {\n  if (!hh) return;\n  if (hh._pooled) return;\n  const arr = state.healthHits || [] as HealthHitEffect[];\n  const i = arr.indexOf(hh);\n  if (i !== -1) arr.splice(i, 1);\n  hh.alive = false;\n  hh._pooled = true;\n  releaseEffect(state, 'healthHit', hh, undefined);\n}\n\nexport const config = {\n  shield: { ...SHIELD },\n  health: { ...HEALTH },\n  explosion: { ...EXPLOSION },\n  stars: { ...STARS },\n};\n\nlet _seed: number | null = null;\nlet _reinforcementInterval: number =\n  TeamsConfig.continuousReinforcement?.interval ?? 5.0;\nlet _reinforcementAccumulator = 0;\nlet _starCanvasVersion = 0;\nlet starCanvas: HTMLCanvasElement | null = null;\nlet _lastSimulateFrameId: number | null = null;\nlet _doubleSimStrict = false;\n\nexport function setDoubleSimStrict(v: boolean = false) {\n  _doubleSimStrict = !!v;\n}\n\nexport class Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  ttl: number;\n  life: number;\n  color: string;\n  size: number;\n  alive: boolean;\n  _pooled?: boolean; // Add pooled flag to prevent double-free\n  constructor(x = 0, y = 0, vx = 0, vy = 0, ttl = 1, color = \"#fff\", size = 2) {\n    this.x = x;\n    this.y = y;\n    this.vx = vx;\n    this.vy = vy;\n    this.ttl = ttl;\n    this.life = ttl;\n    this.color = color;\n    this.size = size;\n    this.alive = true;\n    this._pooled = false;\n  }\n}\n\nexport function acquireParticle(state: GameState, x: number, y: number, opts: Partial<Particle> = {}): Particle {\n  const key = 'particle';\n  const p = acquireEffect(state, key, () => makePooled(new Particle(x, y, opts.vx ?? 0, opts.vy ?? 0, opts.ttl ?? PARTICLE_DEFAULTS.ttl, opts.color ?? PARTICLE_DEFAULTS.color, opts.size ?? PARTICLE_DEFAULTS.size), (o: any, initArgs?: any) => Object.assign(o, initArgs)), { x, y, vx: opts.vx ?? 0, vy: opts.vy ?? 0, ttl: opts.ttl ?? PARTICLE_DEFAULTS.ttl, color: opts.color ?? PARTICLE_DEFAULTS.color, size: opts.size ?? PARTICLE_DEFAULTS.size });\n  // rehydrate\n  p.x = x;\n  p.y = y;\n  p.vx = opts.vx ?? 0;\n  p.vy = opts.vy ?? 0;\n  p.ttl = opts.ttl ?? PARTICLE_DEFAULTS.ttl;\n  p.life = p.ttl;\n  p.color = opts.color ?? PARTICLE_DEFAULTS.color;\n  p.size = opts.size ?? PARTICLE_DEFAULTS.size;\n  p.alive = true;\n  (state.particles ||= []).push(p);\n  return p;\n}\n\nexport function releaseParticle(state: GameState, p?: Particle) {\n  if (!p) return;\n  const key = 'particle';\n  try { releaseEffect(state, key, p, (x) => { /* no-op */ }); } catch {}\n  const idx = (state.particles || []).indexOf(p);\n  if (idx !== -1) (state.particles || []).splice(idx, 1);\n}\n\nexport function reset(seedValue: number | null = null) {\n  ships.length = 0;\n  bullets.length = 0;\n  particles.length = 0;\n  stars.length = 0;\n  flashes.length = 0;\n  shieldFlashes.length = 0;\n  healthFlashes.length = 0;\n  _reinforcementAccumulator = 0;\n  if (typeof seedValue === \"number\") {\n    _seed = seedValue >>> 0;\n    srand(_seed);\n  }\n}\n\nexport function initStars(state: GameState, W = 800, H = 600, count = 140) {\n  if (!state || !Array.isArray(state.stars)) return;\n  state.stars.length = 0;\n  for (let i = 0; i < count; i++) {\n    const x = srandom() * W;\n    const y = srandom() * H;\n    const r = 0.3 + srandom() * 1.3;\n    const a = 0.3 + srandom() * 0.7;\n    const twPhase = srandom() * Math.PI * 2;\n    const twSpeed = 0.5 + srandom() * 1.5;\n    state.stars.push({ x, y, r, a, baseA: a, twPhase, twSpeed });\n  }\n}\n\nexport function createStarCanvas(\n  state: GameState,\n  W = 800,\n  H = 600,\n  bg = \"#041018\",\n): HTMLCanvasElement | null {\n  if (!state || !Array.isArray(state.stars)) return null;\n  try {\n    const c =\n      typeof document !== \"undefined\" && document.createElement\n        ? document.createElement(\"canvas\")\n        : null;\n    if (!c) return null;\n    c.width = Math.max(1, Math.floor(W));\n    c.height = Math.max(1, Math.floor(H));\n    const ctx = c.getContext && c.getContext(\"2d\");\n    if (ctx) {\n      ctx.fillStyle = bg;\n      ctx.fillRect(0, 0, c.width, c.height);\n      for (const s of state.stars) {\n        const alpha = Math.max(\n          0,\n          Math.min(1, s.a != null ? s.a : s.baseA != null ? s.baseA : 1),\n        );\n        ctx.beginPath();\n        ctx.fillStyle = `rgba(255,255,255,${alpha})`;\n        const rr = Math.max(0.2, s.r || 0.5);\n        ctx.arc(s.x || 0, s.y || 0, rr, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n    _starCanvasVersion = (_starCanvasVersion || 0) + 1;\n    (c as any)._version = _starCanvasVersion;\n    starCanvas = c;\n    return c;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function getStarCanvasVersion() {\n  return _starCanvasVersion;\n}\n\nexport function setReinforcementInterval(seconds: number) {\n  _reinforcementInterval =\n    Number(seconds) || (TeamsConfig.continuousReinforcement?.interval ?? 5.0);\n}\nexport function getReinforcementInterval() {\n  return _reinforcementInterval;\n}\n\nfunction emitManagerEvent(\n  map: Map<string, Function[]>,\n  type: string,\n  data: any,\n) {\n  const arr = map.get(type) || [];\n  for (const cb of arr.slice()) {\n    try {\n      if (typeof cb === \"function\") cb(data);\n    } catch (e) {}\n  }\n}\n\nfunction evaluateReinforcement(\n  dt: number,\n  state: GameState,\n  continuousOptions: any = {},\n): { spawned: any[] } | null {\n  _reinforcementAccumulator += dt;\n  if (_reinforcementAccumulator >= _reinforcementInterval) {\n    _reinforcementAccumulator = 0;\n    try {\n      if (typeof chooseReinforcementsWithManagerSeed === \"function\") {\n        const orders = chooseReinforcementsWithManagerSeed(state, {\n          ...continuousOptions,\n          bounds: SIM.bounds,\n          enabled: true,\n        });\n        if (Array.isArray(orders) && orders.length) {\n          const spawned: any[] = [];\n          for (const o of orders) {\n            try {\n              const ship = createShip(\n                o.type || getDefaultShipType(),\n                o.x || 100,\n                o.y || 100,\n                o.team || \"red\",\n              );\n              state.ships.push(ship);\n              spawned.push(ship);\n            } catch (e) {}\n          }\n          return { spawned };\n        }\n      }\n      const fallback = getDefaultShipType();\n      const r = createShip(\n        fallback,\n        FALLBACK_POSITIONS[0].x,\n        FALLBACK_POSITIONS[0].y,\n        FALLBACK_POSITIONS[0].team,\n      );\n      const b = createShip(\n        fallback,\n        FALLBACK_POSITIONS[1].x,\n        FALLBACK_POSITIONS[1].y,\n        FALLBACK_POSITIONS[1].team,\n      );\n      state.ships.push(r);\n      state.ships.push(b);\n      return { spawned: [r, b] };\n    } catch (e) {\n      return null;\n    }\n  }\n  return null;\n}\n\nexport interface GameManagerOptions {\n  useWorker?: boolean;\n  renderer?: any;\n  seed?: number;\n  createSimWorker?: typeof createSimWorker;\n}\n\nexport function createGameManager({\n  useWorker = true,\n  renderer = null,\n  seed = 12345,\n  createSimWorker: createSimWorkerFactory,\n}: GameManagerOptions = {}) {\n  let state: GameState = makeInitialState();\n  let running = false;\n  const listeners = new Map<string, Function[]>();\n  const workerReadyCbs: Function[] = [];\n  let simWorker: any = null;\n  // Worker event handler refs (declared here so destroy() can unregister them)\n  let _workerReadyHandler: Function | null = null;\n  let _workerSnapshotHandler: Function | null = null;\n  let _workerReinforcementsHandler: Function | null = null;\n  let workerReady = false;\n  let lastReinforcement: { spawned: any[]; timestamp: number; options: any } = {\n    spawned: [],\n    timestamp: 0,\n    options: {},\n  };\n  let continuous = false;\n  let continuousOptions: any = {};\n\n  function emit(type: string, msg: any) {\n    emitManagerEvent(listeners, type, msg);\n  }\n  function _mgr_random() {\n    return srandom();\n  }\n\n  try {\n    if (useWorker) {\n      const factory = createSimWorkerFactory || createSimWorker;\n      let simWorkerUrl;\n      try {\n        // Only use import.meta.url if available (ES2022+)\n        simWorkerUrl =\n          typeof import.meta !== \"undefined\" && import.meta.url\n            ? new URL(\"./simWorker.js\", import.meta.url).href\n            : \"./simWorker.js\";\n      } catch (e) {\n        simWorkerUrl = \"./simWorker.js\";\n      }\n      simWorker = factory(simWorkerUrl);\n      // Keep references to worker handler functions so they can be removed on destroy\n\n      _workerReadyHandler = () => {\n        workerReady = true;\n        for (const cb of workerReadyCbs.slice()) {\n          try {\n            cb();\n          } catch (e) {}\n        }\n      };\n      simWorker.on && simWorker.on(\"ready\", _workerReadyHandler);\n\n      _workerSnapshotHandler = (m: any) => {\n        if (m && m.state) state = m.state;\n      };\n      simWorker.on && simWorker.on(\"snapshot\", _workerSnapshotHandler);\n\n      _workerReinforcementsHandler = (m: any) => {\n        emit(\"reinforcements\", m);\n      };\n      simWorker.on &&\n        simWorker.on(\"reinforcements\", _workerReinforcementsHandler);\n      try {\n        simWorker.post({\n          type: \"init\",\n          seed,\n          bounds: SIM.bounds,\n          simDtMs: SIM.DT_MS,\n          state,\n        });\n        simWorker.post({ type: \"start\" });\n      } catch (e) {}\n    }\n  } catch (e) {\n    simWorker = null;\n  }\n\n  function _evaluateAndEmit(dt: number) {\n    const result = evaluateReinforcement(dt, state, continuousOptions);\n    if (result && Array.isArray(result.spawned) && result.spawned.length) {\n      lastReinforcement = {\n        spawned: result.spawned,\n        timestamp: Date.now(),\n        options: { ...continuousOptions },\n      };\n      emit(\"reinforcements\", { spawned: result.spawned });\n    }\n  }\n\n  function step(dtSeconds: number) {\n    // Clamp dtSeconds to a max of 0.05 to prevent teleportation on lag spikes\n    const clampedDt = Math.min(dtSeconds, 0.05);\n    if (!simWorker) {\n      // Run AI logic before simulation step\n      try {\n        applySimpleAI(state, clampedDt, SIM.bounds);\n      } catch (e) {}\n      try {\n        simulateStep(state, clampedDt, SIM.bounds);\n      } catch (e) {}\n    } else {\n      try {\n        simWorker.post && simWorker.post({ type: \"snapshotRequest\" });\n      } catch (e) {}\n    }\n    _evaluateAndEmit(clampedDt);\n    // Flashes and event arrays are pruned by simulation now; no need for decay/splice/filter here.\n    if (renderer && typeof renderer.renderState === \"function\") {\n      try {\n        renderer.renderState({\n          ships: state.ships,\n          bullets: state.bullets,\n          flashes,\n          shieldFlashes,\n          healthFlashes,\n          t: state.t,\n        });\n      } catch (e) {}\n    }\n  }\n\n  let last =\n    typeof performance !== \"undefined\" && performance.now\n      ? performance.now()\n      : Date.now();\n  let acc = 0;\n  function runLoop() {\n    if (!running) return;\n    const now =\n      typeof performance !== \"undefined\" && performance.now\n        ? performance.now()\n        : Date.now();\n    acc += now - last;\n    last = now;\n    if (acc > 250) acc = 250;\n    while (acc >= SIM.DT_MS) {\n      step(SIM.DT_MS / 1000);\n      acc -= SIM.DT_MS;\n    }\n    try {\n      requestAnimationFrame(runLoop);\n    } catch (e) {\n      setTimeout(runLoop, SIM.DT_MS);\n    }\n  }\n\n  function on(evt: string, cb: Function) {\n    const arr = listeners.get(evt) || [];\n    arr.push(cb);\n    listeners.set(evt, arr);\n  }\n  function off(evt: string, cb: Function) {\n    const arr = listeners.get(evt) || [];\n    const i = arr.indexOf(cb);\n    if (i !== -1) arr.splice(i, 1);\n  }\n  /**\n   * destroy()\n   * ---------\n   * Tear down all internal resources owned by the GameManager.\n   * - Stops the run loop (idempotent).\n   * - Unregisters any internal worker event handlers that were attached\n   *   to the sim worker so external references are not retained.\n   * - Terminates/closes the sim worker if possible, or posts a stop\n   *   message as a best-effort fallback.\n   * - Clears internal worker-ready callbacks and resets worker state.\n   *\n   * Contract and guarantees:\n   * - Safe to call multiple times (idempotent).\n   * - Will not throw on missing or partially-initialized worker.\n   * - Designed to be called before higher-level cleanup (e.g. UI dispose)\n   *   so that worker-side handlers are removed while manager internals\n   *   are still available.\n   */\n  function destroy() {\n    // Stop running loop\n    running = false;\n    // Tear down worker and its handlers\n    try {\n      if (simWorker) {\n        try {\n          if (typeof simWorker.off === \"function\") {\n            try {\n              if (_workerReadyHandler)\n                simWorker.off(\"ready\", _workerReadyHandler);\n            } catch (e) {}\n            try {\n              if (_workerSnapshotHandler)\n                simWorker.off(\"snapshot\", _workerSnapshotHandler);\n            } catch (e) {}\n            try {\n              if (_workerReinforcementsHandler)\n                simWorker.off(\"reinforcements\", _workerReinforcementsHandler);\n            } catch (e) {}\n          }\n        } catch (e) {}\n        try {\n          if (typeof simWorker.terminate === \"function\") simWorker.terminate();\n          else if (typeof simWorker.close === \"function\") simWorker.close();\n          else if (typeof simWorker.post === \"function\")\n            simWorker.post({ type: \"stop\" });\n        } catch (e) {}\n        simWorker = null;\n      }\n    } catch (e) {}\n    workerReady = false;\n    workerReadyCbs.length = 0;\n    // Dispose renderer assets if possible\n    if (renderer && typeof renderer.dispose === \"function\") {\n      try {\n        renderer.dispose();\n      } catch (e) {}\n    }\n    // Clear asset references in GameState\n    starCanvas = null;\n  }\n  function start() {\n    if (!running) {\n      running = true;\n      last =\n        typeof performance !== \"undefined\" && performance.now\n          ? performance.now()\n          : Date.now();\n      runLoop();\n    }\n  }\n  function pause() {\n    running = false;\n  }\n  function resetManager() {\n    state = makeInitialState();\n    if (simWorker)\n      try {\n        simWorker.post({ type: \"command\", cmd: \"setState\", args: { state } });\n      } catch (e) {}\n  }\n  function stepOnce(dt = SIM.DT_MS / 1000) {\n    const n = Number(dt) || SIM.DT_MS / 1000;\n    step(n);\n  }\n  function setContinuousEnabled(v: boolean = false) {\n    continuous = !!v;\n    if (simWorker) {\n      try {\n        simWorker.post({ type: \"setContinuous\", value: !!v });\n      } catch (e) {}\n    } else {\n      if (continuous) {\n        const result = evaluateReinforcement(\n          SIM.DT_MS / 1000,\n          state,\n          continuousOptions,\n        );\n        if (result && Array.isArray(result.spawned) && result.spawned.length) {\n          lastReinforcement = {\n            spawned: result.spawned,\n            timestamp: Date.now(),\n            options: { ...continuousOptions },\n          };\n          emit(\"reinforcements\", { spawned: result.spawned });\n        }\n      }\n    }\n  }\n  function isContinuousEnabled() {\n    return !!continuous;\n  }\n  function setContinuousOptions(opts: any = {}) {\n    continuousOptions = { ...continuousOptions, ...opts };\n    if (simWorker)\n      try {\n        simWorker.post({\n          type: \"setContinuousOptions\",\n          opts: continuousOptions,\n        });\n      } catch (e) {}\n  }\n  function getContinuousOptions() {\n    return { ...continuousOptions };\n  }\n  function setReinforcementIntervalManager(seconds: number) {\n    setReinforcementInterval(seconds);\n    if (simWorker)\n      try {\n        simWorker.post({ type: \"setReinforcementInterval\", seconds });\n      } catch (e) {}\n  }\n  function getReinforcementIntervalManager() {\n    return getReinforcementInterval();\n  }\n  function isRunning() {\n    return running;\n  }\n  function isWorker() {\n    return !!simWorker && !!workerReady;\n  }\n  function onWorkerReady(cb: Function) {\n    if (typeof cb === \"function\") workerReadyCbs.push(cb);\n  }\n  function offWorkerReady(cb: Function) {\n    const i = workerReadyCbs.indexOf(cb);\n    if (i !== -1) workerReadyCbs.splice(i, 1);\n  }\n  function spawnShip(team: string = \"red\") {\n    try {\n      const type = getDefaultShipType();\n      const b = SIM.bounds;\n      const x = Math.max(0, Math.min(b.W - 1e-6, srandom() * b.W));\n      const y = Math.max(0, Math.min(b.H - 1e-6, srandom() * b.H));\n      const ship = createShip(type, x, y, team);\n      state.ships.push(ship);\n      return ship;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  // Fleet formation (config-driven)\n  function formFleets() {\n    try {\n      // Remove all ships\n      state.ships.length = 0;\n      // Use makeInitialFleets from teamsConfig (static import)\n      const bounds = SIM.bounds;\n      const seed = Math.floor(srandom() * 0xffffffff) >>> 0;\n      const ships = makeInitialFleets(seed, bounds, createShip);\n      for (const ship of ships) {\n        state.ships.push(ship);\n      }\n    } catch (e) {\n      /* ignore errors */\n    }\n  }\n  function reseedManager(newSeed: number = Math.floor(srandom() * 0xffffffff)) {\n    _seed = newSeed >>> 0;\n    srand(_seed);\n    if (simWorker)\n      try {\n        simWorker.post({ type: \"setSeed\", seed: _seed });\n      } catch (e) {}\n  }\n  function getLastReinforcement() {\n    return { ...lastReinforcement };\n  }\n  function snapshot() {\n    return {\n      ships: state.ships.slice(),\n      bullets: state.bullets.slice(),\n      t: state.t,\n    };\n  }\n  const score = { red: 0, blue: 0 };\n  const internal = { state, bounds: SIM.bounds };\n\n  return {\n    on,\n    off,\n    start,\n    pause,\n    reset: resetManager,\n    stepOnce,\n    setContinuousEnabled,\n    isContinuousEnabled,\n    setContinuousOptions,\n    getContinuousOptions,\n    setReinforcementInterval: setReinforcementIntervalManager,\n    getReinforcementInterval: getReinforcementIntervalManager,\n    isRunning,\n    isWorker,\n    onWorkerReady,\n    offWorkerReady,\n    spawnShip,\n    reseed: reseedManager,\n    getLastReinforcement,\n    snapshot,\n    score,\n    formFleets,\n    destroy,\n    _internal: internal,\n  };\n}\n\nexport function simulate(dt: number, W = 800, H = 600) {\n  try {\n    const now =\n      typeof performance !== \"undefined\" && performance.now\n        ? performance.now()\n        : Date.now();\n    const frame = Math.floor(now / 4);\n    if (_lastSimulateFrameId === frame) {\n      const msg =\n        \"[gamemanager] detected simulate() called multiple times in same frame\";\n      if (_doubleSimStrict) throw new Error(msg);\n      else console.warn(msg);\n    }\n    _lastSimulateFrameId = frame;\n  } catch (e) {}\n  // Build a canonical GameState using makeInitialState to ensure assetPool exists\n  const base = makeInitialState();\n  (base as any).t = 0;\n  (base as any).ships = ships;\n  (base as any).bullets = bullets;\n  (base as any).explosions = [];\n  (base as any).shieldHits = [];\n  (base as any).healthHits = [];\n  (base as any).particles = particles;\n  (base as any).stars = stars;\n  (base as any).flashes = flashes;\n  (base as any).shieldFlashes = shieldFlashes;\n  (base as any).healthFlashes = healthFlashes;\n  (base as any).starCanvas = starCanvas || undefined;\n  const state: GameState = base as any;\n  // (Previously exposed state globally via _lastGameState for legacy helpers.)\n  // We now pass `state` explicitly to pooling helpers to avoid global state.\n  evaluateReinforcement(dt, state);\n  try {\n    simulateStep(state, dt, SIM.bounds);\n  } catch (e) {}\n  for (const ex of state.explosions) {\n    if (ex && typeof ex === \"object\") flashes.push(ex);\n    try {\n      const count = 12;\n      for (let i = 0; i < count; i++) {\n        const ang = srandom() * Math.PI * 2;\n        const sp = 30 + srandom() * 90;\n        acquireParticle(state, (ex as any).x || 0, (ex as any).y || 0, {\n          vx: Math.cos(ang) * sp,\n          vy: Math.sin(ang) * sp,\n          ttl: 0.6,\n          color: \"rgba(255,200,100,0.95)\",\n          size: 3,\n        });\n      }\n    } catch (e) {}\n  }\n  for (const h of state.shieldHits) {\n    if (h && typeof h === \"object\") shieldFlashes.push(h);\n  }\n  for (const h of state.healthHits) {\n    if (h && typeof h === \"object\") healthFlashes.push(h);\n  }\n  // No global state to clear; callers should pass `state` explicitly to helpers.\n  return {\n    ships,\n    bullets,\n    particles,\n    flashes,\n    shieldFlashes,\n    healthFlashes,\n    stars,\n    starCanvas,\n  };\n}\n\nexport function processStateEvents(state: any, dt: number = 0) {\n  return state;\n}\n\nexport default createGameManager;\n", "export const EVASIVE_DURATION = 0.8; // seconds\r\nexport const TURN_RATES = { default: 4.0 } as const; // radians per second typical turn rate\r\nexport const EVASIVE_THRUST_MULT = 1.5; // multiplier for thrust during evasive maneuvers\r\nexport const SEPARATION_MULT = 0.6; // separation force multiplier between ships\r\n\r\n// AI logic thresholds and decision timer\r\nexport const AI_THRESHOLDS = {\r\n  decisionTimerMin: 0.5,\r\n  decisionTimerMax: 2.0,\r\n  hpEvadeThreshold: 0.35,\r\n  randomLow: 0.15,\r\n  randomHigh: 0.85,\r\n};\r\n\r\n// Ship movement global defaults (used if not per-ship)\r\nexport const SHIP_MOVEMENT_DEFAULTS = {\r\n  maxSpeed: 160,\r\n  maxAccel: 5,\r\n};\r\n\r\nexport default {\r\n  EVASIVE_DURATION,\r\n  TURN_RATES,\r\n  EVASIVE_THRUST_MULT,\r\n  SEPARATION_MULT,\r\n  AI_THRESHOLDS,\r\n  SHIP_MOVEMENT_DEFAULTS,\r\n};\r\n", "// behavior.ts - deterministic, simple AI for steering and firing\r\n// Uses seeded RNG for any randomness so results are reproducible.\r\nimport { srandom, srange } from \"./rng\";\r\nimport { createBullet } from \"./entities\";\r\nimport { AI_THRESHOLDS, SHIP_MOVEMENT_DEFAULTS } from \"./config/behaviorConfig\";\r\nimport { BULLET_DEFAULTS } from \"./config/entitiesConfig\";\r\nimport { TEAM_DEFAULT } from \"./config/teamsConfig\";\r\n\r\ntype ShipLike = {\r\n  id?: number;\r\n  x?: number;\r\n  y?: number;\r\n  vx?: number;\r\n  vy?: number;\r\n  team?: string;\r\n  hp?: number;\r\n  maxHp?: number;\r\n  cannons?: any[];\r\n  accel?: number; // max acceleration from config\r\n  currentAccel?: number; // dynamic, set by AI/gamemanager, 0..accel\r\n  radius?: number;\r\n  turnRate?: number;\r\n  damage?: number;\r\n  dmg?: number;\r\n  maxSpeed?: number; // NEW: max speed per ship\r\n  steering?: number; // NEW: steering intent (-1..1)\r\n  throttle?: number; // NEW: throttle intent (0..1)\r\n  __ai?: any;\r\n  turrets?: any[];\r\n  angle?: number;\r\n  type?: string; // Added for config sync\r\n};\r\n\r\ntype State = { ships: ShipLike[]; bullets: any[] };\r\n\r\nfunction len2(vx: number, vy: number) {\r\n  return vx * vx + vy * vy;\r\n}\r\nfunction clampSpeed(s: ShipLike, max: number) {\r\n  const v2 = len2(s.vx || 0, s.vy || 0);\r\n  const max2 = max * max;\r\n  if (v2 > max2 && v2 > 0) {\r\n    const inv = max / Math.sqrt(v2);\r\n    s.vx = (s.vx || 0) * inv;\r\n    s.vy = (s.vy || 0) * inv;\r\n  }\r\n}\r\n\r\nexport { clampSpeed };\r\n\r\nfunction aimWithSpread(from: ShipLike, to: ShipLike, spread = 0) {\r\n  let dx = (to.x || 0) - (from.x || 0);\r\n  let dy = (to.y || 0) - (from.y || 0);\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  dx /= d;\r\n  dy /= d;\r\n  if (spread > 0) {\r\n    const ang = Math.atan2(dy, dx);\r\n    const jitter = srange(-spread, spread);\r\n    const na = ang + jitter;\r\n    return { x: Math.cos(na), y: Math.sin(na) };\r\n  }\r\n  return { x: dx, y: dy };\r\n}\r\n\r\nfunction tryFire(state: State, ship: ShipLike, target: ShipLike, dt: number) {\r\n  // Legacy cannons (single target, all fire at once)\r\n  if (Array.isArray(ship.cannons) && ship.cannons.length > 0) {\r\n    for (const c of ship.cannons) {\r\n      if (typeof c.__cd !== \"number\") c.__cd = 0;\r\n      c.__cd -= dt;\r\n      if (c.__cd > 0) continue;\r\n      const spread = typeof c.spread === \"number\" ? c.spread : 0;\r\n      const dir = aimWithSpread(ship, target, spread);\r\n      const speed = typeof c.muzzleSpeed === \"number\" ? c.muzzleSpeed : BULLET_DEFAULTS.muzzleSpeed;\r\n      const dmg = typeof c.damage === \"number\"\r\n        ? c.damage\r\n        : typeof ship.damage === \"number\"\r\n          ? ship.damage\r\n          : typeof ship.dmg === \"number\"\r\n            ? ship.dmg\r\n            : BULLET_DEFAULTS.damage;\r\n      const ttl = typeof c.bulletTTL === \"number\" ? c.bulletTTL : BULLET_DEFAULTS.ttl;\r\n      const radius = typeof c.bulletRadius === \"number\" ? c.bulletRadius : BULLET_DEFAULTS.radius;\r\n      const vx = dir.x * speed;\r\n      const vy = dir.y * speed;\r\n      const b = Object.assign(\r\n        createBullet(\r\n          ship.x || 0,\r\n          ship.y || 0,\r\n          vx,\r\n          vy,\r\n          ship.team || TEAM_DEFAULT,\r\n          ship.id || null,\r\n          dmg,\r\n          ttl,\r\n        ),\r\n        { radius },\r\n      );\r\n      state.bullets.push(b);\r\n      const rate = typeof c.rate === \"number\" && c.rate > 0 ? c.rate : 1;\r\n      c.__cd = 1 / rate;\r\n    }\r\n  }\r\n  // Multi-turret support: each turret fires independently\r\n  if (Array.isArray(ship.turrets) && ship.turrets.length > 0) {\r\n    for (const [i, turret] of ship.turrets.entries()) {\r\n      if (!turret) continue;\r\n      if (typeof turret.__cd !== \"number\") turret.__cd = 0;\r\n      turret.__cd -= dt;\r\n      if (turret.__cd > 0) continue;\r\n      // Target selection per turret\r\n      let turretTarget: ShipLike | null = null;\r\n      if (turret.targeting === \"nearest\") {\r\n        const enemies = (state.ships || []).filter(\r\n          (sh) => sh && sh.team !== ship.team,\r\n        );\r\n        let minDist = Infinity;\r\n        for (const enemy of enemies) {\r\n          const dx = (enemy.x || 0) - (ship.x || 0);\r\n          const dy = (enemy.y || 0) - (ship.y || 0);\r\n          const d2 = dx * dx + dy * dy;\r\n          if (d2 < minDist) {\r\n            minDist = d2;\r\n            turretTarget = enemy;\r\n          }\r\n        }\r\n      } else if (turret.targeting === \"random\") {\r\n        const enemies = (state.ships || []).filter(\r\n          (sh) => sh && sh.team !== ship.team,\r\n        );\r\n        if (enemies.length)\r\n          turretTarget = enemies[Math.floor(srandom() * enemies.length)];\r\n      } else if (turret.targeting === \"focus\") {\r\n        // Use ship's main target if available\r\n        if (ship.__ai && ship.__ai.targetId != null) {\r\n          turretTarget =\r\n            (state.ships || []).find(\r\n              (sh) => sh && sh.id === ship.__ai.targetId,\r\n            ) || null;\r\n        }\r\n      } else {\r\n        // Default: nearest\r\n        const enemies = (state.ships || []).filter(\r\n          (sh) => sh && sh.team !== ship.team,\r\n        );\r\n        let minDist = Infinity;\r\n        for (const enemy of enemies) {\r\n          const dx = (enemy.x || 0) - (ship.x || 0);\r\n          const dy = (enemy.y || 0) - (ship.y || 0);\r\n          const d2 = dx * dx + dy * dy;\r\n          if (d2 < minDist) {\r\n            minDist = d2;\r\n            turretTarget = enemy;\r\n          }\r\n        }\r\n      }\r\n      if (!turretTarget) continue;\r\n      // Fire from turret position (relative to ship center, using config radius)\r\n      const spread = typeof turret.spread === \"number\" ? turret.spread : 0.05;\r\n      const dir = aimWithSpread(ship, turretTarget, spread);\r\n      const speed = typeof turret.muzzleSpeed === \"number\" ? turret.muzzleSpeed : BULLET_DEFAULTS.muzzleSpeed;\r\n      const dmg = typeof turret.damage === \"number\"\r\n        ? turret.damage\r\n        : typeof ship.damage === \"number\"\r\n          ? ship.damage\r\n          : BULLET_DEFAULTS.damage;\r\n      const ttl = typeof turret.bulletTTL === \"number\" ? turret.bulletTTL : BULLET_DEFAULTS.ttl;\r\n      const radius = typeof turret.bulletRadius === \"number\" ? turret.bulletRadius : BULLET_DEFAULTS.radius;\r\n      // Always use config radius for turret position\r\n      const angle = ship.angle || 0;\r\n      // Get latest config radius for this ship type\r\n      const shipType = ship.type || \"fighter\";\r\n      const shipCfg = require(\"./config/entitiesConfig\").getShipConfig()[shipType];\r\n      const configRadius = shipCfg && typeof shipCfg.radius === \"number\" ? shipCfg.radius : (ship.radius || 12);\r\n      const [tx, ty] = turret.position || [0, 0];\r\n      const turretX =\r\n        (ship.x || 0) +\r\n        Math.cos(angle) * tx * configRadius -\r\n        Math.sin(angle) * ty * configRadius;\r\n      const turretY =\r\n        (ship.y || 0) +\r\n        Math.sin(angle) * tx * configRadius +\r\n        Math.cos(angle) * ty * configRadius;\r\n      const vx = dir.x * speed;\r\n      const vy = dir.y * speed;\r\n      const b = Object.assign(\r\n        createBullet(\r\n          turretX,\r\n          turretY,\r\n          vx,\r\n          vy,\r\n          ship.team || TEAM_DEFAULT,\r\n          ship.id || null,\r\n          dmg,\r\n          ttl,\r\n        ),\r\n        { radius },\r\n      );\r\n      state.bullets.push(b);\r\n      turret.__cd =\r\n        typeof turret.cooldown === \"number\" && turret.cooldown > 0\r\n          ? turret.cooldown\r\n          : 1.0;\r\n    }\r\n  }\r\n}\r\n\r\nfunction ensureShipAiState(s: ShipLike) {\r\n  if (!s.__ai) {\r\n    s.__ai = { state: \"idle\", decisionTimer: 0, targetId: null };\r\n  }\r\n  return s.__ai;\r\n}\r\n\r\nfunction chooseNewTarget(state: State, ship: ShipLike) {\r\n  const enemies = (state.ships || []).filter(\r\n    (sh) => sh && sh.team !== ship.team,\r\n  );\r\n  if (!enemies.length) return null;\r\n  const idx = Math.floor(srandom() * enemies.length);\r\n  return enemies[idx];\r\n}\r\n\r\nfunction steerAway(\r\n  s: ShipLike,\r\n  tx: number,\r\n  ty: number,\r\n  accel: number,\r\n  dt: number,\r\n) {\r\n  const dx = (s.x || 0) - tx;\r\n  const dy = (s.y || 0) - ty;\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  const nx = dx / d;\r\n  const ny = dy / d;\r\n  s.vx = (s.vx || 0) + nx * accel * dt;\r\n  s.vy = (s.vy || 0) + ny * accel * dt;\r\n}\r\n\r\nexport function applySimpleAI(\r\n  state: State,\r\n  dt: number,\r\n  bounds = { W: 800, H: 600 },\r\n) {\r\n  if (!state || !Array.isArray(state.ships)) return;\r\n  for (const s of state.ships) {\r\n    const ai = ensureShipAiState(s);\r\n    ai.decisionTimer = Math.max(0, (ai.decisionTimer || 0) - dt);\r\n\r\n    let target: ShipLike | null = null;\r\n    if (ai.targetId != null)\r\n      target =\r\n        (state.ships || []).find((sh) => sh && sh.id === ai.targetId) || null;\r\n    if (!target) target = chooseNewTarget(state, s);\r\n    if (target) ai.targetId = target.id;\r\n\r\n    // Set throttle and steering dynamically based on intent\r\n    const maxAccel = typeof s.accel === \"number\" ? s.accel : 100;\r\n    const maxSpeed = typeof s.maxSpeed === \"number\" ? s.maxSpeed : 160;\r\n    s.steering = typeof s.steering === \"number\" ? s.steering : 0;\r\n    s.throttle = typeof s.throttle === \"number\" ? s.throttle : 0;\r\n\r\n    if (!target) {\r\n      // Idle: no acceleration, no steering\r\n      s.throttle = 0;\r\n      s.steering = 0;\r\n      ai.state = \"idle\";\r\n    } else {\r\n      if (ai.decisionTimer <= 0) {\r\n        const hpFrac = (s.hp || 0) / Math.max(1, s.maxHp || 1);\r\n        const rnd = srandom();\r\n        if (hpFrac < AI_THRESHOLDS.hpEvadeThreshold || rnd < AI_THRESHOLDS.randomLow) ai.state = \"evade\";\r\n        else if (rnd < AI_THRESHOLDS.randomHigh) ai.state = \"engage\";\r\n        else ai.state = \"idle\";\r\n        ai.decisionTimer = AI_THRESHOLDS.decisionTimerMin + srandom() * (AI_THRESHOLDS.decisionTimerMax - AI_THRESHOLDS.decisionTimerMin);\r\n      }\r\n\r\n      // Calculate desired angle to target\r\n      const dx = (target.x || 0) - (s.x || 0);\r\n      const dy = (target.y || 0) - (s.y || 0);\r\n      const desiredAngle = Math.atan2(dy, dx);\r\n      const currentAngle = typeof s.angle === \"number\" ? s.angle : 0;\r\n      let da = desiredAngle - currentAngle;\r\n      while (da < -Math.PI) da += Math.PI * 2;\r\n      while (da > Math.PI) da -= Math.PI * 2;\r\n      // Normalize steering to -1..1 using config\r\n      const steeringNorm = Math.PI / 2; // could be config if needed\r\n      const steering = Math.max(-1, Math.min(1, da / steeringNorm));\r\n\r\n      if (ai.state === \"engage\") {\r\n        s.throttle = 1;\r\n        s.steering = steering;\r\n        tryFire(state, s, target, dt);\r\n      } else if (ai.state === \"evade\") {\r\n        s.throttle = 0.8; // could be config if needed\r\n        // Steer away from target\r\n        const awayAngle = Math.atan2(\r\n          (s.y || 0) - (target.y || 0),\r\n          (s.x || 0) - (target.x || 0),\r\n        );\r\n        let daAway = awayAngle - currentAngle;\r\n        while (daAway < -Math.PI) daAway += Math.PI * 2;\r\n        while (daAway > Math.PI) daAway -= Math.PI * 2;\r\n        s.steering = Math.max(-1, Math.min(1, daAway / steeringNorm));\r\n      } else {\r\n        s.throttle = 0;\r\n        s.steering = 0;\r\n      }\r\n    }\r\n    clampSpeed(s, maxSpeed);\r\n  }\r\n}\r\n\r\nexport function getShipAiState(ship: ShipLike) {\r\n  if (!ship || !ship.__ai) return null;\r\n  const { targetId, ...rest } = ship.__ai;\r\n  return Object.assign({}, rest);\r\n}\r\n\r\nexport default { applySimpleAI, getShipAiState };\r\n", "// Enhanced progression with diminishing returns and extra per-level scalars\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 * Math.pow(1.25, level - 1),\r\n  hpPercentPerLevel: (level: number) => Math.min(0.10, 0.05 + 0.05 / Math.sqrt(level)),\r\n  dmgPercentPerLevel: 0.08,\r\n  shieldPercentPerLevel: 0.06,\r\n  speedPercentPerLevel: 0.03,\r\n  regenPercentPerLevel: 0.04,\r\n};\r\n\r\nexport default progression;\r\n", "import type { BoundaryBehavior } from \"./types\";\r\n\r\nexport interface SimConfig {\r\n  DT_MS: number;\r\n  MAX_ACC_MS: number;\r\n  bounds: { W: number; H: number };\r\n  friction: number; // Velocity damping factor for ships\r\n}\r\n\r\nexport const SIM: SimConfig = {\r\n  DT_MS: 16,\r\n  MAX_ACC_MS: 250,\r\n  bounds: { W: 1920, H: 1080 }, // Use LOGICAL_MAP for default bounds\r\n  friction: 0.98,\r\n};\r\n// boundaryBehavior: Tactical impact and pruning rationale\r\n// - 'remove': Ships/bullets are eliminated at map edge; punishes edge play, rewards central control. Pruning is immediate for out-of-bounds entities.\r\n// - 'wrap': Ships/bullets reappear on opposite edge; enables edge escapes, flanking via wrap, and kiting around boundaries. Pruning only occurs for expired entities.\r\n// - 'bounce': Ships/bullets reflect off edge; supports tactical repositioning, edge denial, and hit-and-run. Pruning is immediate for expired entities.\r\n// All entities, particles, and events are pruned immediately upon destruction, expiration, or leaving bounds, ensuring robust cleanup and tactical consistency.\r\nexport const boundaryBehavior: {\r\n  ships: BoundaryBehavior;\r\n  bullets: BoundaryBehavior;\r\n} = {\r\n  ships: \"wrap\",\r\n  bullets: \"remove\",\r\n};\r\n\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 + level * 50,\r\n};\r\n\r\nexport const LOGICAL_MAP = { W: 1920, H: 1080 };\r\n\r\nexport function getDefaultBounds() {\r\n  // Fixed logical map size for simulation and rendering\r\n  return { W: LOGICAL_MAP.W, H: LOGICAL_MAP.H };\r\n}\r\n\r\nexport default {\r\n  SIM,\r\n  progression,\r\n  boundaryBehavior,\r\n  LOGICAL_MAP,\r\n  getDefaultBounds,\r\n};\r\n", "// simulate.ts - TypeScript implementation ported from simulate.js\r\nimport { srange, srand, srandom } from \"./rng\";\r\nimport { progression as progressionCfg } from \"./config/progressionConfig\";\r\nimport { SIM, boundaryBehavior } from \"./config/simConfig\";\r\nimport { clampSpeed } from \"./behavior\";\r\nimport { acquireBullet, releaseBullet, acquireExplosion, releaseExplosion, acquireShieldHit, releaseShieldHit, acquireHealthHit, releaseHealthHit, releaseParticle } from \"./gamemanager\";\r\nimport type { GameState } from \"./types\";\r\n\r\nexport type Bounds = { W: number; H: number };\r\n\r\n// SIM constants migrated to simConfig.ts\r\n// Use SIM.DT_MS and SIM.MAX_ACC_MS instead\r\n\r\nfunction dist2(a: { x: number; y: number }, b: { x: number; y: number }) {\r\n  const dx = a.x - b.x;\r\n  const dy = a.y - b.y;\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\nexport function simulateStep(state: GameState, dtSeconds: number, bounds: Bounds) {\r\n  pruneAll(state, dtSeconds, bounds);\r\n  // Advance time\r\n  state.t = (state.t || 0) + dtSeconds;\r\n\r\n  // Move bullets and handle boundary behavior\r\n  for (let i = (state.bullets || []).length - 1; i >= 0; i--) {\r\n    const b = state.bullets[i];\r\n    b.x += (b.vx || 0) * dtSeconds;\r\n    b.y += (b.vy || 0) * dtSeconds;\r\n    b.ttl = (b.ttl || 0) - dtSeconds;\r\n    let outX = b.x < 0 || b.x >= bounds.W;\r\n    let outY = b.y < 0 || b.y >= bounds.H;\r\n    let outOfBounds = outX || outY;\r\n    let remove = false;\r\n    if (b.ttl <= 0) remove = true;\r\n    else if (outOfBounds) {\r\n      switch (boundaryBehavior.bullets) {\r\n        case 'remove':\r\n          remove = true;\r\n          break;\r\n        case 'wrap':\r\n          if (b.x < 0) b.x += bounds.W;\r\n          if (b.x >= bounds.W) b.x -= bounds.W;\r\n          if (b.y < 0) b.y += bounds.H;\r\n          if (b.y >= bounds.H) b.y -= bounds.H;\r\n          break;\r\n        case 'bounce':\r\n          if (outX) {\r\n            b.vx = -(b.vx || 0);\r\n            b.x = Math.max(0, Math.min(bounds.W, b.x));\r\n          }\r\n          if (outY) {\r\n            b.vy = -(b.vy || 0);\r\n            b.y = Math.max(0, Math.min(bounds.H, b.y));\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  if (remove) releaseBullet(state, b);\r\n  }\r\n  // Batched in-place pruning for all high-frequency event arrays\r\nfunction pruneAll(state: GameState, dtSeconds: number, bounds: Bounds) {\r\n  // Ensure all event arrays are initialized\r\n  state.particles = state.particles || [];\r\n  state.explosions = state.explosions || [];\r\n  state.shieldHits = state.shieldHits || [];\r\n  state.healthHits = state.healthHits || [];\r\n  // Bullets: prune expired/out-of-bounds\r\n  let writeBullet = 0;\r\n  for (let read = 0; read < state.bullets.length; read++) {\r\n    const b = state.bullets[read];\r\n    b.x += (b.vx || 0) * dtSeconds;\r\n    b.y += (b.vy || 0) * dtSeconds;\r\n    b.ttl = (b.ttl || 0) - dtSeconds;\r\n    let outX = b.x < 0 || b.x >= bounds.W;\r\n    let outY = b.y < 0 || b.y >= bounds.H;\r\n    let outOfBounds = outX || outY;\r\n    let remove = false;\r\n    if (b.ttl <= 0) remove = true;\r\n    else if (outOfBounds) {\r\n      switch (boundaryBehavior.bullets) {\r\n        case 'remove':\r\n          remove = true;\r\n          break;\r\n        case 'wrap':\r\n          if (b.x < 0) b.x += bounds.W;\r\n          if (b.x >= bounds.W) b.x -= bounds.W;\r\n          if (b.y < 0) b.y += bounds.H;\r\n          if (b.y >= bounds.H) b.y -= bounds.H;\r\n          break;\r\n        case 'bounce':\r\n          if (outX) {\r\n            b.vx = -(b.vx || 0);\r\n            b.x = Math.max(0, Math.min(bounds.W, b.x));\r\n          }\r\n          if (outY) {\r\n            b.vy = -(b.vy || 0);\r\n            b.y = Math.max(0, Math.min(bounds.H, b.y));\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    if (!remove) {\r\n      state.bullets[writeBullet++] = b;\r\n    } else {\r\n  releaseBullet(state, b);\r\n    }\r\n  }\r\n  state.bullets.length = writeBullet;\r\n\r\n  // Particles: prune expired\r\n  let writeParticle = 0;\r\n  for (let read = 0; read < state.particles.length; read++) {\r\n    const p = state.particles[read];\r\n    p.life = (p.life || p.ttl || 0) - dtSeconds;\r\n    if (p.life > 0) {\r\n      state.particles[writeParticle++] = p;\r\n    } else {\r\n      releaseParticle(p);\r\n    }\r\n  }\r\n  state.particles.length = writeParticle;\r\n\r\n  // Explosions: prune expired\r\n  let writeExplosion = 0;\r\n  for (let read = 0; read < state.explosions.length; read++) {\r\n    const e = state.explosions[read];\r\n    e.life = (e.life || e.ttl || 0) - dtSeconds;\r\n    if (e.life > 0) {\r\n      state.explosions[writeExplosion++] = e;\r\n    } else {\r\n      releaseExplosion(e);\r\n    }\r\n  }\r\n  state.explosions.length = writeExplosion;\r\n\r\n  // ShieldHits: prune out-of-bounds\r\n  let writeShield = 0;\r\n  for (let read = 0; read < state.shieldHits.length; read++) {\r\n    const sh = state.shieldHits[read];\r\n    if (\r\n      typeof sh.x === \"number\" &&\r\n      typeof sh.y === \"number\" &&\r\n      sh.x >= 0 && sh.x < bounds.W &&\r\n      sh.y >= 0 && sh.y < bounds.H\r\n    ) {\r\n      state.shieldHits[writeShield++] = sh;\r\n    } else {\r\n      releaseShieldHit(sh);\r\n    }\r\n  }\r\n  state.shieldHits.length = writeShield;\r\n\r\n  // HealthHits: prune out-of-bounds\r\n  let writeHealth = 0;\r\n  for (let read = 0; read < state.healthHits.length; read++) {\r\n    const hh = state.healthHits[read];\r\n    if (\r\n      typeof hh.x === \"number\" &&\r\n      typeof hh.y === \"number\" &&\r\n      hh.x >= 0 && hh.x < bounds.W &&\r\n      hh.y >= 0 && hh.y < bounds.H\r\n    ) {\r\n      state.healthHits[writeHealth++] = hh;\r\n    } else {\r\n      releaseHealthHit(hh);\r\n    }\r\n  }\r\n  state.healthHits.length = writeHealth;\r\n}\r\n\r\n  // Move ships and update heading\r\n  for (let si = (state.ships || []).length - 1; si >= 0; si--) {\r\n    const s = state.ships[si];\r\n    // --- Physics-based movement ---\r\n    const throttle = typeof s.throttle === \"number\" ? s.throttle : 0;\r\n    const steering = typeof s.steering === \"number\" ? s.steering : 0;\r\n    const accel = typeof s.accel === \"number\" ? s.accel : 0;\r\n    const turnRate = typeof s.turnRate === \"number\" ? s.turnRate : 3;\r\n    const maxSpeed = typeof s.maxSpeed === \"number\" ? s.maxSpeed : 160;\r\n    const angle = typeof s.angle === \"number\" ? s.angle : 0;\r\n\r\n    // Update angle based on steering\r\n    const maxTurn = turnRate * Math.abs(steering) * dtSeconds;\r\n    if (steering !== 0) {\r\n      let a = angle + Math.sign(steering) * maxTurn;\r\n      while (a < -Math.PI) a += Math.PI * 2;\r\n      while (a > Math.PI) a -= Math.PI * 2;\r\n      s.angle = a;\r\n    }\r\n\r\n    // Update velocity based on throttle and angle\r\n    const actualAccel = accel * throttle;\r\n    if (actualAccel > 0) {\r\n      s.vx = (s.vx || 0) + Math.cos(s.angle || 0) * actualAccel * dtSeconds;\r\n      s.vy = (s.vy || 0) + Math.sin(s.angle || 0) * actualAccel * dtSeconds;\r\n    }\r\n\r\n  // Apply friction/damping to velocity (from simConfig)\r\n  const friction = typeof SIM.friction === \"number\" ? SIM.friction : 0.98;\r\n  s.vx = (s.vx || 0) * friction;\r\n  s.vy = (s.vy || 0) * friction;\r\n\r\n    // Clamp speed using shared function\r\n    clampSpeed(s, maxSpeed);\r\n\r\n    // Move ship\r\n    s.x += (s.vx || 0) * dtSeconds;\r\n    s.y += (s.vy || 0) * dtSeconds;\r\n    // Boundary behavior for ships\r\n    const r = typeof s.radius === \"number\" ? s.radius : 12;\r\n    let outX = s.x < -r || s.x > bounds.W + r;\r\n    let outY = s.y < -r || s.y > bounds.H + r;\r\n    let outOfBounds = outX || outY;\r\n    let remove = false;\r\n    if (outOfBounds) {\r\n      switch (boundaryBehavior.ships) {\r\n        case 'remove':\r\n          remove = true;\r\n          break;\r\n        case 'wrap':\r\n          if (s.x < -r) s.x += bounds.W + r * 2;\r\n          if (s.x > bounds.W + r) s.x -= bounds.W + r * 2;\r\n          if (s.y < -r) s.y += bounds.H + r * 2;\r\n          if (s.y > bounds.H + r) s.y -= bounds.H + r * 2;\r\n          break;\r\n        case 'bounce':\r\n          if (outX) {\r\n            s.vx = -(s.vx || 0);\r\n            s.x = Math.max(-r, Math.min(bounds.W + r, s.x));\r\n          }\r\n          if (outY) {\r\n            s.vy = -(s.vy || 0);\r\n            s.y = Math.max(-r, Math.min(bounds.H + r, s.y));\r\n          }\r\n          break;\r\n      }\r\n    }\r\n    if (remove) state.ships.splice(si, 1);\r\n  }\r\n\r\n  // Bullet collisions\r\n  for (let bi = (state.bullets || []).length - 1; bi >= 0; bi--) {\r\n    const b = state.bullets[bi];\r\n    for (let si = (state.ships || []).length - 1; si >= 0; si--) {\r\n      const s = state.ships[si];\r\n      if (s.team === b.team) continue;\r\n      const r = (s.radius || 6) + (b.radius || 1);\r\n      if (dist2(b, s) <= r * r) {\r\n        const attacker =\r\n          typeof b.ownerId === \"number\" || typeof b.ownerId === \"string\"\r\n            ? (state.ships || []).find((sh: any) => sh.id === b.ownerId)\r\n            : undefined;\r\n        let dealtToShield = 0;\r\n        let dealtToHealth = 0;\r\n        const shield = s.shield || 0;\r\n        if (shield > 0) {\r\n          const absorbed = Math.min(shield, b.damage || 0);\r\n          s.shield = shield - absorbed;\r\n          const hitAngle = Math.atan2(\r\n            (b.y || 0) - (s.y || 0),\r\n            (b.x || 0) - (s.x || 0),\r\n          );\r\n          (state.shieldHits ||= []).push(acquireShieldHit(state, {\r\n            id: s.id,\r\n            x: b.x,\r\n            y: b.y,\r\n            team: s.team,\r\n            amount: absorbed,\r\n            hitAngle,\r\n          }));\r\n          // expose damage event for renderer (shield hit)\r\n          (state.damageEvents ||= []).push({\r\n            id: s.id,\r\n            type: \"shield\",\r\n            amount: absorbed,\r\n            x: b.x,\r\n            y: b.y,\r\n            team: s.team,\r\n            attackerId: attacker && attacker.id,\r\n          });\r\n          const remaining = (b.damage || 0) - absorbed;\r\n          if (remaining > 0) {\r\n            s.hp -= remaining;\r\n            (state.healthHits ||= []).push(acquireHealthHit(state, {\r\n              id: s.id,\r\n              x: b.x,\r\n              y: b.y,\r\n              team: s.team,\r\n              amount: remaining,\r\n            }));\r\n            // expose damage event for renderer (health hit)\r\n            (state.damageEvents ||= []).push({\r\n              id: s.id,\r\n              type: \"hp\",\r\n              amount: remaining,\r\n              x: b.x,\r\n              y: b.y,\r\n              team: s.team,\r\n              attackerId: attacker && attacker.id,\r\n            });\r\n          }\r\n          dealtToShield = absorbed;\r\n          dealtToHealth = Math.max(0, (b.damage || 0) - absorbed);\r\n        } else {\r\n          s.hp -= b.damage || 0;\r\n            (state.healthHits ||= []).push(acquireHealthHit(state, {\r\n              id: s.id,\r\n              x: b.x,\r\n              y: b.y,\r\n              team: s.team,\r\n              amount: b.damage || 0,\r\n            }));\r\n          // expose damage event for renderer (health hit)\r\n          (state.damageEvents ||= []).push({\r\n            id: s.id,\r\n            type: \"hp\",\r\n            amount: b.damage || 0,\r\n            x: b.x,\r\n            y: b.y,\r\n            team: s.team,\r\n            attackerId: attacker && attacker.id,\r\n          });\r\n          dealtToHealth = b.damage || 0;\r\n        }\r\n\r\n        // Update percent fields for renderer convenience\r\n        s.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\r\n        s.shieldPercent =\r\n          typeof s.maxShield === \"number\" && s.maxShield > 0\r\n            ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield))\r\n            : 0;\r\n        // XP for damage\r\n        if (attacker) {\r\n          attacker.xp =\r\n            (attacker.xp || 0) +\r\n            (dealtToShield + dealtToHealth) * (progressionCfg.xpPerDamage || 0);\r\n          while (\r\n            (attacker.xp || 0) >= progressionCfg.xpToLevel(attacker.level || 1)\r\n          ) {\r\n            attacker.xp -= progressionCfg.xpToLevel(attacker.level || 1);\r\n            attacker.level = (attacker.level || 1) + 1;\r\n            // Support function or number scalars for progression\r\n            const resolveScalar = (s: any, lvl: number) =>\r\n              typeof s === \"function\" ? s(lvl) : s || 0;\r\n            const lvl = attacker.level || 1;\r\n            const hpScalar = resolveScalar(\r\n              progressionCfg.hpPercentPerLevel,\r\n              lvl,\r\n            );\r\n            const shScalar = resolveScalar(\r\n              progressionCfg.shieldPercentPerLevel,\r\n              lvl,\r\n            );\r\n            const dmgScalar = resolveScalar(\r\n              progressionCfg.dmgPercentPerLevel,\r\n              lvl,\r\n            );\r\n            const speedScalar = resolveScalar(\r\n              (progressionCfg as any).speedPercentPerLevel,\r\n              lvl,\r\n            );\r\n            const regenScalar = resolveScalar(\r\n              (progressionCfg as any).regenPercentPerLevel,\r\n              lvl,\r\n            );\r\n\r\n            const hpMul = 1 + hpScalar;\r\n            const shMul = 1 + shScalar;\r\n            const dmgMul = 1 + dmgScalar;\r\n\r\n            attacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n            attacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n            if (typeof attacker.maxShield === \"number\") {\r\n              attacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n              attacker.shield = Math.min(\r\n                attacker.maxShield,\r\n                (attacker.shield || 0) * shMul,\r\n              );\r\n            }\r\n            if (Array.isArray(attacker.cannons)) {\r\n              for (const c of attacker.cannons) {\r\n                if (typeof c.damage === \"number\") c.damage *= dmgMul;\r\n              }\r\n            }\r\n            // Apply optional speed and shield regen increases\r\n            if (\r\n              typeof speedScalar === \"number\" &&\r\n              typeof attacker.accel === \"number\"\r\n            )\r\n              attacker.accel = attacker.accel * (1 + speedScalar);\r\n            if (\r\n              typeof regenScalar === \"number\" &&\r\n              typeof attacker.shieldRegen === \"number\"\r\n            )\r\n              attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\r\n          }\r\n        }\r\n        state.bullets.splice(bi, 1);\r\n        if (s.hp <= 0) {\r\n          // eslint-disable-next-line no-console\r\n          console.log(\r\n            \"DEBUG: KILL BRANCH, attacker\",\r\n            attacker && attacker.id,\r\n            \"xp before\",\r\n            attacker && attacker.xp,\r\n          );\r\n          if (attacker) {\r\n            attacker.xp = (attacker.xp || 0) + (progressionCfg.xpPerKill || 0);\r\n            // eslint-disable-next-line no-console\r\n            console.log(\r\n              \"DEBUG: KILL XP AWARDED, attacker\",\r\n              attacker.id,\r\n              \"xp after\",\r\n              attacker.xp,\r\n            );\r\n            while (\r\n              (attacker.xp || 0) >=\r\n              progressionCfg.xpToLevel(attacker.level || 1)\r\n            ) {\r\n              attacker.xp -= progressionCfg.xpToLevel(attacker.level || 1);\r\n              attacker.level = (attacker.level || 1) + 1;\r\n              // Support function or number scalars for progression on kill XP\r\n              const resolveScalar = (s: any, lvl: number) =>\r\n                typeof s === \"function\" ? s(lvl) : s || 0;\r\n              const lvl = attacker.level || 1;\r\n              const hpScalar = resolveScalar(\r\n                progressionCfg.hpPercentPerLevel,\r\n                lvl,\r\n              );\r\n              const shScalar = resolveScalar(\r\n                progressionCfg.shieldPercentPerLevel,\r\n                lvl,\r\n              );\r\n              const dmgScalar = resolveScalar(\r\n                progressionCfg.dmgPercentPerLevel,\r\n                lvl,\r\n              );\r\n              const speedScalar = resolveScalar(\r\n                (progressionCfg as any).speedPercentPerLevel,\r\n                lvl,\r\n              );\r\n              const regenScalar = resolveScalar(\r\n                (progressionCfg as any).regenPercentPerLevel,\r\n                lvl,\r\n              );\r\n\r\n              const hpMul = 1 + hpScalar;\r\n              const shMul = 1 + shScalar;\r\n              const dmgMul = 1 + dmgScalar;\r\n              attacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n              attacker.hp = Math.min(\r\n                attacker.maxHp,\r\n                (attacker.hp || 0) * hpMul,\r\n              );\r\n              if (typeof attacker.maxShield === \"number\") {\r\n                attacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n                attacker.shield = Math.min(\r\n                  attacker.maxShield,\r\n                  (attacker.shield || 0) * shMul,\r\n                );\r\n              }\r\n              if (Array.isArray(attacker.cannons)) {\r\n                for (const c of attacker.cannons) {\r\n                  if (typeof c.damage === \"number\") c.damage *= dmgMul;\r\n                }\r\n              }\r\n              // Apply optional speed and shield regen increases\r\n              if (\r\n                typeof speedScalar === \"number\" &&\r\n                typeof attacker.accel === \"number\"\r\n              )\r\n                attacker.accel = attacker.accel * (1 + speedScalar);\r\n              if (\r\n                typeof regenScalar === \"number\" &&\r\n                typeof attacker.shieldRegen === \"number\"\r\n              )\r\n                attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\r\n            }\r\n          }\r\n          (state.explosions ||= []).push(acquireExplosion(state, { x: s.x, y: s.y, team: s.team, life: 0.5, ttl: 0.5 }));\r\n          state.ships.splice(si, 1);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Shield regen\r\n  for (const s of state.ships || []) {\r\n    if (s.maxShield)\r\n      s.shield = Math.min(\r\n        s.maxShield,\r\n        (s.shield || 0) + (s.shieldRegen || 0) * dtSeconds,\r\n      );\r\n  }\r\n\r\n  // refresh percent convenience fields after regen\r\n  for (const s of state.ships || []) {\r\n    s.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\r\n    s.shieldPercent =\r\n      typeof s.maxShield === \"number\" && s.maxShield > 0\r\n        ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield))\r\n        : 0;\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default { simulateStep };\r\n", "// src/createSimWorker.ts - TypeScript helper to create and manage the sim Worker\r\nexport type SimMessage = any;\r\n\r\nexport function createSimWorker(url: string = './simWorker.js') {\r\n  const worker = new Worker(url, { type: 'module' });\r\n  const listeners = new Map<string, (msg: any) => void>();\r\n\r\n  worker.onmessage = (ev: MessageEvent) => {\r\n    const msg = ev.data;\r\n    const cb = listeners.get(msg && msg.type);\r\n    if (cb) cb(msg);\r\n  };\r\n\r\n  return {\r\n    post(msg: SimMessage) { worker.postMessage(msg); },\r\n    on(type: string, cb: (msg: any) => void) { listeners.set(type, cb); },\r\n    terminate() { worker.terminate(); }\r\n  };\r\n}\r\n\r\nexport default createSimWorker;\r\n", "export const SHIELD = {\r\n  ttl: 0.4, particleCount: 6, particleTTL: 0.5, particleColor: '#88ccff', particleSize: 2,\r\n  // arcWidth (radians) for shield hit visual/particle spread centered on hitAngle\r\n  // NOTE: Used in assetsConfig.ts visualStateDefaults and renderer logic. If not consumed, consider removing.\r\n  arcWidth: Math.PI / 6, // TODO: Ensure renderer/particle logic uses this or remove if redundant\r\n};\r\n\r\nexport const HEALTH = {\r\n  ttl: 0.6, particleCount: 8, particleTTL: 0.6, particleColor: '#ffb3b3', particleSize: 2.5,\r\n};\r\n\r\nexport const EXPLOSION = {\r\n  particleCount: 30, particleTTL: 1.2, particleColor: '#ffaa33', particleSize: 3, minSpeed: 20, maxSpeed: 140,\r\n  // TODO: Unify particle effect configs with assetsConfig.ts animations for maintainability\r\n};\r\n\r\nexport const FALLBACK_POSITIONS = [\r\n  { x: 100, y: 100, team: 'red' },\r\n  { x: 700, y: 500, team: 'blue' }\r\n];\r\n\r\nexport const STARS = { twinkle: true, redrawInterval: 500, count: 140 };\r\n\r\nexport default { SHIELD, HEALTH, EXPLOSION, STARS, FALLBACK_POSITIONS };\r\n", "export const DISPLAY_DEFAULTS = {\r\n  renderScale: 1.0,\r\n  displayScale: 1.0,\r\n  hpBar: { bg: \"#222\", fill: \"#4caf50\", w: 20, h: 4, dx: -10, dy: -12 },\r\n};\r\n\r\nexport default {};\r\n", "import { DISPLAY_DEFAULTS } from './displayConfig';\r\n\r\nexport const RendererConfig = {\r\n  preferred: 'canvas' as 'canvas' | 'webgl',\r\n  allowUrlOverride: true,\r\n  allowWebGL: true,\r\n  renderScale: DISPLAY_DEFAULTS.renderScale,\r\n  displayScale: DISPLAY_DEFAULTS.displayScale,\r\n  dynamicScaleEnabled: false,\r\n  lastFrameTime: 0,\r\n  frameScore: 'green', // green, yellow, red\r\n  // UI overlays configuration\r\n  hpBar: DISPLAY_DEFAULTS.hpBar,\r\n};\r\n\r\nexport function getPreferredRenderer(): 'canvas' | 'webgl' {\r\n  try {\r\n    if (RendererConfig.allowUrlOverride && typeof window !== 'undefined' && window.location && window.location.search) {\r\n      const p = new URLSearchParams(window.location.search);\r\n      const r = p.get('renderer');\r\n      if (r === 'canvas' || r === 'webgl') return r;\r\n    }\r\n  } catch (e) {}\r\n  return RendererConfig.preferred;\r\n}\r\n\r\nexport default RendererConfig;\r\n", "// src/canvasrenderer.ts - TypeScript port of the simple Canvas2D renderer.\r\n// This mirrors the behavior in src/canvasrenderer.js but provides types so\r\n// other parts of the codebase can be migrated safely.\r\n\r\n\r\nimport type { GameState } from './types';\r\nimport { acquireSprite, releaseSprite, acquireEffect, releaseEffect, makePooled, createExplosionEffect, resetExplosionEffect, createHealthHitEffect, resetHealthHitEffect, ExplosionEffect, HealthHitEffect } from './entities';\r\nimport RendererConfig from './config/rendererConfig';\r\nimport { getDefaultBounds } from './config/simConfig';\r\nimport AssetsConfig, { getVisualConfig, getShipAsset, getBulletAsset, getTurretAsset } from './config/assets/assetsConfig';\r\nimport { getSpriteAsset } from './config/assets/assetsConfig';\r\nimport TeamsConfig from './config/teamsConfig';\r\nimport { getShipConfig, getDefaultShipType } from './config/entitiesConfig';\r\n\r\nexport class CanvasRenderer {\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D | null = null;\r\n  bufferCanvas: HTMLCanvasElement;\r\n  bufferCtx: CanvasRenderingContext2D | null = null;\r\n  providesOwnLoop = false;\r\n  type = 'canvas';\r\n  // ratio between backing store pixels and CSS (logical) pixels\r\n  pixelRatio = 1;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n    // Create offscreen buffer sized at logical map \u00D7 renderer scale\r\n    this.bufferCanvas = document.createElement('canvas');\r\n    this.bufferCtx = this.bufferCanvas.getContext('2d');\r\n  }\r\n\r\n  init(): boolean {\r\n    this.ctx = this.canvas.getContext('2d');\r\n  // If running in a test environment (DOM emulation) getContext may be unimplemented.\r\n    // Provide a minimal no-op 2D context so renderState can still resize buffers and run logic.\r\n    if (!this.ctx) {\r\n      // create a lightweight no-op ctx that satisfies the subset used by the renderer\r\n      const noop = () => {};\r\n      const noOpCtx: any = {\r\n        setTransform: noop, imageSmoothingEnabled: true, clearRect: noop, save: noop, restore: noop,\r\n        fillRect: noop, beginPath: noop, moveTo: noop, lineTo: noop, closePath: noop,\r\n        fill: noop, stroke: noop, arc: noop, translate: noop, rotate: noop, drawImage: noop,\r\n        globalAlpha: 1, strokeStyle: '#000', fillStyle: '#000', lineWidth: 1, globalCompositeOperation: 'source-over'\r\n      };\r\n      this.ctx = noOpCtx as unknown as CanvasRenderingContext2D;\r\n    }\r\n    this.bufferCtx = this.bufferCanvas.getContext('2d') || this.ctx;\r\n    // bufferCtx must be present (either real or no-op) for renderState to proceed\r\n    if (!this.bufferCtx) return false;\r\n    // compute pixelRatio from renderScale only\r\n    try {\r\n      const renderScale = (RendererConfig && typeof (RendererConfig as any).renderScale === 'number') ? (RendererConfig as any).renderScale : 1;\r\n      this.pixelRatio = renderScale;\r\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // No scaling here; only when compositing buffer\r\n      this.ctx.imageSmoothingEnabled = true;\r\n    } catch (e) {\r\n      this.pixelRatio = 1;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  isRunning(): boolean { return false; }\r\n\r\n  renderState(state: GameState, interpolation = 0): void {\r\n    // helper: draw a stroked ring (used for explosions / flashes)\r\n    function drawRing(x: number, y: number, R: number, color: string, alpha = 1.0, thickness = 2) {\r\n          try {\r\n            bufferCtx.save();\r\n            bufferCtx.globalAlpha = Math.max(0, Math.min(1, alpha));\r\n            bufferCtx.strokeStyle = color;\r\n            bufferCtx.lineWidth = thickness * renderScale;\r\n            bufferCtx.beginPath();\r\n            bufferCtx.arc(x * renderScale, y * renderScale, Math.max(1, R * renderScale), 0, Math.PI * 2);\r\n            bufferCtx.stroke();\r\n            bufferCtx.restore();\r\n          } catch (e) { /* ignore draw errors */ }\r\n    }\r\n    // --- Offscreen buffer rendering ---\r\n    // 1. Resize bufferCanvas to logical size \u00D7 renderer scale BEFORE any drawing\r\n    // 2. Draw all simulation visuals to bufferCanvas\r\n    // 3. Copy bufferCanvas to main canvas ONLY after all drawing is finished\r\n    const ctx = this.ctx!;\r\n    const bufferCtx = this.bufferCtx!;\r\n    if (!ctx || !bufferCtx) return;\r\n  // Prefer canonical logical bounds from simConfig so renderer matches simulation\r\n  // defaults. If unavailable, fall back to previous hard-coded values.\r\n  const defaultBounds = (typeof getDefaultBounds === 'function') ? getDefaultBounds() : { W: 1920, H: 1080 };\r\n  const LOGICAL_W = (defaultBounds && typeof defaultBounds.W === 'number') ? defaultBounds.W : 1920;\r\n  const LOGICAL_H = (defaultBounds && typeof defaultBounds.H === 'number') ? defaultBounds.H : 1080;\r\n  const renderScale = (RendererConfig && typeof (RendererConfig as any).renderScale === 'number') ? (RendererConfig as any).renderScale : 1;\r\n    const fitScale = (RendererConfig as any)._fitScale || 1;\r\n    // Resize bufferCanvas if needed (before any drawing)\r\n    const bufferW = Math.round(LOGICAL_W * renderScale);\r\n    const bufferH = Math.round(LOGICAL_H * renderScale);\r\n    if (this.bufferCanvas.width !== bufferW || this.bufferCanvas.height !== bufferH) {\r\n      this.bufferCanvas.width = bufferW;\r\n      this.bufferCanvas.height = bufferH;\r\n      // After resizing, need to re-acquire bufferCtx\r\n      this.bufferCtx = this.bufferCanvas.getContext('2d');\r\n      if (!this.bufferCtx) return;\r\n    }\r\n    // Always use latest bufferCtx after possible resize\r\n    const activeBufferCtx = this.bufferCtx!;\r\n    // Draw simulation to bufferCanvas\r\n        activeBufferCtx.setTransform(1, 0, 0, 1, 0, 0); // No scaling here; scale coordinates instead\r\n    activeBufferCtx.clearRect(0, 0, bufferW, bufferH);\r\n    activeBufferCtx.save();\r\n    activeBufferCtx.fillStyle = (AssetsConfig.palette as any).background || '#0b1220';\r\n    activeBufferCtx.fillRect(0, 0, bufferW, bufferH);\r\n    activeBufferCtx.restore();\r\n\r\n    // helper: draw a polygon path from points (already scaled/rotated by transform)\r\n    function drawPolygon(points: number[][]) {\r\n      if (!points || points.length === 0) return;\r\n      activeBufferCtx.beginPath();\r\n      activeBufferCtx.moveTo(points[0][0] * renderScale, points[0][1] * renderScale);\r\n      for (let i = 1; i < points.length; i++) activeBufferCtx.lineTo(points[i][0] * renderScale, points[i][1] * renderScale);\r\n      activeBufferCtx.closePath();\r\n      activeBufferCtx.fill();\r\n    }\r\n\r\n    // background starCanvas if present\r\n    if (state && state.starCanvas) {\r\n      try {\r\n        activeBufferCtx.save();\r\n        activeBufferCtx.globalCompositeOperation = 'source-over';\r\n        activeBufferCtx.drawImage(state.starCanvas, 0, 0, bufferW, bufferH);\r\n        activeBufferCtx.restore();\r\n      } catch (e) { /* ignore draw errors */ }\r\n    }\r\n\r\n    // helper: current time for animation pulses\r\n    const now = (state && state.t) || 0;\r\n\r\n    // Spawn damage particles from recent damage events (renderer-owned particle bursts)\r\n    try {\r\n      const dmgAnim = AssetsConfig.animations && AssetsConfig.animations.damageParticles;\r\n      if (Array.isArray(state.damageEvents) && dmgAnim) {\r\n        state.particles = state.particles || [];\r\n        for (const ev of state.damageEvents) {\r\n          const count = dmgAnim.count || 6;\r\n          for (let i = 0; i < count; i++) {\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const speed = (Math.random() * (dmgAnim.spread || 0.6));\r\n            state.particles.push({\r\n              x: ev.x || 0,\r\n              y: ev.y || 0,\r\n              vx: Math.cos(angle) * speed,\r\n              vy: Math.sin(angle) * speed,\r\n              r: 0.6 + Math.random() * 0.8,\r\n              color: dmgAnim.color || '#ff6b6b',\r\n              lifetime: dmgAnim.lifetime || 0.8,\r\n              age: 0,\r\n              shape: 'circle'\r\n            });\r\n          }\r\n        }\r\n        // clear damageEvents after spawning so they are one-shot\r\n        state.damageEvents = [];\r\n      }\r\n    } catch (e) { /* ignore particle spawn errors */ }\r\n\r\n    // Engine trail rendering (config-driven, per ship)\r\n    for (const s of state.ships || []) {\r\n      const sx = (s.x || 0) * renderScale;\r\n      const sy = (s.y || 0) * renderScale;\r\n      if (sx < 0 || sx >= bufferW || sy < 0 || sy >= bufferH) continue;\r\n      // Update trail history (store in s.trail)\r\n      if (state.engineTrailsEnabled) {\r\n        s.trail = s.trail || [];\r\n        // Only add new trail point if ship moved\r\n        const last = s.trail.length ? s.trail[s.trail.length - 1] : null;\r\n        if (!last || last.x !== s.x || last.y !== s.y) {\r\n          s.trail.push({ x: s.x, y: s.y });\r\n        }\r\n        // Limit trail length using config\r\n        const trailConfig = require('./config/assets/assetsConfig').getEngineTrailConfig(s.type || getDefaultShipType());\r\n        const maxTrail = trailConfig?.maxLength || 40;\r\n        while (s.trail.length > maxTrail) s.trail.shift();\r\n      }\r\n\r\n      // Draw engine trail (configurable shape, color, width, fade)\r\n      if (Array.isArray(s.trail)) {\r\n        const trailConfig = require('./config/assets/assetsConfig').getEngineTrailConfig(s.type || getDefaultShipType());\r\n        const color = trailConfig?.color || '#aee1ff';\r\n        const width = (trailConfig?.width || 0.35) * (s.radius || 12) * renderScale;\r\n        const fade = trailConfig?.fade || 0.35;\r\n        for (let i = 0; i < s.trail.length; i++) {\r\n          const tx = s.trail[i].x || 0;\r\n          const ty = s.trail[i].y || 0;\r\n          // Fade alpha from fade to 1.0\r\n          const tAlpha = fade + (1 - fade) * (i / s.trail.length);\r\n          const txx = tx * renderScale;\r\n          const tyy = ty * renderScale;\r\n          if (txx < 0 || txx >= bufferW || tyy < 0 || tyy >= bufferH) continue;\r\n          activeBufferCtx.save();\r\n          activeBufferCtx.globalAlpha = tAlpha;\r\n          activeBufferCtx.fillStyle = color;\r\n          activeBufferCtx.beginPath();\r\n          activeBufferCtx.arc(txx, tyy, width, 0, Math.PI * 2);\r\n          activeBufferCtx.fill();\r\n          activeBufferCtx.restore();\r\n        }\r\n      }\r\n\r\n      // Draw ship hull using asset-agnostic sprite provider\r\n      const sprite = getSpriteAsset(s.type || getDefaultShipType());\r\n      activeBufferCtx.save();\r\n      activeBufferCtx.translate((s.x || 0) * renderScale, (s.y || 0) * renderScale);\r\n      activeBufferCtx.rotate((s.angle || 0));\r\n      let teamColor = AssetsConfig.palette.shipHull || '#888';\r\n      if (s.team === 'red' && TeamsConfig.teams.red) teamColor = TeamsConfig.teams.red.color;\r\n      else if (s.team === 'blue' && TeamsConfig.teams.blue) teamColor = TeamsConfig.teams.blue.color;\r\n      activeBufferCtx.fillStyle = teamColor;\r\n      if (sprite.svg) {\r\n        // Future: render SVG (not implemented yet)\r\n        // For now, fallback to shape\r\n      }\r\n      if (sprite.model3d) {\r\n        // Future: render 3D model (not implemented yet)\r\n        // For now, fallback to shape\r\n      }\r\n      const shape = sprite.shape;\r\n      if (shape) {\r\n        if (shape.type === 'circle') {\r\n          activeBufferCtx.beginPath();\r\n          activeBufferCtx.arc(0, 0, (s.radius || 12) * renderScale, 0, Math.PI * 2);\r\n          activeBufferCtx.fill();\r\n        } else if (shape.type === 'polygon') {\r\n          drawPolygon(shape.points as number[][]);\r\n        } else if (shape.type === 'compound') {\r\n          for (const part of shape.parts) {\r\n            if (part.type === 'circle') {\r\n              activeBufferCtx.beginPath();\r\n              activeBufferCtx.arc(0, 0, (part.r || 1) * (s.radius || 12) * renderScale, 0, Math.PI * 2);\r\n              activeBufferCtx.fill();\r\n            } else if (part.type === 'polygon') {\r\n              drawPolygon(part.points as number[][]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // Draw all turrets at their configured positions\r\n      if (Array.isArray((s as any).turrets) && (s as any).turrets.length > 0) {\r\n        for (const turret of (s as any).turrets) {\r\n          if (!turret || !turret.position) continue;\r\n          const turretShape = getTurretAsset(turret.kind || 'basic');\r\n          // Always use latest config radius for turret position and scale\r\n          const shipType = s.type || 'fighter';\r\n          const shipCfg = require('./config/entitiesConfig').getShipConfig()[shipType];\r\n          const configRadius = shipCfg && typeof shipCfg.radius === 'number' ? shipCfg.radius : (s.radius || 12);\r\n          const turretScale = configRadius * renderScale * 0.5;\r\n          // Calculate turret position relative to ship center, rotated by ship angle\r\n          const angle = (s.angle || 0);\r\n          const [tx, ty] = turret.position;\r\n          const turretX = Math.cos(angle) * tx * configRadius - Math.sin(angle) * ty * configRadius;\r\n          const turretY = Math.sin(angle) * tx * configRadius + Math.cos(angle) * ty * configRadius;\r\n          activeBufferCtx.save();\r\n          activeBufferCtx.translate(turretX, turretY);\r\n          activeBufferCtx.rotate(0); // Optionally rotate for turret direction\r\n          activeBufferCtx.fillStyle = AssetsConfig.palette.turret || '#94a3b8';\r\n          if (turretShape.type === 'circle') {\r\n            activeBufferCtx.beginPath();\r\n            activeBufferCtx.arc(0, 0, (turretShape.r || 1) * turretScale, 0, Math.PI * 2);\r\n            activeBufferCtx.fill();\r\n          } else if (turretShape.type === 'polygon') {\r\n            activeBufferCtx.save();\r\n            activeBufferCtx.scale(turretScale, turretScale);\r\n            drawPolygon(turretShape.points as number[][]);\r\n            activeBufferCtx.restore();\r\n          } else if (turretShape.type === 'compound') {\r\n            for (const part of turretShape.parts) {\r\n              if (part.type === 'circle') {\r\n                activeBufferCtx.beginPath();\r\n                activeBufferCtx.arc(0, 0, (part.r || 1) * turretScale, 0, Math.PI * 2);\r\n                activeBufferCtx.fill();\r\n              } else if (part.type === 'polygon') {\r\n                activeBufferCtx.save();\r\n                activeBufferCtx.scale(turretScale, turretScale);\r\n                drawPolygon(part.points as number[][]);\r\n                activeBufferCtx.restore();\r\n              }\r\n            }\r\n          }\r\n          activeBufferCtx.restore();\r\n        }\r\n      }\r\n\r\n      // Draw shield effect (blue ring if shield > 0)\r\n  if ((s.shield ?? 0) > 0) {\r\n        if (sx >= 0 && sx < bufferW && sy >= 0 && sy < bufferH) {\r\n          const shAnim = (AssetsConfig as any).animations && (AssetsConfig as any).animations.shieldEffect;\r\n          try {\r\n            if (shAnim) {\r\n              // pulse based on time\r\n              const pulse = (typeof shAnim.pulseRate === 'number') ? (0.5 + 0.5 * Math.sin(now * shAnim.pulseRate)) : 1.0;\r\n              const shieldNorm = Math.max(0, Math.min(1, (s.shield || 0) / (s.maxShield || s.shield || 1)));\r\n              const alphaBase = typeof shAnim.alphaBase === 'number' ? shAnim.alphaBase : (shAnim.alpha || 0.25);\r\n              const alphaScale = typeof shAnim.alphaScale === 'number' ? shAnim.alphaScale : 0.75;\r\n              const alpha = Math.max(0, Math.min(1, alphaBase + alphaScale * pulse * shieldNorm));\r\n              const R = (shAnim.r || 1.2) * (s.radius || 12);\r\n              activeBufferCtx.save();\r\n              activeBufferCtx.globalAlpha = alpha;\r\n              activeBufferCtx.strokeStyle = shAnim.color || '#3ab6ff';\r\n              activeBufferCtx.lineWidth = (shAnim.strokeWidth || 0.08) * (s.radius || 12) * renderScale;\r\n              activeBufferCtx.beginPath();\r\n              activeBufferCtx.arc((s.x || 0) * renderScale, (s.y || 0) * renderScale, Math.max(1, R * renderScale), 0, Math.PI * 2);\r\n              activeBufferCtx.stroke();\r\n              activeBufferCtx.restore();\r\n            } else {\r\n              drawRing(s.x, s.y, (s.radius || 12) * 1.2, '#3ab6ff', 0.5, 3 * renderScale);\r\n            }\r\n          } catch (e) { /* ignore shield draw errors */ }\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    // Health hits: render freshest per-ship health flash using index (reddish rings), pooled\r\n    try {\r\n      const nowT = state.t || 0;\r\n      for (const s of state.ships || []) {\r\n        try {\r\n          let flash: any = null;\r\n          const arr = Array.isArray(state.healthFlashes) ? state.healthFlashes.filter((f: any) => f.id === s.id) : [];\r\n          let bestTs = -Infinity;\r\n          for (const f of arr) {\r\n            if (!f) continue;\r\n            const fTs = (typeof f._ts === 'number') ? f._ts : 0;\r\n            const fTtl = (typeof f.ttl === 'number') ? f.ttl : 0.4;\r\n            if (fTs + fTtl >= nowT - 1e-6 && fTs > bestTs) { bestTs = fTs; flash = f; }\r\n          }\r\n          if (flash) {\r\n            // Use pooled effect for health flash\r\n            const pooledFlash = acquireEffect(state, 'healthFlash', () => makePooled(\r\n              // Use typed factory to create base health effect and attach render fields via reset\r\n              createHealthHitEffect({ x: flash.x || s.x || 0, y: flash.y || s.y || 0 }),\r\n              (obj, initArgs) => {\r\n                // rehydrate base health fields\r\n                resetHealthHitEffect(obj, initArgs as any);\r\n                // attach/rehydrate render-specific fields\r\n                (obj as any).ttl = initArgs?.ttl ?? 0.4;\r\n                (obj as any).life = initArgs?.life ?? (obj as any).ttl;\r\n                (obj as any).color = '#ff7766';\r\n                (obj as any).radius = 6;\r\n              }\r\n            ), flash);\r\n            type RenderHealthFlash = HealthHitEffect & { ttl: number; life: number; color: string; radius: number };\r\n            const pf = pooledFlash as unknown as RenderHealthFlash;\r\n            const t = Math.max(0, Math.min(1, pf.life / pf.ttl));\r\n            const R = (pf.radius as number) + (1 - t) * 18;\r\n            const alpha = 0.9 * t;\r\n            const fx = (pf.x as number) * renderScale;\r\n            const fy = (pf.y as number) * renderScale;\r\n            if (fx >= 0 && fx < bufferW && fy >= 0 && fy < bufferH) {\r\n              activeBufferCtx.save();\r\n              activeBufferCtx.globalAlpha = Math.max(0, Math.min(1, alpha));\r\n              activeBufferCtx.strokeStyle = pf.color;\r\n              activeBufferCtx.lineWidth = 2 * renderScale;\r\n              activeBufferCtx.beginPath();\r\n              activeBufferCtx.arc(fx, fy, Math.max(1, R * renderScale), 0, Math.PI * 2);\r\n              activeBufferCtx.stroke();\r\n              activeBufferCtx.restore();\r\n            }\r\n            releaseEffect(state, 'healthFlash', pooledFlash);\r\n          }\r\n        } catch (e) {}\r\n      }\r\n    } catch (e) {}\r\n\r\n    // bullets\r\n    for (const b of state.bullets || []) {\r\n      try {\r\n        const bx = (b.x || 0) * renderScale;\r\n        const by = (b.y || 0) * renderScale;\r\n        if (bx < 0 || bx >= bufferW || by < 0 || by >= bufferH) continue;\r\n        const r = b.radius || b.bulletRadius || 1.5;\r\n  const kind = typeof b.bulletRadius === 'number' ? (b.bulletRadius < 2 ? 'small' : b.bulletRadius < 3 ? 'medium' : 'large') : 'small';\r\n        const shape = getBulletAsset(kind as any);\r\n        activeBufferCtx.save();\r\n        activeBufferCtx.translate(bx, by);\r\n        const px = Math.max(1, r * renderScale);\r\n        activeBufferCtx.fillStyle = AssetsConfig.palette.bullet;\r\n        if (shape.type === 'circle') {\r\n          activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, px, 0, Math.PI * 2); activeBufferCtx.fill();\r\n        } else if (shape.type === 'polygon') {\r\n          drawPolygon(shape.points as number[][]);\r\n        } else if (shape.type === 'compound') {\r\n          for (const part of shape.parts) {\r\n            if (part.type === 'circle') {\r\n              activeBufferCtx.beginPath();\r\n              activeBufferCtx.arc(0, 0, (part.r || 1) * px, 0, Math.PI * 2);\r\n              activeBufferCtx.fill();\r\n            } else if (part.type === 'polygon') {\r\n              drawPolygon(part.points as number[][]);\r\n            }\r\n          }\r\n        }\r\n        activeBufferCtx.restore();\r\n      } catch (e) {}\r\n    }\r\n    // particles (pooled)\r\n    try {\r\n      const shapes = (AssetsConfig as any).shapes2d || {};\r\n      for (const p of state.particles || []) {\r\n        try {\r\n          // Use pooled sprite for particle visuals\r\n          const particle = acquireSprite(state, 'particle', () => makePooled({\r\n            x: p.x || 0,\r\n            y: p.y || 0,\r\n            r: p.r || 1,\r\n            color: p.color || '#ffdca8',\r\n            age: p.age || 0,\r\n            lifetime: p.lifetime || 1,\r\n            assetShape: p.assetShape,\r\n          }, (obj, initArgs) => {\r\n            obj.x = initArgs?.x ?? 0;\r\n            obj.y = initArgs?.y ?? 0;\r\n            obj.r = initArgs?.r ?? 1;\r\n            obj.color = initArgs?.color ?? '#ffdca8';\r\n            obj.age = initArgs?.age ?? 0;\r\n            obj.lifetime = initArgs?.lifetime ?? 1;\r\n            obj.assetShape = initArgs?.assetShape;\r\n          }), p);\r\n          const px = particle.x * renderScale;\r\n          const py = particle.y * renderScale;\r\n          if (px < 0 || px >= bufferW || py < 0 || py >= bufferH) continue;\r\n          activeBufferCtx.save();\r\n          const shapeName = particle.assetShape || (particle.r > 0.5 ? 'particleMedium' : 'particleSmall');\r\n          const shape = shapes[shapeName];\r\n          activeBufferCtx.fillStyle = particle.color;\r\n          activeBufferCtx.globalAlpha = Math.max(0, Math.min(1, 1 - (particle.age / particle.lifetime)));\r\n          activeBufferCtx.translate(px, py);\r\n          if (shape) {\r\n            if (shape.type === 'circle') {\r\n              const rr = (shape.r || 0.12) * particle.r * renderScale * 6;\r\n              activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, rr, 0, Math.PI * 2); activeBufferCtx.fill();\r\n            } else if (shape.type === 'polygon') {\r\n              activeBufferCtx.beginPath();\r\n              const pts = shape.points || [];\r\n              if (pts.length) {\r\n                activeBufferCtx.moveTo((pts[0][0] || 0) * renderScale, (pts[0][1] || 0) * renderScale);\r\n                for (let i = 1; i < pts.length; i++) activeBufferCtx.lineTo((pts[i][0] || 0) * renderScale, (pts[i][1] || 0) * renderScale);\r\n                activeBufferCtx.closePath();\r\n                activeBufferCtx.fill();\r\n              }\r\n            } else if (shape.type === 'compound') {\r\n              for (const part of shape.parts || []) {\r\n                if (part.type === 'circle') {\r\n                  const rr = (part.r || 0.12) * particle.r * renderScale * 6;\r\n                  activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, rr, 0, Math.PI * 2); activeBufferCtx.fill();\r\n                } else if (part.type === 'polygon') {\r\n                  activeBufferCtx.beginPath();\r\n                  const pts = part.points || [];\r\n                  if (pts.length) {\r\n                    activeBufferCtx.moveTo((pts[0][0] || 0) * renderScale, (pts[0][1] || 0) * renderScale);\r\n                    for (let i = 1; i < pts.length; i++) activeBufferCtx.lineTo((pts[i][0] || 0) * renderScale, (pts[i][1] || 0) * renderScale);\r\n                    activeBufferCtx.closePath();\r\n                    activeBufferCtx.fill();\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, (particle.r || 2) * renderScale, 0, Math.PI * 2); activeBufferCtx.fill();\r\n            }\r\n          } else {\r\n            activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, (particle.r || 2) * renderScale, 0, Math.PI * 2); activeBufferCtx.fill();\r\n          }\r\n          activeBufferCtx.restore();\r\n          releaseSprite(state, 'particle', particle);\r\n        } catch (e) {}\r\n      }\r\n    } catch (e) { /* ignore particle render errors */ }\r\n\r\n    // Explosions (flashes) use explosionParticle if available, pooled via acquireEffect\r\n    try {\r\n      const expShape = (AssetsConfig as any).shapes2d && (AssetsConfig as any).shapes2d.explosionParticle;\r\n      for (const ex of state.explosions || []) {\r\n        try {\r\n          // Use pooled effect for explosion visuals\r\n          const effect = acquireEffect(state, 'explosion', () => makePooled(\r\n            createExplosionEffect({ x: ex.x || 0, y: ex.y || 0, r: (expShape && expShape.r) || 0.32 }),\r\n            (obj, initArgs) => {\r\n              // rehydrate base explosion fields\r\n              resetExplosionEffect(obj, initArgs as any);\r\n              // attach/rehydrate render-specific fields\r\n              (obj as any).scale = initArgs?.scale ?? 1;\r\n              (obj as any).color = initArgs?.color ?? '#ffd089';\r\n              (obj as any).alpha = initArgs?.alpha ?? ((1 - ((ex.life || 0.5) / (ex.ttl || 0.5))) * 0.9);\r\n            }\r\n          ), ex);\r\n          type RenderExplosion = ExplosionEffect & { scale?: number; color?: string; alpha?: number };\r\n          const ef = effect as unknown as RenderExplosion;\r\n          activeBufferCtx.save();\r\n          activeBufferCtx.globalAlpha = (ef.alpha as number) || 0;\r\n          activeBufferCtx.translate((ef.x as number) * renderScale, (ef.y as number) * renderScale);\r\n          activeBufferCtx.fillStyle = ef.color || '#ffd089';\r\n          if (expShape && expShape.type === 'circle') {\r\n            const rr = (ef.r || 0.32) * (ef.scale || 1) * renderScale * 6;\r\n            activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, rr * (1 + (1 - ((ex.life || 0.5) / (ex.ttl || 0.5)))), 0, Math.PI * 2); activeBufferCtx.fill();\r\n          } else {\r\n            activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, Math.max(2, (ef.scale || 1) * 12 * (1 - ((ex.life || 0.5) / (ex.ttl || 0.5)))), 0, Math.PI * 2); activeBufferCtx.fill();\r\n          }\r\n          activeBufferCtx.restore();\r\n          releaseEffect(state, 'explosion', effect);\r\n        } catch (e) {}\r\n      }\r\n    } catch (e) {}\r\n\r\n    // --- Copy bufferCanvas to main canvas, scaling to fit window ---\r\n    // Only copy after all drawing is finished\r\n    ctx.save();\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transform for drawImage\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    ctx.imageSmoothingEnabled = false;\r\n      // Copy buffer to canvas at 1:1 scaling; let CSS handle visual scaling if needed\r\n      ctx.drawImage(\r\n        this.bufferCanvas,\r\n        0, 0, this.bufferCanvas.width, this.bufferCanvas.height,\r\n        0, 0,\r\n        this.canvas.width,\r\n        this.canvas.height\r\n      );\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nexport default CanvasRenderer;\r\n", "// Minimal, typed WebGL renderer focused on texture baking and lifecycle\r\n// Implements the public API expected by main.ts and tests.\r\n\r\nimport { AssetsConfig, Shape2D } from \"./config/assets/assetsConfig\";\r\nimport type { GameState } from \"./types\";\r\nimport {\r\n  acquireTexture,\r\n  releaseTexture,\r\n  acquireSprite,\r\n  releaseSprite,\r\n  acquireEffect,\r\n  releaseEffect,\r\n  makePooled,\r\n  createExplosionEffect,\r\n  resetExplosionEffect,\r\n  ExplosionEffect,\r\n} from \"./entities\";\r\n\r\nexport class WebGLRenderer {\r\n  private canvas: HTMLCanvasElement;\r\n  private gl: WebGL2RenderingContext | WebGLRenderingContext | null = null;\r\n  // Renderer may run its own loop in advanced impls (not used here)\r\n  public providesOwnLoop = false;\r\n\r\n  // Cache of baked textures keyed by asset key\r\n  private shapeTextures: Record<string, WebGLTexture> = {};\r\n  // Last-seen GameState (to support release to pool during dispose)\r\n  private gameState: GameState | null = null;\r\n  // Optional textured-quad resources (not required by tests)\r\n  private quadVBO: WebGLBuffer | null = null;\r\n  private quadProg: WebGLProgram | null = null;\r\n  // Optional FBO resources for render-to-texture\r\n  private fbo: WebGLFramebuffer | null = null;\r\n  private fboTex: WebGLTexture | null = null;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n  }\r\n\r\n  // Initialize GL context and basic state\r\n  init(): boolean {\r\n    try {\r\n      const gl =\r\n        (this.canvas.getContext(\"webgl2\") as WebGL2RenderingContext | null) ||\r\n        (this.canvas.getContext(\"webgl\") as WebGLRenderingContext | null);\r\n      if (!gl) return false;\r\n      this.gl = gl;\r\n      gl.clearColor(0.02, 0.03, 0.06, 1.0);\r\n      // Lazily initialize optional programs/buffers when used\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Called when canvas backing store size changes\r\n  updateScale(): void {\r\n    if (!this.gl) return;\r\n    try {\r\n      this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    } catch {}\r\n  }\r\n\r\n  isRunning(): boolean {\r\n    return false;\r\n  }\r\n\r\n  // Render a state frame. This stub clears the screen and ensures\r\n  // textures for present ship types are baked and cached.\r\n  renderState(state: GameState, _interpolation = 0): void {\r\n    if (!this.gl) return;\r\n    // Remember the state so dispose can release assets back to the pool\r\n    this.gameState = state;\r\n    const gl = this.gl;\r\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    try {\r\n      const ships = (state && state.ships) || [];\r\n      for (const s of ships) {\r\n        const type = (s && s.type) || \"fighter\";\r\n        this.bakeShapeToTexture(state, type);\r\n        // Acquire a transient sprite object for this ship and rehydrate it.\r\n        try {\r\n          const key = `ship:${type}`;\r\n          const sprite = acquireSprite(this.gameState || (state as any), key, () => ({ type }));\r\n          // Reset/rehydrate runtime fields used by renderer\r\n          type RenderSprite = { type: string; x?: number; y?: number; angle?: number };\r\n          const sp = sprite as unknown as RenderSprite;\r\n          try {\r\n            sp.x = s.x || 0;\r\n            sp.y = s.y || 0;\r\n            sp.angle = s.angle || 0;\r\n          } catch {}\r\n          try { releaseSprite(this.gameState || (state as any), key, sprite); } catch {}\r\n        } catch {}\r\n      }\r\n      // Process visual flashes/effects and use effect pooling for transient objects\r\n      try {\r\n        const flashes = (state as any).flashes || [];\r\n        for (const f of flashes) {\r\n          try {\r\n            const key = `flash`;\r\n            const pooled = acquireEffect(this.gameState || (state as any), key, () => makePooled(\r\n              createExplosionEffect({ x: f.x || 0, y: f.y || 0 }),\r\n              (obj, initArgs) => {\r\n                resetExplosionEffect(obj, initArgs as any);\r\n                // attach render-only fields\r\n                (obj as any).ttl = initArgs?.ttl ?? 0.5;\r\n              }\r\n            ), f);\r\n            type RenderFlash = ExplosionEffect & { ttl?: number };\r\n            const ef = pooled as unknown as RenderFlash;\r\n            try {\r\n              if (ef) {\r\n                // ef.x/ef.y already set by reset on acquire; ensure numeric\r\n                ef.x = ef.x || 0;\r\n                ef.y = ef.y || 0;\r\n                ef.ttl = ef.ttl ?? 0.5;\r\n              }\r\n            } catch {}\r\n            try { releaseEffect(this.gameState || (state as any), key, pooled); } catch {}\r\n          } catch {}\r\n        }\r\n      } catch {}\r\n    } catch {}\r\n  }\r\n\r\n  // Pre-bake textures for all known shapes\r\n  preloadAllAssets(): void {\r\n    if (!this.gl) return;\r\n    try {\r\n      const shapes = (AssetsConfig as any).shapes2d || {};\r\n      for (const key of Object.keys(shapes)) this.bakeShapeToTexture(this.gameState, key);\r\n    } catch {}\r\n  }\r\n\r\n  // Testing helper: check if we have a cached texture for a key\r\n  hasCachedTexture(key: string): boolean {\r\n    return !!this.shapeTextures[key];\r\n  }\r\n\r\n  // Dispose all GL resources and clear caches\r\n  dispose(): void {\r\n    if (this.gl) {\r\n      try {\r\n        for (const key of Object.keys(this.shapeTextures)) {\r\n          const tex = this.shapeTextures[key];\r\n          if (!tex) continue;\r\n          if (this.gameState) {\r\n            // Return texture to pool for reuse; allow pool to dispose overflow via deleter\r\n            try {\r\n              const gl = this.gl as WebGLRenderingContext;\r\n              releaseTexture(this.gameState, key, tex, (t) => { try { gl.deleteTexture(t); } catch {} });\r\n            } catch {}\r\n          } else {\r\n            // No pool available, delete GL resource\r\n            try { (this.gl as WebGLRenderingContext).deleteTexture(tex); } catch {}\r\n          }\r\n        }\r\n        // Optional resources cleanup\r\n        try { if (this.quadVBO) (this.gl as WebGLRenderingContext).deleteBuffer(this.quadVBO); } catch {}\r\n        try { if (this.quadProg) (this.gl as WebGLRenderingContext).deleteProgram(this.quadProg); } catch {}\r\n        try { if (this.fboTex) (this.gl as WebGLRenderingContext).deleteTexture(this.fboTex); } catch {}\r\n        try { if (this.fbo) (this.gl as WebGLRenderingContext).deleteFramebuffer(this.fbo); } catch {}\r\n      } catch {}\r\n    }\r\n    this.shapeTextures = {};\r\n    this.quadVBO = null;\r\n    this.quadProg = null;\r\n    this.fbo = null;\r\n    this.fboTex = null;\r\n    this.gl = null;\r\n  }\r\n\r\n  // Internal: bake a simple 2D shape into a texture and cache it\r\n  private bakeShapeToTexture(state: GameState | null, key: string): WebGLTexture | null {\r\n    if (!this.gl) return null;\r\n    if (this.shapeTextures[key]) return this.shapeTextures[key];\r\n    try {\r\n      const gl = this.gl as WebGLRenderingContext;\r\n      const shapes = (AssetsConfig as any).shapes2d || {};\r\n      const shape: Shape2D | undefined = shapes[key];\r\n      // Offscreen rasterization canvas\r\n      const size = 128;\r\n      const cvs = document.createElement(\"canvas\");\r\n      cvs.width = size;\r\n      cvs.height = size;\r\n      const ctx = cvs.getContext(\"2d\");\r\n      if (!ctx) return null;\r\n      ctx.clearRect(0, 0, size, size);\r\n      ctx.save();\r\n      ctx.translate(size / 2, size / 2);\r\n      const scale = size / 4;\r\n      ctx.fillStyle = (AssetsConfig.palette && (AssetsConfig.palette as any).shipHull) || \"#b0b7c3\";\r\n      // Basic vector draw covering circle, polygon and compound\r\n      if (!shape) {\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, Math.max(4, size * 0.12), 0, Math.PI * 2);\r\n        ctx.fill();\r\n      } else if ((shape as any).type === \"circle\") {\r\n        const r = ((shape as any).r ?? 0.5) * scale;\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, r, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      } else if ((shape as any).type === \"polygon\") {\r\n        const pts: number[][] = (shape as any).points || [];\r\n        if (pts.length) {\r\n          ctx.beginPath();\r\n          ctx.moveTo((pts[0][0] || 0) * scale, (pts[0][1] || 0) * scale);\r\n          for (let i = 1; i < pts.length; i++)\r\n            ctx.lineTo((pts[i][0] || 0) * scale, (pts[i][1] || 0) * scale);\r\n          ctx.closePath();\r\n          ctx.fill();\r\n        }\r\n      } else if ((shape as any).type === \"compound\") {\r\n        const parts = (shape as any).parts || [];\r\n        for (const part of parts) {\r\n          if ((part as any).type === \"circle\") {\r\n            const r = ((part as any).r ?? 0.5) * scale;\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, r, 0, Math.PI * 2);\r\n            ctx.fill();\r\n          } else if ((part as any).type === \"polygon\") {\r\n            const pts: number[][] = (part as any).points || [];\r\n            if (pts.length) {\r\n              ctx.beginPath();\r\n              ctx.moveTo((pts[0][0] || 0) * scale, (pts[0][1] || 0) * scale);\r\n              for (let i = 1; i < pts.length; i++)\r\n                ctx.lineTo((pts[i][0] || 0) * scale, (pts[i][1] || 0) * scale);\r\n              ctx.closePath();\r\n              ctx.fill();\r\n            }\r\n          }\r\n        }\r\n      }\r\n      ctx.restore();\r\n\r\n      // Create or acquire texture via pool when state is available\r\n      const createTex = (): WebGLTexture => {\r\n        const t = gl.createTexture()!;\r\n        gl.bindTexture(gl.TEXTURE_2D, t);\r\n        gl.pixelStorei((gl as any).UNPACK_PREMULTIPLY_ALPHA_WEBGL ?? 0x8063, 0);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, cvs);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        return t;\r\n      };\r\n\r\n      let tex: WebGLTexture | null = null;\r\n      if (state) {\r\n        try {\r\n          tex = acquireTexture(state, key, createTex);\r\n        } catch {\r\n          // Fallback to direct creation if pooling fails\r\n          tex = createTex();\r\n        }\r\n      } else {\r\n        tex = createTex();\r\n      }\r\n      if (!tex) return null;\r\n      gl.bindTexture(gl.TEXTURE_2D, tex);\r\n\r\n      this.shapeTextures[key] = tex;\r\n      return tex;\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Optional future path: draw a textured quad (not used in tests yet)\r\n  // Keeping a stub to document intent and ease future extension.\r\n  // private drawTexturedQuad(_tex: WebGLTexture, _x: number, _y: number, _w: number, _h: number): void {\r\n  //   // Intentionally empty in minimal stub\r\n  // }\r\n}\r\n\r\nexport default WebGLRenderer;\r\n", "// This allows the build to treat the app as TypeScript while we incrementally port internals.\r\n// main.ts \u2014 TypeScript entrypoint (ported from main.js). Uses TS imports so\r\n// the module graph resolves to .ts sources during migration.\r\nimport { createGameManager } from \"./gamemanager\";\r\nimport { makeInitialState } from \"./entities\";\r\nimport type { GameState } from \"./types\";\r\nimport { CanvasRenderer } from \"./canvasrenderer\";\r\nimport { WebGLRenderer } from \"./webglrenderer\";\r\nimport { getDefaultBounds } from \"./config/simConfig\";\r\nimport { SIM } from \"./config/simConfig\";\r\nimport { getPreferredRenderer, RendererConfig } from \"./config/rendererConfig\";\r\n\r\n// Allow temporary extension of window.gm used by the app during migration.\r\ndeclare global {\r\n  interface Window {\r\n    gm?: any;\r\n  }\r\n}\r\n\r\nexport async function startApp(rootDocument: Document = document) {\r\n  // Instantiate canonical GameState at startup\r\n  const gameState: GameState = makeInitialState();\r\n\r\n  let canvas = rootDocument.getElementById(\"world\") as HTMLCanvasElement | null;\r\n  // If the host document doesn't already have a canvas#world (some DOM emulators\r\n  // may provide a fresh document per test), create one so renderers can attach.\r\n  if (!canvas) {\r\n    try {\r\n      const el = rootDocument.createElement(\"canvas\");\r\n      el.id = \"world\";\r\n      rootDocument.body.appendChild(el);\r\n      canvas = el as HTMLCanvasElement;\r\n    } catch (e) {\r\n      canvas = null;\r\n    }\r\n  }\r\n  const ui: any = {\r\n    startPause: rootDocument.getElementById(\"startPause\"),\r\n    reset: rootDocument.getElementById(\"reset\"),\r\n    addRed: rootDocument.getElementById(\"addRed\"),\r\n    addBlue: rootDocument.getElementById(\"addBlue\"),\r\n    toggleTrails: rootDocument.getElementById(\"toggleTrails\"),\r\n    speed: rootDocument.getElementById(\"speed\"),\r\n    redScore: rootDocument.getElementById(\"redScore\"),\r\n    blueScore: rootDocument.getElementById(\"blueScore\"),\r\n    stats: rootDocument.getElementById(\"stats\"),\r\n    continuousCheckbox: rootDocument.getElementById(\"continuousCheckbox\"),\r\n    seedBtn: rootDocument.getElementById(\"seedBtn\"),\r\n    formationBtn: rootDocument.getElementById(\"formationBtn\"),\r\n  };\r\n\r\n  try {\r\n    if (ui.stats) ui.stats.textContent = \"Ships: 0 (R:0 B:0) Bullets: 0\";\r\n  } catch (e) {}\r\n\r\n  // Always use fixed logical bounds for simulation/game loop\r\n  const LOGICAL_BOUNDS = getDefaultBounds();\r\n\r\n  // --- Disposable tracking helpers to avoid memory leaks ---\r\n  const disposables: Array<() => void> = [];\r\n  let uiRaf: number | null = null;\r\n  let workerIndicatorRaf: number | null = null;\r\n  const pendingTimers = new Set<number>();\r\n  let isUiTickRunning = false;\r\n\r\n  function addListener(\r\n    target: EventTarget | null,\r\n    type: string,\r\n    handler: EventListenerOrEventListenerObject,\r\n  ) {\r\n    if (!target) return;\r\n    try {\r\n      target.addEventListener(type, handler as EventListener);\r\n      disposables.push(() => {\r\n        try {\r\n          target.removeEventListener(type, handler as EventListener);\r\n        } catch (e) {}\r\n      });\r\n    } catch (e) {}\r\n  }\r\n\r\n  function clearAllTimers() {\r\n    for (const id of Array.from(pendingTimers)) {\r\n      try {\r\n        clearTimeout(id as unknown as number);\r\n      } catch (e) {}\r\n      pendingTimers.delete(id);\r\n    }\r\n  }\r\n\r\n  // Only update backing store when renderScale changes\r\n  function updateCanvasBackingStore() {\r\n    const dpr = window.devicePixelRatio || 1;\r\n    const renderScale =\r\n      RendererConfig && typeof (RendererConfig as any).renderScale === \"number\"\r\n        ? (RendererConfig as any).renderScale\r\n        : 1;\r\n    const logicalW = LOGICAL_BOUNDS.W;\r\n    const logicalH = LOGICAL_BOUNDS.H;\r\n    if (canvas) {\r\n      const bufferW = Math.round((logicalW * renderScale) / dpr);\r\n      const bufferH = Math.round((logicalH * renderScale) / dpr);\r\n      canvas.width = bufferW;\r\n      canvas.height = bufferH;\r\n      canvas.style.width = bufferW + \"px\";\r\n      canvas.style.height = bufferH + \"px\";\r\n      const dimsEl = document.getElementById(\"rendererDims\");\r\n      if (dimsEl) {\r\n        dimsEl.textContent = `${canvas.width} x ${canvas.height} px @ ${dpr}x`;\r\n      }\r\n    }\r\n    (RendererConfig as any)._renderScale = renderScale;\r\n    (RendererConfig as any)._offsetX = 0;\r\n    (RendererConfig as any)._offsetY = 0;\r\n    const scaleVal = rootDocument.getElementById(\"rendererScaleValue\");\r\n    if (scaleVal) scaleVal.textContent = renderScale.toFixed(2);\r\n  }\r\n\r\n  // Only update CSS size on window resize\r\n  function fitCanvasToWindow() {\r\n    const winW = window.innerWidth;\r\n    const winH = window.innerHeight;\r\n    const bufferW = canvas ? canvas.width : LOGICAL_BOUNDS.W;\r\n    const bufferH = canvas ? canvas.height : LOGICAL_BOUNDS.H;\r\n    // Compute scale to fit buffer into window, preserving aspect ratio\r\n    const scale = Math.min(winW / bufferW, winH / bufferH);\r\n    const scaledW = bufferW * scale;\r\n    const scaledH = bufferH * scale;\r\n    const offsetX = Math.round((winW - scaledW) / 2);\r\n    const offsetY = Math.round((winH - scaledH) / 2);\r\n    if (canvas) {\r\n      // Set width/height to buffer size, but use transform for scaling\r\n      canvas.style.width = `${bufferW}px`;\r\n      canvas.style.height = `${bufferH}px`;\r\n      canvas.style.position = \"absolute\";\r\n      canvas.style.left = `${offsetX}px`;\r\n      canvas.style.top = `${offsetY}px`;\r\n      canvas.style.transformOrigin = \"top left\";\r\n      canvas.style.transform = `scale(${scale})`;\r\n    }\r\n    // Prevent scrollbars\r\n    document.body.style.overflow = \"hidden\";\r\n  }\r\n  // Renderer scale slider and dynamic scaling wiring\r\n  const scaleSlider = rootDocument.getElementById(\"rendererScaleRange\");\r\n  const dynamicCheckbox = rootDocument.getElementById(\"dynamicScaleCheckbox\");\r\n  let internalScaleUpdate = false;\r\n  if (scaleSlider) {\r\n    const onScaleInput = (ev: any) => {\r\n      if (internalScaleUpdate) return; // ignore internal updates\r\n      const val = parseFloat(ev.target.value);\r\n      if (!isNaN(val)) {\r\n        (RendererConfig as any).renderScale = val;\r\n        (RendererConfig as any).dynamicScaleEnabled = false;\r\n        if (dynamicCheckbox)\r\n          (dynamicCheckbox as HTMLInputElement).checked = false;\r\n        updateCanvasBackingStore();\r\n        fitCanvasToWindow();\r\n      }\r\n    };\r\n    addListener(scaleSlider, \"input\", onScaleInput);\r\n    // Set initial value display\r\n    const scaleVal = rootDocument.getElementById(\"rendererScaleValue\");\r\n    if (scaleVal)\r\n      scaleVal.textContent = (scaleSlider as HTMLInputElement).value;\r\n    // Ensure initial fit-to-window calculation uses current scale\r\n    updateCanvasBackingStore();\r\n    fitCanvasToWindow();\r\n  }\r\n  if (dynamicCheckbox) {\r\n    const onDynamicChange = (ev: any) => {\r\n      const enabled = !!ev.target.checked;\r\n      (RendererConfig as any).dynamicScaleEnabled = enabled;\r\n    };\r\n    addListener(dynamicCheckbox, \"change\", onDynamicChange);\r\n    (dynamicCheckbox as HTMLInputElement).checked = !!(RendererConfig as any)\r\n      .dynamicScaleEnabled;\r\n  }\r\n\r\n  fitCanvasToWindow();\r\n  addListener(window, \"resize\", fitCanvasToWindow);\r\n\r\n  let renderer: any = null;\r\n  const pref = getPreferredRenderer();\r\n  if (canvas) {\r\n    if (pref === \"webgl\") {\r\n      try {\r\n        const w = new WebGLRenderer(canvas);\r\n        if (w && w.init && w.init()) renderer = w;\r\n      } catch (e) {}\r\n    }\r\n    if (!renderer) {\r\n      try {\r\n        renderer = new CanvasRenderer(canvas);\r\n        renderer.init && renderer.init();\r\n      } catch (e) {\r\n        renderer = null;\r\n      }\r\n    }\r\n  }\r\n  // Preload all assets if renderer supports it\r\n  if (renderer && typeof renderer.preloadAllAssets === \"function\") {\r\n    try {\r\n      renderer.preloadAllAssets();\r\n    } catch (e) {}\r\n  }\r\n  // If we don't have a canvas (or renderer failed), provide a minimal no-op renderer\r\n  if (!renderer) {\r\n    renderer = {\r\n      type: \"noop\",\r\n      init: () => false,\r\n      renderState: (_: any) => {},\r\n      isRunning: () => false,\r\n    };\r\n  }\r\n\r\n  try {\r\n    window.gm = window.gm || {};\r\n  } catch (e) {}\r\n  // Pass fixed logical bounds and canonical GameState to game manager\r\n  const gm = createGameManager({ renderer, useWorker: false, seed: 12345 });\r\n  if (gm && gm._internal) {\r\n    gm._internal.bounds = LOGICAL_BOUNDS;\r\n    gm._internal.state = gameState;\r\n  }\r\n  try {\r\n    if (typeof window !== \"undefined\" && (window as any).gm)\r\n      Object.assign((window as any).gm, gm);\r\n  } catch (e) {}\r\n\r\n  // Speed multiplier logic\r\n  let simSpeedMultiplier = 1;\r\n  if (ui.speed) {\r\n    const onSpeedClick = () => {\r\n      simSpeedMultiplier =\r\n        simSpeedMultiplier >= 4 ? 0.25 : simSpeedMultiplier * 2;\r\n      ui.speed.textContent = `Speed: ${simSpeedMultiplier}\u00D7`;\r\n    };\r\n    addListener(ui.speed, \"click\", onSpeedClick);\r\n    ui.speed.textContent = `Speed: ${simSpeedMultiplier}\u00D7`;\r\n  }\r\n\r\n  // Patch stepOnce to use multiplier\r\n  if (gm && typeof gm.stepOnce === \"function\") {\r\n    const origStepOnce = gm.stepOnce.bind(gm);\r\n    gm.stepOnce = (dt = 0.016) => origStepOnce(dt * simSpeedMultiplier);\r\n  }\r\n\r\n  // Fleet formation logic\r\n  if (ui.formationBtn) {\r\n    const onFormationClick = () => {\r\n      if (gm && typeof gm.formFleets === \"function\") {\r\n        gm.formFleets();\r\n      }\r\n    };\r\n    addListener(ui.formationBtn, \"click\", onFormationClick);\r\n  }\r\n\r\n  // Engine trail UI toggle state\r\n  let engineTrailsEnabled = true;\r\n  gameState.engineTrailsEnabled = engineTrailsEnabled;\r\n  if (ui.toggleTrails) {\r\n    const onToggleTrails = () => {\r\n      engineTrailsEnabled = !engineTrailsEnabled;\r\n      gameState.engineTrailsEnabled = engineTrailsEnabled;\r\n      ui.toggleTrails.textContent = engineTrailsEnabled\r\n        ? \"\u2604 Trails: On\"\r\n        : \"\u2604 Trails: Off\";\r\n    };\r\n    addListener(ui.toggleTrails, \"click\", onToggleTrails);\r\n    ui.toggleTrails.textContent = engineTrailsEnabled\r\n      ? \"\u2604 Trails: On\"\r\n      : \"\u2604 Trails: Off\";\r\n  }\r\n\r\n  try {\r\n    const host = (location && location.hostname) || \"\";\r\n    const urlParams =\r\n      typeof URLSearchParams !== \"undefined\"\r\n        ? new URLSearchParams(location.search)\r\n        : null;\r\n    const autotest =\r\n      (urlParams && urlParams.get(\"autotest\") === \"1\") ||\r\n      !!(window as any).__AUTO_REINFORCE_DEV__;\r\n    if ((host === \"127.0.0.1\" || host === \"localhost\") && autotest) {\r\n      try {\r\n        if (gm && typeof gm.setContinuousEnabled === \"function\")\r\n          gm.setContinuousEnabled(true);\r\n      } catch (e) {}\r\n      try {\r\n        if (gm && typeof gm.setReinforcementInterval === \"function\")\r\n          gm.setReinforcementInterval(0.01);\r\n      } catch (e) {}\r\n      try {\r\n        if (gm && typeof gm.stepOnce === \"function\") gm.stepOnce(0.02);\r\n      } catch (e) {}\r\n    }\r\n  } catch (e) {}\r\n\r\n  let lastReinforcementSummary = \"\";\r\n  let reinforcementsHandler: ((msg: any) => void) | null = null;\r\n  try {\r\n    if (gm && typeof gm.on === \"function\") {\r\n      reinforcementsHandler = (msg: any) => {\r\n        const list = (msg && msg.spawned) || [];\r\n        const types = list.map((s: any) => s.type).filter(Boolean);\r\n        const summary = `Reinforcements: spawned ${list.length} ships (${types.join(\", \")})`;\r\n        lastReinforcementSummary = summary;\r\n        try {\r\n          const tid = setTimeout(() => {\r\n            lastReinforcementSummary = \"\";\r\n          }, 3000);\r\n          pendingTimers.add(tid as unknown as number);\r\n        } catch (e) {}\r\n        try {\r\n          if (ui && ui.stats)\r\n            ui.stats.textContent = `${ui.stats.textContent} | ${summary}`;\r\n        } catch (e) {}\r\n      };\r\n      gm.on(\"reinforcements\", reinforcementsHandler);\r\n    }\r\n  } catch (e) {}\r\n\r\n  const workerIndicator = rootDocument.getElementById(\"workerIndicator\");\r\n  let toastContainer = rootDocument.getElementById(\"toastContainer\");\r\n  if (!toastContainer) {\r\n    try {\r\n      toastContainer = rootDocument.createElement(\"div\");\r\n      toastContainer.id = \"toastContainer\";\r\n      toastContainer.style.position = \"fixed\";\r\n      toastContainer.style.right = \"16px\";\r\n      toastContainer.style.top = \"16px\";\r\n      toastContainer.style.zIndex = \"9999\";\r\n      toastContainer.style.pointerEvents = \"none\";\r\n      rootDocument.body.appendChild(toastContainer);\r\n      disposables.push(() => {\r\n        try {\r\n          if (toastContainer && toastContainer.parentNode)\r\n            toastContainer.parentNode.removeChild(toastContainer);\r\n        } catch (e) {}\r\n      });\r\n    } catch (e) {\r\n      toastContainer = null;\r\n    }\r\n  }\r\n\r\n  function showToast(msg: string, opts: any = {}) {\r\n    try {\r\n      if (!toastContainer) return;\r\n      const ttl = typeof opts.ttl === \"number\" ? opts.ttl : 2000;\r\n      const el = rootDocument.createElement(\"div\");\r\n      el.style.background = \"rgba(20,20,30,0.9)\";\r\n      el.style.color = \"#fff\";\r\n      el.style.padding = \"8px 12px\";\r\n      el.style.marginTop = \"6px\";\r\n      el.style.borderRadius = \"6px\";\r\n      el.style.boxShadow = \"0 2px 8px rgba(0,0,0,0.5)\";\r\n      el.style.fontFamily = \"sans-serif\";\r\n      el.style.fontSize = \"13px\";\r\n      el.style.pointerEvents = \"auto\";\r\n      el.textContent = msg;\r\n      toastContainer.appendChild(el);\r\n      const tid = setTimeout(() => {\r\n        try {\r\n          el.style.transition = \"opacity 300ms ease\";\r\n          el.style.opacity = \"0\";\r\n        } catch (e) {}\r\n        setTimeout(() => {\r\n          try {\r\n            if (el && el.parentNode) el.parentNode.removeChild(el);\r\n          } catch (err) {}\r\n        }, 350);\r\n      }, ttl);\r\n      pendingTimers.add(tid as unknown as number);\r\n    } catch (e) {}\r\n  }\r\n\r\n  let levelupHandler: ((m: any) => void) | null = null;\r\n  try {\r\n    if (gm && typeof gm.on === \"function\") {\r\n      levelupHandler = (m: any) => {\r\n        try {\r\n          const ship = (m && m.ship) || null;\r\n          const lvl =\r\n            (m && m.newLevel) || (m && m.newLevel === 0 ? 0 : undefined);\r\n          const who = ship && ship.team ? `${ship.team} ship` : \"Ship\";\r\n          const msg = `${who} leveled up to ${lvl}`;\r\n          showToast(msg, { ttl: 2200 });\r\n        } catch (e) {}\r\n      };\r\n      gm.on(\"levelup\", levelupHandler);\r\n    }\r\n  } catch (e) {}\r\n\r\n  if (workerIndicator) {\r\n    try {\r\n      const refresh = () => {\r\n        try {\r\n          workerIndicator.textContent =\r\n            gm.isWorker && gm.isWorker() ? \"Worker\" : \"Main\";\r\n        } catch (e) {}\r\n        try {\r\n          workerIndicatorRaf = requestAnimationFrame(refresh);\r\n        } catch (e) {\r\n          workerIndicatorRaf = null;\r\n        }\r\n      };\r\n      refresh();\r\n    } catch (e) {\r\n      workerIndicator.textContent = \"Unknown\";\r\n    }\r\n  }\r\n\r\n  try {\r\n    if (ui.startPause)\r\n      addListener(ui.startPause, \"click\", () => {\r\n        if (gm.isRunning()) {\r\n          gm.pause();\r\n          ui.startPause.textContent = \"\u25B6 Start\";\r\n        } else {\r\n          gm.start();\r\n          ui.startPause.textContent = \"\u23F8 Pause\";\r\n        }\r\n      });\r\n  } catch (e) {}\r\n  try {\r\n    if (ui.reset) addListener(ui.reset, \"click\", () => gm.reset());\r\n  } catch (e) {}\r\n  try {\r\n    if (ui.addRed) addListener(ui.addRed, \"click\", () => gm.spawnShip(\"red\"));\r\n  } catch (e) {}\r\n  try {\r\n    if (ui.addBlue)\r\n      addListener(ui.addBlue, \"click\", () => gm.spawnShip(\"blue\"));\r\n  } catch (e) {}\r\n  function onSeedBtnClick() {\r\n    try {\r\n      const raw =\r\n        typeof window !== \"undefined\" && typeof window.prompt === \"function\"\r\n          ? window.prompt(\"Enter new seed (leave blank for random):\", \"\")\r\n          : null;\r\n      if (raw == null) return;\r\n      const trimmed = String(raw).trim();\r\n      if (trimmed === \"\") {\r\n        try {\r\n          gm.reseed();\r\n          showToast(\"Reseeded with random seed\");\r\n        } catch (e) {}\r\n        return;\r\n      }\r\n      const asNum = Number(trimmed);\r\n      if (!Number.isFinite(asNum) || Math.floor(asNum) !== asNum) {\r\n        try {\r\n          showToast(\"Invalid seed. Please enter an integer.\");\r\n        } catch (e) {}\r\n        return;\r\n      }\r\n      try {\r\n        gm.reseed(asNum >>> 0);\r\n        showToast(`Reseeded with ${asNum >>> 0}`);\r\n      } catch (e) {}\r\n    } catch (e) {}\r\n  }\r\n  try {\r\n    if (ui.seedBtn) addListener(ui.seedBtn, \"click\", onSeedBtnClick);\r\n  } catch (e) {}\r\n  // try { ui.formationBtn.addEventListener('click', () => gm.formFleets()); } catch (e) {}\r\n  try {\r\n    if (ui.continuousCheckbox) {\r\n      addListener(ui.continuousCheckbox, \"change\", (ev: any) => {\r\n        const v = !!ev.target.checked;\r\n        if (gm && typeof gm.setContinuousEnabled === \"function\")\r\n          gm.setContinuousEnabled(v);\r\n      });\r\n    }\r\n  } catch (e) {}\r\n\r\n  function uiTick() {\r\n    if (isUiTickRunning) return; // Prevent multiple loops\r\n    isUiTickRunning = true;\r\n    const startTick = performance.now();\r\n    let skipRender = false;\r\n    try {\r\n      const s = gm.snapshot();\r\n      ui.redScore.textContent = `Red ${gm.score.red}`;\r\n      ui.blueScore.textContent = `Blue ${gm.score.blue}`;\r\n      const redCount = s.ships.filter((sh: any) => sh.team === \"red\").length;\r\n      const blueCount = s.ships.filter((sh: any) => sh.team === \"blue\").length;\r\n      ui.stats.textContent =\r\n        `Ships: ${s.ships.length} (R:${redCount} B:${blueCount}) Bullets: ${s.bullets.length}` +\r\n        (lastReinforcementSummary ? ` | ${lastReinforcementSummary}` : \"\");\r\n    } catch (e) {}\r\n    const endTick = performance.now();\r\n    const tickTime = endTick - startTick;\r\n    if (tickTime > SIM.DT_MS) {\r\n      skipRender = true;\r\n    }\r\n    // --- Dynamic buffer scaling logic ---\r\n    const dynamicEnabled = !!(RendererConfig as any).dynamicScaleEnabled;\r\n    const scaleSliderEl = rootDocument.getElementById(\r\n      \"rendererScaleRange\",\r\n    ) as HTMLInputElement;\r\n    const scaleValEl = rootDocument.getElementById(\"rendererScaleValue\");\r\n    // Track frame time\r\n    const now = performance.now();\r\n    (RendererConfig as any)._lastUiTick =\r\n      (RendererConfig as any)._lastUiTick || now;\r\n    const dt = now - (RendererConfig as any)._lastUiTick;\r\n    (RendererConfig as any)._lastUiTick = now;\r\n    (RendererConfig as any).lastFrameTime = dt;\r\n    // Score frame time\r\n    let frameScore = \"green\";\r\n    if (dt > 33) frameScore = \"red\";\r\n    else if (dt > 20) frameScore = \"yellow\";\r\n    (RendererConfig as any).frameScore = frameScore;\r\n    // Color slider value for feedback\r\n    if (scaleValEl) {\r\n      scaleValEl.style.color =\r\n        frameScore === \"green\"\r\n          ? \"#4caf50\"\r\n          : frameScore === \"yellow\"\r\n            ? \"#ffd600\"\r\n            : \"#ff1744\";\r\n    }\r\n    // Dynamic scaling logic\r\n    if (dynamicEnabled && scaleSliderEl) {\r\n      let scale = (RendererConfig as any).renderScale;\r\n      // If frame is slow, reduce scale; if fast, increase scale\r\n      if (frameScore === \"red\" && scale > 0.25)\r\n        scale = Math.max(0.25, scale - 0.05);\r\n      else if (frameScore === \"green\" && scale < 2.0)\r\n        scale = Math.min(2.0, scale + 0.01);\r\n      // Only update if changed\r\n      if (scale !== (RendererConfig as any).renderScale) {\r\n        (RendererConfig as any).renderScale = scale;\r\n        internalScaleUpdate = true;\r\n        scaleSliderEl.value = scale.toFixed(2);\r\n        if (scaleValEl) scaleValEl.textContent = scale.toFixed(2);\r\n        fitCanvasToWindow();\r\n        internalScaleUpdate = false;\r\n      }\r\n    }\r\n    if (!skipRender) {\r\n      try {\r\n        uiRaf = requestAnimationFrame(() => {\r\n          isUiTickRunning = false;\r\n          uiTick();\r\n        });\r\n      } catch (e) {\r\n        uiRaf = null;\r\n        isUiTickRunning = false;\r\n      }\r\n    } else {\r\n      // Only update simulation, skip rendering for this frame\r\n      const tid = setTimeout(() => {\r\n        isUiTickRunning = false;\r\n        uiTick();\r\n      }, SIM.DT_MS);\r\n      if (typeof tid === \"number\") pendingTimers.add(tid as number);\r\n    }\r\n  }\r\n  uiRaf = requestAnimationFrame(uiTick);\r\n\r\n  function dispose() {\r\n    // First, destroy game manager resources (worker, handlers)\r\n    try {\r\n      if (gm && typeof gm.destroy === \"function\") gm.destroy();\r\n    } catch (e) {}\r\n\r\n    // Stop the game manager run loop\r\n    try {\r\n      if (gm && typeof gm.pause === \"function\") gm.pause();\r\n    } catch (e) {}\r\n\r\n    // Unregister gm-level listeners we added\r\n    try {\r\n      if (gm && typeof gm.off === \"function\") {\r\n        if (reinforcementsHandler)\r\n          gm.off(\"reinforcements\", reinforcementsHandler);\r\n        if (levelupHandler) gm.off(\"levelup\", levelupHandler);\r\n      }\r\n    } catch (e) {}\r\n\r\n    // Cancel RAFs started here\r\n    if (uiRaf != null) {\r\n      try {\r\n        cancelAnimationFrame(uiRaf);\r\n      } catch (e) {}\r\n      uiRaf = null;\r\n    }\r\n    isUiTickRunning = false;\r\n    if (workerIndicatorRaf != null) {\r\n      try {\r\n        cancelAnimationFrame(workerIndicatorRaf);\r\n      } catch (e) {}\r\n      workerIndicatorRaf = null;\r\n    }\r\n\r\n    // Clear timers\r\n    try {\r\n      clearAllTimers();\r\n    } catch (e) {}\r\n\r\n    // Run registered disposables (removes DOM listeners, etc)\r\n    for (const fn of disposables.slice()) {\r\n      try {\r\n        fn();\r\n      } catch (e) {}\r\n    }\r\n    disposables.length = 0;\r\n\r\n    // Optionally clear global gm reference (defensive)\r\n    try {\r\n      if (typeof window !== \"undefined\" && (window as any).gm) {\r\n        // Only remove properties we assigned (don't blow away other properties)\r\n        try {\r\n          delete (window as any).gm;\r\n        } catch (e) {}\r\n      }\r\n    } catch (e) {}\r\n  }\r\n\r\n  return { gm, renderer, dispose };\r\n}\r\n\r\nif (typeof window !== \"undefined\") {\r\n  let appInstance: { gm: any; renderer: any; dispose: () => void } | null =\r\n    null;\r\n  function safeStartApp(doc: Document) {\r\n    if (appInstance && typeof appInstance.dispose === \"function\") {\r\n      appInstance.dispose();\r\n    }\r\n    startApp(doc).then((instance) => {\r\n      appInstance = instance;\r\n    });\r\n  }\r\n  if (document.readyState === \"loading\")\r\n    document.addEventListener(\"DOMContentLoaded\", () => safeStartApp(document));\r\n  else safeStartApp(document);\r\n  window.addEventListener(\"beforeunload\", () => {\r\n    if (appInstance && typeof appInstance.dispose === \"function\") {\r\n      appInstance.dispose();\r\n    }\r\n  });\r\n}\r\n\r\nexport default startApp;\r\n"],
  "mappings": "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",
  "names": ["mulberry32", "e", "tex", "s", "state", "dtSeconds", "bounds", "s", "lvl", "_seed", "seed", "_seed", "flashes", "safeStartApp"]
}
