{
  "version": 3,
  "sources": ["../src/gamemanager.js", "../src/gamemanager.ts", "../src/config/assets/assetsConfig.ts", "../src/config/entitiesConfig.ts", "../src/config/teamsConfig.ts", "../src/config/rendererConfig.ts", "../src/canvasrenderer.ts", "../src/webglrenderer.ts", "../src/config/displayConfig.ts", "../src/main.ts"],
  "sourcesContent": ["import * as gmjs from \"./gamemanager.js\";\nconst createGameManager = gmjs.createGameManager;\nconst reset = gmjs.reset;\nconst simulate = gmjs.simulate;\nconst setReinforcementInterval = gmjs.setReinforcementInterval;\nconst getReinforcementInterval = gmjs.getReinforcementInterval;\nconst setShipConfig = gmjs.setShipConfig;\nconst getShipConfig = gmjs.getShipConfig;\nconst getStarCanvasVersion = gmjs.getStarCanvasVersion;\nconst ships = gmjs.ships;\nconst bullets = gmjs.bullets;\nconst particles = gmjs.particles;\nconst stars = gmjs.stars;\nconst flashes = gmjs.flashes;\nconst shieldFlashes = gmjs.shieldFlashes;\nconst healthFlashes = gmjs.healthFlashes;\nconst particlePool = gmjs.particlePool;\nconst config = gmjs.config;\nconst shieldFlashIndex = gmjs.shieldFlashIndex;\nconst healthFlashIndex = gmjs.healthFlashIndex;\nconst FLASH_TTL_DEFAULT = gmjs.FLASH_TTL_DEFAULT;\nconst acquireParticle = gmjs.acquireParticle;\nconst releaseParticle = gmjs.releaseParticle;\nconst Particle = gmjs.Particle;\nconst setDoubleSimStrict = gmjs.setDoubleSimStrict;\nvar gamemanager_default = createGameManager;\nexport {\n  FLASH_TTL_DEFAULT,\n  Particle,\n  acquireParticle,\n  bullets,\n  config,\n  createGameManager,\n  gamemanager_default as default,\n  flashes,\n  getReinforcementInterval,\n  getShipConfig,\n  getStarCanvasVersion,\n  healthFlashIndex,\n  healthFlashes,\n  particlePool,\n  particles,\n  releaseParticle,\n  reset,\n  setDoubleSimStrict,\n  setReinforcementInterval,\n  setShipConfig,\n  shieldFlashIndex,\n  shieldFlashes,\n  ships,\n  simulate,\n  stars\n};\n", "// Minimal TypeScript shim that re-exports the existing JavaScript runtime implementation.\r\n// Import the runtime as a namespace and re-export value bindings to avoid\r\n// circular alias issues. Types are defined in `gamemanager.d.ts`.\r\n\r\nimport * as gmjs from './gamemanager.js';\r\n\r\nexport const createGameManager = (gmjs as any).createGameManager;\r\nexport const reset = (gmjs as any).reset;\r\nexport const simulate = (gmjs as any).simulate;\r\nexport const setReinforcementInterval = (gmjs as any).setReinforcementInterval;\r\nexport const getReinforcementInterval = (gmjs as any).getReinforcementInterval;\r\nexport const setShipConfig = (gmjs as any).setShipConfig;\r\nexport const getShipConfig = (gmjs as any).getShipConfig;\r\nexport const getStarCanvasVersion = (gmjs as any).getStarCanvasVersion;\r\n\r\nexport const ships = (gmjs as any).ships;\r\nexport const bullets = (gmjs as any).bullets;\r\nexport const particles = (gmjs as any).particles;\r\nexport const stars = (gmjs as any).stars;\r\nexport const flashes = (gmjs as any).flashes;\r\nexport const shieldFlashes = (gmjs as any).shieldFlashes;\r\nexport const healthFlashes = (gmjs as any).healthFlashes;\r\nexport const particlePool = (gmjs as any).particlePool;\r\n\r\nexport const config = (gmjs as any).config;\r\n\r\nexport const shieldFlashIndex = (gmjs as any).shieldFlashIndex;\r\nexport const healthFlashIndex = (gmjs as any).healthFlashIndex;\r\nexport const FLASH_TTL_DEFAULT = (gmjs as any).FLASH_TTL_DEFAULT;\r\n\r\nexport const acquireParticle = (gmjs as any).acquireParticle;\r\nexport const releaseParticle = (gmjs as any).releaseParticle;\r\n\r\nexport const Particle = (gmjs as any).Particle;\r\n\r\nexport const setDoubleSimStrict = (gmjs as any).setDoubleSimStrict;\r\n\r\nexport default createGameManager;\r\n", "// Basic asset templates for 2D top-down rendering with future 3D model placeholders.\r\n// Orientation: shapes face +X (to the right). Scale is in logical units; renderer\r\n// should scale to entity radius and rotate by entity heading if present.\r\n\r\nexport type PolygonShape = {\r\n  type: 'polygon';\r\n  points: number[][]; // [[x,y], ...]\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CircleShape = {\r\n  type: 'circle';\r\n  r: number;\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CompoundPart = PolygonShape | CircleShape;\r\n\r\nexport type CompoundShape = {\r\n  type: 'compound';\r\n  parts: CompoundPart[];\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type Shape2D = PolygonShape | CircleShape | CompoundShape;\r\n\r\nexport type Model3D = {\r\n  url?: string | undefined;\r\n  scale?: number | undefined;\r\n  type?: string | undefined;\r\n  mesh?: string | undefined;\r\n};\r\n\r\nexport type AssetsConfigType = {\r\n  meta: { orientation: string; coordinateSystem: string };\r\n  palette: Record<string, string>;\r\n  shapes2d: Record<string, Shape2D>;\r\n  animations?: Record<string, any>;\r\n  damageStates?: Record<string, { opacity?: number; accentColor?: string }>;\r\n  visualStateDefaults?: Record<string, { engine?: string; shield?: string; damageParticles?: string }>;\r\n};\r\n\r\nexport const AssetsConfig: AssetsConfigType = {\r\n  meta: {\r\n    orientation: '+X',\r\n    coordinateSystem: 'topdown-2d',\r\n  },\r\n  palette: {\r\n    shipHull: '#b0b7c3',\r\n    shipAccent: '#6c7380',\r\n    bullet: '#ffd166',\r\n    turret: '#94a3b8',\r\n    // Scene background color used by renderers\r\n    background: '#0b1220',\r\n  },\r\n  // 2D vector shapes defined as polygons and circles. Points are unit-sized\r\n  // profiles (roughly radius 1). Renderer should multiply by entity radius or\r\n  // provided scale before drawing.\r\n  shapes2d: {\r\n    fighter: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [-0.8, 0.6], [-0.5, 0], [-0.8, -0.6]] },\r\n        { type: 'polygon', points: [[0.0, 0.35], [-0.6, 0.65], [-0.35, 0.0]] },\r\n        { type: 'polygon', points: [[0.0, -0.35], [-0.35, 0.0], [-0.6, -0.65]] }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1, type: 'gltf', mesh: undefined }\r\n    },\r\n    corvette: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.0, 0], [0.2, 0.6], [-0.9, 0.5], [-1.1, 0], [-0.9, -0.5], [0.2, -0.6]] },\r\n        { type: 'polygon', points: [[1.2, 0.18], [1.0, 0.1], [1.0, -0.1], [1.2, -0.18]] }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1.4, type: 'gltf', mesh: undefined }\r\n    },\r\n    frigate: {\r\n      type: 'polygon',\r\n      points: [[1.1, 0], [0.6, 0.55], [-0.2, 0.8], [-1.2, 0.45], [-1.2, -0.45], [-0.2, -0.8], [0.6, -0.55]],\r\n      strokeWidth: 0.1,\r\n      model3d: { url: undefined, scale: 1.8, type: 'gltf', mesh: undefined }\r\n    },\r\n    destroyer: {\r\n      type: 'polygon',\r\n      points: [[1.4, 0], [0.8, 0.5], [0.1, 0.7], [-0.6, 0.6], [-1.4, 0.4], [-1.4, -0.4], [-0.6, -0.6], [0.1, -0.7], [0.8, -0.5]],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 2.2, type: 'gltf', mesh: undefined }\r\n    },\r\n    carrier: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.1, 0], [0.6, 0.7], [-0.5, 0.9], [-1.4, 0.7], [-1.6, 0], [-1.4, -0.7], [-0.5, -0.9], [0.6, -0.7]] },\r\n        { type: 'polygon', points: [[1.4, 0.25], [1.1, 0.15], [1.1, -0.15], [1.4, -0.25]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 3.0, type: 'gltf', mesh: undefined }\r\n    },\r\n    bulletSmall: { type: 'circle', r: 0.18 },\r\n    bulletMedium: { type: 'circle', r: 0.25 },\r\n    bulletLarge: { type: 'circle', r: 0.36 },\r\n    turretBasic: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'circle', r: 0.5 },\r\n        { type: 'polygon', points: [[-0.2, 0.2], [0.7, 0.2], [0.7, -0.2], [-0.2, -0.2]] }\r\n      ],\r\n      strokeWidth: 0.08\r\n    }\r\n  }\r\n};\r\n\r\n// Animations and visual defaults (align with JS AssetsConfig)\r\n(AssetsConfig as any).animations = {\r\n  engineFlare: {\r\n    type: 'polygon',\r\n    points: [ [0, 0], [-0.3, 0.15], [-0.5, 0], [-0.3, -0.15] ],\r\n    pulseRate: 8,\r\n    // configurable alpha multiplier for engine overlay\r\n    alpha: 0.4,\r\n    // local-space X offset (negative = behind ship)\r\n    offset: -0.9\r\n  },\r\n  shieldEffect: {\r\n    type: 'circle',\r\n    r: 1.2,\r\n    strokeWidth: 0.1,\r\n    color: '#88ccff',\r\n    pulseRate: 2,\r\n    // map shieldPct -> alpha = base + scale * shieldPct\r\n    alphaBase: 0.25,\r\n    alphaScale: 0.75\r\n  },\r\n  damageParticles: {\r\n    type: 'particles',\r\n    color: '#ff6b6b',\r\n    count: 6,\r\n    lifetime: 0.8,\r\n    spread: 0.6\r\n  }\r\n};\r\n\r\n(AssetsConfig as any).damageStates = {\r\n  light: { opacity: 0.9, accentColor: '#b0b7c3' },\r\n  moderate: { opacity: 0.75, accentColor: '#d4a06a' },\r\n  heavy: { opacity: 0.5, accentColor: '#ff6b6b' }\r\n};\r\n\r\n(AssetsConfig as any).visualStateDefaults = {\r\n  fighter: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles' },\r\n  corvette: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles' },\r\n  frigate: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles' },\r\n  destroyer: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles' },\r\n  carrier: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles' }\r\n};\r\n\r\n// thresholds for mapping hpPct -> damage state key\r\n(AssetsConfig as any).damageThresholds = { moderate: 0.66, heavy: 0.33 };\r\n\r\nexport function getVisualConfig(type: string) {\r\n  const shape = getShipAsset(type);\r\n  const visuals = (AssetsConfig as any).visualStateDefaults[type] || (AssetsConfig as any).visualStateDefaults.fighter;\r\n  return { shape, visuals, palette: AssetsConfig.palette, animations: (AssetsConfig as any).animations, damageStates: (AssetsConfig as any).damageStates } as any;\r\n}\r\n\r\nexport function getShipAsset(type: string): Shape2D {\r\n  return AssetsConfig.shapes2d[type] || AssetsConfig.shapes2d.fighter;\r\n}\r\n\r\nexport function getBulletAsset(kind: 'small' | 'medium' | 'large' = 'small'): Shape2D {\r\n  if (kind === 'large') return AssetsConfig.shapes2d.bulletLarge;\r\n  if (kind === 'medium') return AssetsConfig.shapes2d.bulletMedium;\r\n  return AssetsConfig.shapes2d.bulletSmall;\r\n}\r\n\r\nexport function getTurretAsset(_kind: 'basic' = 'basic'): Shape2D {\r\n  return AssetsConfig.shapes2d.turretBasic;\r\n}\r\n\r\nexport default AssetsConfig;\r\n", "// entitiesConfig.ts - ship-type defaults and visuals helpers (typed)\r\nimport { getShipAsset, getBulletAsset, getTurretAsset } from './assets/assetsConfig';\r\n\r\nexport type CannonCfg = {\r\n  damage: number; rate: number; spread?: number; muzzleSpeed?: number; bulletRadius?: number; bulletTTL?: number;\r\n};\r\n\r\nexport type ShipTypeCfg = {\r\n  maxHp: number; armor?: number; maxShield?: number; shieldRegen?: number; dmg?: number; damage?: number; radius?: number;\r\n  cannons?: CannonCfg[]; accel?: number; turnRate?: number; carrier?: { fighterCooldown: number; maxFighters: number; spawnPerCooldown: number };\r\n};\r\n\r\nexport type ShipConfigMap = Record<string, ShipTypeCfg>;\r\n\r\nexport const ShipConfig: ShipConfigMap = {\r\n  fighter: {\r\n    maxHp: 15, armor: 0, maxShield: 8, shieldRegen: 1.0, dmg: 3, damage: 3, radius: 4,\r\n    cannons: [ { damage: 3, rate: 3, spread: 0.1, muzzleSpeed: 300, bulletRadius: 1.5, bulletTTL: 1.2 } ],\r\n    accel: 600, turnRate: 6,\r\n  },\r\n  corvette: {\r\n    maxHp: 50, armor: 0, maxShield: Math.round(50 * 0.6), shieldRegen: 0.5, dmg: 5, damage: 5, radius: 8,\r\n    accel: 200, turnRate: 3,\r\n    cannons: [ { damage: 6, rate: 1.2, spread: 0.05, muzzleSpeed: 220, bulletRadius: 2, bulletTTL: 2.0 } ],\r\n  },\r\n  frigate: {\r\n    maxHp: 80, armor: 1, maxShield: Math.round(80 * 0.6), shieldRegen: 0.4, dmg: 8, damage: 8, radius: 12,\r\n    cannons: [ { damage: 8, rate: 1.0, spread: 0.06, muzzleSpeed: 200, bulletRadius: 2.5, bulletTTL: 2.2 } ],\r\n    accel: 120, turnRate: 2.2,\r\n  },\r\n  destroyer: {\r\n    maxHp: 120, armor: 2, maxShield: Math.round(120 * 0.6), shieldRegen: 0.3, dmg: 12, damage: 12, radius: 16,\r\n    cannons: new Array(6).fill(0).map(() => ({ damage: 6, rate: 0.8, spread: 0.08, muzzleSpeed: 240, bulletRadius: 2.5, bulletTTL: 2.4 })),\r\n    accel: 80, turnRate: 1.6,\r\n  },\r\n  carrier: {\r\n    maxHp: 200, armor: 3, maxShield: Math.round(200 * 0.6), shieldRegen: 0.2, dmg: 2, damage: 2, radius: 24,\r\n    cannons: new Array(4).fill(0).map(() => ({ damage: 4, rate: 0.6, spread: 0.12, muzzleSpeed: 180, bulletRadius: 3, bulletTTL: 2.8 })),\r\n    accel: 40, turnRate: 0.8,\r\n    carrier: { fighterCooldown: 1.5, maxFighters: 6, spawnPerCooldown: 2 }\r\n  }\r\n};\r\n\r\nexport default ShipConfig;\r\n\r\nexport function setShipConfig(newCfg: Partial<ShipConfigMap> = {}) {\r\n  function merge(target: any, src: any) {\r\n    for (const k of Object.keys(src)) {\r\n      const sv = (src as any)[k];\r\n      if (sv && typeof sv === 'object' && !Array.isArray(sv)) {\r\n        if (!target[k] || typeof target[k] !== 'object') target[k] = {};\r\n        merge(target[k], sv);\r\n      } else if (Array.isArray(sv)) {\r\n        target[k] = sv.map(item => (item && typeof item === 'object' ? Object.assign({}, item) : item));\r\n      } else if (['number', 'string', 'boolean'].includes(typeof sv)) {\r\n        target[k] = sv;\r\n      }\r\n    }\r\n  }\r\n  merge(ShipConfig as any, newCfg as any);\r\n}\r\n\r\nexport function getShipConfig(): ShipConfigMap {\r\n  return JSON.parse(JSON.stringify(ShipConfig)) as ShipConfigMap;\r\n}\r\n\r\nexport const VisualMappingConfig = {\r\n  bulletRadiusThresholds: [\r\n    { threshold: 0.22, kind: 'small' },\r\n    { threshold: 0.32, kind: 'medium' },\r\n    { threshold: Infinity, kind: 'large' }\r\n  ],\r\n  defaultTurretKind: 'basic',\r\n  shipAssetKey: {\r\n    fighter: 'fighter', corvette: 'corvette', frigate: 'frigate', destroyer: 'destroyer', carrier: 'carrier'\r\n  }\r\n};\r\n\r\nexport function bulletKindForRadius(r = 0.2): string {\r\n  for (const t of VisualMappingConfig.bulletRadiusThresholds) {\r\n    if (r <= t.threshold) return t.kind;\r\n  }\r\n  return 'small';\r\n}\r\n\r\nexport function getBulletAssetForCannon(cannon: { bulletRadius?: number; radius?: number } = {}) {\r\n  const r = typeof cannon.bulletRadius === 'number' ? cannon.bulletRadius : (typeof cannon.radius === 'number' ? cannon.radius : 0.2);\r\n  const kind = bulletKindForRadius(r);\r\n  return getBulletAsset(kind as any);\r\n}\r\n\r\nexport function getShipAssetForType(type = 'fighter') {\r\n  const key = (VisualMappingConfig as any).shipAssetKey[type] || type;\r\n  return getShipAsset(key as any);\r\n}\r\n\r\nexport function getTurretAssetForShip(_shipType = 'fighter') {\r\n  return getTurretAsset(VisualMappingConfig.defaultTurretKind as any);\r\n}\r\n\r\nexport function getVisualsForShipType(type = 'fighter', cannon: any = undefined) {\r\n  return { hull: getShipAssetForType(type), turret: getTurretAssetForShip(type), bullet: getBulletAssetForCannon(cannon) };\r\n}\r\n\r\nexport function getDefaultShipType(): string {\r\n  const keys = Object.keys(ShipConfig || {} as any);\r\n  return keys.length ? keys[0] as string : 'fighter';\r\n}\r\n", "// teamsConfig.ts - Teams and fleet helpers (typed)\r\nimport { getDefaultShipType, getShipConfig } from './entitiesConfig';\r\nexport type Team = { id: string; color: string; label?: string };\r\nexport const TeamsConfig = {\r\n  teams: {\r\n    red: { id: 'red', color: '#ff4d4d', label: 'Red' },\r\n    blue: { id: 'blue', color: '#4da6ff', label: 'Blue' }\r\n  },\r\n  defaultFleet: { counts: (() => {\r\n    // Build a default counts map from available ShipConfig types so new\r\n    // ship types are automatically included without needing manual edits.\r\n    const shipCfg = getShipConfig();\r\n    const types = Object.keys(shipCfg || {});\r\n    // sane defaults: make fighters most common, others rarer\r\n    const defaultCounts: Record<string, number> = {};\r\n    for (const t of types) {\r\n      if (t === 'fighter') defaultCounts[t] = 8;\r\n      else if (t === 'corvette') defaultCounts[t] = 3;\r\n      else if (t === 'frigate') defaultCounts[t] = 2;\r\n      else if (t === 'destroyer') defaultCounts[t] = 1;\r\n      else if (t === 'carrier') defaultCounts[t] = 1;\r\n      else defaultCounts[t] = 1;\r\n    }\r\n    return defaultCounts;\r\n  })(), spacing: 28, jitter: { x: 80, y: 120 } },\r\n  // continuousReinforcement controls: enable/disable, scoreMargin is the\r\n  // imbalance fraction (e.g. 0.12 means reinforce when weakest ratio < 0.38),\r\n  // perTick is the maximum ships considered per reinforcement tick, and\r\n  // shipTypes is an optional array of types to choose from randomly. If\r\n  // omitted, keys from defaultFleet.counts are used.\r\n  continuousReinforcement: { enabled: false, scoreMargin: 0.12, perTick: 1, shipTypes: undefined as string[] | undefined }\r\n};\r\n\r\n// Local seeded PRNG (does not affect global rng)\r\nfunction mulberry32(seed: number) {\r\n  let t = seed >>> 0;\r\n  return function() {\r\n    t += 0x6D2B79F5;\r\n    let r = Math.imul(t ^ (t >>> 15), 1 | t);\r\n    r ^= r + Math.imul(r ^ (r >>> 7), 61 | r);\r\n    return ((r ^ (r >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nfunction hashStringToInt(s: string) {\r\n  let h = 2166136261 >>> 0;\r\n  for (let i = 0; i < s.length; i++) { h ^= s.charCodeAt(i); h = Math.imul(h, 16777619) >>> 0; }\r\n  return h >>> 0;\r\n}\r\n\r\nexport function generateFleetForTeam(\r\n  seed = 0,\r\n  teamId: 'red' | 'blue' = 'red',\r\n  bounds = { W: 800, H: 600 },\r\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\r\n  options: any = {}\r\n) {\r\n  const cfg = Object.assign({}, TeamsConfig.defaultFleet, options.fleet || {});\r\n  const spacing = options.spacing ?? cfg.spacing;\r\n  const jitter = Object.assign({}, cfg.jitter, options.jitter || {});\r\n  const centerY = bounds.H / 2;\r\n  const baseX = teamId === 'red' ? bounds.W * 0.22 : bounds.W * 0.78;\r\n  const rng = mulberry32((seed >>> 0) + hashStringToInt(teamId));\r\n  const out: any[] = [];\r\n  for (const [type, count] of Object.entries(cfg.counts)) {\r\n    for (let i = 0; i < (count as number); i++) {\r\n      const r = spacing * Math.sqrt(rng());\r\n      const angle = rng() * Math.PI * 2;\r\n      const dx = Math.cos(angle) * r + (rng() - 0.5) * (jitter.x ?? 0);\r\n      const dy = Math.sin(angle) * r + (rng() - 0.5) * (jitter.y ?? 0);\r\n      const x = Math.max(0, Math.min(bounds.W, baseX + dx));\r\n      const y = Math.max(0, Math.min(bounds.H, centerY + dy));\r\n      if (typeof shipFactory === 'function') out.push(shipFactory(type, x, y, teamId));\r\n      else out.push({ type, x, y, team: teamId });\r\n    }\r\n  }\r\n  return out;\r\n}\r\n\r\nexport function makeInitialFleets(seed = 0, bounds = { W: 800, H: 600 }, shipFactory?: (type: string, x: number, y: number, team: string) => any, options: any = {}) {\r\n  const red = generateFleetForTeam(seed, 'red', bounds, shipFactory, options);\r\n  const blue = generateFleetForTeam(seed + 1, 'blue', bounds, shipFactory, options);\r\n  return red.concat(blue);\r\n}\r\n\r\nexport function chooseReinforcements(seed = 0, state: any = {}, options: any = {}) {\r\n  const cfg = Object.assign({}, TeamsConfig.continuousReinforcement, options);\r\n  // (no-op) merge options onto default continuous reinforcement config\r\n  if (!cfg.enabled) return [] as any[];\r\n  const teamStrength: Record<string, number> = {};\r\n  if (Array.isArray(state.ships)) {\r\n    for (const s of state.ships) {\r\n      if (!s || !s.team) continue;\r\n      const hp = (typeof s.hp === 'number' ? s.hp : 1);\r\n      teamStrength[s.team] = (teamStrength[s.team] || 0) + hp;\r\n    }\r\n  }\r\n  const teams = Object.keys(TeamsConfig.teams);\r\n  if (teams.length === 0) return [];\r\n  for (const t of teams) {\r\n    if (!teamStrength[t]) {\r\n      const cnt = (state.ships || []).filter((s: any) => s && s.team === t).length;\r\n      teamStrength[t] = cnt > 0 ? cnt : 0;\r\n    }\r\n  }\r\n  let weakest = teams[0]; let strongest = teams[0];\r\n  for (const t of teams) { if (teamStrength[t] < teamStrength[weakest]) weakest = t; if (teamStrength[t] > teamStrength[strongest]) strongest = t; }\r\n  const total = teams.reduce((s, t) => s + (teamStrength[t] || 0), 0) || 1;\r\n  const weakestRatio = (teamStrength[weakest] || 0) / total;\r\n  if (weakestRatio < (0.5 - cfg.scoreMargin)) {\r\n    const orders: any[] = [];\r\n    const rng = mulberry32((seed >>> 0) + hashStringToInt(weakest));\r\n    // determine candidate ship types: either explicit list or keys from defaultFleet\r\n    const candidateTypes = Array.isArray(cfg.shipTypes) && cfg.shipTypes.length ? cfg.shipTypes : Object.keys(TeamsConfig.defaultFleet.counts || { fighter: 1 });\r\n    // Build weights for candidate types using defaultFleet counts when available\r\n    const countsMap = (TeamsConfig && TeamsConfig.defaultFleet && TeamsConfig.defaultFleet.counts) ? TeamsConfig.defaultFleet.counts : {};\r\n    const weights = candidateTypes.map((t: string) => Math.max(0, Number((countsMap as any)[t]) || 1));\r\n    const totalWeight = weights.reduce((s: number, w: number) => s + w, 0) || candidateTypes.length || 1;\r\n    function weightedPick() {\r\n      const r = rng() * totalWeight;\r\n      let acc = 0;\r\n      for (let i = 0; i < candidateTypes.length; i++) {\r\n        acc += weights[i];\r\n        if (r < acc) return candidateTypes[i];\r\n      }\r\n      return candidateTypes[candidateTypes.length - 1];\r\n    }\r\n    // Randomize number to spawn between 1 and cfg.perTick (inclusive)\r\n    const maxPerTick = Math.max(1, Math.floor(Number(cfg.perTick) || 1));\r\n    const spawnCount = Math.max(1, Math.floor(rng() * maxPerTick) + 1);\r\n  // spawnCount computed deterministically from the provided seed\r\n    const b = (options.bounds || { W: 800, H: 600 });\r\n    const centerY = b.H / 2; const baseX = weakest === 'red' ? b.W * 0.18 : b.W * 0.82;\r\n    for (let i = 0; i < spawnCount; i++) {\r\n      const x = Math.max(0, Math.min(b.W, baseX + (rng() - 0.5) * 120));\r\n      const y = Math.max(0, Math.min(b.H, centerY + (rng() - 0.5) * 160));\r\n    const type = (Array.isArray(cfg.shipTypes) && cfg.shipTypes.length) ? candidateTypes[Math.floor(rng() * candidateTypes.length)] || getDefaultShipType() : weightedPick();\r\n      orders.push({ type, team: weakest, x, y });\r\n    }\r\n  // return deterministic orders\r\n    return orders;\r\n  }\r\n  return [] as any[];\r\n}\r\n\r\nexport default TeamsConfig;\r\n\r\n// Helper: call chooseReinforcements using a manager-derived seed (from global RNG)\r\n// This is convenient for callers (like gamemanager) that want to keep\r\n// reinforcements deterministic relative to the global `srand`/`srandom` state.\r\nimport { srandom } from '../rng';\r\nexport function chooseReinforcementsWithManagerSeed(state: any = {}, options: any = {}) {\r\n  const seed = Math.floor(srandom() * 0xffffffff) >>> 0;\r\n  return chooseReinforcements(seed, state, options);\r\n}\r\n", "export const RendererConfig = {\r\n  preferred: 'canvas' as 'canvas' | 'webgl',\r\n  allowUrlOverride: true,\r\n  allowWebGL: true,\r\n  // UI overlays configuration\r\n  hpBar: { bg: '#222', fill: '#4caf50', w: 20, h: 4, dx: -10, dy: -12 },\r\n};\r\n\r\nexport function getPreferredRenderer(): 'canvas' | 'webgl' {\r\n  try {\r\n    if (RendererConfig.allowUrlOverride && typeof window !== 'undefined' && window.location && window.location.search) {\r\n      const p = new URLSearchParams(window.location.search);\r\n      const r = p.get('renderer');\r\n      if (r === 'canvas' || r === 'webgl') return r;\r\n    }\r\n  } catch (e) {}\r\n  return RendererConfig.preferred;\r\n}\r\n\r\nexport default RendererConfig;\r\n", "// src/canvasrenderer.ts - TypeScript port of the simple Canvas2D renderer.\r\n// This mirrors the behavior in src/canvasrenderer.js but provides types so\r\n// other parts of the codebase can be migrated safely.\r\n\r\nimport { AssetsConfig, getShipAsset, getBulletAsset, getTurretAsset, getVisualConfig } from './config/assets/assetsConfig';\r\nimport { TeamsConfig } from './config/teamsConfig';\r\nimport type { AssetsConfig as AssetsConfigType, TeamsConfig as TeamsConfigType, ShipSpec } from './types';\r\nimport { VisualMappingConfig, bulletKindForRadius, getDefaultShipType } from './config/entitiesConfig';\r\nimport { RendererConfig } from './config/rendererConfig';\r\nimport { shieldFlashIndex, healthFlashIndex, FLASH_TTL_DEFAULT } from './gamemanager';\r\n\r\nexport type AnyState = any;\r\n\r\nexport class CanvasRenderer {\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D | null = null;\r\n  providesOwnLoop = false;\r\n  type = 'canvas';\r\n  // ratio between backing store pixels and CSS (logical) pixels\r\n  pixelRatio = 1;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n  }\r\n\r\n  init(): boolean {\r\n    this.ctx = this.canvas.getContext('2d');\r\n    if (!this.ctx) return false;\r\n    // compute pixelRatio from backing store vs CSS size so logical coordinates\r\n    // (ships.x / ships.y are in CSS pixels) map correctly to the backing store.\r\n    try {\r\n      const cssW = this.canvas.clientWidth || this.canvas.width || 1;\r\n      this.pixelRatio = (this.canvas.width || cssW) / cssW;\r\n      // reset any previous transforms and set a scale so the renderer can draw\r\n      // using logical (CSS) pixels. This lets main.fitCanvasToWindow change\r\n      // the backing store size (dpr * rendererScale) and the renderer will\r\n      // automatically render at the correct scale.\r\n      this.ctx.setTransform(this.pixelRatio, 0, 0, this.pixelRatio, 0, 0);\r\n      // smoothing can be toggled if desired; keep enabled for nicer visuals\r\n      this.ctx.imageSmoothingEnabled = true;\r\n    } catch (e) {\r\n      // ignore and fall back to defaults\r\n      this.pixelRatio = 1;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  isRunning(): boolean { return false; }\r\n\r\n  renderState(state: AnyState, interpolation = 0): void {\r\n  const ctx = this.ctx!;\r\n  if (!ctx) return;\r\n    // Use CSS (logical) pixel dimensions for layout/drawing now that we\r\n    // applied a transform in init(). This keeps the scene size stable when\r\n    // the backing store (canvas.width/height) is scaled by devicePixelRatio\r\n    // and RendererConfig.rendererScale.\r\n    const w = this.canvas.clientWidth || Math.round(this.canvas.width / this.pixelRatio);\r\n    const h = this.canvas.clientHeight || Math.round(this.canvas.height / this.pixelRatio);\r\n    // clear logical area\r\n    ctx.clearRect(0, 0, w, h);\r\n  ctx.save();\r\n  ctx.fillStyle = (AssetsConfig.palette as any).background || '#0b1220';\r\n    ctx.fillRect(0, 0, w, h);\r\n\r\n    // helper: draw a polygon path from points (already scaled/rotated by transform)\r\n    function drawPolygon(points: number[][]) {\r\n      if (!points || points.length === 0) return;\r\n      ctx.beginPath();\r\n      ctx.moveTo(points[0][0], points[0][1]);\r\n      for (let i = 1; i < points.length; i++) ctx.lineTo(points[i][0], points[i][1]);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    }\r\n\r\n    // background starCanvas if present\r\n    if (state && state.starCanvas) {\r\n      try {\r\n        ctx.save();\r\n        ctx.globalCompositeOperation = 'source-over';\r\n        // drawImage will scale to logical size because we've set the transform\r\n        ctx.drawImage(state.starCanvas, 0, 0, w, h);\r\n        ctx.restore();\r\n      } catch (e) { /* ignore draw errors */ }\r\n    }\r\n\r\n    // helper: current time for animation pulses\r\n    const now = (state && state.t) || 0;\r\n\r\n    // Spawn damage particles from recent damage events (renderer-owned particle bursts)\r\n    try {\r\n      const dmgAnim = AssetsConfig.animations && AssetsConfig.animations.damageParticles;\r\n      if (Array.isArray(state.damageEvents) && dmgAnim) {\r\n        state.particles = state.particles || [];\r\n        for (const ev of state.damageEvents) {\r\n          const count = dmgAnim.count || 6;\r\n          for (let i = 0; i < count; i++) {\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const speed = (Math.random() * (dmgAnim.spread || 0.6));\r\n            state.particles.push({\r\n              x: ev.x || 0,\r\n              y: ev.y || 0,\r\n              vx: Math.cos(angle) * speed,\r\n              vy: Math.sin(angle) * speed,\r\n              r: 0.6 + Math.random() * 0.8,\r\n              color: dmgAnim.color || '#ff6b6b',\r\n              lifetime: dmgAnim.lifetime || 0.8,\r\n              age: 0,\r\n              shape: 'circle'\r\n            });\r\n          }\r\n        }\r\n        // clear damageEvents after spawning so they are one-shot\r\n        state.damageEvents = [];\r\n      }\r\n    } catch (e) { /* ignore particle spawn errors */ }\r\n\r\n    // draw ships using shapes\r\n    for (const s of state.ships || []) {\r\n      try {\r\n        const teamObj = (s.team === 'blue') ? TeamsConfig.teams.blue : TeamsConfig.teams.red;\r\n        const color = (teamObj && teamObj.color) || AssetsConfig.palette.shipHull;\r\n        const radius = s.radius || 6;\r\n        const angle = s.angle || 0;\r\n  const fallback = getDefaultShipType();\r\n  const shape = getShipAsset(s.type || fallback);\r\n\r\n  // visual config helper\r\n  const vconf = getVisualConfig(s.type || fallback);\r\n\r\n        // Draw base ship shape (scaled by radius and rotated by heading)\r\n        ctx.save();\r\n        ctx.translate(s.x || 0, s.y || 0);\r\n        ctx.rotate(angle);\r\n        ctx.scale(radius, radius);\r\n        ctx.fillStyle = color;\r\n\r\n        if (shape.type === 'polygon') drawPolygon(shape.points as number[][]);\r\n        else if (shape.type === 'circle') { ctx.beginPath(); ctx.arc(0, 0, shape.r || 1, 0, Math.PI * 2); ctx.fill(); }\r\n        else if (shape.type === 'compound' && Array.isArray(shape.parts)) {\r\n          for (const part of shape.parts) {\r\n            if (part.type === 'polygon') drawPolygon(part.points as number[][]);\r\n            else if (part.type === 'circle') { ctx.beginPath(); ctx.arc(0, 0, part.r || 1, 0, Math.PI * 2); ctx.fill(); }\r\n          }\r\n        }\r\n\r\n        // damage tint overlay based on hpPercent -> map to damageStates\r\n        try {\r\n          const hpPct = (typeof s.hpPercent === 'number') ? s.hpPercent : Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\r\n          const thresholds = (AssetsConfig as any).damageThresholds || { moderate: 0.66, heavy: 0.33 };\r\n          let ds = 'light';\r\n          if (hpPct < thresholds.heavy) ds = 'heavy';\r\n          else if (hpPct < thresholds.moderate) ds = 'moderate';\r\n          const dcfg = vconf.damageStates?.[ds] || AssetsConfig.damageStates?.[ds];\r\n          if (dcfg) {\r\n            ctx.globalCompositeOperation = 'source-over';\r\n            ctx.fillStyle = dcfg.accentColor || '#ff6b6b';\r\n            ctx.globalAlpha = (1 - (hpPct || 0)) * (dcfg.opacity || 0.5);\r\n            if (shape.type === 'polygon') drawPolygon(shape.points as number[][]);\r\n            else if (shape.type === 'circle') { ctx.beginPath(); ctx.arc(0, 0, shape.r || 1, 0, Math.PI * 2); ctx.fill(); }\r\n            else if (shape.type === 'compound' && Array.isArray(shape.parts)) {\r\n              for (const part of shape.parts) {\r\n                if (part.type === 'polygon') drawPolygon(part.points as number[][]);\r\n                else if (part.type === 'circle') { ctx.beginPath(); ctx.arc(0, 0, part.r || 1, 0, Math.PI * 2); ctx.fill(); }\r\n              }\r\n            }\r\n            ctx.globalAlpha = 1.0;\r\n          }\r\n        } catch (e) { /* ignore damage tint errors */ }\r\n\r\n        ctx.restore();\r\n\r\n        // engine flare animation (positioned behind the ship, along -X local axis)\r\n        try {\r\n          const engineName = (vconf.visuals && vconf.visuals.engine) || 'engineFlare';\r\n          const engine = vconf.animations[engineName];\r\n          if (engine && engine.type === 'polygon') {\r\n            const pulse = 0.5 + 0.5 * Math.sin((now || 0) * (engine.pulseRate || 6) * Math.PI * 2);\r\n            ctx.save();\r\n            ctx.translate(s.x || 0, s.y || 0);\r\n            ctx.rotate(angle);\r\n            // place behind ship using configured offset\r\n            const engOffset = (engine.offset != null ? engine.offset : -0.9);\r\n            ctx.translate(engOffset * radius, 0);\r\n            ctx.scale(radius, radius);\r\n            ctx.fillStyle = vconf.palette.shipAccent || AssetsConfig.palette.shipAccent;\r\n            const engAlpha = (engine.alpha != null ? engine.alpha : 0.4);\r\n            ctx.globalAlpha = engAlpha * pulse;\r\n            drawPolygon(engine.points as number[][]);\r\n            ctx.globalAlpha = 1.0;\r\n            ctx.restore();\r\n          }\r\n        } catch (e) {}\r\n\r\n        // shield effect: when shieldPercent > 0 draw stroked circle with pulsing alpha\r\n        try {\r\n          const shieldName = (vconf.visuals && vconf.visuals.shield) || 'shieldEffect';\r\n          const sh = vconf.animations[shieldName];\r\n          const shieldPct = (typeof s.shieldPercent === 'number') ? s.shieldPercent : ((s.maxShield && s.maxShield > 0) ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield)) : 0);\r\n          if (sh && shieldPct > 0) {\r\n            const pulse = 0.6 + 0.4 * Math.sin((now || 0) * (sh.pulseRate || 2) * Math.PI * 2);\r\n            ctx.save();\r\n            ctx.translate(s.x || 0, s.y || 0);\r\n            ctx.rotate(angle);\r\n            ctx.scale(radius * (sh.r || 1), radius * (sh.r || 1));\r\n            ctx.lineWidth = (sh.strokeWidth != null ? sh.strokeWidth : 0.08) * radius;\r\n            ctx.strokeStyle = sh.color || '#88ccff';\r\n            const aBase = (sh.alphaBase != null ? sh.alphaBase : 0.25);\r\n            const aScale = (sh.alphaScale != null ? sh.alphaScale : 0.75);\r\n            ctx.globalAlpha = Math.min(1, aBase + aScale * shieldPct) * pulse;\r\n            // If a recent shieldFlash exists for this ship with hitAngle, draw only an arc segment\r\n            try {\r\n              // TTL-based lookup: use shieldFlashIndex for fast per-ship lookup and pick freshest flash\r\n              let flash: any = null;\r\n              try {\r\n                const nowT = (state && state.t) || 0;\r\n                const arr = shieldFlashIndex.get(s.id) || [];\r\n                let bestTs = -Infinity;\r\n                for (const f of arr) {\r\n                  if (!f) continue;\r\n                  const fTs = (typeof f._ts === 'number') ? f._ts : 0;\r\n                  const fTtl = (typeof f.ttl === 'number') ? f.ttl : ((AssetsConfig && (AssetsConfig as any).shield && (AssetsConfig as any).shield.ttl) || 0.4);\r\n                  if (fTs + fTtl >= nowT - 1e-6 && fTs > bestTs) { bestTs = fTs; flash = f; }\r\n                }\r\n              } catch (e) { flash = null; }\r\n              if (flash && typeof flash.hitAngle === 'number') {\r\n                const arc = (typeof flash.arcWidth === 'number') ? flash.arcWidth : ((vconf && vconf.arcWidth) || (AssetsConfig && (AssetsConfig as any).shieldArcWidth) || Math.PI / 6);\r\n                const start = flash.hitAngle - arc * 0.5 - angle; // account for rotation\r\n                const end = flash.hitAngle + arc * 0.5 - angle;\r\n                ctx.beginPath(); ctx.arc(0, 0, 1, start, end); ctx.stroke();\r\n              } else {\r\n                ctx.beginPath(); ctx.arc(0, 0, 1, 0, Math.PI * 2); ctx.stroke();\r\n              }\r\n            } catch (e) {\r\n              ctx.beginPath(); ctx.arc(0, 0, 1, 0, Math.PI * 2); ctx.stroke();\r\n            }\r\n            ctx.globalAlpha = 1.0;\r\n            ctx.restore();\r\n          }\r\n        } catch (e) {}\r\n\r\n        // hp bar (configurable via RendererConfig.hpBar)\r\n        try {\r\n          const hpBar = (RendererConfig as any).hpBar || { bg: '#222', fill: '#4caf50', w: 20, h: 4, dx: -10, dy: -12 };\r\n          const pct = Math.max(0, (s.hp || 0) / (s.maxHp || 1));\r\n          ctx.fillStyle = hpBar.bg; ctx.fillRect((s.x || 0) + (hpBar.dx || -10), (s.y || 0) + (hpBar.dy || -12), (hpBar.w || 20), (hpBar.h || 4));\r\n          ctx.fillStyle = hpBar.fill; ctx.fillRect((s.x || 0) + (hpBar.dx || -10), (s.y || 0) + (hpBar.dy || -12), (hpBar.w || 20) * pct, (hpBar.h || 4));\r\n        } catch (e) {\r\n          ctx.fillStyle = '#222'; ctx.fillRect((s.x || 0) - 10, (s.y || 0) - 12, 20, 4);\r\n          ctx.fillStyle = '#4caf50'; ctx.fillRect((s.x || 0) - 10, (s.y || 0) - 12, 20 * Math.max(0, (s.hp || 0) / (s.maxHp || 1)), 4);\r\n        }\r\n      } catch (e) { /* protect renderer from bad state */ }\r\n    }\r\n\r\n    // draw turrets as simple overlays\r\n    for (const s of state.ships || []) {\r\n      try {\r\n        const radius = (s.radius || 6) * 0.6;\r\n        const angle = s.angle || 0;\r\n        const tShape = getTurretAsset('basic');\r\n        ctx.save();\r\n        ctx.translate(s.x || 0, s.y || 0);\r\n        ctx.rotate(angle);\r\n        ctx.scale(radius, radius);\r\n        ctx.fillStyle = AssetsConfig.palette.turret;\r\n        if (tShape.type === 'compound') {\r\n          for (const part of tShape.parts) {\r\n            if (part.type === 'polygon') drawPolygon(part.points as number[][]);\r\n            else if (part.type === 'circle') { ctx.beginPath(); ctx.arc(0, 0, part.r || 1, 0, Math.PI * 2); ctx.fill(); }\r\n          }\r\n        } else if (tShape.type === 'polygon') drawPolygon((tShape as any).points || []);\r\n        else if (tShape.type === 'circle') { ctx.beginPath(); ctx.arc(0, 0, (tShape as any).r || 1, 0, Math.PI * 2); ctx.fill(); }\r\n        ctx.restore();\r\n      } catch (e) {}\r\n    }\r\n\r\n    // particles\r\n    if (Array.isArray(state.particles)) {\r\n      for (const p of state.particles) {\r\n        try {\r\n          ctx.save();\r\n          ctx.translate(p.x || 0, p.y || 0);\r\n          ctx.fillStyle = p.color || '#fff';\r\n          if (p.shape === 'circle' || p.r) {\r\n            ctx.beginPath(); ctx.arc(0, 0, p.r || p.size || 1, 0, Math.PI * 2); ctx.fill();\r\n          } else {\r\n            ctx.fillRect(-1, -1, 2, 2);\r\n          }\r\n          ctx.restore();\r\n        } catch (e) {}\r\n      }\r\n    }\r\n\r\n    // helper: draw a stroked ring (used for explosions / flashes)\r\n    function drawRing(x: number, y: number, R: number, color: string, alpha = 1.0, thickness = 2) {\r\n      try {\r\n        ctx.save();\r\n        ctx.globalAlpha = Math.max(0, Math.min(1, alpha));\r\n        ctx.strokeStyle = color;\r\n        ctx.lineWidth = thickness;\r\n        ctx.beginPath();\r\n        ctx.arc(x, y, Math.max(1, R), 0, Math.PI * 2);\r\n        ctx.stroke();\r\n        ctx.restore();\r\n      } catch (e) { /* ignore draw errors */ }\r\n    }\r\n\r\n    // Health hits: render freshest per-ship health flash using index (reddish rings)\r\n    try {\r\n      const nowT = (state && state.t) || 0;\r\n      for (const s of state.ships || []) {\r\n        try {\r\n          let flash: any = null;\r\n          const arr = healthFlashIndex.get(s.id) || [];\r\n          let bestTs = -Infinity;\r\n          for (const f of arr) {\r\n            if (!f) continue;\r\n            const fTs = (typeof f._ts === 'number') ? f._ts : 0;\r\n            const fTtl = (typeof f.ttl === 'number') ? f.ttl : FLASH_TTL_DEFAULT;\r\n            if (fTs + fTtl >= nowT - 1e-6 && fTs > bestTs) { bestTs = fTs; flash = f; }\r\n          }\r\n          if (flash) {\r\n            const ttl = flash.ttl || FLASH_TTL_DEFAULT; const life = flash.life != null ? flash.life : ttl;\r\n            const t = Math.max(0, Math.min(1, life / ttl));\r\n            const R = 6 + (1 - t) * 18;\r\n            const alpha = 0.9 * t;\r\n            drawRing(flash.x || (s.x || 0), flash.y || (s.y || 0), R, '#ff7766', alpha, 2);\r\n          }\r\n        } catch (e) {}\r\n      }\r\n    } catch (e) {}\r\n\r\n    // bullets\r\n  for (const b of state.bullets || []) {\r\n      try {\r\n        const r = b.radius || b.bulletRadius || 1.5;\r\n    const kind = bulletKindForRadius((r / 6)) as any;\r\n    const shape = getBulletAsset(kind as any);\r\n        ctx.save();\r\n        ctx.translate(b.x || 0, b.y || 0);\r\n        const px = Math.max(1, r);\r\n        if (shape.type === 'circle') {\r\n          ctx.beginPath(); ctx.fillStyle = AssetsConfig.palette.bullet; ctx.arc(0, 0, px, 0, Math.PI * 2); ctx.fill();\r\n        } else if (shape.type === 'polygon') {\r\n          ctx.fillStyle = AssetsConfig.palette.bullet; ctx.scale(px, px); drawPolygon(shape.points as number[][]);\r\n        }\r\n        ctx.restore();\r\n      } catch (e) {}\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nexport default CanvasRenderer;\r\n", "// src/webglrenderer.ts - Minimal WebGL renderer stub ported from webglRenderer.js\r\n// Provides a typed, minimal WebGL renderer so the rest of the app can opt-in.\r\n\r\nimport { AssetsConfig, getShipAsset, getTurretAsset, getVisualConfig } from './config/assets/assetsConfig';\r\nimport { TeamsConfig } from './config/teamsConfig';\r\nimport { shieldFlashIndex, healthFlashIndex, FLASH_TTL_DEFAULT } from './gamemanager';\r\nimport { getDefaultShipType } from './config/entitiesConfig';\r\n\r\nexport class WebGLRenderer {\r\n  canvas: HTMLCanvasElement;\r\n  gl: WebGL2RenderingContext | WebGLRenderingContext | null = null;\r\n  // simple GL program state for point rendering\r\n  private prog: WebGLProgram | null = null;\r\n  private attribLoc_pos: number = -1;\r\n  private attribLoc_size: number = -1;\r\n  private attribLoc_color: number = -1;\r\n  private vertexBuffer: WebGLBuffer | null = null;\r\n  providesOwnLoop = false;\r\n  type = 'webgl';\r\n  pixelRatio = 1;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n  }\r\n\r\n  init(): boolean {\r\n    try {\r\n      // Prefer WebGL2, fall back to WebGL1\r\n      this.gl = this.canvas.getContext('webgl2') as WebGL2RenderingContext | null;\r\n      if (!this.gl) {\r\n        this.gl = (this.canvas.getContext('webgl') || this.canvas.getContext('experimental-webgl')) as WebGLRenderingContext | null;\r\n        if (!this.gl) return false;\r\n      }\r\n      const gl = this.gl as WebGLRenderingContext;\r\n      // set background from Assets palette.background when possible\r\n      try {\r\n        const bg = ((AssetsConfig.palette as any).background || '#0b1220').replace('#','');\r\n        const bigint = parseInt(bg.length===3? bg.split('').map((c:string)=>c+c).join(''): bg,16);\r\n        const r = ((bigint >> 16) & 255)/255; const g = ((bigint >> 8) & 255)/255; const b = (bigint & 255)/255;\r\n        gl.clearColor(r, g, b, 1.0);\r\n      } catch { gl.clearColor(0.02, 0.03, 0.06, 1.0); }\r\n      // enable alpha blending for overlays\r\n      try { gl.enable(gl.BLEND); gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); } catch (e) {}\r\n      // compute pixelRatio to map logical (CSS) pixels to backing-store pixels\r\n      try {\r\n        const cssW = this.canvas.clientWidth || this.canvas.width || 1;\r\n        this.pixelRatio = (this.canvas.width || cssW) / cssW;\r\n      } catch (e) { this.pixelRatio = 1; }\r\n\r\n      // prepare a tiny GL program for drawing colored points representing ships\r\n      try {\r\n        const vs = `attribute vec2 a_pos; attribute float a_size; attribute vec4 a_color; varying vec4 v_color; void main(){ v_color=a_color; gl_Position = vec4(a_pos, 0.0, 1.0); gl_PointSize = a_size; }`;\r\n        const fs = `precision mediump float; varying vec4 v_color; void main(){ vec2 c = gl_PointCoord - vec2(0.5); if(length(c) > 0.5) discard; gl_FragColor = v_color; }`;\r\n        const compile = (src: string, type: number) => { const s = gl.createShader(type as any)!; gl.shaderSource(s, src); gl.compileShader(s); if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) { const info = gl.getShaderInfoLog(s); gl.deleteShader(s); throw new Error('Shader compile error: ' + info); } return s; };\r\n        const vsObj = compile(vs, gl.VERTEX_SHADER);\r\n        const fsObj = compile(fs, gl.FRAGMENT_SHADER);\r\n        const prog = gl.createProgram()!;\r\n        gl.attachShader(prog, vsObj); gl.attachShader(prog, fsObj); gl.linkProgram(prog);\r\n        if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) { throw new Error('Program link error: ' + gl.getProgramInfoLog(prog)); }\r\n        this.prog = prog;\r\n        this.attribLoc_pos = gl.getAttribLocation(prog, 'a_pos');\r\n        this.attribLoc_size = gl.getAttribLocation(prog, 'a_size');\r\n        this.attribLoc_color = gl.getAttribLocation(prog, 'a_color');\r\n        this.vertexBuffer = gl.createBuffer();\r\n      } catch (e) {\r\n        // leave program null if shader compilation fails (fallback to minimal clear)\r\n        this.prog = null;\r\n      }\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Called when backing-store size (canvas.width/height) changes so\r\n  // the renderer can update internal scaling/viewport without a full re-init.\r\n  updateScale(): void {\r\n    if (!this.gl) return;\r\n    try {\r\n      const cssW = this.canvas.clientWidth || Math.round((this.canvas.width || 1) / (this.pixelRatio || 1));\r\n      this.pixelRatio = (this.canvas.width || cssW) / Math.max(1, cssW);\r\n      // set viewport in logical/backing pixels on next render\r\n    } catch (e) { /* ignore */ }\r\n  }\r\n\r\n  isRunning(): boolean { return false; }\r\n\r\n  renderState(state: any, interpolation = 0): void {\r\n    if (!this.gl) return;\r\n    const gl = this.gl as WebGLRenderingContext;\r\n    try {\r\n  // viewport uses backing-store pixel dimensions (canvas.width/height)\r\n  gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      // If we have a simple GL program, draw ships as round points with simple overlays\r\n      if (this.prog && this.vertexBuffer) {\r\n        try {\r\n          // prepare arrays for vertices: for each point we pack x,y (clip space), size, r,g,b,a\r\n          const w = this.canvas.clientWidth || Math.round(this.canvas.width / this.pixelRatio);\r\n          const h = this.canvas.clientHeight || Math.round(this.canvas.height / this.pixelRatio);\r\n          const ships = state.ships || [];\r\n          const verts: number[] = [];\r\n          const now = (state && state.t) || 0;\r\n          for (const s of ships) {\r\n            const x = (s.x || 0);\r\n            const y = (s.y || 0);\r\n            const clipX = (x / Math.max(1, w)) * 2 - 1;\r\n            const clipY = 1 - (y / Math.max(1, h)) * 2;\r\n            const radius = s.radius || 6;\r\n            // map radius in logical pixels to gl_PointSize in pixels (approx)\r\n            const ps = Math.max(2, radius * 2);\r\n\r\n            // base color: team or hull\r\n            const teamObj = (s.team === 'blue') ? TeamsConfig.teams.blue : TeamsConfig.teams.red;\r\n            const colorHex = (teamObj && teamObj.color) || AssetsConfig.palette.shipHull || '#888';\r\n            const hexToRgba = (hex: string) => {\r\n              const h = hex.replace('#',''); const bigint = parseInt(h.length===3? h.split('').map(c=>c+c).join(''): h,16);\r\n              const r = ((bigint >> 16) & 255)/255; const g = ((bigint >> 8) & 255)/255; const b = (bigint & 255)/255; return [r,g,b,1];\r\n            };\r\n            const baseColor = hexToRgba(colorHex);\r\n\r\n            // push base ship point\r\n            verts.push(clipX, clipY, ps, baseColor[0], baseColor[1], baseColor[2], baseColor[3]);\r\n\r\n            // engine flare overlay (a second point offset behind ship) - pulse alpha\r\n            try {\r\n              const fallback = getDefaultShipType();\r\n              const vconf = getVisualConfig(s.type || fallback);\r\n              const engineName = (vconf.visuals && vconf.visuals.engine) || 'engineFlare';\r\n              const engine = vconf.animations && vconf.animations[engineName];\r\n              if (engine && engine.type === 'polygon') {\r\n                const pulse = 0.5 + 0.5 * Math.sin((now || 0) * (engine.pulseRate || 6) * Math.PI * 2);\r\n                const offset = (engine.offset != null ? engine.offset : -0.9) * (s.radius || 6);\r\n                const ang = s.angle || 0;\r\n                const ex = x + Math.cos(ang) * offset;\r\n                const ey = y + Math.sin(ang) * offset;\r\n                const cex = (ex / Math.max(1, w)) * 2 - 1;\r\n                const cey = 1 - (ey / Math.max(1, h)) * 2;\r\n                const accent = (vconf.palette && vconf.palette.shipAccent) || AssetsConfig.palette.shipAccent || '#ffd27f';\r\n                const ac = hexToRgba(accent);\r\n                const engAlpha = (engine.alpha != null ? engine.alpha : 0.4);\r\n                verts.push(cex, cey, Math.max(2, ps * 0.9), ac[0], ac[1], ac[2], engAlpha * pulse);\r\n              }\r\n            } catch (e) {}\r\n\r\n            // shield overlay as a semi-transparent larger point\r\n            try {\r\n              const fallback = getDefaultShipType();\r\n              const vconf = getVisualConfig(s.type || fallback);\r\n              const shieldName = (vconf.visuals && vconf.visuals.shield) || 'shieldEffect';\r\n              const sh = vconf.animations && vconf.animations[shieldName];\r\n              const shieldPct = (typeof s.shieldPercent === 'number') ? s.shieldPercent : ((s.maxShield && s.maxShield > 0) ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield)) : 0);\r\n              if (sh && shieldPct > 0) {\r\n                const pulse = 0.6 + 0.4 * Math.sin((now || 0) * (sh.pulseRate || 2) * Math.PI * 2);\r\n                const accent = sh.color || '#88ccff';\r\n                const ac = hexToRgba(accent);\r\n                const aBase = (sh.alphaBase != null ? sh.alphaBase : 0.25);\r\n                const aScale = (sh.alphaScale != null ? sh.alphaScale : 0.75);\r\n                // Push central shield point\r\n                verts.push(clipX, clipY, Math.max(4, ps * (sh.r || 1.6)), ac[0], ac[1], ac[2], Math.min(1, aBase + aScale * shieldPct) * pulse);\r\n                // If there's a recent shieldFlash for this ship with a hitAngle, render an arc using multiple small points\r\n                try {\r\n                  // TTL-based lookup: use index for fast per-ship lookup\r\n                  let flash: any = null;\r\n                  try {\r\n                    const nowT = (state && state.t) || 0;\r\n                    const arr = shieldFlashIndex.get(s.id) || [];\r\n                    let bestTs = -Infinity;\r\n                    for (const f of arr) {\r\n                      if (!f) continue;\r\n                      const fTs = (typeof f._ts === 'number') ? f._ts : 0;\r\n                      const fTtl = (typeof f.ttl === 'number') ? f.ttl : ((AssetsConfig && (AssetsConfig as any).shield && (AssetsConfig as any).shield.ttl) || 0.4);\r\n                      if (fTs + fTtl >= nowT - 1e-6 && fTs > bestTs) { bestTs = fTs; flash = f; }\r\n                    }\r\n                  } catch (e) { flash = null; }\r\n                  if (flash && typeof flash.hitAngle === 'number') {\r\n                    const arc = (typeof flash.arcWidth === 'number') ? flash.arcWidth : ((vconf && (vconf as any).arcWidth) || (AssetsConfig && (AssetsConfig as any).shieldArcWidth) || Math.PI / 6);\r\n                    const segs: number = 6; // number of samples along the arc\r\n                    const radiusMul = (sh.r || 1.6) * (s.radius || 6);\r\n                    for (let si = 0; si < segs; si++) {\r\n                      const t = segs === 1 ? 0.5 : si / (segs - 1);\r\n                      const a = flash.hitAngle - arc * 0.5 + t * arc;\r\n                      const px = x + Math.cos(a) * radiusMul;\r\n                      const py = y + Math.sin(a) * radiusMul;\r\n                      const cpx = (px / Math.max(1, w)) * 2 - 1;\r\n                      const cpy = 1 - (py / Math.max(1, h)) * 2;\r\n                      const pointSize = Math.max(2, ps * 0.45);\r\n                      const alpha = Math.min(1, aBase + aScale * shieldPct) * pulse * 0.9;\r\n                      verts.push(cpx, cpy, pointSize, ac[0], ac[1], ac[2], alpha);\r\n                    }\r\n                  }\r\n                } catch (e) {}\r\n              }\r\n            } catch (e) {}\r\n\r\n            // damage tint overlay point\r\n            try {\r\n              const fallback = getDefaultShipType();\r\n              const vconf = getVisualConfig(s.type || fallback);\r\n              const hpPct = (typeof s.hpPercent === 'number') ? s.hpPercent : Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\r\n              const thresholds = (AssetsConfig as any).damageThresholds || { moderate: 0.66, heavy: 0.33 };\r\n              let ds = 'light'; if (hpPct < thresholds.heavy) ds = 'heavy'; else if (hpPct < thresholds.moderate) ds = 'moderate';\r\n              const dcfg = vconf.damageStates && vconf.damageStates[ds] || AssetsConfig.damageStates && AssetsConfig.damageStates[ds];\r\n              if (dcfg) {\r\n                const accent = dcfg.accentColor || '#ff6b6b';\r\n                const alpha = (1 - (hpPct || 0)) * (dcfg.opacity || 0.5);\r\n                const ac = hexToRgba(accent);\r\n                verts.push(clipX, clipY, Math.max(2, ps * 1.0), ac[0], ac[1], ac[2], alpha);\r\n              }\r\n            } catch (e) {}\r\n\r\n              // health flash overlay: check index for freshest flash and render a small red point\r\n              try {\r\n                const nowT = (state && state.t) || 0;\r\n                let hflash: any = null;\r\n                const harr = healthFlashIndex.get(s.id) || [];\r\n                let bestTsH = -Infinity;\r\n                for (const hf of harr) {\r\n                  if (!hf) continue;\r\n                  const fTs = (typeof hf._ts === 'number') ? hf._ts : 0;\r\n                  const fTtl = (typeof hf.ttl === 'number') ? hf.ttl : FLASH_TTL_DEFAULT;\r\n                  if (fTs + fTtl >= nowT - 1e-6 && fTs > bestTsH) { bestTsH = fTs; hflash = hf; }\r\n                }\r\n                if (hflash) {\r\n                  const hx = (hflash.x != null ? hflash.x : x);\r\n                  const hy = (hflash.y != null ? hflash.y : y);\r\n                  const cpx = (hx / Math.max(1, w)) * 2 - 1;\r\n                  const cpy = 1 - (hy / Math.max(1, h)) * 2;\r\n                  const pointSize = Math.max(2, ps * 0.6);\r\n                  const col = [1, 0.47, 0.4, 0.95]; // reddish\r\n                  verts.push(cpx, cpy, pointSize, col[0], col[1], col[2], col[3]);\r\n                }\r\n              } catch (e) {}\r\n          }\r\n\r\n          // upload buffer and draw\r\n          const floatArr = new Float32Array(verts);\r\n          gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n          gl.bufferData(gl.ARRAY_BUFFER, floatArr, gl.DYNAMIC_DRAW);\r\n          gl.useProgram(this.prog as WebGLProgram);\r\n          const stride = 7 * 4; // 7 floats per vertex\r\n          gl.enableVertexAttribArray(this.attribLoc_pos);\r\n          gl.vertexAttribPointer(this.attribLoc_pos, 2, gl.FLOAT, false, stride, 0);\r\n          gl.enableVertexAttribArray(this.attribLoc_size);\r\n          gl.vertexAttribPointer(this.attribLoc_size, 1, gl.FLOAT, false, stride, 2 * 4);\r\n          gl.enableVertexAttribArray(this.attribLoc_color);\r\n          gl.vertexAttribPointer(this.attribLoc_color, 4, gl.FLOAT, false, stride, 3 * 4);\r\n\r\n          // draw all points in one draw call\r\n          const count = Math.floor(floatArr.length / 7);\r\n          gl.drawArrays(gl.POINTS, 0, count);\r\n        } catch (e) {\r\n          // swallow GL draw errors\r\n        }\r\n      }\r\n    } catch (e) {\r\n      // swallow GL render errors to avoid crashing the app\r\n    }\r\n  }\r\n}\r\n\r\nexport default WebGLRenderer;\r\n", "export function getDefaultBounds() {\r\n  const W = (typeof window !== 'undefined' && window.innerWidth) ? window.innerWidth : 800;\r\n  const H = (typeof window !== 'undefined' && window.innerHeight) ? window.innerHeight : 600;\r\n  return { W: Math.max(800, W), H: Math.max(600, H) };\r\n}\r\n\r\nexport default { getDefaultBounds };\r\n", "// This allows the build to treat the app as TypeScript while we incrementally port internals.\r\n// main.ts \u2014 TypeScript entrypoint (ported from main.js). Uses TS imports so\r\n// the module graph resolves to .ts sources during migration.\r\nimport { createGameManager } from './gamemanager';\r\n// This allows the build to treat the app as TypeScript while we incrementally port internals.\r\n// main.ts \u2014 TypeScript entrypoint (ported from main.js). Uses TS imports so\r\n// the module graph resolves to .ts sources during migration.\r\nimport { CanvasRenderer } from './canvasrenderer';\r\nimport { WebGLRenderer } from './webglrenderer';\r\nimport { getDefaultBounds } from './config/displayConfig';\r\nimport { getPreferredRenderer, RendererConfig } from './config/rendererConfig';\r\n\r\n// Allow temporary extension of window.gm used by the app during migration.\r\ndeclare global {\r\n\tinterface Window { gm?: any; }\r\n}\r\n\r\nexport async function startApp(rootDocument: Document = document) {\r\n\tconst canvas = rootDocument.getElementById('world') as HTMLCanvasElement;\r\n\tconst ui: any = {\r\n\t\tstartPause: rootDocument.getElementById('startPause'),\r\n\t\treset: rootDocument.getElementById('reset'),\r\n\t\taddRed: rootDocument.getElementById('addRed'),\r\n\t\taddBlue: rootDocument.getElementById('addBlue'),\r\n\t\ttoggleTrails: rootDocument.getElementById('toggleTrails'),\r\n\t\tspeed: rootDocument.getElementById('speed'),\r\n\t\tredScore: rootDocument.getElementById('redScore'),\r\n\t\tblueScore: rootDocument.getElementById('blueScore'),\r\n\t\tstats: rootDocument.getElementById('stats'),\r\n\t\tcontinuousCheckbox: rootDocument.getElementById('continuousCheckbox'),\r\n\t\tseedBtn: rootDocument.getElementById('seedBtn'),\r\n\t\tformationBtn: rootDocument.getElementById('formationBtn'),\r\n\t};\r\n\r\n\ttry { if (ui.stats) ui.stats.textContent = 'Ships: 0 (R:0 B:0) Bullets: 0'; } catch (e) {}\r\n\r\n\tfunction fitCanvasToWindow() {\r\n\t\tconst baseDpr = window.devicePixelRatio || 1;\r\n\t\tconst cfgScale = (RendererConfig && typeof (RendererConfig as any).rendererScale === 'number') ? (RendererConfig as any).rendererScale : 1;\r\n\t\tconst bounds = getDefaultBounds();\r\n\t\tconst cssW = Math.round(bounds.W * cfgScale);\r\n\t\tconst cssH = Math.round(bounds.H * cfgScale);\r\n\t\tif (canvas) {\r\n\t\t\tcanvas.style.width = `${cssW}px`;\r\n\t\t\tcanvas.style.height = `${cssH}px`;\r\n\t\t\tcanvas.width = Math.round(cssW * baseDpr);\r\n\t\t\tcanvas.height = Math.round(cssH * baseDpr);\r\n\t\t}\r\n\t}\r\n\r\n\tfitCanvasToWindow();\r\n\twindow.addEventListener('resize', fitCanvasToWindow);\r\n\r\n\tlet renderer: any;\r\n\tconst pref = getPreferredRenderer();\r\n\tif (pref === 'webgl') {\r\n\t\ttry { const w = new WebGLRenderer(canvas); if (w && w.init && w.init()) renderer = w; } catch (e) {}\r\n\t}\r\n\tif (!renderer) { renderer = new CanvasRenderer(canvas); renderer.init && renderer.init(); }\r\n\r\n\ttry { window.gm = window.gm || {}; } catch (e) {}\r\n\tconst gm = createGameManager({ renderer, canvas, useWorker: false });\r\n\ttry { if (typeof window !== 'undefined' && (window as any).gm) Object.assign((window as any).gm, gm); } catch (e) {}\r\n\r\n\ttry {\r\n\t\tconst host = (location && location.hostname) || '';\r\n\t\tconst urlParams = (typeof URLSearchParams !== 'undefined') ? new URLSearchParams(location.search) : null;\r\n\t\tconst autotest = (urlParams && urlParams.get('autotest') === '1') || !!((window as any).__AUTO_REINFORCE_DEV__);\r\n\t\tif ((host === '127.0.0.1' || host === 'localhost') && autotest) {\r\n\t\t\ttry { if (gm && typeof gm.setContinuousEnabled === 'function') gm.setContinuousEnabled(true); } catch (e) {}\r\n\t\t\ttry { if (gm && typeof gm.setReinforcementInterval === 'function') gm.setReinforcementInterval(0.01); } catch (e) {}\r\n\t\t\ttry { if (gm && typeof gm.stepOnce === 'function') gm.stepOnce(0.02); } catch (e) {}\r\n\t\t}\r\n\t} catch (e) {}\r\n\r\n\tlet lastReinforcementSummary = '';\r\n\ttry {\r\n\t\tif (gm && typeof gm.on === 'function') {\r\n\t\t\tgm.on('reinforcements', (msg: any) => {\r\n\t\t\t\tconst list = (msg && msg.spawned) || [];\r\n\t\t\t\tconst types = list.map((s: any) => s.type).filter(Boolean);\r\n\t\t\t\tconst summary = `Reinforcements: spawned ${list.length} ships (${types.join(', ')})`;\r\n\t\t\t\tlastReinforcementSummary = summary;\r\n\t\t\t\ttry { setTimeout(() => { lastReinforcementSummary = ''; }, 3000); } catch (e) {}\r\n\t\t\t\ttry { if (ui && ui.stats) ui.stats.textContent = `${ui.stats.textContent} | ${summary}`; } catch (e) {}\r\n\t\t\t});\r\n\t\t}\r\n\t} catch (e) {}\r\n\r\n\tconst workerIndicator = rootDocument.getElementById('workerIndicator');\r\n\tlet toastContainer = rootDocument.getElementById('toastContainer');\r\n\tif (!toastContainer) {\r\n\t\ttry {\r\n\t\t\ttoastContainer = rootDocument.createElement('div');\r\n\t\t\ttoastContainer.id = 'toastContainer';\r\n\t\t\ttoastContainer.style.position = 'fixed';\r\n\t\t\ttoastContainer.style.right = '16px';\r\n\t\t\ttoastContainer.style.top = '16px';\r\n\t\t\ttoastContainer.style.zIndex = '9999';\r\n\t\t\ttoastContainer.style.pointerEvents = 'none';\r\n\t\t\trootDocument.body.appendChild(toastContainer);\r\n\t\t} catch (e) { toastContainer = null; }\r\n\t}\r\n\r\n\tfunction showToast(msg: string, opts: any = {}) {\r\n\t\ttry {\r\n\t\t\tif (!toastContainer) return;\r\n\t\t\tconst ttl = (typeof opts.ttl === 'number') ? opts.ttl : 2000;\r\n\t\t\tconst el = rootDocument.createElement('div');\r\n\t\t\tel.style.background = 'rgba(20,20,30,0.9)';\r\n\t\t\tel.style.color = '#fff';\r\n\t\t\tel.style.padding = '8px 12px';\r\n\t\t\tel.style.marginTop = '6px';\r\n\t\t\tel.style.borderRadius = '6px';\r\n\t\t\tel.style.boxShadow = '0 2px 8px rgba(0,0,0,0.5)';\r\n\t\t\tel.style.fontFamily = 'sans-serif';\r\n\t\t\tel.style.fontSize = '13px';\r\n\t\t\tel.style.pointerEvents = 'auto';\r\n\t\t\tel.textContent = msg;\r\n\t\t\ttoastContainer.appendChild(el);\r\n\t\t\tsetTimeout(() => { try { el.style.transition = 'opacity 300ms ease'; el.style.opacity = '0'; } catch (e) {}; setTimeout(() => { try { if (el && el.parentNode) el.parentNode.removeChild(el); } catch (err) {} }, 350); }, ttl);\r\n\t\t} catch (e) {}\r\n\t}\r\n\r\n\ttry {\r\n\t\tif (gm && typeof gm.on === 'function') {\r\n\t\t\tgm.on('levelup', (m: any) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst ship = (m && m.ship) || null;\r\n\t\t\t\t\tconst lvl = (m && m.newLevel) || (m && m.newLevel === 0 ? 0 : undefined);\r\n\t\t\t\t\tconst who = ship && ship.team ? `${ship.team} ship` : 'Ship';\r\n\t\t\t\t\tconst msg = `${who} leveled up to ${lvl}`;\r\n\t\t\t\t\tshowToast(msg, { ttl: 2200 });\r\n\t\t\t\t} catch (e) {}\r\n\t\t\t});\r\n\t\t}\r\n\t} catch (e) {}\r\n\r\n\tif (workerIndicator) {\r\n\t\ttry { workerIndicator.textContent = (gm.isWorker && gm.isWorker()) ? 'Worker' : 'Main'; (function refresh() { try { workerIndicator.textContent = (gm.isWorker && gm.isWorker()) ? 'Worker' : 'Main'; requestAnimationFrame(refresh); } catch (e) {} }()); } catch (e) { workerIndicator.textContent = 'Unknown'; }\r\n\t}\r\n\r\n\ttry { ui.startPause.addEventListener('click', () => { if (gm.isRunning()) { gm.pause(); ui.startPause.textContent = '\u25B6 Start'; } else { gm.start(); ui.startPause.textContent = '\u23F8 Pause'; } }); } catch (e) {}\r\n\ttry { ui.reset.addEventListener('click', () => gm.reset()); } catch (e) {}\r\n\ttry { ui.addRed.addEventListener('click', () => gm.spawnShip('red')); } catch (e) {}\r\n\ttry { ui.addBlue.addEventListener('click', () => gm.spawnShip('blue')); } catch (e) {}\r\n\tfunction onSeedBtnClick() {\r\n\t\ttry {\r\n\t\t\tconst raw = (typeof window !== 'undefined' && typeof window.prompt === 'function') ? window.prompt('Enter new seed (leave blank for random):', '') : null;\r\n\t\t\tif (raw == null) return;\r\n\t\t\tconst trimmed = String(raw).trim();\r\n\t\t\tif (trimmed === '') { try { gm.reseed(); showToast('Reseeded with random seed'); } catch (e) {} return; }\r\n\t\t\tconst asNum = Number(trimmed);\r\n\t\t\tif (!Number.isFinite(asNum) || Math.floor(asNum) !== asNum) { try { showToast('Invalid seed. Please enter an integer.'); } catch (e) {} return; }\r\n\t\t\ttry { gm.reseed(asNum >>> 0); showToast(`Reseeded with ${asNum >>> 0}`); } catch (e) {}\r\n\t\t} catch (e) {}\r\n\t}\r\n\ttry { ui.seedBtn.addEventListener('click', onSeedBtnClick); } catch (e) {}\r\n\ttry { ui.formationBtn.addEventListener('click', () => gm.formFleets()); } catch (e) {}\r\n\ttry { if (ui.continuousCheckbox) { ui.continuousCheckbox.addEventListener('change', (ev: any) => { const v = !!ev.target.checked; if (gm && typeof gm.setContinuousEnabled === 'function') gm.setContinuousEnabled(v); }); } } catch (e) {}\r\n\r\n\tfunction uiTick() {\r\n\t\ttry {\r\n\t\t\tconst s = gm.snapshot();\r\n\t\t\tui.redScore.textContent = `Red ${gm.score.red}`;\r\n\t\t\tui.blueScore.textContent = `Blue ${gm.score.blue}`;\r\n\t\t\tconst redCount = s.ships.filter((sh: any) => sh.team === 'red').length;\r\n\t\t\tconst blueCount = s.ships.filter((sh: any) => sh.team === 'blue').length;\r\n\t\t\tui.stats.textContent = `Ships: ${s.ships.length} (R:${redCount} B:${blueCount}) Bullets: ${s.bullets.length}` + (lastReinforcementSummary ? ` | ${lastReinforcementSummary}` : '');\r\n\t\t} catch (e) {}\r\n\t\trequestAnimationFrame(uiTick);\r\n\t}\r\n\trequestAnimationFrame(uiTick);\r\n\treturn { gm, renderer };\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n\tif (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', () => startApp(document));\r\n\telse startApp(document);\r\n}\r\n\r\nexport default startApp;\r\n"],
  "mappings": "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",
  "names": ["createGameManager", "shieldFlashIndex", "healthFlashIndex", "FLASH_TTL_DEFAULT", "getShipConfig", "getShipConfig", "shieldFlashIndex", "healthFlashIndex", "FLASH_TTL_DEFAULT", "ships", "h", "shieldFlashIndex", "healthFlashIndex", "FLASH_TTL_DEFAULT", "createGameManager"]
}
