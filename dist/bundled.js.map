{
  "version": 3,
  "sources": ["../src/config/assets/assetsConfig.ts", "../src/config/entitiesConfig.ts", "../src/rng.ts", "../src/config/teamsConfig.ts", "../src/entities.ts", "../src/behavior.ts", "../src/config/progressionConfig.ts", "../src/simulate.ts", "../src/gamemanager.ts", "../src/config/displayConfig.ts", "../src/createSimWorker.ts", "../src/config/gamemanagerConfig.ts", "../src/canvasrenderer.ts", "../src/config/rendererConfig.ts", "../src/webglrenderer.ts", "../src/main.ts"],
  "sourcesContent": ["// Basic asset templates for 2D top-down rendering with future 3D model placeholders.\r\n// Orientation: shapes face +X (to the right). Scale is in logical units; renderer\r\n// should scale to entity radius and rotate by entity heading if present.\r\n\r\nexport type PolygonShape = {\r\n  type: 'polygon';\r\n  points: number[][]; // [[x,y], ...]\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CircleShape = {\r\n  type: 'circle';\r\n  r: number;\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CompoundPart = PolygonShape | CircleShape;\r\n\r\nexport type CompoundShape = {\r\n  type: 'compound';\r\n  parts: CompoundPart[];\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type Shape2D = PolygonShape | CircleShape | CompoundShape;\r\n\r\nexport type Model3D = {\r\n  url?: string | undefined;\r\n  scale?: number | undefined;\r\n  type?: string | undefined;\r\n  mesh?: string | undefined;\r\n};\r\n\r\nexport type AssetsConfigType = {\r\n  meta: { orientation: string; coordinateSystem: string };\r\n  palette: Record<string, string>;\r\n  shapes2d: Record<string, Shape2D>;\r\n  animations?: Record<string, any>;\r\n  damageStates?: Record<string, { opacity?: number; accentColor?: string }>;\r\n  visualStateDefaults?: Record<string, { engine?: string; shield?: string; damageParticles?: string }>;\r\n};\r\n\r\nexport const AssetsConfig: AssetsConfigType = {\r\n  meta: {\r\n    orientation: '+X',\r\n    coordinateSystem: 'topdown-2d',\r\n  },\r\n  palette: {\r\n    shipHull: '#b0b7c3',\r\n    shipAccent: '#6c7380',\r\n    bullet: '#ffd166',\r\n    turret: '#94a3b8',\r\n    // Scene background color used by renderers\r\n    background: '#0b1220',\r\n  },\r\n  // 2D vector shapes defined as polygons and circles. Points are unit-sized\r\n  // profiles (roughly radius 1). Renderer should multiply by entity radius or\r\n  // provided scale before drawing.\r\n  shapes2d: {\r\n    fighter: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [-0.8, 0.6], [-0.5, 0], [-0.8, -0.6]] },\r\n        { type: 'polygon', points: [[0.0, 0.35], [-0.6, 0.65], [-0.35, 0.0]] },\r\n        { type: 'polygon', points: [[0.0, -0.35], [-0.35, 0.0], [-0.6, -0.65]] }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1, type: 'gltf', mesh: undefined }\r\n    },\r\n    corvette: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.0, 0], [0.2, 0.6], [-0.9, 0.5], [-1.1, 0], [-0.9, -0.5], [0.2, -0.6]] },\r\n        { type: 'polygon', points: [[1.2, 0.18], [1.0, 0.1], [1.0, -0.1], [1.2, -0.18]] }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1.4, type: 'gltf', mesh: undefined }\r\n    },\r\n    frigate: {\r\n      type: 'polygon',\r\n      points: [[1.1, 0], [0.6, 0.55], [-0.2, 0.8], [-1.2, 0.45], [-1.2, -0.45], [-0.2, -0.8], [0.6, -0.55]],\r\n      strokeWidth: 0.1,\r\n      model3d: { url: undefined, scale: 1.8, type: 'gltf', mesh: undefined }\r\n    },\r\n    destroyer: {\r\n      type: 'polygon',\r\n      points: [[1.4, 0], [0.8, 0.5], [0.1, 0.7], [-0.6, 0.6], [-1.4, 0.4], [-1.4, -0.4], [-0.6, -0.6], [0.1, -0.7], [0.8, -0.5]],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 2.2, type: 'gltf', mesh: undefined }\r\n    },\r\n    carrier: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.1, 0], [0.6, 0.7], [-0.5, 0.9], [-1.4, 0.7], [-1.6, 0], [-1.4, -0.7], [-0.5, -0.9], [0.6, -0.7]] },\r\n        { type: 'polygon', points: [[1.4, 0.25], [1.1, 0.15], [1.1, -0.15], [1.4, -0.25]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 3.0, type: 'gltf', mesh: undefined }\r\n    },\r\n    bulletSmall: { type: 'circle', r: 0.18 },\r\n    bulletMedium: { type: 'circle', r: 0.25 },\r\n    bulletLarge: { type: 'circle', r: 0.36 },\r\n    turretBasic: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'circle', r: 0.5 },\r\n        { type: 'polygon', points: [[-0.2, 0.2], [0.7, 0.2], [0.7, -0.2], [-0.2, -0.2]] }\r\n      ],\r\n      strokeWidth: 0.08\r\n    }\r\n  }\r\n};\r\n\r\n// Animations and visual defaults (align with JS AssetsConfig)\r\n(AssetsConfig as any).animations = {\r\n  engineFlare: {\r\n    type: 'polygon',\r\n    points: [ [0, 0], [-0.3, 0.15], [-0.5, 0], [-0.3, -0.15] ],\r\n    pulseRate: 8,\r\n    // configurable alpha multiplier for engine overlay\r\n    alpha: 0.4,\r\n    // local-space X offset (negative = behind ship)\r\n    offset: -0.9\r\n  },\r\n  shieldEffect: {\r\n    type: 'circle',\r\n    r: 1.2,\r\n    strokeWidth: 0.1,\r\n    color: '#88ccff',\r\n    pulseRate: 2,\r\n    // map shieldPct -> alpha = base + scale * shieldPct\r\n    alphaBase: 0.25,\r\n    alphaScale: 0.75\r\n  },\r\n  damageParticles: {\r\n    type: 'particles',\r\n    color: '#ff6b6b',\r\n    count: 6,\r\n    lifetime: 0.8,\r\n    spread: 0.6\r\n  }\r\n  ,\r\n  engineTrail: {\r\n    type: 'trail',\r\n    color: '#fffc00', // bright yellow for high contrast\r\n  maxLength: 40,    // much longer trail\r\n    width: 0.35,      // thicker trail line\r\n    fade: 0.35        // slower fading, more persistent\r\n  }\r\n};\r\n\r\n(AssetsConfig as any).damageStates = {\r\n  light: { opacity: 0.9, accentColor: '#b0b7c3' },\r\n  moderate: { opacity: 0.75, accentColor: '#d4a06a' },\r\n  heavy: { opacity: 0.5, accentColor: '#ff6b6b' }\r\n};\r\n\r\n(AssetsConfig as any).visualStateDefaults = {\r\n  fighter:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  corvette:  { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  frigate:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  destroyer: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  carrier:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 }\r\n};\r\n\r\n// thresholds for mapping hpPct -> damage state key\r\n(AssetsConfig as any).damageThresholds = { moderate: 0.66, heavy: 0.33 };\r\n(AssetsConfig as any).shieldArcWidth = Math.PI / 12;\r\n\r\nexport function getVisualConfig(type: string) {\r\n  const shape = getShipAsset(type);\r\n  const visuals = (AssetsConfig as any).visualStateDefaults[type] || (AssetsConfig as any).visualStateDefaults.fighter;\r\n  return { shape, visuals, palette: AssetsConfig.palette, animations: (AssetsConfig as any).animations, damageStates: (AssetsConfig as any).damageStates } as any;\r\n}\r\n\r\nexport function getShipAsset(type: string): Shape2D {\r\n  return AssetsConfig.shapes2d[type] || AssetsConfig.shapes2d.fighter;\r\n}\r\n\r\nexport function getBulletAsset(kind: 'small' | 'medium' | 'large' = 'small'): Shape2D {\r\n  if (kind === 'large') return AssetsConfig.shapes2d.bulletLarge;\r\n  if (kind === 'medium') return AssetsConfig.shapes2d.bulletMedium;\r\n  return AssetsConfig.shapes2d.bulletSmall;\r\n}\r\n\r\nexport function getTurretAsset(_kind: 'basic' = 'basic'): Shape2D {\r\n  return AssetsConfig.shapes2d.turretBasic;\r\n}\r\n\r\nexport default AssetsConfig;\r\n", "// entitiesConfig.ts - ship-type defaults and visuals helpers (typed)\r\nimport { getShipAsset, getBulletAsset, getTurretAsset } from './assets/assetsConfig';\r\n\r\nexport type CannonCfg = {\r\n  damage: number; rate: number; spread?: number; muzzleSpeed?: number; bulletRadius?: number; bulletTTL?: number;\r\n};\r\n\r\nexport type ShipTypeCfg = {\r\n  maxHp: number; armor?: number; maxShield?: number; shieldRegen?: number; dmg?: number; damage?: number; radius?: number;\r\n  cannons?: CannonCfg[]; accel?: number; turnRate?: number; carrier?: { fighterCooldown: number; maxFighters: number; spawnPerCooldown: number };\r\n};\r\n\r\nexport type ShipConfigMap = Record<string, ShipTypeCfg>;\r\n\r\nexport const ShipConfig: ShipConfigMap = {\r\n  fighter: {\r\n    maxHp: 15, armor: 0, maxShield: 8, shieldRegen: 1.0, dmg: 3, damage: 3, radius: 4,\r\n    cannons: [ { damage: 3, rate: 3, spread: 0.1, muzzleSpeed: 300, bulletRadius: 1.5, bulletTTL: 1.2 } ],\r\n    accel: 600, turnRate: 6,\r\n  },\r\n  corvette: {\r\n    maxHp: 50, armor: 0, maxShield: Math.round(50 * 0.6), shieldRegen: 0.5, dmg: 5, damage: 5, radius: 8,\r\n    accel: 200, turnRate: 3,\r\n    cannons: [ { damage: 6, rate: 1.2, spread: 0.05, muzzleSpeed: 220, bulletRadius: 2, bulletTTL: 2.0 } ],\r\n  },\r\n  frigate: {\r\n    maxHp: 80, armor: 1, maxShield: Math.round(80 * 0.6), shieldRegen: 0.4, dmg: 8, damage: 8, radius: 12,\r\n    cannons: [ { damage: 8, rate: 1.0, spread: 0.06, muzzleSpeed: 200, bulletRadius: 2.5, bulletTTL: 2.2 } ],\r\n    accel: 120, turnRate: 2.2,\r\n  },\r\n  destroyer: {\r\n    maxHp: 120, armor: 2, maxShield: Math.round(120 * 0.6), shieldRegen: 0.3, dmg: 12, damage: 12, radius: 16,\r\n    cannons: new Array(6).fill(0).map(() => ({ damage: 6, rate: 0.8, spread: 0.08, muzzleSpeed: 240, bulletRadius: 2.5, bulletTTL: 2.4 })),\r\n    accel: 80, turnRate: 1.6,\r\n  },\r\n  carrier: {\r\n    maxHp: 200, armor: 3, maxShield: Math.round(200 * 0.6), shieldRegen: 0.2, dmg: 2, damage: 2, radius: 24,\r\n    cannons: new Array(4).fill(0).map(() => ({ damage: 4, rate: 0.6, spread: 0.12, muzzleSpeed: 180, bulletRadius: 3, bulletTTL: 2.8 })),\r\n    accel: 40, turnRate: 0.8,\r\n    carrier: { fighterCooldown: 1.5, maxFighters: 6, spawnPerCooldown: 2 }\r\n  }\r\n};\r\n\r\nexport default ShipConfig;\r\n\r\nexport function setShipConfig(newCfg: Partial<ShipConfigMap> = {}) {\r\n  function merge(target: any, src: any) {\r\n    for (const k of Object.keys(src)) {\r\n      const sv = (src as any)[k];\r\n      if (sv && typeof sv === 'object' && !Array.isArray(sv)) {\r\n        if (!target[k] || typeof target[k] !== 'object') target[k] = {};\r\n        merge(target[k], sv);\r\n      } else if (Array.isArray(sv)) {\r\n        target[k] = sv.map(item => (item && typeof item === 'object' ? Object.assign({}, item) : item));\r\n      } else if (['number', 'string', 'boolean'].includes(typeof sv)) {\r\n        target[k] = sv;\r\n      }\r\n    }\r\n  }\r\n  merge(ShipConfig as any, newCfg as any);\r\n}\r\n\r\nexport function getShipConfig(): ShipConfigMap {\r\n  return JSON.parse(JSON.stringify(ShipConfig)) as ShipConfigMap;\r\n}\r\n\r\nexport const VisualMappingConfig = {\r\n  bulletRadiusThresholds: [\r\n    { threshold: 0.22, kind: 'small' },\r\n    { threshold: 0.32, kind: 'medium' },\r\n    { threshold: Infinity, kind: 'large' }\r\n  ],\r\n  defaultTurretKind: 'basic',\r\n  shipAssetKey: {\r\n    fighter: 'fighter', corvette: 'corvette', frigate: 'frigate', destroyer: 'destroyer', carrier: 'carrier'\r\n  }\r\n};\r\n\r\nexport function bulletKindForRadius(r = 0.2): string {\r\n  for (const t of VisualMappingConfig.bulletRadiusThresholds) {\r\n    if (r <= t.threshold) return t.kind;\r\n  }\r\n  return 'small';\r\n}\r\n\r\nexport function getBulletAssetForCannon(cannon: { bulletRadius?: number; radius?: number } = {}) {\r\n  const r = typeof cannon.bulletRadius === 'number' ? cannon.bulletRadius : (typeof cannon.radius === 'number' ? cannon.radius : 0.2);\r\n  const kind = bulletKindForRadius(r);\r\n  return getBulletAsset(kind as any);\r\n}\r\n\r\nexport function getShipAssetForType(type = 'fighter') {\r\n  const key = (VisualMappingConfig as any).shipAssetKey[type] || type;\r\n  return getShipAsset(key as any);\r\n}\r\n\r\nexport function getTurretAssetForShip(_shipType = 'fighter') {\r\n  return getTurretAsset(VisualMappingConfig.defaultTurretKind as any);\r\n}\r\n\r\nexport function getVisualsForShipType(type = 'fighter', cannon: any = undefined) {\r\n  return { hull: getShipAssetForType(type), turret: getTurretAssetForShip(type), bullet: getBulletAssetForCannon(cannon) };\r\n}\r\n\r\nexport function getDefaultShipType(): string {\r\n  const keys = Object.keys(ShipConfig || {} as any);\r\n  return keys.length ? keys[0] as string : 'fighter';\r\n}\r\n", "// src/rng.ts - Seeded RNG utilities (ported from rng.js)\r\nlet _seed = 1;\r\n\r\nexport function srand(seed: number = 1) {\r\n  // store as 32-bit unsigned\r\n  _seed = seed >>> 0;\r\n}\r\n\r\n// mulberry32 PRNG\r\nfunction mulberry32(a: number) {\r\n  return function() {\r\n    let t = (a += 0x6D2B79F5) >>> 0;\r\n    t = Math.imul(t ^ (t >>> 15), t | 1);\r\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nexport function srandom(): number {\r\n  const f = mulberry32(_seed);\r\n  // advance seed deterministically\r\n  _seed = (_seed + 0x9E3779B1) >>> 0;\r\n  return f();\r\n}\r\n\r\nexport function srange(min: number, max: number): number {\r\n  return min + (max - min) * srandom();\r\n}\r\n\r\nexport function srangeInt(min: number, max: number): number {\r\n  // exclusive upper bound to match expectations\r\n  return Math.floor(srange(min, max));\r\n}\r\n\r\nexport default { srand, srandom, srange, srangeInt };\r\n", "// teamsConfig.ts - Teams and fleet helpers (typed)\r\nimport { getDefaultShipType, getShipConfig } from './entitiesConfig';\r\nexport type Team = { id: string; color: string; label?: string };\r\nexport const TeamsConfig = {\r\n  teams: {\r\n    red: { id: 'red', color: '#ff4d4d', label: 'Red' },\r\n    blue: { id: 'blue', color: '#4da6ff', label: 'Blue' }\r\n  },\r\n  defaultFleet: { counts: (() => {\r\n    // Build a default counts map from available ShipConfig types so new\r\n    // ship types are automatically included without needing manual edits.\r\n    const shipCfg = getShipConfig();\r\n    const types = Object.keys(shipCfg || {});\r\n    // sane defaults: make fighters most common, others rarer\r\n    const defaultCounts: Record<string, number> = {};\r\n    for (const t of types) {\r\n      if (t === 'fighter') defaultCounts[t] = 8;\r\n      else if (t === 'corvette') defaultCounts[t] = 3;\r\n      else if (t === 'frigate') defaultCounts[t] = 2;\r\n      else if (t === 'destroyer') defaultCounts[t] = 1;\r\n      else if (t === 'carrier') defaultCounts[t] = 1;\r\n      else defaultCounts[t] = 1;\r\n    }\r\n    return defaultCounts;\r\n  })(), spacing: 28, jitter: { x: 80, y: 120 } },\r\n  // continuousReinforcement controls: enable/disable, scoreMargin is the\r\n  // imbalance fraction (e.g. 0.12 means reinforce when weakest ratio < 0.38),\r\n  // perTick is the maximum ships considered per reinforcement tick, and\r\n  // shipTypes is an optional array of types to choose from randomly. If\r\n  // omitted, keys from defaultFleet.counts are used.\r\n  continuousReinforcement: { enabled: false, scoreMargin: 0.12, perTick: 1, shipTypes: undefined as string[] | undefined }\r\n};\r\n\r\n// Local seeded PRNG (does not affect global rng)\r\nfunction mulberry32(seed: number) {\r\n  let t = seed >>> 0;\r\n  return function() {\r\n    t += 0x6D2B79F5;\r\n    let r = Math.imul(t ^ (t >>> 15), 1 | t);\r\n    r ^= r + Math.imul(r ^ (r >>> 7), 61 | r);\r\n    return ((r ^ (r >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nfunction hashStringToInt(s: string) {\r\n  let h = 2166136261 >>> 0;\r\n  for (let i = 0; i < s.length; i++) { h ^= s.charCodeAt(i); h = Math.imul(h, 16777619) >>> 0; }\r\n  return h >>> 0;\r\n}\r\n\r\nexport function generateFleetForTeam(\r\n  seed = 0,\r\n  teamId: 'red' | 'blue' = 'red',\r\n  bounds = { W: 800, H: 600 },\r\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\r\n  options: any = {}\r\n) {\r\n  const cfg = Object.assign({}, TeamsConfig.defaultFleet, options.fleet || {});\r\n  const spacing = options.spacing ?? cfg.spacing;\r\n  const jitter = Object.assign({}, cfg.jitter, options.jitter || {});\r\n  const centerY = bounds.H / 2;\r\n  const baseX = teamId === 'red' ? bounds.W * 0.22 : bounds.W * 0.78;\r\n  const rng = mulberry32((seed >>> 0) + hashStringToInt(teamId));\r\n  const out: any[] = [];\r\n  for (const [type, count] of Object.entries(cfg.counts)) {\r\n    for (let i = 0; i < (count as number); i++) {\r\n      const r = spacing * Math.sqrt(rng());\r\n      const angle = rng() * Math.PI * 2;\r\n      const dx = Math.cos(angle) * r + (rng() - 0.5) * (jitter.x ?? 0);\r\n      const dy = Math.sin(angle) * r + (rng() - 0.5) * (jitter.y ?? 0);\r\n  const x = Math.max(0, Math.min(bounds.W - 1e-6, baseX + dx));\r\n  const y = Math.max(0, Math.min(bounds.H - 1e-6, centerY + dy));\r\n      if (typeof shipFactory === 'function') out.push(shipFactory(type, x, y, teamId));\r\n      else out.push({ type, x, y, team: teamId });\r\n    }\r\n  }\r\n  return out;\r\n}\r\n\r\nexport function makeInitialFleets(seed = 0, bounds = { W: 800, H: 600 }, shipFactory?: (type: string, x: number, y: number, team: string) => any, options: any = {}) {\r\n  const red = generateFleetForTeam(seed, 'red', bounds, shipFactory, options);\r\n  const blue = generateFleetForTeam(seed + 1, 'blue', bounds, shipFactory, options);\r\n  return red.concat(blue);\r\n}\r\n\r\nexport function chooseReinforcements(seed = 0, state: any = {}, options: any = {}) {\r\n  const cfg = Object.assign({}, TeamsConfig.continuousReinforcement, options);\r\n  // (no-op) merge options onto default continuous reinforcement config\r\n  if (!cfg.enabled) return [] as any[];\r\n  const teamStrength: Record<string, number> = {};\r\n  if (Array.isArray(state.ships)) {\r\n    for (const s of state.ships) {\r\n      if (!s || !s.team) continue;\r\n      const hp = (typeof s.hp === 'number' ? s.hp : 1);\r\n      teamStrength[s.team] = (teamStrength[s.team] || 0) + hp;\r\n    }\r\n  }\r\n  const teams = Object.keys(TeamsConfig.teams);\r\n  if (teams.length === 0) return [];\r\n  for (const t of teams) {\r\n    if (!teamStrength[t]) {\r\n      const cnt = (state.ships || []).filter((s: any) => s && s.team === t).length;\r\n      teamStrength[t] = cnt > 0 ? cnt : 0;\r\n    }\r\n  }\r\n  let weakest = teams[0]; let strongest = teams[0];\r\n  for (const t of teams) { if (teamStrength[t] < teamStrength[weakest]) weakest = t; if (teamStrength[t] > teamStrength[strongest]) strongest = t; }\r\n  const total = teams.reduce((s, t) => s + (teamStrength[t] || 0), 0) || 1;\r\n  const weakestRatio = (teamStrength[weakest] || 0) / total;\r\n  if (weakestRatio < (0.5 - cfg.scoreMargin)) {\r\n    const orders: any[] = [];\r\n    const rng = mulberry32((seed >>> 0) + hashStringToInt(weakest));\r\n    // determine candidate ship types: either explicit list or keys from defaultFleet\r\n    const candidateTypes = Array.isArray(cfg.shipTypes) && cfg.shipTypes.length ? cfg.shipTypes : Object.keys(TeamsConfig.defaultFleet.counts || { fighter: 1 });\r\n    // Build weights for candidate types using defaultFleet counts when available\r\n    const countsMap = (TeamsConfig && TeamsConfig.defaultFleet && TeamsConfig.defaultFleet.counts) ? TeamsConfig.defaultFleet.counts : {};\r\n    const weights = candidateTypes.map((t: string) => Math.max(0, Number((countsMap as any)[t]) || 1));\r\n    const totalWeight = weights.reduce((s: number, w: number) => s + w, 0) || candidateTypes.length || 1;\r\n    function weightedPick() {\r\n      const r = rng() * totalWeight;\r\n      let acc = 0;\r\n      for (let i = 0; i < candidateTypes.length; i++) {\r\n        acc += weights[i];\r\n        if (r < acc) return candidateTypes[i];\r\n      }\r\n      return candidateTypes[candidateTypes.length - 1];\r\n    }\r\n    // Randomize number to spawn between 1 and cfg.perTick (inclusive)\r\n    const maxPerTick = Math.max(1, Math.floor(Number(cfg.perTick) || 1));\r\n    const spawnCount = Math.max(1, Math.floor(rng() * maxPerTick) + 1);\r\n  // spawnCount computed deterministically from the provided seed\r\n    const b = (options.bounds || { W: 800, H: 600 });\r\n    const centerY = b.H / 2; const baseX = weakest === 'red' ? b.W * 0.18 : b.W * 0.82;\r\n    for (let i = 0; i < spawnCount; i++) {\r\n  const x = Math.max(0, Math.min(b.W - 1e-6, baseX + (rng() - 0.5) * 120));\r\n  const y = Math.max(0, Math.min(b.H - 1e-6, centerY + (rng() - 0.5) * 160));\r\n    const type = (Array.isArray(cfg.shipTypes) && cfg.shipTypes.length) ? candidateTypes[Math.floor(rng() * candidateTypes.length)] || getDefaultShipType() : weightedPick();\r\n      orders.push({ type, team: weakest, x, y });\r\n    }\r\n  // return deterministic orders\r\n    return orders;\r\n  }\r\n  return [] as any[];\r\n}\r\n\r\nexport default TeamsConfig;\r\n\r\n// Helper: call chooseReinforcements using a manager-derived seed (from global RNG)\r\n// This is convenient for callers (like gamemanager) that want to keep\r\n// reinforcements deterministic relative to the global `srand`/`srandom` state.\r\nimport { srandom } from '../rng';\r\nexport function chooseReinforcementsWithManagerSeed(state: any = {}, options: any = {}) {\r\n  const seed = Math.floor(srandom() * 0xffffffff) >>> 0;\r\n  return chooseReinforcements(seed, state, options);\r\n}\r\n", "// entities.ts - catalog of ships, bullets, cannon configs and simple factories\r\nimport { getShipConfig, getDefaultShipType } from './config/entitiesConfig';\r\nimport type { ShipConfigMap, ShipSpec } from './types';\r\n\r\nlet nextId = 1;\r\nexport function genId(): number { return nextId++; }\r\n\r\nexport type Cannon = {\r\n  damage: number;\r\n  rate: number;\r\n  spread?: number;\r\n  muzzleSpeed?: number;\r\n  bulletRadius?: number;\r\n  bulletTTL?: number;\r\n};\r\n\r\nexport type Ship = {\r\n  id: number;\r\n  type: string;\r\n  x: number; y: number;\r\n  vx: number; vy: number;\r\n  hp: number; maxHp: number;\r\n  shield?: number; maxShield?: number;\r\n  team?: string;\r\n  xp?: number; level?: number;\r\n  cannons?: Cannon[];\r\n  accel?: number; turnRate?: number; radius?: number;\r\n};\r\n\r\nexport function createShip(type: string | undefined = undefined, x = 0, y = 0, team = 'red'): Ship {\r\n  const shipCfg = getShipConfig() as ShipConfigMap;\r\n  const availableTypes = Object.keys(shipCfg || {});\r\n  const resolvedType = (type && shipCfg[type]) ? type : (availableTypes.length ? availableTypes[0] : getDefaultShipType());\r\n  const cfg = (shipCfg[resolvedType] || shipCfg[getDefaultShipType()]) as Partial<ShipSpec>;\r\n  return {\r\n    id: genId(),\r\n    type: resolvedType,\r\n    x, y,\r\n    vx: 0, vy: 0,\r\n    hp: cfg.maxHp,\r\n    maxHp: cfg.maxHp,\r\n    shield: cfg.maxShield || 0,\r\n    maxShield: cfg.maxShield || 0,\r\n    team,\r\n    xp: 0,\r\n    level: 1,\r\n    cannons: JSON.parse(JSON.stringify(cfg.cannons || [])),\r\n    accel: cfg.accel || 0,\r\n    turnRate: cfg.turnRate || 0,\r\n    radius: cfg.radius || 6,\r\n  } as Ship;\r\n}\r\n\r\nexport type Bullet = {\r\n  id: number; x: number; y: number; vx: number; vy: number; team: string; ownerId?: number | null; damage: number; ttl: number;\r\n};\r\n\r\nexport function createBullet(x: number, y: number, vx: number, vy: number, team = 'red', ownerId: number | null = null, damage = 1, ttl = 2.0): Bullet {\r\n  return {\r\n    id: genId(),\r\n    x, y, vx, vy, team, ownerId, damage, ttl\r\n  } as Bullet;\r\n}\r\n\r\nexport type GameState = {\r\n  t: number;\r\n  ships: Ship[];\r\n  bullets: Bullet[];\r\n  explosions: any[];\r\n  shieldHits: any[];\r\n  healthHits: any[];\r\n  engineTrailsEnabled?: boolean;\r\n};\r\n\r\nexport function makeInitialState(): GameState {\r\n  return {\r\n    t: 0,\r\n    ships: [],\r\n    bullets: [],\r\n    explosions: [],\r\n    shieldHits: [],\r\n    healthHits: [],\r\n    engineTrailsEnabled: true,\r\n  };\r\n}\r\n\r\nexport default { createShip, createBullet, makeInitialState };\r\n", "// behavior.ts - deterministic, simple AI for steering and firing\r\n// Uses seeded RNG for any randomness so results are reproducible.\r\nimport { srandom, srange } from './rng';\r\nimport { createBullet } from './entities';\r\n\r\ntype ShipLike = {\r\n  id?: number;\r\n  x?: number; y?: number;\r\n  vx?: number; vy?: number;\r\n  team?: string;\r\n  hp?: number; maxHp?: number;\r\n  cannons?: any[];\r\n  accel?: number; radius?: number; turnRate?: number;\r\n  damage?: number; dmg?: number;\r\n  __ai?: any;\r\n};\r\n\r\ntype State = { ships: ShipLike[]; bullets: any[] };\r\n\r\nfunction len2(vx: number, vy: number) { return vx*vx + vy*vy; }\r\nfunction clampSpeed(s: ShipLike, max: number) {\r\n  const v2 = len2(s.vx || 0, s.vy || 0);\r\n  const max2 = max * max;\r\n  if (v2 > max2 && v2 > 0) {\r\n    const inv = max / Math.sqrt(v2);\r\n    s.vx = (s.vx || 0) * inv;\r\n    s.vy = (s.vy || 0) * inv;\r\n  }\r\n}\r\n\r\nfunction aimWithSpread(from: ShipLike, to: ShipLike, spread = 0) {\r\n  let dx = (to.x || 0) - (from.x || 0); let dy = (to.y || 0) - (from.y || 0);\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  dx /= d; dy /= d;\r\n  if (spread > 0) {\r\n    const ang = Math.atan2(dy, dx);\r\n    const jitter = (srange(-spread, spread));\r\n    const na = ang + jitter;\r\n    return { x: Math.cos(na), y: Math.sin(na) };\r\n  }\r\n  return { x: dx, y: dy };\r\n}\r\n\r\nfunction tryFire(state: State, ship: ShipLike, target: ShipLike, dt: number) {\r\n  if (!Array.isArray(ship.cannons) || ship.cannons.length === 0) return;\r\n  for (const c of ship.cannons) {\r\n    if (typeof c.__cd !== 'number') c.__cd = 0;\r\n    c.__cd -= dt;\r\n    if (c.__cd > 0) continue;\r\n    const spread = typeof c.spread === 'number' ? c.spread : 0;\r\n    const dir = aimWithSpread(ship, target, spread);\r\n    const speed = typeof c.muzzleSpeed === 'number' ? c.muzzleSpeed : 240;\r\n    const dmg = (typeof c.damage === 'number') ? c.damage : (typeof ship.damage === 'number' ? ship.damage : (typeof ship.dmg === 'number' ? ship.dmg : 3));\r\n    const ttl = typeof c.bulletTTL === 'number' ? c.bulletTTL : 2.0;\r\n    const radius = typeof c.bulletRadius === 'number' ? c.bulletRadius : 1.5;\r\n    const vx = dir.x * speed; const vy = dir.y * speed;\r\n    const b = Object.assign(\r\n      createBullet(ship.x || 0, ship.y || 0, vx, vy, ship.team || 'red', ship.id || null, dmg, ttl),\r\n      { radius }\r\n    );\r\n    state.bullets.push(b);\r\n    const rate = (typeof c.rate === 'number' && c.rate > 0) ? c.rate : 1;\r\n    c.__cd = 1 / rate;\r\n  }\r\n}\r\n\r\nfunction ensureShipAiState(s: ShipLike) {\r\n  if (!s.__ai) {\r\n    s.__ai = { state: 'idle', decisionTimer: 0, targetId: null };\r\n  }\r\n  return s.__ai;\r\n}\r\n\r\nfunction chooseNewTarget(state: State, ship: ShipLike) {\r\n  const enemies = (state.ships || []).filter((sh) => sh && sh.team !== ship.team);\r\n  if (!enemies.length) return null;\r\n  const idx = Math.floor(srandom() * enemies.length);\r\n  return enemies[idx];\r\n}\r\n\r\nfunction steerAway(s: ShipLike, tx: number, ty: number, accel: number, dt: number) {\r\n  const dx = (s.x || 0) - tx; const dy = (s.y || 0) - ty;\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  const nx = dx / d; const ny = dy / d;\r\n  s.vx = (s.vx || 0) + nx * accel * dt;\r\n  s.vy = (s.vy || 0) + ny * accel * dt;\r\n}\r\n\r\nexport function applySimpleAI(state: State, dt: number, bounds = { W: 800, H: 600 }) {\r\n  if (!state || !Array.isArray(state.ships)) return;\r\n  for (const s of state.ships) {\r\n    const ai = ensureShipAiState(s);\r\n    ai.decisionTimer = Math.max(0, (ai.decisionTimer || 0) - dt);\r\n\r\n    let target: ShipLike | null = null;\r\n    if (ai.targetId != null) target = (state.ships || []).find(sh => sh && sh.id === ai.targetId) || null;\r\n    if (!target) target = chooseNewTarget(state, s);\r\n    if (target) ai.targetId = target.id;\r\n\r\n    const accel = typeof s.accel === 'number' ? s.accel : 100;\r\n    const maxSpeed = 160;\r\n\r\n    if (!target) {\r\n      s.vx = (s.vx || 0) + (srange(-1, 1) * 8) * dt;\r\n      s.vy = (s.vy || 0) + (srange(-1, 1) * 8) * dt;\r\n      ai.state = 'idle';\r\n    } else {\r\n      if (ai.decisionTimer <= 0) {\r\n        const hpFrac = ((s.hp || 0) / Math.max(1, (s.maxHp || 1)));\r\n        const rnd = srandom();\r\n        if (hpFrac < 0.35 || rnd < 0.15) ai.state = 'evade';\r\n        else if (rnd < 0.85) ai.state = 'engage'; else ai.state = 'idle';\r\n        ai.decisionTimer = 0.5 + srandom() * 1.5;\r\n      }\r\n\r\n      if (ai.state === 'engage') {\r\n        const aim = aimWithSpread(s, target, 0.05);\r\n        s.vx = (s.vx || 0) + aim.x * accel * dt;\r\n        s.vy = (s.vy || 0) + aim.y * accel * dt;\r\n        tryFire(state, s, target, dt);\r\n      } else if (ai.state === 'evade') {\r\n        steerAway(s, target.x || 0, target.y || 0, accel * 0.8, dt);\r\n        const ang = Math.atan2((s.vy || 0), (s.vx || 0));\r\n        const perp = ang + (Math.PI / 2) * (srandom() < 0.5 ? 1 : -1);\r\n        s.vx = (s.vx || 0) + Math.cos(perp) * accel * 0.2 * dt;\r\n        s.vy = (s.vy || 0) + Math.sin(perp) * accel * 0.2 * dt;\r\n      } else {\r\n        s.vx = (s.vx || 0) + (srange(-0.5, 0.5) * 6) * dt;\r\n        s.vy = (s.vy || 0) + (srange(-0.5, 0.5) * 6) * dt;\r\n      }\r\n    }\r\n    clampSpeed(s, maxSpeed);\r\n  }\r\n}\r\n\r\nexport function getShipAiState(ship: ShipLike) {\r\n  if (!ship || !ship.__ai) return null;\r\n  const { targetId, ...rest } = ship.__ai;\r\n  return Object.assign({}, rest);\r\n}\r\n\r\nexport default { applySimpleAI, getShipAiState };\r\n", "// Enhanced progression with diminishing returns and extra per-level scalars\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 * Math.pow(1.25, level - 1),\r\n  hpPercentPerLevel: (level: number) => Math.min(0.10, 0.05 + 0.05 / Math.sqrt(level)),\r\n  dmgPercentPerLevel: 0.08,\r\n  shieldPercentPerLevel: 0.06,\r\n  speedPercentPerLevel: 0.03,\r\n  regenPercentPerLevel: 0.04,\r\n};\r\n\r\nexport default progression;\r\n", "// simulate.ts - TypeScript implementation ported from simulate.js\r\nimport { srange, srand, srandom } from './rng';\r\nimport { progression as progressionCfg } from './config/progressionConfig';\r\n\r\nexport type Bounds = { W: number; H: number };\r\n\r\nexport const SIM_DT_MS = 16; // ms\r\nexport const MAX_ACC_MS = 250;\r\n\r\nfunction dist2(a: { x: number; y: number }, b: { x: number; y: number }) {\r\n\tconst dx = a.x - b.x; const dy = a.y - b.y; return dx * dx + dy * dy;\r\n}\r\n\r\nexport function simulateStep(state: any, dtSeconds: number, bounds: Bounds) {\r\n\t// Advance time\r\n\tstate.t = (state.t || 0) + dtSeconds;\r\n\r\n\t// Move bullets and prune out-of-bounds\r\n\tfor (let i = (state.bullets || []).length - 1; i >= 0; i--) {\r\n\t\tconst b = state.bullets[i];\r\n\t\tb.x += (b.vx || 0) * dtSeconds;\r\n\t\tb.y += (b.vy || 0) * dtSeconds;\r\n\t\tb.ttl = (b.ttl || 0) - dtSeconds;\r\n\t\tif (b.ttl <= 0 || b.x < 0 || b.x >= bounds.W || b.y < 0 || b.y >= bounds.H) {\r\n\t\t\tstate.bullets.splice(i, 1);\r\n\t\t}\r\n\t}\r\n\t// Prune out-of-bounds shieldHits, healthHits, explosions, damageEvents\r\n\tfunction pruneHits(arr: any[], bounds: Bounds) {\r\n\t\tif (!Array.isArray(arr)) return arr;\r\n\t\treturn arr.filter(e => typeof e.x === 'number' && typeof e.y === 'number' && e.x >= 0 && e.x < bounds.W && e.y >= 0 && e.y < bounds.H);\r\n\t}\r\n\tif (Array.isArray(state.shieldHits)) state.shieldHits = pruneHits(state.shieldHits, bounds);\r\n\tif (Array.isArray(state.healthHits)) state.healthHits = pruneHits(state.healthHits, bounds);\r\n\tif (Array.isArray(state.explosions)) state.explosions = pruneHits(state.explosions, bounds);\r\n\tif (Array.isArray(state.damageEvents)) state.damageEvents = pruneHits(state.damageEvents, bounds);\r\n\r\n\t// Move ships and update heading\r\n\tfor (const s of state.ships || []) {\r\n\t\ts.x += (s.vx || 0) * dtSeconds;\r\n\t\ts.y += (s.vy || 0) * dtSeconds;\r\n\t\t// normalize into [0, bounds.W) and [0, bounds.H) using modulo so large\r\n\t\t// displacements that wrap multiple times are handled correctly.\r\n\t\tif (typeof bounds.W === 'number' && bounds.W > 0) {\r\n\t\t\t// ((x % W) + W) % W ensures positive results for negative x\r\n\t\t\ts.x = ((s.x % bounds.W) + bounds.W) % bounds.W;\r\n\t\t}\r\n\t\tif (typeof bounds.H === 'number' && bounds.H > 0) {\r\n\t\t\ts.y = ((s.y % bounds.H) + bounds.H) % bounds.H;\r\n\t\t}\r\n\r\n\t\t// --- Heading/angle update ---\r\n\t\t// If ship is moving, rotate angle toward velocity heading\r\n\t\tconst speed2 = (s.vx || 0) * (s.vx || 0) + (s.vy || 0) * (s.vy || 0);\r\n\t\tconst minSpeed = 0.5; // threshold to avoid jitter when nearly stopped\r\n\t\tif (speed2 > minSpeed * minSpeed) {\r\n\t\t\tconst desired = Math.atan2(s.vy || 0, s.vx || 0);\r\n\t\t\tif (typeof s.angle !== 'number') s.angle = desired;\r\n\t\t\telse {\r\n\t\t\t\tlet a = s.angle;\r\n\t\t\t\tlet da = desired - a;\r\n\t\t\t\t// Wrap to [-PI, PI]\r\n\t\t\t\twhile (da < -Math.PI) da += Math.PI * 2;\r\n\t\t\t\twhile (da > Math.PI) da -= Math.PI * 2;\r\n\t\t\t\tconst turnRate = typeof s.turnRate === 'number' ? s.turnRate : 3; // radians/sec\r\n\t\t\t\tconst maxTurn = turnRate * dtSeconds;\r\n\t\t\t\tif (Math.abs(da) < maxTurn) a = desired;\r\n\t\t\t\telse a += Math.sign(da) * maxTurn;\r\n\t\t\t\t// Wrap to [-PI, PI]\r\n\t\t\t\twhile (a < -Math.PI) a += Math.PI * 2;\r\n\t\t\t\twhile (a > Math.PI) a -= Math.PI * 2;\r\n\t\t\t\ts.angle = a;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Bullet collisions\r\n\tfor (let bi = (state.bullets || []).length - 1; bi >= 0; bi--) {\r\n\t\tconst b = state.bullets[bi];\r\n\t\tfor (let si = (state.ships || []).length - 1; si >= 0; si--) {\r\n\t\t\tconst s = state.ships[si];\r\n\t\t\tif (s.team === b.team) continue;\r\n\t\t\tconst r = ((s.radius || 6) + (b.radius || 1));\r\n\t\t\tif (dist2(b, s) <= r * r) {\r\n\t\t\t\tconst attacker = (typeof b.ownerId === 'number' || typeof b.ownerId === 'string')\r\n\t\t\t\t\t? (state.ships || []).find((sh: any) => sh.id === b.ownerId)\r\n\t\t\t\t\t: undefined;\r\n\t\t\t\tlet dealtToShield = 0;\r\n\t\t\t\tlet dealtToHealth = 0;\r\n\t\t\t\tconst shield = s.shield || 0;\r\n\t\t\t\t\tif (shield > 0) {\r\n\t\t\t\t\tconst absorbed = Math.min(shield, b.damage || 0);\r\n\t\t\t\t\ts.shield = shield - absorbed;\r\n\t\t\t\t\t\t\tconst hitAngle = Math.atan2((b.y || 0) - (s.y || 0), (b.x || 0) - (s.x || 0));\r\n\t\t\t\t\t\t\t(state.shieldHits ||= []).push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: absorbed, hitAngle });\r\n\t\t\t\t\t\t// expose damage event for renderer (shield hit)\r\n\t\t\t\t\t\t(state.damageEvents ||= []).push({ id: s.id, type: 'shield', amount: absorbed, x: b.x, y: b.y, team: s.team, attackerId: attacker && attacker.id });\r\n\t\t\t\t\tconst remaining = (b.damage || 0) - absorbed;\r\n\t\t\t\t\tif (remaining > 0) {\r\n\t\t\t\t\t\ts.hp -= remaining;\r\n\t\t\t\t\t\t\t(state.healthHits ||= []).push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: remaining });\r\n\t\t\t\t\t\t\t// expose damage event for renderer (health hit)\r\n\t\t\t\t\t\t\t(state.damageEvents ||= []).push({ id: s.id, type: 'hp', amount: remaining, x: b.x, y: b.y, team: s.team, attackerId: attacker && attacker.id });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdealtToShield = absorbed;\r\n\t\t\t\t\tdealtToHealth = Math.max(0, (b.damage || 0) - absorbed);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ts.hp -= (b.damage || 0);\r\n\t\t\t\t\t\t(state.healthHits ||= []).push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: b.damage || 0 });\r\n\t\t\t\t\t\t// expose damage event for renderer (health hit)\r\n\t\t\t\t\t\t(state.damageEvents ||= []).push({ id: s.id, type: 'hp', amount: b.damage || 0, x: b.x, y: b.y, team: s.team, attackerId: attacker && attacker.id });\r\n\t\t\t\t\tdealtToHealth = (b.damage || 0);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t\t// Update percent fields for renderer convenience\r\n\t\t\t\t\ts.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\r\n\t\t\t\t\ts.shieldPercent = (typeof s.maxShield === 'number' && s.maxShield > 0) ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield)) : 0;\r\n\t\t\t\t// XP for damage\r\n\t\t\t\tif (attacker) {\r\n\t\t\t\t\tattacker.xp = (attacker.xp || 0) + (dealtToShield + dealtToHealth) * (progressionCfg.xpPerDamage || 0);\r\n\t\t\t\t\twhile ((attacker.xp || 0) >= progressionCfg.xpToLevel((attacker.level || 1))) {\r\n\t\t\t\t\t\tattacker.xp -= progressionCfg.xpToLevel((attacker.level || 1));\r\n\t\t\t\t\t\tattacker.level = (attacker.level || 1) + 1;\r\n\t\t\t\t\t\t// Support function or number scalars for progression\r\n\t\t\t\t\t\tconst resolveScalar = (s: any, lvl: number) => (typeof s === 'function' ? s(lvl) : s || 0);\r\n\t\t\t\t\t\tconst lvl = attacker.level || 1;\r\n\t\t\t\t\t\tconst hpScalar = resolveScalar(progressionCfg.hpPercentPerLevel, lvl);\r\n\t\t\t\t\t\tconst shScalar = resolveScalar(progressionCfg.shieldPercentPerLevel, lvl);\r\n\t\t\t\t\t\tconst dmgScalar = resolveScalar(progressionCfg.dmgPercentPerLevel, lvl);\r\n\t\t\t\t\t\tconst speedScalar = resolveScalar((progressionCfg as any).speedPercentPerLevel, lvl);\r\n\t\t\t\t\t\tconst regenScalar = resolveScalar((progressionCfg as any).regenPercentPerLevel, lvl);\r\n\r\n\t\t\t\t\t\tconst hpMul = 1 + hpScalar;\r\n\t\t\t\t\t\tconst shMul = 1 + shScalar;\r\n\t\t\t\t\t\tconst dmgMul = 1 + dmgScalar;\r\n\r\n\t\t\t\t\t\tattacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n\t\t\t\t\t\tattacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n\t\t\t\t\t\tif (typeof attacker.maxShield === 'number') {\r\n\t\t\t\t\t\t\tattacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n\t\t\t\t\t\t\tattacker.shield = Math.min(attacker.maxShield, (attacker.shield || 0) * shMul);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (Array.isArray(attacker.cannons)) {\r\n\t\t\t\t\t\t\tfor (const c of attacker.cannons) {\r\n\t\t\t\t\t\t\t\tif (typeof c.damage === 'number') c.damage *= dmgMul;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// Apply optional speed and shield regen increases\r\n\t\t\t\t\t\tif (typeof speedScalar === 'number' && typeof attacker.accel === 'number') attacker.accel = attacker.accel * (1 + speedScalar);\r\n\t\t\t\t\t\tif (typeof regenScalar === 'number' && typeof attacker.shieldRegen === 'number') attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tstate.bullets.splice(bi, 1);\r\n\t\t\t\tif (s.hp <= 0) {\r\n\t\t\t\t\tif (attacker) {\r\n\t\t\t\t\t\tattacker.xp = (attacker.xp || 0) + (progressionCfg.xpPerKill || 0);\r\n\t\t\t\t\t\twhile ((attacker.xp || 0) >= progressionCfg.xpToLevel((attacker.level || 1))) {\r\n\t\t\t\t\t\t\tattacker.xp -= progressionCfg.xpToLevel((attacker.level || 1));\r\n\t\t\t\t\t\t\tattacker.level = (attacker.level || 1) + 1;\r\n\t\t\t\t\t\t\t// Support function or number scalars for progression on kill XP\r\n\t\t\t\t\t\t\tconst resolveScalar = (s: any, lvl: number) => (typeof s === 'function' ? s(lvl) : s || 0);\r\n\t\t\t\t\t\t\tconst lvl = attacker.level || 1;\r\n\t\t\t\t\t\t\tconst hpScalar = resolveScalar(progressionCfg.hpPercentPerLevel, lvl);\r\n\t\t\t\t\t\t\tconst shScalar = resolveScalar(progressionCfg.shieldPercentPerLevel, lvl);\r\n\t\t\t\t\t\t\tconst dmgScalar = resolveScalar(progressionCfg.dmgPercentPerLevel, lvl);\r\n\t\t\t\t\t\t\tconst speedScalar = resolveScalar((progressionCfg as any).speedPercentPerLevel, lvl);\r\n\t\t\t\t\t\t\tconst regenScalar = resolveScalar((progressionCfg as any).regenPercentPerLevel, lvl);\r\n\r\n\t\t\t\t\t\t\tconst hpMul = 1 + hpScalar;\r\n\t\t\t\t\t\t\tconst shMul = 1 + shScalar;\r\n\t\t\t\t\t\t\tconst dmgMul = 1 + dmgScalar;\r\n\t\t\t\t\t\t\tattacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n\t\t\t\t\t\t\tattacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n\t\t\t\t\t\t\tif (typeof attacker.maxShield === 'number') {\r\n\t\t\t\t\t\t\t\tattacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n\t\t\t\t\t\t\t\tattacker.shield = Math.min(attacker.maxShield, (attacker.shield || 0) * shMul);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (Array.isArray(attacker.cannons)) {\r\n\t\t\t\t\t\t\t\tfor (const c of attacker.cannons) {\r\n\t\t\t\t\t\t\t\t\tif (typeof c.damage === 'number') c.damage *= dmgMul;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// Apply optional speed and shield regen increases\r\n\t\t\t\t\t\t\tif (typeof speedScalar === 'number' && typeof attacker.accel === 'number') attacker.accel = attacker.accel * (1 + speedScalar);\r\n\t\t\t\t\t\t\tif (typeof regenScalar === 'number' && typeof attacker.shieldRegen === 'number') attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t(state.explosions ||= []).push({ x: s.x, y: s.y, team: s.team });\r\n\t\t\t\t\tstate.ships.splice(si, 1);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Shield regen\r\n\tfor (const s of state.ships || []) {\r\n\t\tif (s.maxShield) s.shield = Math.min(s.maxShield, (s.shield || 0) + (s.shieldRegen || 0) * dtSeconds);\r\n\t}\r\n\r\n\t// refresh percent convenience fields after regen\r\n\tfor (const s of state.ships || []) {\r\n\t\ts.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\r\n\t\ts.shieldPercent = (typeof s.maxShield === 'number' && s.maxShield > 0) ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield)) : 0;\r\n\t}\r\n\r\n\treturn state;\r\n}\r\n\r\nexport default { simulateStep, SIM_DT_MS };\r\n", "// Minimal TypeScript shim that re-exports the existing JavaScript runtime implementation.\r\n// Import the runtime as a namespace and re-export value bindings to avoid\r\n// circular alias issues. Types are defined in `gamemanager.d.ts`.\r\n\r\n\r\n// Ported from gamemanager.js, now canonical TypeScript implementation\r\nimport { makeInitialState, createShip } from './entities';\r\nimport { applySimpleAI } from './behavior';\r\nimport { simulateStep, SIM_DT_MS } from './simulate';\r\nimport { srand, srandom } from './rng';\r\nimport { getDefaultBounds } from './config/displayConfig';\r\nimport { createSimWorker } from './createSimWorker';\r\nimport { SHIELD, HEALTH, EXPLOSION, STARS, FALLBACK_POSITIONS } from './config/gamemanagerConfig';\r\nimport type { ShipConfigMap } from './types';\r\nimport { setShipConfig, getShipConfig, getDefaultShipType } from './config/entitiesConfig';\r\nimport { chooseReinforcementsWithManagerSeed } from './config/teamsConfig';\r\n\r\nexport const ships: any[] = [];\r\nexport const bullets: any[] = [];\r\nexport const particles: any[] = [];\r\nexport const stars: any[] = [];\r\nexport const flashes: any[] = [];\r\nexport const shieldFlashes: any[] = [];\r\nexport const healthFlashes: any[] = [];\r\nexport const particlePool: any[] = [];\r\n\r\nexport const config = {\r\n\tshield: { ...SHIELD },\r\n\thealth: { ...HEALTH },\r\n\texplosion: { ...EXPLOSION },\r\n\tstars: { ...STARS }\r\n};\r\n\r\nlet _seed: number | null = null;\r\nlet _reinforcementInterval: number = 5.0;\r\nlet _reinforcementAccumulator = 0;\r\nlet _starCanvasVersion = 0;\r\nlet starCanvas: HTMLCanvasElement | null = null;\r\nlet _lastSimulateFrameId: number | null = null;\r\nlet _doubleSimStrict = false;\r\n\r\nexport function setDoubleSimStrict(v: boolean = false) { _doubleSimStrict = !!v; }\r\n\r\nexport class Particle {\r\n\tx: number; y: number; vx: number; vy: number; ttl: number; life: number; color: string; size: number; alive: boolean;\r\n\tconstructor(x = 0, y = 0, vx = 0, vy = 0, ttl = 1, color = '#fff', size = 2) {\r\n\t\tthis.x = x; this.y = y; this.vx = vx; this.vy = vy; this.ttl = ttl; this.life = ttl; this.color = color; this.size = size; this.alive = true;\r\n\t}\r\n}\r\n\r\nexport function acquireParticle(x: number, y: number, opts: Partial<Particle> = {}): Particle {\r\n\tlet p: Particle | null = null;\r\n\tif (particlePool.length) {\r\n\t\tp = particlePool.pop() as Particle;\r\n\t\tp.x = x; p.y = y; p.vx = opts.vx ?? 0; p.vy = opts.vy ?? 0; p.ttl = opts.ttl ?? 1; p.life = p.ttl; p.color = opts.color ?? '#fff'; p.size = opts.size ?? 2; p.alive = true;\r\n\t} else {\r\n\t\tp = new Particle(x, y, opts.vx ?? 0, opts.vy ?? 0, opts.ttl ?? 1, opts.color ?? '#fff', opts.size ?? 2);\r\n\t}\r\n\tparticles.push(p);\r\n\treturn p;\r\n}\r\n\r\nexport function releaseParticle(p: Particle) {\r\n\tconst i = particles.indexOf(p);\r\n\tif (i !== -1) particles.splice(i, 1);\r\n\tp.alive = false;\r\n\tparticlePool.push(p);\r\n}\r\n\r\nexport function reset(seedValue: number | null = null) {\r\n\tships.length = 0; bullets.length = 0; particles.length = 0; stars.length = 0; flashes.length = 0; shieldFlashes.length = 0; healthFlashes.length = 0;\r\n\t_reinforcementAccumulator = 0;\r\n\tif (typeof seedValue === 'number') { _seed = seedValue >>> 0; srand(_seed); }\r\n}\r\n\r\nexport function initStars(state: any, W = 800, H = 600, count = 140) {\r\n\tif (!state || !Array.isArray(state.stars)) return;\r\n\tstate.stars.length = 0;\r\n\tfor (let i = 0; i < count; i++) {\r\n\t\tconst x = srandom() * W;\r\n\t\tconst y = srandom() * H;\r\n\t\tconst r = 0.3 + srandom() * 1.3;\r\n\t\tconst a = 0.3 + srandom() * 0.7;\r\n\t\tconst twPhase = srandom() * Math.PI * 2;\r\n\t\tconst twSpeed = 0.5 + srandom() * 1.5;\r\n\t\tstate.stars.push({ x, y, r, a, baseA: a, twPhase, twSpeed });\r\n\t}\r\n}\r\n\r\nexport function createStarCanvas(state: any, W = 800, H = 600, bg = '#041018'): HTMLCanvasElement | null {\r\n\tif (!state || !Array.isArray(state.stars)) return null;\r\n\ttry {\r\n\t\tconst c = (typeof document !== 'undefined' && document.createElement) ? document.createElement('canvas') : null;\r\n\t\tif (!c) return null;\r\n\t\tc.width = Math.max(1, Math.floor(W)); c.height = Math.max(1, Math.floor(H));\r\n\t\tconst ctx = c.getContext && c.getContext('2d');\r\n\t\tif (ctx) {\r\n\t\t\tctx.fillStyle = bg; ctx.fillRect(0, 0, c.width, c.height);\r\n\t\t\tfor (const s of state.stars) {\r\n\t\t\t\tconst alpha = Math.max(0, Math.min(1, s.a != null ? s.a : (s.baseA != null ? s.baseA : 1)));\r\n\t\t\t\tctx.beginPath(); ctx.fillStyle = `rgba(255,255,255,${alpha})`;\r\n\t\t\t\tconst rr = Math.max(0.2, s.r || 0.5);\r\n\t\t\t\tctx.arc(s.x || 0, s.y || 0, rr, 0, Math.PI * 2); ctx.fill();\r\n\t\t\t}\r\n\t\t}\r\n\t\t_starCanvasVersion = (_starCanvasVersion || 0) + 1; (c as any)._version = _starCanvasVersion; starCanvas = c; return c;\r\n\t} catch (e) { return null; }\r\n}\r\n\r\nexport function getStarCanvasVersion() { return _starCanvasVersion; }\r\n\r\nexport function setReinforcementInterval(seconds: number) { _reinforcementInterval = Number(seconds) || 5.0; }\r\nexport function getReinforcementInterval() { return _reinforcementInterval; }\r\n\r\nfunction emitManagerEvent(map: Map<string, Function[]>, type: string, data: any) {\r\n\tconst arr = map.get(type) || [];\r\n\tfor (const cb of arr.slice()) { try { if (typeof cb === 'function') cb(data); } catch (e) {} }\r\n}\r\n\r\nfunction evaluateReinforcement(dt: number, state: any, continuousOptions: any = {}): { spawned: any[] } | null {\r\n\t_reinforcementAccumulator += dt;\r\n\tif (_reinforcementAccumulator >= _reinforcementInterval) {\r\n\t\t_reinforcementAccumulator = 0;\r\n\t\ttry {\r\n\t\t\t\t\tif (typeof chooseReinforcementsWithManagerSeed === 'function') {\r\n\t\t\t\t\t\tconst orders = chooseReinforcementsWithManagerSeed(state, { ...continuousOptions, bounds: getDefaultBounds(), enabled: true });\r\n\t\t\t\t\t\tif (Array.isArray(orders) && orders.length) {\r\n\t\t\t\t\t\t\tconst spawned: any[] = [];\r\n\t\t\t\t\t\t\tfor (const o of orders) {\r\n\t\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\t\tconst ship = createShip(o.type || getDefaultShipType(), o.x || 100, o.y || 100, o.team || 'red');\r\n\t\t\t\t\t\t\t\t\tstate.ships.push(ship);\r\n\t\t\t\t\t\t\t\t\tspawned.push(ship);\r\n\t\t\t\t\t\t\t\t} catch (e) {}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn { spawned };\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\tconst fallback = getDefaultShipType();\r\n\t\t\tconst r = createShip(fallback, FALLBACK_POSITIONS[0].x, FALLBACK_POSITIONS[0].y, FALLBACK_POSITIONS[0].team);\r\n\t\t\tconst b = createShip(fallback, FALLBACK_POSITIONS[1].x, FALLBACK_POSITIONS[1].y, FALLBACK_POSITIONS[1].team);\r\n\t\t\tstate.ships.push(r); state.ships.push(b);\r\n\t\t\treturn { spawned: [r, b] };\r\n\t\t} catch (e) { return null; }\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nexport interface GameManagerOptions {\r\n\tuseWorker?: boolean;\r\n\trenderer?: any;\r\n\tseed?: number;\r\n\tcreateSimWorker?: typeof createSimWorker;\r\n}\r\n\r\nexport function createGameManager({ useWorker = true, renderer = null, seed = 12345, createSimWorker: createSimWorkerFactory }: GameManagerOptions = {}) {\r\n\tlet state = makeInitialState();\r\n\tlet running = false;\r\n\tconst listeners = new Map<string, Function[]>();\r\n\tconst workerReadyCbs: Function[] = [];\r\n\tlet simWorker: any = null; let workerReady = false;\r\n\t\tlet lastReinforcement: { spawned: any[]; timestamp: number; options: any } = { spawned: [], timestamp: 0, options: {} };\r\n\tlet continuous = false; let continuousOptions: any = {};\r\n\r\n\tfunction emit(type: string, msg: any) { emitManagerEvent(listeners, type, msg); }\r\n\tfunction _mgr_random() { return srandom(); }\r\n\r\n\ttry {\r\n\t\tif (useWorker) {\r\n\t\t\tconst factory = createSimWorkerFactory || createSimWorker;\r\n\t\t\tsimWorker = factory(new URL('./simWorker.js', import.meta.url).href);\r\n\t\t\tsimWorker.on && simWorker.on('ready', () => { workerReady = true; for (const cb of workerReadyCbs.slice()) { try { cb(); } catch (e) {} } });\r\n\t\t\tsimWorker.on && simWorker.on('snapshot', (m: any) => { if (m && m.state) state = m.state; });\r\n\t\t\tsimWorker.on && simWorker.on('reinforcements', (m: any) => { emit('reinforcements', m); });\r\n\t\t\ttry { simWorker.post({ type: 'init', seed, bounds: getDefaultBounds(), simDtMs: SIM_DT_MS, state }); simWorker.post({ type: 'start' }); } catch (e) {}\r\n\t\t}\r\n\t} catch (e) { simWorker = null; }\r\n\r\n\tfunction _evaluateAndEmit(dt: number) {\r\n\t\tconst result = evaluateReinforcement(dt, state, continuousOptions);\r\n\t\t\tif (result && Array.isArray(result.spawned) && result.spawned.length) {\r\n\t\t\t\tlastReinforcement = { spawned: result.spawned, timestamp: Date.now(), options: { ...continuousOptions } };\r\n\t\t\t\temit('reinforcements', { spawned: result.spawned });\r\n\t\t\t}\r\n\t}\r\n\r\n\tfunction step(dtSeconds: number) {\r\n\t\tif (!simWorker) {\r\n\t\t\t// Run AI logic before simulation step\r\n\t\t\ttry { applySimpleAI(state, dtSeconds, getDefaultBounds()); } catch (e) {}\r\n\t\t\ttry { simulateStep(state, dtSeconds, getDefaultBounds()); } catch (e) {}\r\n\t\t} else {\r\n\t\t\ttry { simWorker.post && simWorker.post({ type: 'snapshotRequest' }); } catch (e) {}\r\n\t\t}\r\n\t\t_evaluateAndEmit(dtSeconds);\r\n\t\tif (Array.isArray(state.explosions)) { for (const ex of state.explosions) { flashes.push({ ...ex }); } }\r\n\t\tif (Array.isArray(state.shieldHits)) { for (const h of state.shieldHits) { shieldFlashes.push({ ...h }); } state.shieldHits.length = 0; }\r\n\t\tif (Array.isArray(state.healthHits)) { for (const h of state.healthHits) { healthFlashes.push({ ...h }); } state.healthHits.length = 0; }\r\n\t\tfunction decay(arr: any[], dt: number) { for (let i = arr.length - 1; i >= 0; i--) { const it = arr[i]; it.life = (it.life || it.ttl || 0) - dt; if (it.life <= 0) arr.splice(i, 1); } }\r\n\t\tdecay(flashes, dtSeconds); decay(shieldFlashes, dtSeconds); decay(healthFlashes, dtSeconds);\r\n\t\tif (renderer && typeof renderer.renderState === 'function') {\r\n\t\t\ttry { renderer.renderState({ ships: state.ships, bullets: state.bullets, flashes, shieldFlashes, healthFlashes, t: state.t }); } catch (e) {}\r\n\t\t}\r\n\t}\r\n\r\n\tlet last = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now();\r\n\tlet acc = 0;\r\n\tfunction runLoop() {\r\n\t\tif (!running) return;\r\n\t\tconst now = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now();\r\n\t\tacc += now - last; last = now;\r\n\t\tif (acc > 250) acc = 250;\r\n\t\twhile (acc >= SIM_DT_MS) { step(SIM_DT_MS / 1000); acc -= SIM_DT_MS; }\r\n\t\ttry { requestAnimationFrame(runLoop); } catch (e) { setTimeout(runLoop, SIM_DT_MS); }\r\n\t}\r\n\r\n\tfunction on(evt: string, cb: Function) { const arr = listeners.get(evt) || []; arr.push(cb); listeners.set(evt, arr); }\r\n\tfunction off(evt: string, cb: Function) { const arr = listeners.get(evt) || []; const i = arr.indexOf(cb); if (i !== -1) arr.splice(i, 1); }\r\n\tfunction start() { if (!running) { running = true; last = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now(); runLoop(); } }\r\n\tfunction pause() { running = false; }\r\n\tfunction resetManager() { state = makeInitialState(); if (simWorker) try { simWorker.post({ type: 'command', cmd: 'setState', args: { state } }); } catch (e) {} }\r\n\tfunction stepOnce(dt = SIM_DT_MS / 1000) { const n = Number(dt) || (SIM_DT_MS / 1000); step(n); }\r\n\tfunction setContinuousEnabled(v: boolean = false) {\r\n\t\tcontinuous = !!v;\r\n\t\tif (simWorker) {\r\n\t\t\ttry { simWorker.post({ type: 'setContinuous', value: !!v }); } catch (e) {}\r\n\t\t} else {\r\n\t\t\tif (continuous) {\r\n\t\t\t\tconst result = evaluateReinforcement(SIM_DT_MS / 1000, state, continuousOptions);\r\n\t\t\t\t\t\tif (result && Array.isArray(result.spawned) && result.spawned.length) {\r\n\t\t\t\t\t\t\tlastReinforcement = { spawned: result.spawned, timestamp: Date.now(), options: { ...continuousOptions } };\r\n\t\t\t\t\t\t\temit('reinforcements', { spawned: result.spawned });\r\n\t\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfunction isContinuousEnabled() { return !!continuous; }\r\n\tfunction setContinuousOptions(opts: any = {}) { continuousOptions = { ...continuousOptions, ...opts }; if (simWorker) try { simWorker.post({ type: 'setContinuousOptions', opts: continuousOptions }); } catch (e) {} }\r\n\tfunction getContinuousOptions() { return { ...continuousOptions }; }\r\n\tfunction setReinforcementIntervalManager(seconds: number) { setReinforcementInterval(seconds); if (simWorker) try { simWorker.post({ type: 'setReinforcementInterval', seconds }); } catch (e) {} }\r\n\tfunction getReinforcementIntervalManager() { return getReinforcementInterval(); }\r\n\tfunction isRunning() { return running; }\r\n\tfunction isWorker() { return !!simWorker && !!workerReady; }\r\n\tfunction onWorkerReady(cb: Function) { if (typeof cb === 'function') workerReadyCbs.push(cb); }\r\n\tfunction offWorkerReady(cb: Function) { const i = workerReadyCbs.indexOf(cb); if (i !== -1) workerReadyCbs.splice(i, 1); }\r\n\tfunction spawnShip(team: string = 'red') {\r\n\t\ttry {\r\n\t\t\tconst type = getDefaultShipType();\r\n\t\t\tconst b = getDefaultBounds();\r\n\t\tconst x = Math.max(0, Math.min(b.W - 1e-6, srandom() * b.W));\r\n\t\tconst y = Math.max(0, Math.min(b.H - 1e-6, srandom() * b.H));\r\n\t\t\tconst ship = createShip(type, x, y, team);\r\n\t\t\tstate.ships.push(ship);\r\n\t\t\treturn ship;\r\n\t\t} catch (e) { return null; }\r\n\t}\r\n\r\n\t// Fleet formation (config-driven)\r\n\tfunction formFleets() {\r\n\t\ttry {\r\n\t\t\t// Remove all ships\r\n\t\t\tstate.ships.length = 0;\r\n\t\t\t// Use makeInitialFleets from teamsConfig\r\n\t\t\tconst { makeInitialFleets } = require('./config/teamsConfig');\r\n\t\t\tconst bounds = getDefaultBounds();\r\n\t\t\tconst seed = Math.floor(srandom() * 0xffffffff) >>> 0;\r\n\t\t\tconst ships = makeInitialFleets(seed, bounds, createShip);\r\n\t\t\tfor (const ship of ships) {\r\n\t\t\t\tstate.ships.push(ship);\r\n\t\t\t}\r\n\t\t} catch (e) { /* ignore errors */ }\r\n\t}\r\n\tfunction reseedManager(newSeed: number = Math.floor(srandom() * 0xffffffff)) {\r\n\t\t_seed = newSeed >>> 0; srand(_seed);\r\n\t\tif (simWorker) try { simWorker.post({ type: 'setSeed', seed: _seed }); } catch (e) {}\r\n\t}\r\n\tfunction getLastReinforcement() { return { ...lastReinforcement }; }\r\n\tfunction snapshot() { return { ships: state.ships.slice(), bullets: state.bullets.slice(), t: state.t }; }\r\n\tconst score = { red: 0, blue: 0 };\r\n\tconst internal = { state, bounds: getDefaultBounds() };\r\n\r\n\treturn {\r\n\t\ton,\r\n\t\toff,\r\n\t\tstart,\r\n\t\tpause,\r\n\t\treset: resetManager,\r\n\t\tstepOnce,\r\n\t\tsetContinuousEnabled,\r\n\t\tisContinuousEnabled,\r\n\t\tsetContinuousOptions,\r\n\t\tgetContinuousOptions,\r\n\t\tsetReinforcementInterval: setReinforcementIntervalManager,\r\n\t\tgetReinforcementInterval: getReinforcementIntervalManager,\r\n\t\tisRunning,\r\n\t\tisWorker,\r\n\t\tonWorkerReady,\r\n\t\toffWorkerReady,\r\n\t\tspawnShip,\r\n\t\treseed: reseedManager,\r\n\t\tgetLastReinforcement,\r\n\t\tsnapshot,\r\n\t\tscore,\r\n\t\tformFleets,\r\n\t\t_internal: internal\r\n\t};\r\n}\r\n\r\nexport function simulate(dt: number, W = 800, H = 600) {\r\n\ttry {\r\n\t\tconst now = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now();\r\n\t\tconst frame = Math.floor(now / 4);\r\n\t\tif (_lastSimulateFrameId === frame) {\r\n\t\t\tconst msg = '[gamemanager] detected simulate() called multiple times in same frame';\r\n\t\t\tif (_doubleSimStrict) throw new Error(msg);\r\n\t\t\telse console.warn(msg);\r\n\t\t}\r\n\t\t_lastSimulateFrameId = frame;\r\n\t} catch (e) {}\r\n\tconst state = { ships, bullets, particles, stars, explosions: [], shieldHits: [], healthHits: [] };\r\n\tevaluateReinforcement(dt, state);\r\n\ttry { simulateStep(state, dt, { W, H }); } catch (e) {}\r\n\t\tfor (const ex of state.explosions) {\r\n\t\t\tif (ex && typeof ex === 'object') flashes.push({ ...(ex as object) });\r\n\t\t\ttry {\r\n\t\t\t\tconst count = 12;\r\n\t\t\t\tfor (let i = 0; i < count; i++) {\r\n\t\t\t\t\tconst ang = srandom() * Math.PI * 2;\r\n\t\t\t\t\tconst sp = 30 + srandom() * 90;\r\n\t\t\t\t\tacquireParticle((ex as any).x || 0, (ex as any).y || 0, { vx: Math.cos(ang) * sp, vy: Math.sin(ang) * sp, ttl: 0.6, color: 'rgba(255,200,100,0.95)', size: 3 });\r\n\t\t\t\t}\r\n\t\t\t} catch (e) {}\r\n\t\t}\r\n\t\tfor (const h of state.shieldHits) { if (h && typeof h === 'object') shieldFlashes.push({ ...(h as object) }); }\r\n\t\tfor (const h of state.healthHits) { if (h && typeof h === 'object') healthFlashes.push({ ...(h as object) }); }\r\n\treturn { ships, bullets, particles, flashes, shieldFlashes, healthFlashes, stars, starCanvas };\r\n}\r\n\r\nexport function processStateEvents(state: any, dt: number = 0) { return state; }\r\n\r\nexport default createGameManager;\r\n", "\r\nexport function getDefaultBounds() {\r\n  // Fixed logical map size for simulation and rendering\r\n  return { W: 1920, H: 1080 };\r\n}\r\n\r\nexport default { getDefaultBounds };\r\n", "// src/createSimWorker.ts - TypeScript helper to create and manage the sim Worker\r\nexport type SimMessage = any;\r\n\r\nexport function createSimWorker(url: string = './simWorker.js') {\r\n  const worker = new Worker(url, { type: 'module' });\r\n  const listeners = new Map<string, (msg: any) => void>();\r\n\r\n  worker.onmessage = (ev: MessageEvent) => {\r\n    const msg = ev.data;\r\n    const cb = listeners.get(msg && msg.type);\r\n    if (cb) cb(msg);\r\n  };\r\n\r\n  return {\r\n    post(msg: SimMessage) { worker.postMessage(msg); },\r\n    on(type: string, cb: (msg: any) => void) { listeners.set(type, cb); },\r\n    terminate() { worker.terminate(); }\r\n  };\r\n}\r\n\r\nexport default createSimWorker;\r\n", "export const SHIELD = {\r\n  ttl: 0.4, particleCount: 6, particleTTL: 0.5, particleColor: '#88ccff', particleSize: 2,\r\n  // arcWidth (radians) for shield hit visual/particle spread centered on hitAngle\r\n  arcWidth: Math.PI / 6,\r\n};\r\n\r\nexport const HEALTH = {\r\n  ttl: 0.6, particleCount: 8, particleTTL: 0.6, particleColor: '#ffb3b3', particleSize: 2.5,\r\n};\r\n\r\nexport const EXPLOSION = {\r\n  particleCount: 30, particleTTL: 1.2, particleColor: '#ffaa33', particleSize: 3, minSpeed: 20, maxSpeed: 140,\r\n};\r\n\r\nexport const FALLBACK_POSITIONS = [\r\n  { x: 100, y: 100, team: 'red' },\r\n  { x: 700, y: 500, team: 'blue' }\r\n];\r\n\r\nexport const STARS = { twinkle: true, redrawInterval: 500, background: '#041018', count: 140 };\r\n\r\nexport default { SHIELD, HEALTH, EXPLOSION, STARS, FALLBACK_POSITIONS };\r\n", "// src/canvasrenderer.ts - TypeScript port of the simple Canvas2D renderer.\r\n// This mirrors the behavior in src/canvasrenderer.js but provides types so\r\n// other parts of the codebase can be migrated safely.\r\n\r\nimport { AssetsConfig, getShipAsset, getBulletAsset, getTurretAsset, getVisualConfig } from './config/assets/assetsConfig';\r\nimport { TeamsConfig } from './config/teamsConfig';\r\nimport type { VisualMappingConfig } from './types';\r\nimport { bulletKindForRadius, getDefaultShipType } from './config/entitiesConfig';\r\nimport { RendererConfig } from './config/rendererConfig';\r\nimport { shieldFlashes, healthFlashes } from './gamemanager';\r\n\r\nexport type AnyState = any;\r\n\r\nexport class CanvasRenderer {\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D | null = null;\r\n  bufferCanvas: HTMLCanvasElement;\r\n  bufferCtx: CanvasRenderingContext2D | null = null;\r\n  providesOwnLoop = false;\r\n  type = 'canvas';\r\n  // ratio between backing store pixels and CSS (logical) pixels\r\n  pixelRatio = 1;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n    // Create offscreen buffer sized at logical map \u00D7 renderer scale\r\n    this.bufferCanvas = document.createElement('canvas');\r\n    this.bufferCtx = this.bufferCanvas.getContext('2d');\r\n  }\r\n\r\n  init(): boolean {\r\n    this.ctx = this.canvas.getContext('2d');\r\n    if (!this.ctx) return false;\r\n    this.bufferCtx = this.bufferCanvas.getContext('2d');\r\n    if (!this.bufferCtx) return false;\r\n    // compute pixelRatio from renderScale only\r\n    try {\r\n      const renderScale = (RendererConfig && typeof (RendererConfig as any).renderScale === 'number') ? (RendererConfig as any).renderScale : 1;\r\n      this.pixelRatio = renderScale;\r\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // No scaling here; only when compositing buffer\r\n      this.ctx.imageSmoothingEnabled = true;\r\n    } catch (e) {\r\n      this.pixelRatio = 1;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  isRunning(): boolean { return false; }\r\n\r\n  renderState(state: AnyState, interpolation = 0): void {\r\n    // helper: draw a stroked ring (used for explosions / flashes)\r\n    function drawRing(x: number, y: number, R: number, color: string, alpha = 1.0, thickness = 2) {\r\n      try {\r\n        bufferCtx.save();\r\n        bufferCtx.globalAlpha = Math.max(0, Math.min(1, alpha));\r\n        bufferCtx.strokeStyle = color;\r\n        bufferCtx.lineWidth = thickness;\r\n        bufferCtx.beginPath();\r\n        bufferCtx.arc(x, y, Math.max(1, R), 0, Math.PI * 2);\r\n        bufferCtx.stroke();\r\n        bufferCtx.restore();\r\n      } catch (e) { /* ignore draw errors */ }\r\n    }\r\n    // --- Offscreen buffer rendering ---\r\n    // 1. Resize bufferCanvas to logical size \u00D7 renderer scale BEFORE any drawing\r\n    // 2. Draw all simulation visuals to bufferCanvas\r\n    // 3. Copy bufferCanvas to main canvas ONLY after all drawing is finished\r\n    const ctx = this.ctx!;\r\n    const bufferCtx = this.bufferCtx!;\r\n    if (!ctx || !bufferCtx) return;\r\n    const LOGICAL_W = 1920, LOGICAL_H = 1080;\r\n    const renderScale = (RendererConfig && typeof (RendererConfig as any).renderScale === 'number') ? (RendererConfig as any).renderScale : 1;\r\n    const fitScale = (RendererConfig as any)._fitScale || 1;\r\n    // Resize bufferCanvas if needed (before any drawing)\r\n    const bufferW = Math.round(LOGICAL_W * renderScale);\r\n    const bufferH = Math.round(LOGICAL_H * renderScale);\r\n    if (this.bufferCanvas.width !== bufferW || this.bufferCanvas.height !== bufferH) {\r\n      this.bufferCanvas.width = bufferW;\r\n      this.bufferCanvas.height = bufferH;\r\n      // After resizing, need to re-acquire bufferCtx\r\n      this.bufferCtx = this.bufferCanvas.getContext('2d');\r\n      if (!this.bufferCtx) return;\r\n    }\r\n    // Always use latest bufferCtx after possible resize\r\n    const activeBufferCtx = this.bufferCtx!;\r\n    // Draw simulation to bufferCanvas\r\n    activeBufferCtx.setTransform(renderScale, 0, 0, renderScale, 0, 0);\r\n    activeBufferCtx.clearRect(0, 0, bufferW, bufferH);\r\n    activeBufferCtx.save();\r\n    activeBufferCtx.fillStyle = (AssetsConfig.palette as any).background || '#0b1220';\r\n    activeBufferCtx.fillRect(0, 0, bufferW, bufferH);\r\n    activeBufferCtx.restore();\r\n\r\n    // helper: draw a polygon path from points (already scaled/rotated by transform)\r\n    function drawPolygon(points: number[][]) {\r\n      if (!points || points.length === 0) return;\r\n      activeBufferCtx.beginPath();\r\n      activeBufferCtx.moveTo(points[0][0] * renderScale, points[0][1] * renderScale);\r\n      for (let i = 1; i < points.length; i++) activeBufferCtx.lineTo(points[i][0] * renderScale, points[i][1] * renderScale);\r\n      activeBufferCtx.closePath();\r\n      activeBufferCtx.fill();\r\n    }\r\n\r\n    // background starCanvas if present\r\n    if (state && state.starCanvas) {\r\n      try {\r\n        activeBufferCtx.save();\r\n        activeBufferCtx.globalCompositeOperation = 'source-over';\r\n        activeBufferCtx.drawImage(state.starCanvas, 0, 0, bufferW, bufferH);\r\n        activeBufferCtx.restore();\r\n      } catch (e) { /* ignore draw errors */ }\r\n    }\r\n\r\n    // helper: current time for animation pulses\r\n    const now = (state && state.t) || 0;\r\n\r\n    // Spawn damage particles from recent damage events (renderer-owned particle bursts)\r\n    try {\r\n      const dmgAnim = AssetsConfig.animations && AssetsConfig.animations.damageParticles;\r\n      if (Array.isArray(state.damageEvents) && dmgAnim) {\r\n        state.particles = state.particles || [];\r\n        for (const ev of state.damageEvents) {\r\n          const count = dmgAnim.count || 6;\r\n          for (let i = 0; i < count; i++) {\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const speed = (Math.random() * (dmgAnim.spread || 0.6));\r\n            state.particles.push({\r\n              x: ev.x || 0,\r\n              y: ev.y || 0,\r\n              vx: Math.cos(angle) * speed,\r\n              vy: Math.sin(angle) * speed,\r\n              r: 0.6 + Math.random() * 0.8,\r\n              color: dmgAnim.color || '#ff6b6b',\r\n              lifetime: dmgAnim.lifetime || 0.8,\r\n              age: 0,\r\n              shape: 'circle'\r\n            });\r\n          }\r\n        }\r\n        // clear damageEvents after spawning so they are one-shot\r\n        state.damageEvents = [];\r\n      }\r\n    } catch (e) { /* ignore particle spawn errors */ }\r\n\r\n    // Engine trail rendering (config-driven, per ship)\r\n    const engineTrailsEnabled = !!state.engineTrailsEnabled;\r\n    for (const s of state.ships || []) {\r\n      const sx = (s.x || 0) * renderScale;\r\n      const sy = (s.y || 0) * renderScale;\r\n      if (sx < 0 || sx >= bufferW || sy < 0 || sy >= bufferH) continue;\r\n      if (s.team === 'blue') {\r\n        console.log('[DEBUG] Blue ship:', {\r\n          id: s.id,\r\n          x: s.x,\r\n          y: s.y,\r\n          radius: s.radius,\r\n          type: s.type,\r\n          visible: true\r\n        });\r\n      }\r\n      // Update trail history (store in s.trail)\r\n      if (engineTrailsEnabled) {\r\n        s.trail = s.trail || [];\r\n        // Only add new trail point if ship moved\r\n        const last = s.trail.length ? s.trail[s.trail.length - 1] : null;\r\n        if (!last || last.x !== s.x || last.y !== s.y) {\r\n          s.trail.push({ x: s.x, y: s.y });\r\n        }\r\n        // Limit trail length\r\n        const vconf = getVisualConfig(s.type || getDefaultShipType());\r\n        const trailName = (vconf.visuals && vconf.visuals.engineTrail) || 'engineTrail';\r\n        // No catch block needed here\r\n      }\r\n\r\n      // Draw engine trail (faded circles)\r\n      if (Array.isArray(s.trail)) {\r\n        for (let i = 0; i < s.trail.length; i++) {\r\n          const tx = s.trail[i].x || 0;\r\n          const ty = s.trail[i].y || 0;\r\n          const tAlpha = 0.2 + 0.5 * (i / s.trail.length);\r\n          const txx = tx * renderScale;\r\n          const tyy = ty * renderScale;\r\n          if (txx < 0 || txx >= bufferW || tyy < 0 || tyy >= bufferH) continue;\r\n          activeBufferCtx.save();\r\n          activeBufferCtx.globalAlpha = tAlpha;\r\n          activeBufferCtx.fillStyle = '#aee1ff';\r\n          activeBufferCtx.beginPath();\r\n          activeBufferCtx.arc(txx, tyy, 6 * renderScale, 0, Math.PI * 2);\r\n          activeBufferCtx.fill();\r\n          activeBufferCtx.restore();\r\n        }\r\n      }\r\n\r\n      // Draw ship hull (polygon or circle)\r\n      const vconf = getVisualConfig(s.type || getDefaultShipType());\r\n      const shape = getShipAsset(s.type || getDefaultShipType());\r\n      activeBufferCtx.save();\r\n      activeBufferCtx.translate((s.x || 0) * renderScale, (s.y || 0) * renderScale);\r\n      activeBufferCtx.rotate((s.angle || 0));\r\n  let teamColor = AssetsConfig.palette.shipHull || '#888';\r\n  if (s.team === 'red' && TeamsConfig.teams.red) teamColor = TeamsConfig.teams.red.color;\r\n  else if (s.team === 'blue' && TeamsConfig.teams.blue) teamColor = TeamsConfig.teams.blue.color;\r\n  activeBufferCtx.fillStyle = teamColor;\r\n      if (shape.type === 'circle') {\r\n        activeBufferCtx.beginPath();\r\n        activeBufferCtx.arc(0, 0, (s.radius || 12) * renderScale, 0, Math.PI * 2);\r\n        activeBufferCtx.fill();\r\n      } else if (shape.type === 'polygon') {\r\n        drawPolygon(shape.points as number[][]);\r\n      }\r\n      activeBufferCtx.restore();\r\n\r\n      // Draw shield effect (blue ring if shield > 0)\r\n      if (s.shield > 0) {\r\n        if (sx >= 0 && sx < bufferW && sy >= 0 && sy < bufferH) {\r\n          drawRing(s.x, s.y, (s.radius || 12) * 1.2, '#3ab6ff', 0.5, 3 * renderScale);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Health hits: render freshest per-ship health flash using index (reddish rings)\r\n    try {\r\n      const nowT = (state && state.t) || 0;\r\n      for (const s of state.ships || []) {\r\n        try {\r\n          let flash: any = null;\r\n          const arr = Array.isArray(healthFlashes) ? healthFlashes.filter(f => f.id === s.id) : [];\r\n          let bestTs = -Infinity;\r\n          for (const f of arr) {\r\n            if (!f) continue;\r\n            const fTs = (typeof f._ts === 'number') ? f._ts : 0;\r\n            const fTtl = (typeof f.ttl === 'number') ? f.ttl : 0.4;\r\n            if (fTs + fTtl >= nowT - 1e-6 && fTs > bestTs) { bestTs = fTs; flash = f; }\r\n          }\r\n          if (flash) {\r\n            const ttl = flash.ttl || 0.4; const life = flash.life != null ? flash.life : ttl;\r\n            const t = Math.max(0, Math.min(1, life / ttl));\r\n            const R = 6 + (1 - t) * 18;\r\n            const alpha = 0.9 * t;\r\n            const fx = (flash.x || (s.x || 0)) * renderScale;\r\n            const fy = (flash.y || (s.y || 0)) * renderScale;\r\n            if (fx >= 0 && fx < bufferW && fy >= 0 && fy < bufferH) {\r\n              activeBufferCtx.save();\r\n              activeBufferCtx.globalAlpha = Math.max(0, Math.min(1, alpha));\r\n              activeBufferCtx.strokeStyle = '#ff7766';\r\n              activeBufferCtx.lineWidth = 2 * renderScale;\r\n              activeBufferCtx.beginPath();\r\n              activeBufferCtx.arc(fx, fy, Math.max(1, R * renderScale), 0, Math.PI * 2);\r\n              activeBufferCtx.stroke();\r\n              activeBufferCtx.restore();\r\n            }\r\n          }\r\n        } catch (e) {}\r\n      }\r\n    } catch (e) {}\r\n\r\n    // bullets\r\n    for (const b of state.bullets || []) {\r\n      try {\r\n        const bx = (b.x || 0) * renderScale;\r\n        const by = (b.y || 0) * renderScale;\r\n        if (bx < 0 || bx >= bufferW || by < 0 || by >= bufferH) continue;\r\n        const r = b.radius || b.bulletRadius || 1.5;\r\n        const kind = bulletKindForRadius((r / 6)) as any;\r\n        const shape = getBulletAsset(kind as any);\r\n        activeBufferCtx.save();\r\n        activeBufferCtx.translate(bx, by);\r\n        const px = Math.max(1, r * renderScale);\r\n        if (shape.type === 'circle') {\r\n          activeBufferCtx.beginPath(); activeBufferCtx.fillStyle = AssetsConfig.palette.bullet; activeBufferCtx.arc(0, 0, px, 0, Math.PI * 2); activeBufferCtx.fill();\r\n        } else if (shape.type === 'polygon') {\r\n          activeBufferCtx.fillStyle = AssetsConfig.palette.bullet; drawPolygon(shape.points as number[][]);\r\n        }\r\n        activeBufferCtx.restore();\r\n      } catch (e) {}\r\n    }\r\n\r\n    // --- Copy bufferCanvas to main canvas, scaling to fit window ---\r\n    // Only copy after all drawing is finished\r\n    ctx.save();\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transform for drawImage\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    ctx.imageSmoothingEnabled = false;\r\n    ctx.drawImage(\r\n      this.bufferCanvas,\r\n      0, 0, this.bufferCanvas.width, this.bufferCanvas.height,\r\n      0, 0,\r\n      this.bufferCanvas.width * fitScale,\r\n      this.bufferCanvas.height * fitScale\r\n    );\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nexport default CanvasRenderer;\r\n", "export const RendererConfig = {\r\n  preferred: 'canvas' as 'canvas' | 'webgl',\r\n  allowUrlOverride: true,\r\n  allowWebGL: true,\r\n  renderScale: 1.0, // scale for output buffer resolution\r\n  displayScale: 1.0, // scale for canvas transform to fit window\r\n  dynamicScaleEnabled: false,\r\n  lastFrameTime: 0,\r\n  frameScore: 'green', // green, yellow, red\r\n  // UI overlays configuration\r\n  hpBar: { bg: '#222', fill: '#4caf50', w: 20, h: 4, dx: -10, dy: -12 },\r\n};\r\n\r\nexport function getPreferredRenderer(): 'canvas' | 'webgl' {\r\n  try {\r\n    if (RendererConfig.allowUrlOverride && typeof window !== 'undefined' && window.location && window.location.search) {\r\n      const p = new URLSearchParams(window.location.search);\r\n      const r = p.get('renderer');\r\n      if (r === 'canvas' || r === 'webgl') return r;\r\n    }\r\n  } catch (e) {}\r\n  return RendererConfig.preferred;\r\n}\r\n\r\nexport default RendererConfig;\r\n", "// src/webglrenderer.ts - Minimal WebGL renderer stub ported from webglRenderer.js\r\n// Provides a typed, minimal WebGL renderer so the rest of the app can opt-in.\r\n\r\nimport { AssetsConfig, getShipAsset, getTurretAsset, getVisualConfig } from './config/assets/assetsConfig';\r\nimport { TeamsConfig } from './config/teamsConfig';\r\nimport { shieldFlashes, healthFlashes } from './gamemanager';\r\nimport { getDefaultShipType } from './config/entitiesConfig';\r\nimport { RendererConfig } from './config/rendererConfig';\r\n\r\nexport class WebGLRenderer {\r\n  // Fullscreen quad shader for blitting FBO to main canvas\r\n  private quadProg: WebGLProgram | null = null;\r\n  private quadVBO: WebGLBuffer | null = null;\r\n  private quadLoc_pos: number = -1;\r\n  private quadLoc_tex: WebGLUniformLocation | null = null;\r\n  // Offscreen framebuffer and texture for buffer rendering\r\n  private fbo: WebGLFramebuffer | null = null;\r\n  private fboTexture: WebGLTexture | null = null;\r\n  private fboWidth: number = 0;\r\n  private fboHeight: number = 0;\r\n  canvas: HTMLCanvasElement;\r\n  gl: WebGL2RenderingContext | WebGLRenderingContext | null = null;\r\n  // simple GL program state for point rendering\r\n  private prog: WebGLProgram | null = null;\r\n  private attribLoc_pos: number = -1;\r\n  private attribLoc_size: number = -1;\r\n  private attribLoc_color: number = -1;\r\n  private vertexBuffer: WebGLBuffer | null = null;\r\n  providesOwnLoop = false;\r\n  type = 'webgl';\r\n  pixelRatio = 1;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n  // FBO will be created in init or on first render\r\n  }\r\n\r\n  init(): boolean {\r\n      // Create fullscreen quad shader for blitting FBO\r\n      try {\r\n        const gl = this.gl as WebGLRenderingContext;\r\n        const vsQuad = `attribute vec2 a_pos; varying vec2 v_tex; void main(){ v_tex = (a_pos+1.0)*0.5; gl_Position = vec4(a_pos,0,1); }`;\r\n        const fsQuad = `precision mediump float; varying vec2 v_tex; uniform sampler2D u_tex; void main(){ gl_FragColor = texture2D(u_tex, v_tex); }`;\r\n        const compile = (src: string, type: number) => { const s = gl.createShader(type as any)!; gl.shaderSource(s, src); gl.compileShader(s); if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) { const info = gl.getShaderInfoLog(s); gl.deleteShader(s); throw new Error('Shader compile error: ' + info); } return s; };\r\n        const vsObj = compile(vsQuad, gl.VERTEX_SHADER);\r\n        const fsObj = compile(fsQuad, gl.FRAGMENT_SHADER);\r\n        const prog = gl.createProgram()!;\r\n        gl.attachShader(prog, vsObj); gl.attachShader(prog, fsObj); gl.linkProgram(prog);\r\n        if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) { throw new Error('Program link error: ' + gl.getProgramInfoLog(prog)); }\r\n        this.quadProg = prog;\r\n        this.quadLoc_pos = gl.getAttribLocation(prog, 'a_pos');\r\n        this.quadLoc_tex = gl.getUniformLocation(prog, 'u_tex');\r\n        // Create VBO for fullscreen quad\r\n        this.quadVBO = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVBO);\r\n        // Vertices: two triangles covering clip space\r\n        const quadVerts = new Float32Array([\r\n          -1, -1,  1, -1,  -1, 1,\r\n           1, -1,  1, 1,  -1, 1\r\n        ]);\r\n        gl.bufferData(gl.ARRAY_BUFFER, quadVerts, gl.STATIC_DRAW);\r\n      } catch (e) { this.quadProg = null; }\r\n    try {\r\n      // Prefer WebGL2, fall back to WebGL1\r\n      this.gl = this.canvas.getContext('webgl2') as WebGL2RenderingContext | null;\r\n      if (!this.gl) {\r\n        this.gl = (this.canvas.getContext('webgl') || this.canvas.getContext('experimental-webgl')) as WebGLRenderingContext | null;\r\n        if (!this.gl) return false;\r\n      }\r\n      const gl = this.gl as WebGLRenderingContext;\r\n      // Create offscreen framebuffer and texture at logical size \u00D7 renderer scale\r\n  const LOGICAL_W = 1920, LOGICAL_H = 1080;\r\n  const renderScale = (RendererConfig && typeof (RendererConfig.renderScale) === 'number') ? RendererConfig.renderScale : 1;\r\n  const bufferW = Math.round(LOGICAL_W * renderScale);\r\n  const bufferH = Math.round(LOGICAL_H * renderScale);\r\n      // Create texture for FBO\r\n      this.fboTexture = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, this.fboTexture);\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, bufferW, bufferH, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      // Create framebuffer\r\n      this.fbo = gl.createFramebuffer();\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.fboTexture, 0);\r\n      this.fboWidth = bufferW;\r\n      this.fboHeight = bufferH;\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      // set background from Assets palette.background when possible\r\n      try {\r\n        const bg = ((AssetsConfig.palette as any).background || '#0b1220').replace('#','');\r\n        const bigint = parseInt(bg.length===3? bg.split('').map((c:string)=>c+c).join(''): bg,16);\r\n        const r = ((bigint >> 16) & 255)/255; const g = ((bigint >> 8) & 255)/255; const b = (bigint & 255)/255;\r\n        gl.clearColor(r, g, b, 1.0);\r\n      } catch { gl.clearColor(0.02, 0.03, 0.06, 1.0); }\r\n      // enable alpha blending for overlays\r\n      try { gl.enable(gl.BLEND); gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); } catch (e) {}\r\n      // compute pixelRatio to map logical (CSS) pixels to backing-store pixels\r\n      try {\r\n        const cssW = this.canvas.clientWidth || this.canvas.width || 1;\r\n        this.pixelRatio = (this.canvas.width || cssW) / cssW;\r\n      } catch (e) { this.pixelRatio = 1; }\r\n\r\n      // prepare a tiny GL program for drawing colored points representing ships\r\n      try {\r\n        const vs = `attribute vec2 a_pos; attribute float a_size; attribute vec4 a_color; varying vec4 v_color; void main(){ v_color=a_color; gl_Position = vec4(a_pos, 0.0, 1.0); gl_PointSize = a_size; }`;\r\n        const fs = `precision mediump float; varying vec4 v_color; void main(){ vec2 c = gl_PointCoord - vec2(0.5); if(length(c) > 0.5) discard; gl_FragColor = v_color; }`;\r\n        const compile = (src: string, type: number) => { const s = gl.createShader(type as any)!; gl.shaderSource(s, src); gl.compileShader(s); if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) { const info = gl.getShaderInfoLog(s); gl.deleteShader(s); throw new Error('Shader compile error: ' + info); } return s; };\r\n        const vsObj = compile(vs, gl.VERTEX_SHADER);\r\n        const fsObj = compile(fs, gl.FRAGMENT_SHADER);\r\n        const prog = gl.createProgram()!;\r\n        gl.attachShader(prog, vsObj); gl.attachShader(prog, fsObj); gl.linkProgram(prog);\r\n        if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) { throw new Error('Program link error: ' + gl.getProgramInfoLog(prog)); }\r\n        this.prog = prog;\r\n        this.attribLoc_pos = gl.getAttribLocation(prog, 'a_pos');\r\n        this.attribLoc_size = gl.getAttribLocation(prog, 'a_size');\r\n        this.attribLoc_color = gl.getAttribLocation(prog, 'a_color');\r\n        this.vertexBuffer = gl.createBuffer();\r\n      } catch (e) {\r\n        // leave program null if shader compilation fails (fallback to minimal clear)\r\n        this.prog = null;\r\n      }\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Called when backing-store size (canvas.width/height) changes so\r\n  // the renderer can update internal scaling/viewport without a full re-init.\r\n  updateScale(): void {\r\n    if (!this.gl) return;\r\n    try {\r\n      const cssW = this.canvas.clientWidth || Math.round((this.canvas.width || 1) / (this.pixelRatio || 1));\r\n      this.pixelRatio = (this.canvas.width || cssW) / Math.max(1, cssW);\r\n      // set viewport in logical/backing pixels on next render\r\n      // TODO: Resize FBO if needed\r\n    } catch (e) { /* ignore */ }\r\n  }\r\n\r\n  isRunning(): boolean { return false; }\r\n\r\n  renderState(state: any, interpolation = 0): void {\r\n    // --- Ensure FBO is always resized to 1920x1080 \u00D7 renderScale before any drawing ---\r\n    if (!this.gl) return;\r\n    const gl = this.gl as WebGLRenderingContext;\r\n    const LOGICAL_W = 1920, LOGICAL_H = 1080;\r\n    const renderScale = (RendererConfig && typeof (RendererConfig.renderScale) === 'number') ? RendererConfig.renderScale : 1;\r\n    const bufferW = Math.round(LOGICAL_W * renderScale);\r\n    const bufferH = Math.round(LOGICAL_H * renderScale);\r\n    // If FBO size changed, recreate FBO and texture\r\n    if (this.fboWidth !== bufferW || this.fboHeight !== bufferH) {\r\n      // Delete old FBO/texture if present\r\n      if (this.fboTexture) gl.deleteTexture(this.fboTexture);\r\n      if (this.fbo) gl.deleteFramebuffer(this.fbo);\r\n      // Create new texture for FBO\r\n      this.fboTexture = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, this.fboTexture);\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, bufferW, bufferH, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      // Create new framebuffer\r\n      this.fbo = gl.createFramebuffer();\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.fboTexture, 0);\r\n      this.fboWidth = bufferW;\r\n      this.fboHeight = bufferH;\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n    // --- Render simulation to offscreen framebuffer ---\r\n    if (this.fbo && this.fboTexture) {\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\r\n      gl.viewport(0, 0, this.fboWidth, this.fboHeight);\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n        // If we have a simple GL program, draw ships as round points with simple overlays\r\n        if (this.prog && this.vertexBuffer) {\r\n          try {\r\n            // ...existing vertex packing and draw logic, but use fboWidth/fboHeight for logical size...\r\n            const w = this.fboWidth;\r\n            const h = this.fboHeight;\r\n            const ships = state.ships || [];\r\n            const verts: number[] = [];\r\n            const now = (state && state.t) || 0;\r\n            for (const s of ships) {\r\n              const x = (s.x || 0);\r\n              const y = (s.y || 0);\r\n              const clipX = (x / Math.max(1, w)) * 2 - 1;\r\n              const clipY = 1 - (y / Math.max(1, h)) * 2;\r\n              const radius = s.radius || 6;\r\n              const ps = Math.max(2, radius * 2);\r\n              const teamObj = (s.team === 'blue') ? TeamsConfig.teams.blue : TeamsConfig.teams.red;\r\n              const colorHex = (teamObj && teamObj.color) || AssetsConfig.palette.shipHull || '#888';\r\n              const hexToRgba = (hex: string) => {\r\n                const h = hex.replace('#',''); const bigint = parseInt(h.length===3? h.split('').map(c=>c+c).join(''): h,16);\r\n                const r = ((bigint >> 16) & 255)/255; const g = ((bigint >> 8) & 255)/255; const b = (bigint & 255)/255; return [r,g,b,1];\r\n              };\r\n              const baseColor = hexToRgba(colorHex);\r\n              // Ship hull\r\n              verts.push(clipX, clipY, ps, baseColor[0], baseColor[1], baseColor[2], baseColor[3]);\r\n\r\n              // Engine trail (simple: draw faded points for trail)\r\n              if (Array.isArray(s.trail)) {\r\n                for (let i = 0; i < s.trail.length; i++) {\r\n                  const tx = s.trail[i].x || 0;\r\n                  const ty = s.trail[i].y || 0;\r\n                  const tClipX = (tx / Math.max(1, w)) * 2 - 1;\r\n                  const tClipY = 1 - (ty / Math.max(1, h)) * 2;\r\n                  const tAlpha = 0.2 + 0.5 * (i / s.trail.length);\r\n                  verts.push(tClipX, tClipY, Math.max(2, radius), 0.7, 0.7, 1.0, tAlpha);\r\n                }\r\n              }\r\n\r\n              // Shield effect (draw a blue ring if shield is up)\r\n              if (s.shield > 0) {\r\n                verts.push(clipX, clipY, ps * 1.2, 0.3, 0.7, 1.0, 0.5);\r\n              }\r\n\r\n              // Health/damage flash (draw a reddish ring if recent damage)\r\n              if (Array.isArray(healthFlashes)) {\r\n                const flash = healthFlashes.find(f => f.id === s.id);\r\n                if (flash && flash.ttl > 0) {\r\n                  verts.push(clipX, clipY, ps * 1.3, 1.0, 0.3, 0.3, 0.7);\r\n                }\r\n              }\r\n            }\r\n            // upload buffer and draw\r\n            const floatArr = new Float32Array(verts);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, floatArr, gl.DYNAMIC_DRAW);\r\n            gl.useProgram(this.prog as WebGLProgram);\r\n            const stride = 7 * 4; // 7 floats per vertex\r\n            gl.enableVertexAttribArray(this.attribLoc_pos);\r\n            gl.vertexAttribPointer(this.attribLoc_pos, 2, gl.FLOAT, false, stride, 0);\r\n            gl.enableVertexAttribArray(this.attribLoc_size);\r\n            gl.vertexAttribPointer(this.attribLoc_size, 1, gl.FLOAT, false, stride, 2 * 4);\r\n            gl.enableVertexAttribArray(this.attribLoc_color);\r\n            gl.vertexAttribPointer(this.attribLoc_color, 4, gl.FLOAT, false, stride, 3 * 4);\r\n            const count = Math.floor(floatArr.length / 7);\r\n            gl.drawArrays(gl.POINTS, 0, count);\r\n          } catch (e) {}\r\n        }\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n    // --- Blit/copy FBO to main canvas with fit-to-window scaling ---\r\n    if (this.fboTexture && this.quadProg && this.quadVBO && this.gl) {\r\n      const displayScale = (RendererConfig && typeof (RendererConfig.displayScale) === 'number') ? RendererConfig.displayScale : 1;\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      // Set viewport to canvas size, scaled by displayScale\r\n      gl.viewport(0, 0, Math.round(this.canvas.width * displayScale), Math.round(this.canvas.height * displayScale));\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      gl.useProgram(this.quadProg);\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindTexture(gl.TEXTURE_2D, this.fboTexture);\r\n      if (this.quadLoc_tex) gl.uniform1i(this.quadLoc_tex, 0);\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVBO);\r\n      gl.enableVertexAttribArray(this.quadLoc_pos);\r\n      gl.vertexAttribPointer(this.quadLoc_pos, 2, gl.FLOAT, false, 0, 0);\r\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n      gl.disableVertexAttribArray(this.quadLoc_pos);\r\n    }\r\n    // --- End simulation rendering and buffer copy ---\r\n    // No redundant resizing or copying; buffer is always correct size before drawing, and copy happens once after drawing.\r\n    // Swallow outer render errors\r\n    try {} catch (e) {}\r\n  }\r\n}\r\n", "// This allows the build to treat the app as TypeScript while we incrementally port internals.\r\n// main.ts \u2014 TypeScript entrypoint (ported from main.js). Uses TS imports so\r\n// the module graph resolves to .ts sources during migration.\r\nimport { createGameManager } from './gamemanager';\r\n// This allows the build to treat the app as TypeScript while we incrementally port internals.\r\n// main.ts \u2014 TypeScript entrypoint (ported from main.js). Uses TS imports so\r\n// the module graph resolves to .ts sources during migration.\r\nimport { CanvasRenderer } from './canvasrenderer';\r\nimport { WebGLRenderer } from './webglrenderer';\r\nimport { getDefaultBounds } from './config/displayConfig';\r\nimport { getPreferredRenderer, RendererConfig } from './config/rendererConfig';\r\n\r\n// Allow temporary extension of window.gm used by the app during migration.\r\ndeclare global {\r\n\tinterface Window { gm?: any; }\r\n}\r\n\r\nexport async function startApp(rootDocument: Document = document) {\r\n\tconst canvas = rootDocument.getElementById('world') as HTMLCanvasElement;\r\n\tconst ui: any = {\r\n\t\tstartPause: rootDocument.getElementById('startPause'),\r\n\t\treset: rootDocument.getElementById('reset'),\r\n\t\taddRed: rootDocument.getElementById('addRed'),\r\n\t\taddBlue: rootDocument.getElementById('addBlue'),\r\n\t\ttoggleTrails: rootDocument.getElementById('toggleTrails'),\r\n\t\tspeed: rootDocument.getElementById('speed'),\r\n\t\tredScore: rootDocument.getElementById('redScore'),\r\n\t\tblueScore: rootDocument.getElementById('blueScore'),\r\n\t\tstats: rootDocument.getElementById('stats'),\r\n\t\tcontinuousCheckbox: rootDocument.getElementById('continuousCheckbox'),\r\n\t\tseedBtn: rootDocument.getElementById('seedBtn'),\r\n\t\tformationBtn: rootDocument.getElementById('formationBtn'),\r\n\t};\r\n\r\n\ttry { if (ui.stats) ui.stats.textContent = 'Ships: 0 (R:0 B:0) Bullets: 0'; } catch (e) {}\r\n\r\n\t// Always use fixed logical bounds for simulation/game loop\r\n\tconst LOGICAL_BOUNDS = getDefaultBounds();\r\n\tfunction fitCanvasToWindow() {\r\n\t\t// Minimal robust canvas sizing and centering\r\n\t\tconst dpr = window.devicePixelRatio || 1;\r\n\t\tconst winW = window.innerWidth;\r\n\t\tconst winH = window.innerHeight;\r\n\t\tconst renderScale = (RendererConfig && typeof (RendererConfig as any).renderScale === 'number') ? (RendererConfig as any).renderScale : 1;\r\n\t\tconst logicalW = LOGICAL_BOUNDS.W;\r\n\t\tconst logicalH = LOGICAL_BOUNDS.H;\r\n\t\t\t\t// Fit logical area to window, preserving aspect ratio\r\n\t\tconst fitScale = Math.min(winW / logicalW, winH / logicalH);\r\n\t\tconst visibleW = Math.round(logicalW * fitScale);\r\n\t\tconst visibleH = Math.round(logicalH * fitScale);\r\n\t\tif (canvas) {\r\n\t\t\t// Set logical size\r\n\t\t\tcanvas.width = Math.round(logicalW * renderScale / dpr);\r\n\t\t\tcanvas.height = Math.round(logicalH * renderScale / dpr);\r\n\t\t\tcanvas.style.width = `${visibleW}px`;\r\n\t\t\tcanvas.style.height = `${visibleH}px`;\r\n\t\t\tcanvas.style.position = 'absolute';\r\n\t\t\tcanvas.style.left = '0px';\r\n\t\t\tcanvas.style.top = '0px';\r\n\t\t\tconst dimsEl = document.getElementById('rendererDims');\r\n\t\t\tif (dimsEl) {\r\n\t\t\t\tdimsEl.textContent = `${canvas.width} x ${canvas.height} px @ ${dpr}x`;\r\n\t\t\t}\r\n\t\t}\r\n\t\t// For renderer use\r\n\t\t(RendererConfig as any)._renderScale = renderScale;\r\n\t\t(RendererConfig as any)._offsetX = 0;\r\n\t\t(RendererConfig as any)._offsetY = 0;\r\n\t\t// Update slider value display if present\r\n\t\tconst scaleVal = rootDocument.getElementById('rendererScaleValue');\r\n\t\tif (scaleVal) scaleVal.textContent = renderScale.toFixed(2);\r\n\t}\r\n\t// Renderer scale slider and dynamic scaling wiring\r\n\tconst scaleSlider = rootDocument.getElementById('rendererScaleRange');\r\n\tconst dynamicCheckbox = rootDocument.getElementById('dynamicScaleCheckbox');\r\n\tlet internalScaleUpdate = false;\r\n\tif (scaleSlider) {\r\n\t\tscaleSlider.addEventListener('input', (ev: any) => {\r\n\t\t\tif (internalScaleUpdate) return; // ignore internal updates\r\n\t\t\tconst val = parseFloat(ev.target.value);\r\n\t\t\tif (!isNaN(val)) {\r\n\t\t\t\t(RendererConfig as any).renderScale = val;\r\n\t\t\t\t(RendererConfig as any).dynamicScaleEnabled = false;\r\n\t\t\t\tif (dynamicCheckbox) (dynamicCheckbox as HTMLInputElement).checked = false;\r\n\t\t\t\tfitCanvasToWindow();\r\n\t\t\t}\r\n\t\t});\r\n\t\t// Set initial value display\r\n\t\tconst scaleVal = rootDocument.getElementById('rendererScaleValue');\r\n\t\tif (scaleVal) scaleVal.textContent = (scaleSlider as HTMLInputElement).value;\r\n\t\t// Ensure initial fit-to-window calculation uses current scale\r\n\tfitCanvasToWindow();\r\n\t}\r\n\tif (dynamicCheckbox) {\r\n\t\tdynamicCheckbox.addEventListener('change', (ev: any) => {\r\n\t\t\tconst enabled = !!ev.target.checked;\r\n\t\t\t(RendererConfig as any).dynamicScaleEnabled = enabled;\r\n\t\t});\r\n\t(dynamicCheckbox as HTMLInputElement).checked = !!(RendererConfig as any).dynamicScaleEnabled;\r\n\t}\r\n\r\n\tfitCanvasToWindow();\r\n\twindow.addEventListener('resize', fitCanvasToWindow);\r\n\r\n\tlet renderer: any;\r\n\tconst pref = getPreferredRenderer();\r\n\tif (pref === 'webgl') {\r\n\t\ttry { const w = new WebGLRenderer(canvas); if (w && w.init && w.init()) renderer = w; } catch (e) {}\r\n\t}\r\n\tif (!renderer) { renderer = new CanvasRenderer(canvas); renderer.init && renderer.init(); }\r\n\r\n\ttry { window.gm = window.gm || {}; } catch (e) {}\r\n\t// Pass fixed logical bounds to game manager\r\n\tconst gm = createGameManager({ renderer, useWorker: false, seed: 12345 });\r\n\tif (gm && gm._internal) gm._internal.bounds = LOGICAL_BOUNDS;\r\n\ttry { if (typeof window !== 'undefined' && (window as any).gm) Object.assign((window as any).gm, gm); } catch (e) {}\r\n\r\n\t// Speed multiplier logic\r\n\tlet simSpeedMultiplier = 1;\r\n\tif (ui.speed) {\r\n\t\tui.speed.addEventListener('click', () => {\r\n\t\t\tsimSpeedMultiplier = simSpeedMultiplier >= 4 ? 0.25 : simSpeedMultiplier * 2;\r\n\t\t\tui.speed.textContent = `Speed: ${simSpeedMultiplier}\u00D7`;\r\n\t\t});\r\n\t\tui.speed.textContent = `Speed: ${simSpeedMultiplier}\u00D7`;\r\n\t}\r\n\r\n\t// Patch stepOnce to use multiplier\r\n\tif (gm && typeof gm.stepOnce === 'function') {\r\n\t\tconst origStepOnce = gm.stepOnce.bind(gm);\r\n\t\tgm.stepOnce = (dt = 0.016) => origStepOnce(dt * simSpeedMultiplier);\r\n\t}\r\n\r\n\t// Fleet formation logic\r\n\tif (ui.formationBtn) {\r\n\t\tui.formationBtn.addEventListener('click', () => {\r\n\t\t\tif (gm && typeof gm.formFleets === 'function') {\r\n\t\t\t\tgm.formFleets();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Engine trail UI toggle state\r\n\tlet engineTrailsEnabled = true;\r\n\tif (gm && gm._internal && gm._internal.state) {\r\n\t\tgm._internal.state.engineTrailsEnabled = engineTrailsEnabled;\r\n\t}\r\n\tif (ui.toggleTrails) {\r\n\t\tui.toggleTrails.addEventListener('click', () => {\r\n\t\t\tengineTrailsEnabled = !engineTrailsEnabled;\r\n\t\t\tif (gm && gm._internal && gm._internal.state) {\r\n\t\t\t\tgm._internal.state.engineTrailsEnabled = engineTrailsEnabled;\r\n\t\t\t}\r\n\t\t\tui.toggleTrails.textContent = engineTrailsEnabled ? '\u2604 Trails: On' : '\u2604 Trails: Off';\r\n\t\t});\r\n\t\tui.toggleTrails.textContent = engineTrailsEnabled ? '\u2604 Trails: On' : '\u2604 Trails: Off';\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst host = (location && location.hostname) || '';\r\n\t\tconst urlParams = (typeof URLSearchParams !== 'undefined') ? new URLSearchParams(location.search) : null;\r\n\t\tconst autotest = (urlParams && urlParams.get('autotest') === '1') || !!((window as any).__AUTO_REINFORCE_DEV__);\r\n\t\tif ((host === '127.0.0.1' || host === 'localhost') && autotest) {\r\n\t\t\ttry { if (gm && typeof gm.setContinuousEnabled === 'function') gm.setContinuousEnabled(true); } catch (e) {}\r\n\t\t\ttry { if (gm && typeof gm.setReinforcementInterval === 'function') gm.setReinforcementInterval(0.01); } catch (e) {}\r\n\t\t\ttry { if (gm && typeof gm.stepOnce === 'function') gm.stepOnce(0.02); } catch (e) {}\r\n\t\t}\r\n\t} catch (e) {}\r\n\r\n\tlet lastReinforcementSummary = '';\r\n\ttry {\r\n\t\tif (gm && typeof gm.on === 'function') {\r\n\t\t\tgm.on('reinforcements', (msg: any) => {\r\n\t\t\t\tconst list = (msg && msg.spawned) || [];\r\n\t\t\t\tconst types = list.map((s: any) => s.type).filter(Boolean);\r\n\t\t\t\tconst summary = `Reinforcements: spawned ${list.length} ships (${types.join(', ')})`;\r\n\t\t\t\tlastReinforcementSummary = summary;\r\n\t\t\t\ttry { setTimeout(() => { lastReinforcementSummary = ''; }, 3000); } catch (e) {}\r\n\t\t\t\ttry { if (ui && ui.stats) ui.stats.textContent = `${ui.stats.textContent} | ${summary}`; } catch (e) {}\r\n\t\t\t});\r\n\t\t}\r\n\t} catch (e) {}\r\n\r\n\tconst workerIndicator = rootDocument.getElementById('workerIndicator');\r\n\tlet toastContainer = rootDocument.getElementById('toastContainer');\r\n\tif (!toastContainer) {\r\n\t\ttry {\r\n\t\t\ttoastContainer = rootDocument.createElement('div');\r\n\t\t\ttoastContainer.id = 'toastContainer';\r\n\t\t\ttoastContainer.style.position = 'fixed';\r\n\t\t\ttoastContainer.style.right = '16px';\r\n\t\t\ttoastContainer.style.top = '16px';\r\n\t\t\ttoastContainer.style.zIndex = '9999';\r\n\t\t\ttoastContainer.style.pointerEvents = 'none';\r\n\t\t\trootDocument.body.appendChild(toastContainer);\r\n\t\t} catch (e) { toastContainer = null; }\r\n\t}\r\n\r\n\tfunction showToast(msg: string, opts: any = {}) {\r\n\t\ttry {\r\n\t\t\tif (!toastContainer) return;\r\n\t\t\tconst ttl = (typeof opts.ttl === 'number') ? opts.ttl : 2000;\r\n\t\t\tconst el = rootDocument.createElement('div');\r\n\t\t\tel.style.background = 'rgba(20,20,30,0.9)';\r\n\t\t\tel.style.color = '#fff';\r\n\t\t\tel.style.padding = '8px 12px';\r\n\t\t\tel.style.marginTop = '6px';\r\n\t\t\tel.style.borderRadius = '6px';\r\n\t\t\tel.style.boxShadow = '0 2px 8px rgba(0,0,0,0.5)';\r\n\t\t\tel.style.fontFamily = 'sans-serif';\r\n\t\t\tel.style.fontSize = '13px';\r\n\t\t\tel.style.pointerEvents = 'auto';\r\n\t\t\tel.textContent = msg;\r\n\t\t\ttoastContainer.appendChild(el);\r\n\t\t\tsetTimeout(() => { try { el.style.transition = 'opacity 300ms ease'; el.style.opacity = '0'; } catch (e) {}; setTimeout(() => { try { if (el && el.parentNode) el.parentNode.removeChild(el); } catch (err) {} }, 350); }, ttl);\r\n\t\t} catch (e) {}\r\n\t}\r\n\r\n\ttry {\r\n\t\tif (gm && typeof gm.on === 'function') {\r\n\t\t\tgm.on('levelup', (m: any) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst ship = (m && m.ship) || null;\r\n\t\t\t\t\tconst lvl = (m && m.newLevel) || (m && m.newLevel === 0 ? 0 : undefined);\r\n\t\t\t\t\tconst who = ship && ship.team ? `${ship.team} ship` : 'Ship';\r\n\t\t\t\t\tconst msg = `${who} leveled up to ${lvl}`;\r\n\t\t\t\t\tshowToast(msg, { ttl: 2200 });\r\n\t\t\t\t} catch (e) {}\r\n\t\t\t});\r\n\t\t}\r\n\t} catch (e) {}\r\n\r\n\tif (workerIndicator) {\r\n\t\ttry { workerIndicator.textContent = (gm.isWorker && gm.isWorker()) ? 'Worker' : 'Main'; (function refresh() { try { workerIndicator.textContent = (gm.isWorker && gm.isWorker()) ? 'Worker' : 'Main'; requestAnimationFrame(refresh); } catch (e) {} }()); } catch (e) { workerIndicator.textContent = 'Unknown'; }\r\n\t}\r\n\r\n\ttry { ui.startPause.addEventListener('click', () => { if (gm.isRunning()) { gm.pause(); ui.startPause.textContent = '\u25B6 Start'; } else { gm.start(); ui.startPause.textContent = '\u23F8 Pause'; } }); } catch (e) {}\r\n\ttry { ui.reset.addEventListener('click', () => gm.reset()); } catch (e) {}\r\n\ttry { ui.addRed.addEventListener('click', () => gm.spawnShip('red')); } catch (e) {}\r\n\ttry { ui.addBlue.addEventListener('click', () => gm.spawnShip('blue')); } catch (e) {}\r\n\tfunction onSeedBtnClick() {\r\n\t\ttry {\r\n\t\t\tconst raw = (typeof window !== 'undefined' && typeof window.prompt === 'function') ? window.prompt('Enter new seed (leave blank for random):', '') : null;\r\n\t\t\tif (raw == null) return;\r\n\t\t\tconst trimmed = String(raw).trim();\r\n\t\t\tif (trimmed === '') { try { gm.reseed(); showToast('Reseeded with random seed'); } catch (e) {} return; }\r\n\t\t\tconst asNum = Number(trimmed);\r\n\t\t\tif (!Number.isFinite(asNum) || Math.floor(asNum) !== asNum) { try { showToast('Invalid seed. Please enter an integer.'); } catch (e) {} return; }\r\n\t\t\ttry { gm.reseed(asNum >>> 0); showToast(`Reseeded with ${asNum >>> 0}`); } catch (e) {}\r\n\t\t} catch (e) {}\r\n\t}\r\n\ttry { ui.seedBtn.addEventListener('click', onSeedBtnClick); } catch (e) {}\r\n\t// try { ui.formationBtn.addEventListener('click', () => gm.formFleets()); } catch (e) {}\r\n\ttry { if (ui.continuousCheckbox) { ui.continuousCheckbox.addEventListener('change', (ev: any) => { const v = !!ev.target.checked; if (gm && typeof gm.setContinuousEnabled === 'function') gm.setContinuousEnabled(v); }); } } catch (e) {}\r\n\r\n\tfunction uiTick() {\r\n\t\ttry {\r\n\t\t\tconst s = gm.snapshot();\r\n\t\t\tui.redScore.textContent = `Red ${gm.score.red}`;\r\n\t\t\tui.blueScore.textContent = `Blue ${gm.score.blue}`;\r\n\t\t\tconst redCount = s.ships.filter((sh: any) => sh.team === 'red').length;\r\n\t\t\tconst blueCount = s.ships.filter((sh: any) => sh.team === 'blue').length;\r\n\t\t\tui.stats.textContent = `Ships: ${s.ships.length} (R:${redCount} B:${blueCount}) Bullets: ${s.bullets.length}` + (lastReinforcementSummary ? ` | ${lastReinforcementSummary}` : '');\r\n\t\t} catch (e) {}\r\n\t\t// --- Dynamic buffer scaling logic ---\r\n\t\tconst dynamicEnabled = !!(RendererConfig as any).dynamicScaleEnabled;\r\n\t\tconst scaleSliderEl = rootDocument.getElementById('rendererScaleRange') as HTMLInputElement;\r\n\t\tconst scaleValEl = rootDocument.getElementById('rendererScaleValue');\r\n\t\t// Track frame time\r\n\t\tconst now = performance.now();\r\n\t\t(RendererConfig as any)._lastUiTick = (RendererConfig as any)._lastUiTick || now;\r\n\t\tconst dt = now - (RendererConfig as any)._lastUiTick;\r\n\t\t(RendererConfig as any)._lastUiTick = now;\r\n\t\t(RendererConfig as any).lastFrameTime = dt;\r\n\t\t// Score frame time\r\n\t\tlet frameScore = 'green';\r\n\t\tif (dt > 33) frameScore = 'red';\r\n\t\telse if (dt > 20) frameScore = 'yellow';\r\n\t\t(RendererConfig as any).frameScore = frameScore;\r\n\t\t// Color slider value for feedback\r\n\t\tif (scaleValEl) {\r\n\t\t\tscaleValEl.style.color = frameScore === 'green' ? '#4caf50' : frameScore === 'yellow' ? '#ffd600' : '#ff1744';\r\n\t\t}\r\n\t\t// Dynamic scaling logic\r\n\t\tif (dynamicEnabled && scaleSliderEl) {\r\n\t\t\tlet scale = (RendererConfig as any).renderScale;\r\n\t\t\t// If frame is slow, reduce scale; if fast, increase scale\r\n\t\t\tif (frameScore === 'red' && scale > 0.25) scale = Math.max(0.25, scale - 0.05);\r\n\t\t\telse if (frameScore === 'green' && scale < 2.0) scale = Math.min(2.0, scale + 0.01);\r\n\t\t\t// Only update if changed\r\n\t\t\tif (scale !== (RendererConfig as any).renderScale) {\r\n\t\t\t\t(RendererConfig as any).renderScale = scale;\r\n\t\t\t\tinternalScaleUpdate = true;\r\n\t\t\t\tscaleSliderEl.value = scale.toFixed(2);\r\n\t\t\t\tif (scaleValEl) scaleValEl.textContent = scale.toFixed(2);\r\n\t\t\t\tfitCanvasToWindow();\r\n\t\t\t\tinternalScaleUpdate = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\trequestAnimationFrame(uiTick);\r\n\t}\r\n\trequestAnimationFrame(uiTick);\r\n\treturn { gm, renderer };\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n\tif (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', () => startApp(document));\r\n\telse startApp(document);\r\n}\r\n\r\nexport default startApp;\r\n"],
  "mappings": "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",
  "names": ["mulberry32", "weightedPick", "bounds", "s", "lvl", "_seed", "makeInitialFleets", "seed", "_seed", "vconf", "h"]
}
