{
  "version": 3,
  "sources": ["../src/config/entitiesConfig.ts", "../src/config/assets/assetsConfig.ts", "../src/math/polygon.ts", "../src/assets/svgToPolylines.ts", "../src/assets/svgLoader.ts", "../src/assets/svgRenderer.ts", "../src/dev/shipPipelineOverlay.ts", "../src/entities.ts", "../src/config/teamsConfig.ts", "../src/config/simConfig.ts", "../src/rng.ts", "../src/pools/pool.ts", "../src/gamemanager.ts", "../src/config/behaviorConfig.ts", "../src/behavior.ts", "../src/simulate.ts", "../src/config/progressionConfig.ts", "../src/spatialGrid.ts", "../src/createSimWorker.ts", "../src/pools/PoolManager.ts", "../src/pools/assetPool.ts", "../src/config/gamemanagerConfig.ts", "../src/config/displayConfig.ts", "../src/config/rendererConfig.ts", "../src/canvasrenderer.ts", "../src/pools/tintedHullPool.ts", "../src/webglrenderer.ts", "../src/main.ts"],
  "sourcesContent": ["// entitiesConfig.ts - ship-type defaults and visuals helpers (typed)\n//\n// Tuning rationale (2025-08-24):\n// - Playfield size: 1920x1080\n// - Ship speeds (maxSpeed, accel): Higher speed enables kiting and rapid repositioning; slower ships are easier to flank.\n// - Turn rates (turnRate): Higher turn rate allows ships to evade, flank, and respond to threats quickly; low turn rate makes ships vulnerable to flanking.\n// - Weapon ranges (muzzleSpeed * bulletTTL): Longer range supports kiting and edge play; shorter range requires close engagement and rewards flanking.\n// - Weapon rate (rate): Higher fire rate enables sustained pressure and kiting; lower rate rewards timing and positioning.\n// - Ship radius: Larger ships are easier to hit and harder to flank; smaller ships excel at flanking and evasion.\n// - Boundary options (see simConfig.ts): Enable edge play (wrap, bounce, remove) for tactical escapes and repositioning.\n// - See patch history for details\nimport {\n  getShipAsset,\n  getBulletAsset,\n  getTurretAsset,\n} from \"./assets/assetsConfig\";\n\n// CannonCfg parameters and tactical impact:\n// - damage: Higher damage increases threat, rewards flanking and burst attacks.\n// - rate: Higher rate supports kiting and pressure; lower rate rewards timing.\n// - spread: More spread makes weapons less accurate, favors close-range flanking.\n// - muzzleSpeed: Higher speed increases range and kiting potential.\n// - bulletRadius: Larger radius makes shots easier to land, favors area denial.\n// - bulletTTL: Longer TTL increases range, supports edge play and kiting.\nexport type CannonCfg = {\n  damage: number;\n  rate: number;\n  spread?: number;\n  muzzleSpeed?: number;\n  bulletRadius?: number;\n  bulletTTL?: number;\n  // optional per-weapon effective range (units). If omitted, engine uses muzzleSpeed*bulletTTL or BULLET_DEFAULTS.range\n  range?: number;\n};\n\n// ShipTypeCfg parameters and tactical impact:\n// - maxHp, armor, maxShield: Higher values increase survivability, allow for riskier flanking and edge play.\n// - shieldRegen: Faster regen supports hit-and-run and kiting.\n// - damage/dmg: Higher damage rewards successful flanking and burst attacks.\n// - radius: Smaller radius makes ships harder to hit and better at flanking; larger radius increases vulnerability.\n// - cannons: Weapon loadout affects tactical options (see CannonCfg).\n// - accel: Higher acceleration enables rapid repositioning and kiting.\n// - turnRate: Higher turn rate allows for quick flanking, evasion, and edge play.\n// - maxSpeed: Higher speed supports kiting and edge escapes; lower speed makes ships easier to pursue and flank.\n// - turrets: Multiple turrets increase area control, make flanking harder.\n// - friction: Lower friction (closer to 1) enables sustained velocity for kiting and edge play; higher friction increases tactical vulnerability to pursuit and flanking.\n// All entities and events are pruned immediately upon destruction or expiration, ensuring tactical scenarios remain robust and consistent.\nexport type ShipTypeCfg = {\n  maxHp: number;\n  armor?: number;\n  maxShield?: number;\n  shieldRegen?: number;\n  // size classification for tuning: 'small' | 'medium' | 'large'\n  size?: \"small\" | \"medium\" | \"large\";\n  dmg?: number;\n  damage?: number;\n  radius?: number;\n  cannons?: CannonCfg[];\n  accel?: number;\n  turnRate?: number;\n  maxSpeed?: number;\n  carrier?: {\n    fighterCooldown: number;\n    maxFighters: number;\n    spawnPerCooldown: number;\n  };\n  turrets?: Array<{\n    // runtime: spread and barrel length can be provided per-turret\n    // runtime: spread and barrel length can be provided per-turret\n    position: [number, number]; // relative to ship center, in radius units\n    kind: string; // turret asset kind\n    targeting?: \"nearest\" | \"random\" | \"focus\" | \"custom\"; // targeting logic\n    cooldown?: number; // seconds between shots\n    lastFired?: number; // timestamp of last shot\n    // optional turret firing range (units)\n    range?: number;\n    // optional per-turret defaults\n    spread?: number;\n    barrel?: number; // barrel length in radius units\n  }>;\n};\n\nexport type ShipConfigMap = Record<string, ShipTypeCfg>;\n\nexport const ShipConfig: ShipConfigMap = {\n  fighter: {\n    maxHp: 15,\n    // size classification used for armor/shield tuning\n    size: \"small\",\n    armor: 0,\n    maxShield: 8,\n    shieldRegen: 1.0,\n    dmg: 3,\n    damage: 3,\n    radius: 12,\n    cannons: [\n      {\n        damage: 3,\n        rate: 3,\n        spread: 0.1,\n        muzzleSpeed: 260, // reduced back (/10)\n        bulletRadius: 1.5,\n        bulletTTL: 1.1, // was 1.2\n        // effective range (muzzleSpeed * bulletTTL) scaled to engine units\n        range: Math.round(260 * 1.1),\n      },\n    ],\n\n    // Refined tuning: slightly higher accel and a moderate maxSpeed for clearer motion\n    accel: 100, // ~10x accel\n    turnRate: 6,\n    maxSpeed: 2200, // ~10x maxSpeed\n  },\n  corvette: {\n    maxHp: 50,\n    size: \"medium\",\n    armor: 0,\n    maxShield: Math.round(50 * 0.6),\n    shieldRegen: 0.5,\n    dmg: 5,\n    damage: 5,\n    radius: 20,\n    accel: 80,\n    turnRate: 3.5, // was 3\n    maxSpeed: 1800, // ~10x increased\n    cannons: [\n      {\n        damage: 6,\n        rate: 1.2,\n        spread: 0.05,\n        muzzleSpeed: 180, // reduced back (/10)\n        bulletRadius: 2,\n        bulletTTL: 1.8, // was 2.0\n        range: Math.round(180 * 1.8),\n      },\n    ],\n  },\n  frigate: {\n    maxHp: 80,\n    size: \"medium\",\n    armor: 1,\n    maxShield: Math.round(80 * 0.6),\n    shieldRegen: 0.4,\n    dmg: 8,\n    damage: 8,\n    radius: 24,\n    cannons: [\n      {\n        damage: 8,\n        rate: 1.0,\n        spread: 0.06,\n        muzzleSpeed: 180, // reduced back (/10)\n        bulletRadius: 2.5,\n        bulletTTL: 2.0, // was 2.2\n        range: Math.round(180 * 2.0),\n      },\n    ],\n    accel: 70,\n    turnRate: 2.5, // was 2.2\n    maxSpeed: 1500, // ~10x increased\n  },\n  destroyer: {\n    maxHp: 120,\n    size: \"large\",\n    armor: 2,\n    maxShield: Math.round(120 * 0.6),\n    shieldRegen: 0.3,\n    dmg: 12,\n    damage: 12,\n    radius: 40,\n    cannons: new Array(6).fill(0).map(() => ({\n      damage: 6,\n      rate: 0.8,\n      spread: 0.08,\n      muzzleSpeed: 160, // reduced back (/10)\n      bulletRadius: 2.5,\n      bulletTTL: 1.8, // was 2.4\n      range: Math.round(160 * 1.8),\n    })),\n    accel: 60,\n    turnRate: 2.0, // was 1.6\n    maxSpeed: 1300, // ~10x increased\n    turrets: [\n      {\n        position: [1.2, 0.8],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n        // turret effective range (units)\n        range: 300,\n      },\n      {\n        position: [-1.2, 0.8],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n      {\n        position: [1.2, -0.8],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n      {\n        position: [-1.2, -0.8],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n      {\n        position: [0, 1.5],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n      {\n        position: [0, -1.5],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n    ],\n  },\n  carrier: {\n    maxHp: 200,\n    size: \"large\",\n    armor: 3,\n    maxShield: Math.round(200 * 0.6),\n    shieldRegen: 0.2,\n    dmg: 2,\n    damage: 2,\n    radius: 40,\n    cannons: new Array(4).fill(0).map(() => ({\n      damage: 4,\n      rate: 0.6,\n      spread: 0.12,\n      muzzleSpeed: 140, // reduced back (/10)\n      bulletRadius: 3,\n      bulletTTL: 2.2, // was 2.8\n      range: Math.round(140 * 2.2),\n    })),\n    accel: 55,\n    turnRate: 1.2, // was 0.8\n    maxSpeed: 1100, // ~10x increased\n    carrier: { fighterCooldown: 1.5, maxFighters: 6, spawnPerCooldown: 2 },\n    turrets: [\n      {\n        position: [2.0, 1.2],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 1.0,\n        range: 300,\n      },\n      {\n        position: [-2.0, 1.2],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 1.0,\n      },\n      {\n        position: [2.0, -1.2],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 1.0,\n      },\n      {\n        position: [-2.0, -1.2],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 1.0,\n      },\n    ],\n  },\n};\n\n// Per-size defaults to provide consistent tuning shortcuts. These values are\n// applied when a ShipTypeCfg omits explicit armor/shield tuning. They make it\n// easy to adjust broad balance by class (small/medium/large) in one place.\nexport const SIZE_DEFAULTS: Record<\n  \"small\" | \"medium\" | \"large\",\n  Partial<ShipTypeCfg>\n> = {\n  small: {\n    armor: 0,\n    maxShield: 8,\n    shieldRegen: 1.0,\n    radius: 12,\n    turnRate: 6,\n    accel: 100,\n    maxSpeed: 2200,\n  },\n  medium: {\n    armor: 1,\n    maxShield: 40,\n    shieldRegen: 0.5,\n    radius: 24,\n    turnRate: 3.5,\n    accel: 80,\n    maxSpeed: 1800,\n  },\n  large: {\n    armor: 2,\n    maxShield: 120,\n    shieldRegen: 0.25,\n    radius: 40,\n    turnRate: 2.0,\n    accel: 60,\n    maxSpeed: 1300,\n  },\n};\n\nexport function getSizeDefaults(size: \"small\" | \"medium\" | \"large\") {\n  return SIZE_DEFAULTS[size] || SIZE_DEFAULTS.small;\n}\n\n// Runtime configuration helpers: update per-size defaults in-place.\nexport function setSizeDefaults(\n  size: \"small\" | \"medium\" | \"large\",\n  patch: Partial<ShipTypeCfg>,\n) {\n  SIZE_DEFAULTS[size] = Object.assign({}, SIZE_DEFAULTS[size], patch);\n}\n\nexport function setAllSizeDefaults(patch: Partial<ShipTypeCfg>) {\n  SIZE_DEFAULTS.small = Object.assign({}, SIZE_DEFAULTS.small, patch);\n  SIZE_DEFAULTS.medium = Object.assign({}, SIZE_DEFAULTS.medium, patch);\n  SIZE_DEFAULTS.large = Object.assign({}, SIZE_DEFAULTS.large, patch);\n}\n// NOTE: The factory that creates Ship objects (`createShip` in src/entities.ts)\n// enforces a positive fallback for `maxSpeed` when the config is missing or\n// set to 0. This guards against malformed saved state or partial config\n// payloads which would otherwise clamp ship velocity to 0 and prevent\n// translation while still allowing rotation/firing (a common source of\n// confusing \"ships rotate and shoot but don't move\" bugs).\nexport function getShipConfig() {\n  // Normalize weapon ranges at runtime so configs may omit 'range'.\n  // For cannons: range = Math.round(muzzleSpeed * bulletTTL) or BULLET_DEFAULTS.range\n  // For turrets: if missing, inherit first cannon range or BULLET_DEFAULTS.range\n  Object.keys(ShipConfig).forEach((key) => {\n    const cfg = ShipConfig[key];\n    if (cfg.cannons) {\n      cfg.cannons.forEach((c) => {\n        if (c.range == null) {\n          const ms = c.muzzleSpeed ?? BULLET_DEFAULTS.muzzleSpeed;\n          const ttl = c.bulletTTL ?? BULLET_DEFAULTS.ttl;\n          const computed =\n            Number.isFinite(ms) && Number.isFinite(ttl)\n              ? Math.round(ms * ttl)\n              : BULLET_DEFAULTS.range;\n          c.range = computed || BULLET_DEFAULTS.range;\n        }\n      });\n    }\n    // Turret range fallback: prefer existing turret.range, else try first cannon, else BULLET_DEFAULTS.range\n    if (cfg.turrets) {\n      const firstCannonRange =\n        cfg.cannons && cfg.cannons.length\n          ? cfg.cannons[0].range || BULLET_DEFAULTS.range\n          : BULLET_DEFAULTS.range;\n      cfg.turrets.forEach((t) => {\n        if (t.range == null) {\n          t.range = firstCannonRange;\n        }\n      });\n    }\n  });\n  return ShipConfig;\n}\n\n// Bullet global defaults (used if not per-ship)\nexport const BULLET_DEFAULTS = {\n  damage: 1,\n  ttl: 2.0,\n  radius: 1.5,\n  muzzleSpeed: 24,\n  // default effective range (units)\n  range: 300,\n};\n\n// Particle defaults (used for generic effects)\nexport const PARTICLE_DEFAULTS = {\n  ttl: 1,\n  color: \"#fff\",\n  size: 2,\n};\n\n// Team fallback default\n\nexport function bulletKindForRadius(r: number): string {\n  if (r < 2) return \"small\";\n  if (r < 2.5) return \"medium\";\n  if (r < 3.5) return \"large\";\n  return \"heavy\";\n}\n\nexport function getDefaultShipType(): string {\n  return Object.keys(ShipConfig)[0] || \"fighter\";\n}\n\nexport default ShipConfig;\n\n// CommonJS shim for tests that use require() to import the TS module path directly.\n// This keeps runtime behavior identical while allowing `require(\"../../src/config/entitiesConfig\")`\n// to access named exports in a CJS environment (Vitest/node require).\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\ndeclare const module: any;\nif (typeof module !== \"undefined\" && module.exports) {\n  // assign named exports to module.exports for CommonJS consumers\n  try {\n    const existing = module.exports || {};\n    Object.defineProperty(existing, \"ShipConfig\", {\n      value: ShipConfig,\n      enumerable: true,\n    });\n    Object.defineProperty(existing, \"getShipConfig\", {\n      value: getShipConfig,\n      enumerable: true,\n    });\n    Object.defineProperty(existing, \"SIZE_DEFAULTS\", {\n      value: SIZE_DEFAULTS,\n      enumerable: true,\n    });\n    Object.defineProperty(existing, \"getSizeDefaults\", {\n      value: getSizeDefaults,\n      enumerable: true,\n    });\n    Object.defineProperty(existing, \"setSizeDefaults\", {\n      value: setSizeDefaults,\n      enumerable: true,\n    });\n    Object.defineProperty(existing, \"setAllSizeDefaults\", {\n      value: setAllSizeDefaults,\n      enumerable: true,\n    });\n    Object.defineProperty(existing, \"BULLET_DEFAULTS\", {\n      value: BULLET_DEFAULTS,\n      enumerable: true,\n    });\n    Object.defineProperty(existing, \"PARTICLE_DEFAULTS\", {\n      value: PARTICLE_DEFAULTS,\n      enumerable: true,\n    });\n    Object.defineProperty(existing, \"bulletKindForRadius\", {\n      value: bulletKindForRadius,\n      enumerable: true,\n    });\n    Object.defineProperty(existing, \"getDefaultShipType\", {\n      value: getDefaultShipType,\n      enumerable: true,\n    });\n    // ensure default also exists without reassigning module.exports entirely\n    try {\n      Object.defineProperty(existing, \"default\", {\n        value: ShipConfig,\n        enumerable: true,\n      });\n    } catch (e) {}\n    // merge back to module.exports if possible\n    try {\n      module.exports = existing;\n    } catch (e) {}\n  } catch (e) {}\n}\n", "/**\r\n * Returns the engine trail config for a given ship type.\r\n * If not present, returns the default engineTrail animation config.\r\n */\r\nexport function getEngineTrailConfig(type: string): any {\r\n  const vconf = getVisualConfig(type);\r\n  const trailName = (vconf.visuals && vconf.visuals.engineTrail) || 'engineTrail';\r\n  return (AssetsConfig.animations && AssetsConfig.animations[trailName]) || (AssetsConfig.animations && AssetsConfig.animations.engineTrail);\r\n}\r\n/**\r\n * Asset-agnostic sprite provider: returns a sprite object for a given type.\r\n * Supports fallback to vector shapes, 3D models, or SVG files.\r\n * Usage: getSpriteAsset('fighter'), getSpriteAsset('carrier'), etc.\r\n */\r\nexport function getSpriteAsset(type: string): { shape?: Shape2D; model3d?: Model3D; svg?: string } {\r\n  // Prefer an inlined SVG string from AssetsConfig.svgAssets (standalone build)\r\n  // if present and looks like SVG markup. This allows the build-time inlined\r\n  // SVGs to be used directly by the renderer. If not inlined, fall back to\r\n  // any `svg` field on the shapes2d entry (legacy) or model3d/shape data.\r\n  const inlineSvg = (AssetsConfig as any).svgAssets && (AssetsConfig as any).svgAssets[type];\r\n  if (typeof inlineSvg === 'string' && inlineSvg.trim().startsWith('<svg')) {\r\n    return { svg: inlineSvg };\r\n  }\r\n  // For backward compatibility, check shapes2d entry for an embedded svg string\r\n  const shapeEntry = AssetsConfig.shapes2d[type] || AssetsConfig.shapes2d.fighter;\r\n  if ((shapeEntry as any).svg) {\r\n    return { svg: (shapeEntry as any).svg };\r\n  }\r\n  // If model3d is present, use it\r\n  if (shapeEntry.model3d && shapeEntry.model3d.url) {\r\n    return { model3d: shapeEntry.model3d };\r\n  }\r\n  // Fallback to vector shape\r\n  return { shape: shapeEntry };\r\n}\r\n// Basic asset templates for 2D top-down rendering with future 3D model placeholders.\r\n// Orientation: shapes face +X (to the right). Scale is in logical units; renderer\r\n// should scale to entity radius and rotate by entity heading if present.\r\n\r\nexport type PolygonShape = {\r\n  type: 'polygon';\r\n  points: number[][]; // [[x,y], ...]\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CircleShape = {\r\n  type: 'circle';\r\n  r: number;\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CompoundPart = PolygonShape | CircleShape;\r\n\r\nexport type CompoundShape = {\r\n  type: 'compound';\r\n  parts: CompoundPart[];\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type Shape2D = PolygonShape | CircleShape | CompoundShape;\r\nexport type TurretVisualConfig = {\r\n  kind: string;\r\n  position: [number, number]; // relative to ship center, in radius units\r\n};\r\n\r\nexport type TurretDefaultConfig = {\r\n  turnRate?: number; // radians per second default\r\n  sprite?: string; // optional sprite key to use for turret visuals\r\n};\r\n\r\nexport type Model3D = {\r\n  url?: string | undefined;\r\n  scale?: number | undefined;\r\n  type?: string | undefined;\r\n  mesh?: string | undefined;\r\n};\r\n\r\nexport type AssetsConfigType = {\r\n  meta: { orientation: string; coordinateSystem: string };\r\n  palette: Record<string, string>;\r\n  shapes2d: Record<string, Shape2D & { turrets?: TurretVisualConfig[] }>;\r\n  // Optional mapping of ship type -> svg filename (for future svg-based rendering)\r\n  svgAssets?: Record<string, string>;\r\n  // Optional explicit mountpoints extracted from SVGs or authored here.\r\n  // Positions are in ship-local radius units (same space as shapes2d.turrets)\r\n  svgMounts?: Record<string, [number, number][]>;\r\n  // Defaults for turret kinds (turn rate, sprite override, etc.)\r\n  turretDefaults?: Record<string, TurretDefaultConfig>;\r\n  animations?: Record<string, any>;\r\n  damageStates?: Record<string, { opacity?: number; accentColor?: string }>;\r\n  visualStateDefaults?: Record<string, { engine?: string; shield?: string; damageParticles?: string }>;\r\n};\r\n\r\nexport const AssetsConfig: AssetsConfigType = {\r\n  meta: {\r\n    orientation: '+X',\r\n    coordinateSystem: 'topdown-2d',\r\n  },\r\n  palette: {\r\n    shipHull: '#b0b7c3',\r\n    shipAccent: '#6c7380',\r\n    bullet: '#ffd166',\r\n    turret: '#94a3b8',\r\n    // Scene background color used by renderers\r\n    background: '#0b1220',\r\n  },\r\n  // 2D vector shapes defined as polygons and circles. Points are unit-sized\r\n  // profiles (roughly radius 1). Renderer should multiply by entity radius or\r\n  // provided scale before drawing.\r\n  shapes2d: {\r\n    fighter: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [-0.8, 0.6], [-0.5, 0], [-0.8, -0.6]] },\r\n        { type: 'polygon', points: [[0.0, 0.35], [-0.6, 0.65], [-0.35, 0.0]] },\r\n        { type: 'polygon', points: [[0.0, -0.35], [-0.35, 0.0], [-0.6, -0.65]] },\r\n        { type: 'circle', r: 0.5 }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1, type: 'gltf', mesh: undefined }\r\n    },\r\n    corvette: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [0.4, 0.7], [-1.0, 0.6], [-1.2, 0], [-1.0, -0.6], [0.4, -0.7]] },\r\n        { type: 'polygon', points: [[1.4, 0.22], [1.2, 0.12], [1.2, -0.12], [1.4, -0.22]] },\r\n        { type: 'circle', r: 0.6 }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1.4, type: 'gltf', mesh: undefined }\r\n    },\r\n    frigate: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.3, 0], [0.7, 0.65], [-0.3, 1.0], [-1.3, 0.55], [-1.3, -0.55], [-0.3, -1.0], [0.7, -0.65]] },\r\n        { type: 'circle', r: 0.7 }\r\n      ],\r\n      strokeWidth: 0.1,\r\n      model3d: { url: undefined, scale: 1.8, type: 'gltf', mesh: undefined }\r\n    },\r\n    destroyer: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.8, 0], [1.0, 0.7], [0.2, 1.0], [-0.8, 0.9], [-1.8, 0.6], [-1.8, -0.6], [-0.8, -0.9], [0.2, -1.0], [1.0, -0.7]] },\r\n        { type: 'circle', r: 1.0 },\r\n        { type: 'polygon', points: [[2.0, 0.3], [1.8, 0.2], [1.8, -0.2], [2.0, -0.3]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 2.2, type: 'gltf', mesh: undefined },\r\n      turrets: [\r\n        { kind: 'basic', position: [1.2, 0.8] },\r\n        { kind: 'basic', position: [-1.2, 0.8] },\r\n        { kind: 'basic', position: [1.2, -0.8] },\r\n        { kind: 'basic', position: [-1.2, -0.8] },\r\n        { kind: 'basic', position: [0, 1.5] },\r\n        { kind: 'basic', position: [0, -1.5] }\r\n      ]\r\n    },\r\n    carrier: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[2.2, 0], [1.2, 1.2], [-1.0, 1.6], [-2.8, 1.2], [-3.2, 0], [-2.8, -1.2], [-1.0, -1.6], [1.2, -1.2]] },\r\n        { type: 'circle', r: 1.2 },\r\n        { type: 'polygon', points: [[2.6, 0.5], [2.2, 0.3], [2.2, -0.3], [2.6, -0.5]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 3.0, type: 'gltf', mesh: undefined },\r\n      turrets: [\r\n        { kind: 'basic', position: [2.0, 1.2] },\r\n        { kind: 'basic', position: [-2.0, 1.2] },\r\n        { kind: 'basic', position: [2.0, -1.2] },\r\n        { kind: 'basic', position: [-2.0, -1.2] }\r\n      ]\r\n    },\r\n    bulletSmall: { type: 'circle', r: 0.18 },\r\n    bulletMedium: { type: 'circle', r: 0.25 },\r\n    bulletLarge: { type: 'circle', r: 0.36 },\r\n    turretBasic: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'circle', r: 0.5 },\r\n        { type: 'polygon', points: [[-0.2, 0.2], [0.7, 0.2], [0.7, -0.2], [-0.2, -0.2]] }\r\n      ],\r\n      strokeWidth: 0.08\r\n    },\r\n    // Small effect/particle shapes for renderer-driven effects\r\n    particleSmall: { type: 'circle', r: 0.12 },\r\n    particleMedium: { type: 'circle', r: 0.22 },\r\n    explosionParticle: { type: 'circle', r: 0.32 },\r\n    shieldRing: { type: 'circle', r: 1.2 }\r\n  }\r\n};\r\n\r\n// Optional mapping to ship SVGs (relative to this file path). These are\r\n// provided as a convenience for renderers that can load and parse the\r\n// inline SVGs to extract mountpoints or render higher-fidelity imagery.\r\n\r\n// For standalone builds, SVGs are inlined as strings. Use globalThis.__INLINE_SVG_ASSETS if present.\r\nif (typeof globalThis !== 'undefined' && (globalThis as any).__INLINE_SVG_ASSETS) {\r\n  (AssetsConfig as any).svgAssets = (globalThis as any).__INLINE_SVG_ASSETS;\r\n} else {\r\n  (AssetsConfig as any).svgAssets = {\r\n    destroyer: './svg/destroyer.svg',\r\n    carrier: './svg/carrier.svg',\r\n    frigate: './svg/frigate.svg',\r\n    corvette: './svg/corvette.svg'\r\n  };\r\n}\r\n\r\n// For environments where SVG mountpoint extraction isn't available yet we\r\n// provide an explicit mapping that mirrors the turrets defined in shapes2d.\r\n(AssetsConfig as any).svgMounts = {\r\n  destroyer: AssetsConfig.shapes2d.destroyer.turrets ? AssetsConfig.shapes2d.destroyer.turrets.map((t: any) => t.position) : [],\r\n  carrier: AssetsConfig.shapes2d.carrier.turrets ? AssetsConfig.shapes2d.carrier.turrets.map((t: any) => t.position) : []\r\n};\r\n\r\n// Turret defaults (radians per second) and optional sprite selection.\r\n(AssetsConfig as any).turretDefaults = {\r\n  basic: { turnRate: Math.PI * 1.5, sprite: 'turretBasic' }\r\n};\r\n\r\n// Animations and visual defaults (align with JS AssetsConfig)\r\n(AssetsConfig as any).animations = {\r\n  engineFlare: {\r\n    type: 'polygon',\r\n    points: [ [0, 0], [-0.3, 0.15], [-0.5, 0], [-0.3, -0.15] ],\r\n    pulseRate: 8,\r\n    // configurable alpha multiplier for engine overlay\r\n    alpha: 0.4,\r\n    // local-space X offset (negative = behind ship)\r\n    offset: -0.9\r\n  },\r\n  shieldEffect: {\r\n    type: 'circle',\r\n    r: 1.2,\r\n    strokeWidth: 0.1,\r\n    color: '#88ccff',\r\n    pulseRate: 2,\r\n    // map shieldPct -> alpha = base + scale * shieldPct\r\n    alphaBase: 0.25,\r\n    alphaScale: 0.75\r\n  },\r\n  damageParticles: {\r\n    type: 'particles',\r\n    color: '#ff6b6b',\r\n    count: 6,\r\n    lifetime: 0.8,\r\n    spread: 0.6\r\n  }\r\n  ,\r\n  engineTrail: {\r\n    type: 'trail',\r\n    color: '#fff0a0', // brighter, warm highlight for good contrast\r\n    maxLength: 120,   // longer trail (was 40)\r\n    width: 0.9,       // thicker trail line (was 0.35)\r\n    fade: 0.6         // older points remain more visible (was 0.35)\r\n  }\r\n};\r\n\r\n(AssetsConfig as any).damageStates = {\r\n  light: { opacity: 0.9, accentColor: '#b0b7c3' },\r\n  moderate: { opacity: 0.75, accentColor: '#d4a06a' },\r\n  heavy: { opacity: 0.5, accentColor: '#ff6b6b' }\r\n};\r\n\r\n(AssetsConfig as any).visualStateDefaults = {\r\n  fighter:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  corvette:  { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  frigate:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  destroyer: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  carrier:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 }\r\n};\r\n\r\n// thresholds for mapping hpPct -> damage state key\r\n(AssetsConfig as any).damageThresholds = { moderate: 0.66, heavy: 0.33 };\r\n(AssetsConfig as any).shieldArcWidth = Math.PI / 12;\r\n\r\nexport function getVisualConfig(type: string) {\r\n  const shape = getShipAsset(type);\r\n  const visuals = (AssetsConfig as any).visualStateDefaults[type] || (AssetsConfig as any).visualStateDefaults.fighter;\r\n  return { shape, visuals, palette: AssetsConfig.palette, animations: (AssetsConfig as any).animations, damageStates: (AssetsConfig as any).damageStates } as any;\r\n}\r\n\r\nexport function getShipAsset(type: string): Shape2D {\r\n  return AssetsConfig.shapes2d[type] || AssetsConfig.shapes2d.fighter;\r\n}\r\n\r\nexport function getBulletAsset(kind: 'small' | 'medium' | 'large' = 'small'): Shape2D {\r\n  if (kind === 'large') return AssetsConfig.shapes2d.bulletLarge;\r\n  if (kind === 'medium') return AssetsConfig.shapes2d.bulletMedium;\r\n  return AssetsConfig.shapes2d.bulletSmall;\r\n}\r\n\r\nexport function getTurretAsset(_kind: 'basic' = 'basic'): Shape2D {\r\n  return AssetsConfig.shapes2d.turretBasic;\r\n}\r\n\r\nexport default AssetsConfig;\r\n", "// polygon.ts\r\n// Polygon math utilities for hull/collision logic\r\n// See svg-hull-implementation-plan.md for requirements\r\n\r\nexport function pointInPolygon(point: [number, number], polygon: [number, number][]): boolean {\r\n  // Raycast algorithm (even-odd rule)\r\n  let inside = false;\r\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\r\n    const [xi, yi] = polygon[i];\r\n    const [xj, yj] = polygon[j];\r\n    if (((yi > point[1]) !== (yj > point[1])) &&\r\n        (point[0] < (xj - xi) * (point[1] - yi) / (yj - yi + 1e-12) + xi)) {\r\n      inside = !inside;\r\n    }\r\n  }\r\n  return inside;\r\n}\r\n\r\nexport function distancePointToSegment(point: [number, number], segA: [number, number], segB: [number, number]): number {\r\n  // Compute distance from point to segment AB\r\n  const [px, py] = point;\r\n  const [ax, ay] = segA;\r\n  const [bx, by] = segB;\r\n  const dx = bx - ax, dy = by - ay;\r\n  if (dx === 0 && dy === 0) return Math.hypot(px - ax, py - ay);\r\n  const t = Math.max(0, Math.min(1, ((px - ax) * dx + (py - ay) * dy) / (dx * dx + dy * dy)));\r\n  const projX = ax + t * dx, projY = ay + t * dy;\r\n  return Math.hypot(px - projX, py - projY);\r\n}\r\n\r\nexport function circleIntersectsPolygon(center: [number, number], radius: number, polygon: [number, number][]): boolean {\r\n  // Check if circle intersects polygon edges or is inside polygon\r\n  if (pointInPolygon(center, polygon)) return true;\r\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\r\n    if (distancePointToSegment(center, polygon[j], polygon[i]) <= radius) return true;\r\n  }\r\n  return false;\r\n}\r\n\r\n// Ramer\u2013Douglas\u2013Peucker simplification\r\nexport function polygonSimplify(points: [number, number][], tolerance: number): [number, number][] {\r\n  if (points.length < 3) return points;\r\n  const sqTolerance = tolerance * tolerance;\r\n  function getSqDist(p1: [number, number], p2: [number, number]) {\r\n    const dx = p1[0] - p2[0], dy = p1[1] - p2[1];\r\n    return dx * dx + dy * dy;\r\n  }\r\n  function getSqSegDist(p: [number, number], a: [number, number], b: [number, number]) {\r\n    const x = a[0], y = a[1];\r\n    const dx = b[0] - x;\r\n    const dy = b[1] - y;\r\n    if (dx === 0 && dy === 0) return getSqDist(p, a);\r\n    const t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\r\n    if (t <= 0) return getSqDist(p, a);\r\n    if (t >= 1) return getSqDist(p, b);\r\n    const projX = x + t * dx;\r\n    const projY = y + t * dy;\r\n    const ddx = p[0] - projX;\r\n    const ddy = p[1] - projY;\r\n    return ddx * ddx + ddy * ddy;\r\n  }\r\n\r\n  function simplifyDP(start: number, end: number, out: number[]) {\r\n    let maxDist = 0, index = -1;\r\n    for (let i = start + 1; i < end; i++) {\r\n      const dist = getSqSegDist(points[i], points[start], points[end]);\r\n      if (dist > maxDist) { maxDist = dist; index = i; }\r\n    }\r\n    if (maxDist > sqTolerance && index !== -1) {\r\n      simplifyDP(start, index, out);\r\n      simplifyDP(index, end, out);\r\n    } else {\r\n      out.push(start);\r\n    }\r\n  }\r\n\r\n  const out: number[] = [];\r\n  simplifyDP(0, points.length - 1, out);\r\n  out.push(points.length - 1);\r\n  // map indices to points\r\n  return out.map(i => points[i]);\r\n}\r\n\r\n// Optional: triangulate via earcut (not implemented)\r\n// export function triangulate(polygon: [number, number][]): number[][] {\r\n//   // TODO: Use earcut or similar\r\n//   return [];\r\n// }\r\n", "// svgToPolylines.ts\r\n// Utility to parse SVG and extract polygonal hull outlines for shield/collision use\r\n// Lightweight implementation: depends on global DOMParser (available in jsdom/test envs)\r\n// Supports <polygon>, <polyline>, <rect>, <circle>, <ellipse>, and basic <path> commands (M/L/H/V/Z).\r\n// Coordinates are normalized to viewBox-centered unit space: x' = (x - vb.w/2)/(vb.w/2)\r\n// so that multiplying by ship.radius produces pixel offsets used by the renderer.\r\n\r\nimport { polygonSimplify } from \"../math/polygon\";\r\n\r\n// Simple in-memory cache for svg->polylines results keyed by a hash of the svg string + tolerance.\r\n// Keeps insertion order (Map) so we can evict oldest entries when over capacity.\r\nconst SVG_POLY_CACHE = new Map<string, { ts: number; value: SvgPolylinesResult }>();\r\nconst CACHE_MAX_ENTRIES = 200; // evict oldest when exceeded\r\nconst CACHE_MAX_AGE_MS = 1000 * 60 * 60; // 1 hour\r\nlet CACHE_HITS = 0;\r\nlet CACHE_MISSES = 0;\r\n\r\nexport function getSvgPolylinesCacheStats() {\r\n  return { hits: CACHE_HITS, misses: CACHE_MISSES, entries: SVG_POLY_CACHE.size };\r\n}\r\n\r\nexport function resetSvgPolylinesCacheStats() {\r\n  CACHE_HITS = 0;\r\n  CACHE_MISSES = 0;\r\n}\r\n\r\nexport function clearSvgPolylinesCache() {\r\n  SVG_POLY_CACHE.clear();\r\n}\r\n\r\nfunction hashStringToKey(s: string) {\r\n  // FNV-1a 32-bit\r\n  let h = 2166136261 >>> 0;\r\n  for (let i = 0; i < s.length; i++) {\r\n    h ^= s.charCodeAt(i);\r\n    h = Math.imul(h, 16777619) >>> 0;\r\n  }\r\n  return h.toString(36);\r\n}\r\n\r\n\r\nexport interface SvgPolylinesResult {\r\n  contours: number[][][]; // Array of polylines (each: array of [x, y] pairs)\r\n  bbox: { minX: number; minY: number; maxX: number; maxY: number };\r\n  convexHull?: number[][];\r\n}\r\n\r\nexport interface SvgToPolylinesOptions {\r\n  tolerance?: number; // Curve flattening / simplify tolerance (default: 0.5)\r\n  assetId?: string; // optional asset identifier to key cache\r\n}\r\n\r\nfunction parseViewBox(svgEl: SVGSVGElement | Element | null) {\r\n  const vbAttr = svgEl && (svgEl.getAttribute && svgEl.getAttribute(\"viewBox\"));\r\n  if (vbAttr) {\r\n    const parts = vbAttr.trim().split(/[,\\s]+/).map((s) => parseFloat(s));\r\n    if (parts.length >= 4 && parts.every((n) => !Number.isNaN(n))) {\r\n      return { x: parts[0], y: parts[1], w: parts[2], h: parts[3] };\r\n    }\r\n  }\r\n  // fallback to width/height attributes or default 128x128\r\n  if (svgEl && svgEl.getAttribute) {\r\n    const wAttr = svgEl.getAttribute(\"width\");\r\n    const hAttr = svgEl.getAttribute(\"height\");\r\n    const w = wAttr ? parseFloat(wAttr) || 128 : 128;\r\n    const h = hAttr ? parseFloat(hAttr) || 128 : 128;\r\n    return { x: 0, y: 0, w, h };\r\n  }\r\n  return { x: 0, y: 0, w: 128, h: 128 };\r\n}\r\n\r\n// Matrix helpers: SVG matrix [a b c d e f] maps (x,y) -> (a*x + c*y + e, b*x + d*y + f)\r\ntype Matrix = [number, number, number, number, number, number];\r\nconst IDENTITY_MATRIX: Matrix = [1, 0, 0, 1, 0, 0];\r\nfunction multiplyMatrix(a: Matrix, b: Matrix): Matrix {\r\n  // a * b\r\n  const [a1, a2, a3, a4, a5, a6] = a;\r\n  const [b1, b2, b3, b4, b5, b6] = b;\r\n  return [\r\n    a1 * b1 + a3 * b2,\r\n    a2 * b1 + a4 * b2,\r\n    a1 * b3 + a3 * b4,\r\n    a2 * b3 + a4 * b4,\r\n    a1 * b5 + a3 * b6 + a5,\r\n    a2 * b5 + a4 * b6 + a6,\r\n  ];\r\n}\r\nfunction applyMatrixToPoint(m: Matrix, x: number, y: number): [number, number] {\r\n  const [a, b, c, d, e, f] = m;\r\n  return [a * x + c * y + e, b * x + d * y + f];\r\n}\r\nfunction applyMatrixToPoints(m: Matrix, pts: number[][]) {\r\n  for (let i = 0; i < pts.length; i++) {\r\n    const [x, y] = pts[i];\r\n    const p = applyMatrixToPoint(m, x, y);\r\n    pts[i][0] = p[0]; pts[i][1] = p[1];\r\n  }\r\n}\r\n\r\nfunction isIdentityMatrix(m: Matrix) {\r\n  return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0;\r\n}\r\n\r\nfunction parseTransform(transformStr: string | null): Matrix {\r\n  if (!transformStr) return IDENTITY_MATRIX;\r\n  let m: Matrix = IDENTITY_MATRIX;\r\n  // e.g. translate(10,20) rotate(30) scale(2) matrix(a b c d e f)\r\n  const re = /([a-zA-Z]+)\\s*\\(([^)]+)\\)/g;\r\n  let mm: RegExpExecArray | null;\r\n  while ((mm = re.exec(transformStr))) {\r\n    const cmd = mm[1].trim();\r\n    const raw = mm[2].trim();\r\n    const nums = raw.split(/[\\s,]+/).filter(Boolean).map((s) => parseFloat(s));\r\n    let t: Matrix = IDENTITY_MATRIX;\r\n    try {\r\n      if (cmd === 'matrix' && nums.length >= 6) {\r\n        t = [nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]] as Matrix;\r\n      } else if (cmd === 'translate') {\r\n        const tx = nums[0] || 0; const ty = nums[1] || 0; t = [1,0,0,1,tx,ty] as Matrix;\r\n      } else if (cmd === 'scale') {\r\n        const sx = nums[0] || 1; const sy = typeof nums[1] === 'number' ? nums[1] : sx; t = [sx,0,0,sy,0,0] as Matrix;\r\n      } else if (cmd === 'rotate') {\r\n        const a = (nums[0] || 0) * Math.PI / 180;\r\n        const cosA = Math.cos(a), sinA = Math.sin(a);\r\n        if (nums.length >= 3) {\r\n          const cx = nums[1], cy = nums[2];\r\n          // translate(cx,cy) * rotate * translate(-cx,-cy)\r\n          const to = [1,0,0,1,cx,cy] as Matrix;\r\n          const rot = [cosA, sinA, -sinA, cosA, 0, 0] as Matrix;\r\n          const back = [1,0,0,1,-cx,-cy] as Matrix;\r\n          t = multiplyMatrix(to, multiplyMatrix(rot, back));\r\n        } else {\r\n          t = [cosA, sinA, -sinA, cosA, 0, 0] as Matrix;\r\n        }\r\n      } else if (cmd === 'skewX') {\r\n        const a = (nums[0] || 0) * Math.PI / 180; t = [1,0,Math.tan(a),1,0,0] as Matrix;\r\n      } else if (cmd === 'skewY') {\r\n        const a = (nums[0] || 0) * Math.PI / 180; t = [1,Math.tan(a),0,1,0,0] as Matrix;\r\n      }\r\n    } catch (e) { t = IDENTITY_MATRIX; }\r\n    // concatenation: new total = m * t (apply t after existing)\r\n    m = multiplyMatrix(m, t);\r\n  }\r\n  return m;\r\n}\r\n\r\nfunction computeCumulativeTransform(el: Element | null, svgEl: Element | null): Matrix {\r\n  let m: Matrix = IDENTITY_MATRIX;\r\n  const chain: Element[] = [];\r\n  let cur: Element | null = el as Element | null;\r\n  while (cur && cur !== svgEl && cur.nodeType === 1) {\r\n    chain.push(cur);\r\n    cur = cur.parentElement;\r\n  }\r\n  // include svgEl transform if present\r\n  if (svgEl && svgEl !== el) chain.push(svgEl as Element);\r\n  // accumulate from root down to element\r\n  for (let i = chain.length - 1; i >= 0; i--) {\r\n    const e = chain[i];\r\n    try {\r\n      const t = parseTransform(e.getAttribute && e.getAttribute('transform'));\r\n      m = multiplyMatrix(m, t);\r\n    } catch (e) {}\r\n  }\r\n  return m;\r\n}\r\n\r\nfunction parsePointsAttr(val: string) {\r\n  const parts = val.trim().split(/[,\\s]+/).map((s) => s.trim()).filter(Boolean);\r\n  const pts: number[][] = [];\r\n  for (let i = 0; i + 1 < parts.length; i += 2) {\r\n    const x = parseFloat(parts[i]);\r\n    const y = parseFloat(parts[i + 1]);\r\n    if (!Number.isNaN(x) && !Number.isNaN(y)) pts.push([x, y]);\r\n  }\r\n  return pts;\r\n}\r\n\r\nfunction applyViewBoxNormalization(points: number[][], vb: { x: number; y: number; w: number; h: number }) {\r\n  // Normalize coordinates into renderer-local unit space centered at viewBox center.\r\n  // Correctly account for viewBox minX/minY (vb.x, vb.y). Previous logic incorrectly\r\n  // subtracted half-width/height instead of viewBox origin + half-size which broke\r\n  // assets with non-zero viewBox origins.\r\n  const hw = (vb.w || 1) / 2;\r\n  const hh = (vb.h || 1) / 2;\r\n  const cx = (vb.x || 0) + hw;\r\n  const cy = (vb.y || 0) + hh;\r\n  return points.map(([x, y]) => [((x - cx) / hw) as number, ((y - cy) / hh) as number]);\r\n}\r\n\r\nfunction sampleCircle(cx: number, cy: number, r: number, segments = 48) {\r\n  const pts: number[][] = [];\r\n  for (let i = 0; i < segments; i++) {\r\n    const a = (i / segments) * Math.PI * 2;\r\n    pts.push([cx + Math.cos(a) * r, cy + Math.sin(a) * r]);\r\n  }\r\n  return pts;\r\n}\r\n\r\n// Path parser: supports M/m, L/l, H/h, V/v, Z/z, C/c, S/s, Q/q, T/t, A/a with curve flattening.\r\nfunction parsePathCommands(d: string, tolerance: number) {\r\n  // Enhanced path parser supporting M/m, L/l, H/h, V/v, Z/z, C/c, S/s, Q/q, T/t, A/a\r\n  const tokens = d.replace(/,/g, ' ').replace(/\\s+/g, ' ').trim();\r\n  const cmdRe = /([MmLlHhVvZzCcSsQqTtAa])([^MmLlHhVvZzCcSsQqTtAa]*)/g;\r\n  const pts: number[][] = [];\r\n  let curX = 0,\r\n    curY = 0;\r\n  let lastCpx: number | null = null,\r\n    lastCpy: number | null = null; // for S/T shorthand\r\n  let m: RegExpExecArray | null;\r\n  while ((m = cmdRe.exec(tokens))) {\r\n    const cmd = m[1];\r\n    const rawArgs = m[2].trim();\r\n    const args = rawArgs ? rawArgs.split(/[\\s,]+/).filter(Boolean).map((s) => parseFloat(s)) : [];\r\n    let ai = 0;\r\n    if (cmd === 'Z' || cmd === 'z') {\r\n      // close path -> no-op for now\r\n      continue;\r\n    }\r\n    if (cmd === 'H' || cmd === 'h') {\r\n      while (ai < args.length) {\r\n        const x = args[ai++];\r\n        curX = cmd === 'h' ? curX + x : x;\r\n        pts.push([curX, curY]);\r\n      }\r\n      lastCpx = lastCpy = null;\r\n      continue;\r\n    }\r\n    if (cmd === 'V' || cmd === 'v') {\r\n      while (ai < args.length) {\r\n        const y = args[ai++];\r\n        curY = cmd === 'v' ? curY + y : y;\r\n        pts.push([curX, curY]);\r\n      }\r\n      lastCpx = lastCpy = null;\r\n      continue;\r\n    }\r\n    // M/m and L/l\r\n    if (cmd === 'M' || cmd === 'm' || cmd === 'L' || cmd === 'l') {\r\n      while (ai + 1 < args.length) {\r\n        const ax = args[ai++], ay = args[ai++];\r\n        if (cmd === 'm' || cmd === 'l') {\r\n          curX += ax; curY += ay;\r\n        } else {\r\n          curX = ax; curY = ay;\r\n        }\r\n        pts.push([curX, curY]);\r\n      }\r\n      lastCpx = lastCpy = null;\r\n      continue;\r\n    }\r\n    // Cubic commands C/c: (x1 y1 x2 y2 x y)+\r\n    if (cmd === 'C' || cmd === 'c') {\r\n      while (ai + 5 < args.length) {\r\n        const x1 = args[ai++], y1 = args[ai++], x2 = args[ai++], y2 = args[ai++], x = args[ai++], y = args[ai++];\r\n        const cp1x = cmd === 'c' ? curX + x1 : x1;\r\n        const cp1y = cmd === 'c' ? curY + y1 : y1;\r\n        const cp2x = cmd === 'c' ? curX + x2 : x2;\r\n        const cp2y = cmd === 'c' ? curY + y2 : y2;\r\n        const ex = cmd === 'c' ? curX + x : x;\r\n        const ey = cmd === 'c' ? curY + y : y;\r\n  // flatten cubic from (curX,curY) -> (ex,ey)\r\n  const cubicPts = flattenCubicBezier([curX, curY], [cp1x, cp1y], [cp2x, cp2y], [ex, ey], tolerance);\r\n  // append (skip initial duplicate if present)\r\n  for (let i = 1; i < cubicPts.length; i++) pts.push(cubicPts[i]);\r\n        curX = ex; curY = ey;\r\n        lastCpx = cp2x; lastCpy = cp2y;\r\n      }\r\n      continue;\r\n    }\r\n    // Smooth cubic S/s: (x2 y2 x y)+ (reflect previous control)\r\n    if (cmd === 'S' || cmd === 's') {\r\n      while (ai + 3 < args.length) {\r\n        const x2 = args[ai++], y2 = args[ai++], x = args[ai++], y = args[ai++];\r\n        let cp1x = curX, cp1y = curY;\r\n        if (lastCpx != null && lastCpy != null) {\r\n          cp1x = curX + (curX - lastCpx);\r\n          cp1y = curY + (curY - lastCpy);\r\n        }\r\n        const cp2x = cmd === 's' ? curX + x2 : x2;\r\n        const cp2y = cmd === 's' ? curY + y2 : y2;\r\n        const ex = cmd === 's' ? curX + x : x;\r\n        const ey = cmd === 's' ? curY + y : y;\r\n  const cubicPts2 = flattenCubicBezier([curX, curY], [cp1x, cp1y], [cp2x, cp2y], [ex, ey], tolerance);\r\n  for (let i = 1; i < cubicPts2.length; i++) pts.push(cubicPts2[i]);\r\n        lastCpx = cp2x; lastCpy = cp2y;\r\n        curX = ex; curY = ey;\r\n      }\r\n      continue;\r\n    }\r\n    // Quadratic Q/q: (x1 y1 x y)+\r\n    if (cmd === 'Q' || cmd === 'q') {\r\n      while (ai + 3 < args.length) {\r\n        const x1 = args[ai++], y1 = args[ai++], x = args[ai++], y = args[ai++];\r\n        const qx1 = cmd === 'q' ? curX + x1 : x1;\r\n        const qy1 = cmd === 'q' ? curY + y1 : y1;\r\n        const ex = cmd === 'q' ? curX + x : x;\r\n        const ey = cmd === 'q' ? curY + y : y;\r\n  const qpts = flattenQuadraticBezier([curX, curY], [qx1, qy1], [ex, ey], tolerance);\r\n  for (let i = 1; i < qpts.length; i++) pts.push(qpts[i]);\r\n        lastCpx = qx1; lastCpy = qy1;\r\n        curX = ex; curY = ey;\r\n      }\r\n      continue;\r\n    }\r\n    // Smooth quadratic T/t: (x y)+, reflect previous control point\r\n    if (cmd === 'T' || cmd === 't') {\r\n      while (ai + 1 < args.length) {\r\n        const x = args[ai++], y = args[ai++];\r\n        let qx1 = curX, qy1 = curY;\r\n        if (lastCpx != null && lastCpy != null) {\r\n          qx1 = curX + (curX - lastCpx);\r\n          qy1 = curY + (curY - lastCpy);\r\n        }\r\n        const ex = cmd === 't' ? curX + x : x;\r\n        const ey = cmd === 't' ? curY + y : y;\r\n  const qpts2 = flattenQuadraticBezier([curX, curY], [qx1, qy1], [ex, ey], tolerance);\r\n  for (let i = 1; i < qpts2.length; i++) pts.push(qpts2[i]);\r\n        lastCpx = qx1; lastCpy = qy1;\r\n        curX = ex; curY = ey;\r\n      }\r\n      continue;\r\n    }\r\n    // Arc A/a: (rx ry xAxisRotation large-arc-flag sweep-flag x y)+\r\n    if (cmd === 'A' || cmd === 'a') {\r\n      while (ai + 6 < args.length) {\r\n        const rx = args[ai++], ry = args[ai++], xrot = args[ai++], laf = args[ai++], sf = args[ai++], x = args[ai++], y = args[ai++];\r\n        const ex = cmd === 'a' ? curX + x : x;\r\n        const ey = cmd === 'a' ? curY + y : y;\r\n  const arcPts = arcToPoints(curX, curY, ex, ey, rx, ry, xrot, laf ? 1 : 0, sf ? 1 : 0, Math.max(0.1, tolerance));\r\n        // arcPts includes start..end; skip first since it's cur point\r\n        for (let i = 1; i < arcPts.length; i++) pts.push(arcPts[i]);\r\n        curX = ex; curY = ey;\r\n        lastCpx = lastCpy = null;\r\n      }\r\n      continue;\r\n    }\r\n    // Unknown command -> ignore\r\n  }\r\n  return pts;\r\n}\r\n\r\n// Helpers: flatten cubic/quadratic Beziers and approximate arcs\r\nfunction distToSegmentSq(px: number, py: number, x1: number, y1: number, x2: number, y2: number) {\r\n  const dx = x2 - x1, dy = y2 - y1;\r\n  if (dx === 0 && dy === 0) return (px - x1) * (px - x1) + (py - y1) * (py - y1);\r\n  const t = ((px - x1) * dx + (py - y1) * dy) / (dx * dx + dy * dy);\r\n  if (t <= 0) return (px - x1) * (px - x1) + (py - y1) * (py - y1);\r\n  if (t >= 1) return (px - x2) * (px - x2) + (py - y2) * (py - y2);\r\n  const projx = x1 + t * dx, projy = y1 + t * dy;\r\n  return (px - projx) * (px - projx) + (py - projy) * (py - projy);\r\n}\r\n\r\nfunction flattenCubicBezier(p0: number[], p1: number[], p2: number[], p3: number[], tolerance: number): number[][] {\r\n  // recursive subdivision producing a sequence of points from p0..p3\r\n  const tolSq = tolerance * tolerance;\r\n  const out: number[][] = [];\r\n  function recurse(a: number[], b: number[], c: number[], d: number[]) {\r\n    const d1 = distToSegmentSq(b[0], b[1], a[0], a[1], d[0], d[1]);\r\n    const d2 = distToSegmentSq(c[0], c[1], a[0], a[1], d[0], d[1]);\r\n    if (Math.max(d1, d2) <= tolSq) {\r\n      out.push([d[0], d[1]]);\r\n      return;\r\n    }\r\n    // subdivide via de Casteljau\r\n    const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\r\n    const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\r\n    const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\r\n    const abc = [(ab[0] + bc[0]) / 2, (ab[1] + bc[1]) / 2];\r\n    const bcd = [(bc[0] + cd[0]) / 2, (bc[1] + cd[1]) / 2];\r\n    const abcd = [(abc[0] + bcd[0]) / 2, (abc[1] + bcd[1]) / 2];\r\n    recurse(a, ab, abc, abcd);\r\n    recurse(abcd, bcd, cd, d);\r\n  }\r\n  // Start with the initial point\r\n  out.push([p0[0], p0[1]]);\r\n  recurse(p0, p1, p2, p3);\r\n  return out;\r\n}\r\n\r\nfunction flattenQuadraticBezier(p0: number[], p1: number[], p2: number[], tolerance: number): number[][] {\r\n  // convert to cubic and reuse cubic flattener\r\n  const cp1 = [p0[0] + (2 / 3) * (p1[0] - p0[0]), p0[1] + (2 / 3) * (p1[1] - p0[1])];\r\n  const cp2 = [p2[0] + (2 / 3) * (p1[0] - p2[0]), p2[1] + (2 / 3) * (p1[1] - p2[1])];\r\n  const pts = flattenCubicBezier(p0, cp1, cp2, p2, tolerance);\r\n  if (pts.length >= 4) return pts;\r\n  // fallback: uniform sampling of quadratic if subdivision produced too few points\r\n  const samples = 4;\r\n  const out: number[][] = [];\r\n  for (let i = 0; i <= samples; i++) {\r\n    const t = i / samples;\r\n    const mt = 1 - t;\r\n    const x = mt * mt * p0[0] + 2 * mt * t * p1[0] + t * t * p2[0];\r\n    const y = mt * mt * p0[1] + 2 * mt * t * p1[1] + t * t * p2[1];\r\n    out.push([x, y]);\r\n  }\r\n  return out;\r\n}\r\n\r\nfunction arcToPoints(x1: number, y1: number, x2: number, y2: number, rx: number, ry: number, angle: number, largeArcFlag: number, sweepFlag: number, tolerance: number) {\r\n  // Implementation based on SVG spec (convert endpoint to center parameterization)\r\n  // angle in degrees\r\n  const rad = (angle * Math.PI) / 180;\r\n  const cosA = Math.cos(rad), sinA = Math.sin(rad);\r\n  // Step 1: handle degenerate\r\n  if (rx === 0 || ry === 0) return [[x1, y1], [x2, y2]];\r\n  // Step 2: compute (x1', y1')\r\n  const dx = (x1 - x2) / 2, dy = (y1 - y2) / 2;\r\n  const x1p = cosA * dx + sinA * dy;\r\n  const y1p = -sinA * dx + cosA * dy;\r\n  // ensure radii large enough\r\n  let rxAbs = Math.abs(rx), ryAbs = Math.abs(ry);\r\n  const lambda = (x1p * x1p) / (rxAbs * rxAbs) + (y1p * y1p) / (ryAbs * ryAbs);\r\n  if (lambda > 1) {\r\n    const s = Math.sqrt(lambda);\r\n    rxAbs *= s; ryAbs *= s;\r\n  }\r\n  const rx2 = rxAbs * rxAbs, ry2 = ryAbs * ryAbs;\r\n  const sign = largeArcFlag === sweepFlag ? -1 : 1;\r\n  const num = rx2 * ry2 - rx2 * y1p * y1p - ry2 * x1p * x1p;\r\n  const denom = rx2 * y1p * y1p + ry2 * x1p * x1p;\r\n  let cc = 0;\r\n  if (denom !== 0) cc = Math.max(0, num / denom);\r\n  const coef = sign * Math.sqrt(cc || 0);\r\n  const cxp = (coef * (rxAbs * y1p)) / ryAbs;\r\n  const cyp = (coef * -(ryAbs * x1p)) / rxAbs;\r\n  // center in original coords\r\n  const cx = cosA * cxp - sinA * cyp + (x1 + x2) / 2;\r\n  const cy = sinA * cxp + cosA * cyp + (y1 + y2) / 2;\r\n  // angles\r\n  function angleBetween(ux: number, uy: number, vx: number, vy: number) {\r\n    const dot = ux * vx + uy * vy;\r\n    const l = Math.hypot(ux, uy) * Math.hypot(vx, vy);\r\n    let a = Math.acos(Math.max(-1, Math.min(1, dot / (l || 1))));\r\n    if (ux * vy - uy * vx < 0) a = -a;\r\n    return a;\r\n  }\r\n  const ux = (x1p - cxp) / rxAbs, uy = (y1p - cyp) / ryAbs;\r\n  const vx = (-x1p - cxp) / rxAbs, vy = (-y1p - cyp) / ryAbs;\r\n  let startAng = angleBetween(1, 0, ux, uy);\r\n  let deltaAng = angleBetween(ux, uy, vx, vy);\r\n  if (!sweepFlag && deltaAng > 0) deltaAng -= 2 * Math.PI;\r\n  else if (sweepFlag && deltaAng < 0) deltaAng += 2 * Math.PI;\r\n  // choose number of segments based on arc length and tolerance\r\n  const r = Math.max(rxAbs, ryAbs);\r\n  const estLen = Math.abs(deltaAng) * r;\r\n  const segCount = Math.max(4, Math.ceil(estLen / Math.max(1, tolerance * 4)));\r\n  const pts: number[][] = [];\r\n  for (let i = 0; i <= segCount; i++) {\r\n    const t = i / segCount;\r\n    const ang = startAng + t * deltaAng;\r\n    const cosAng = Math.cos(ang), sinAng = Math.sin(ang);\r\n    const xp = rxAbs * cosAng;\r\n    const yp = ryAbs * sinAng;\r\n    const x = cosA * xp - sinA * yp + cx;\r\n    const y = sinA * xp + cosA * yp + cy;\r\n    pts.push([x, y]);\r\n  }\r\n  return pts;\r\n}\r\n\r\nexport function svgToPolylines(svgString: string, options: SvgToPolylinesOptions = {}): SvgPolylinesResult {\r\n  const tolerance = typeof options.tolerance === 'number' ? options.tolerance : 0.1;\r\n  // Attempt cache lookup\r\n  try {\r\n    const key = options && options.assetId ? `${options.assetId}::${tolerance}` : hashStringToKey(svgString + '::' + tolerance);\r\n    const entry = SVG_POLY_CACHE.get(key);\r\n    if (entry) {\r\n      // check age\r\n      if (Date.now() - entry.ts < CACHE_MAX_AGE_MS) {\r\n        // move to back (most recent)\r\n        SVG_POLY_CACHE.delete(key);\r\n        SVG_POLY_CACHE.set(key, entry);\r\n        CACHE_HITS++;\r\n        return entry.value;\r\n      }\r\n      // expired\r\n      SVG_POLY_CACHE.delete(key);\r\n      CACHE_MISSES++;\r\n    } else {\r\n      CACHE_MISSES++;\r\n    }\r\n  } catch (e) {}\r\n  // Use global DOMParser when available\r\n  const DP = (globalThis as any).DOMParser;\r\n  if (!DP) {\r\n    // In very restricted envs, attempt to fallback with a minimal regex-based extraction\r\n    // but prefer envs with DOMParser (jsdom in tests)\r\n    throw new Error('DOMParser not available in this environment');\r\n  }\r\n  const parser = new DP();\r\n  const doc = parser.parseFromString(svgString, 'image/svg+xml');\r\n  const svgEl = doc.querySelector('svg') || doc.documentElement;\r\n  const vb = parseViewBox(svgEl as any);\r\n\r\n  const contours: number[][][] = [];\r\n\r\n  // Helper to push normalized contour (and simplify)\r\n  function pushContour(raw: number[][]) {\r\n    if (!raw || raw.length === 0) return;\r\n    // close if not closed\r\n    const first = raw[0];\r\n    const last = raw[raw.length - 1];\r\n    if (first[0] !== last[0] || first[1] !== last[1]) {\r\n      // do not force duplicate closing point; many consumers expect open polygons\r\n    }\r\n    const norm = applyViewBoxNormalization(raw, vb);\r\n    // simplify\r\n    const simp = polygonSimplify(norm as any, tolerance as number) as number[][];\r\n    if (simp && simp.length >= 2) contours.push(simp);\r\n  }\r\n\r\n  // polygon / polyline\r\n  const polys = Array.from(doc.querySelectorAll('polygon, polyline')) as Element[];\r\n  for (const el of polys) {\r\n    const ptsAttr = (el as Element).getAttribute('points') || '';\r\n    const pts = parsePointsAttr(ptsAttr);\r\n    try {\r\n      const mtx = computeCumulativeTransform(el, svgEl as Element);\r\n      if (!isIdentityMatrix(mtx) && pts.length) applyMatrixToPoints(mtx, pts);\r\n    } catch (e) {}\r\n    pushContour(pts);\r\n  }\r\n\r\n  // rect\r\n  const rects = Array.from(doc.querySelectorAll('rect')) as Element[];\r\n  for (const r of rects) {\r\n    const x = parseFloat((r as Element).getAttribute('x') || '0');\r\n    const y = parseFloat((r as Element).getAttribute('y') || '0');\r\n    const w = parseFloat((r as Element).getAttribute('width') || '0');\r\n    const h = parseFloat((r as Element).getAttribute('height') || '0');\r\n    const pts = [[x, y], [x + w, y], [x + w, y + h], [x, y + h]];\r\n    try {\r\n      const mtx = computeCumulativeTransform(r, svgEl as Element);\r\n      if (!isIdentityMatrix(mtx)) applyMatrixToPoints(mtx, pts);\r\n    } catch (e) {}\r\n    pushContour(pts);\r\n  }\r\n\r\n  // circle\r\n  const circles = Array.from(doc.querySelectorAll('circle')) as Element[];\r\n  for (const c of circles) {\r\n    const cx = parseFloat((c as Element).getAttribute('cx') || '0');\r\n    const cy = parseFloat((c as Element).getAttribute('cy') || '0');\r\n    const r = parseFloat((c as Element).getAttribute('r') || '0');\r\n    if (r > 0) {\r\n      const pts = sampleCircle(cx, cy, r, 24);\r\n      try {\r\n        const mtx = computeCumulativeTransform(c, svgEl as Element);\r\n        if (!isIdentityMatrix(mtx)) applyMatrixToPoints(mtx, pts);\r\n      } catch (ex) {}\r\n      pushContour(pts);\r\n    }\r\n  }\r\n\r\n  // ellipse\r\n  const ellipses = Array.from(doc.querySelectorAll('ellipse')) as Element[];\r\n  for (const e of ellipses) {\r\n    const cx = parseFloat((e as Element).getAttribute('cx') || '0');\r\n    const cy = parseFloat((e as Element).getAttribute('cy') || '0');\r\n    const rx = parseFloat((e as Element).getAttribute('rx') || '0');\r\n    const ry = parseFloat((e as Element).getAttribute('ry') || '0');\r\n    if (rx > 0 && ry > 0) {\r\n      const pts: number[][] = [];\r\n      const segs = 48;\r\n      for (let i = 0; i < segs; i++) {\r\n        const a = (i / segs) * Math.PI * 2;\r\n        pts.push([cx + Math.cos(a) * rx, cy + Math.sin(a) * ry]);\r\n      }\r\n      try {\r\n        const mtx = computeCumulativeTransform(e, svgEl as Element);\r\n        if (!isIdentityMatrix(mtx)) applyMatrixToPoints(mtx, pts);\r\n      } catch (ex) {}\r\n      pushContour(pts);\r\n    }\r\n  }\r\n\r\n  // simple path parser (no curves)\r\n  const paths = Array.from(doc.querySelectorAll('path')) as Element[];\r\n  for (const p of paths) {\r\n    const d = (p as Element).getAttribute('d') || '';\r\n    if (!d.trim()) continue;\r\n    try {\r\n      const pts = parsePathCommands(d, tolerance);\r\n      try {\r\n        const mtx = computeCumulativeTransform(p, svgEl as Element);\r\n        if (!isIdentityMatrix(mtx) && pts.length) applyMatrixToPoints(mtx, pts);\r\n      } catch (ex) {}\r\n      pushContour(pts);\r\n    } catch (e) {\r\n      // ignore complex paths\r\n    }\r\n  }\r\n\r\n  // Compute bbox in normalized units\r\n  let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;\r\n  for (const c of contours) {\r\n    for (const [x, y] of c) {\r\n      if (x < minX) minX = x;\r\n      if (y < minY) minY = y;\r\n      if (x > maxX) maxX = x;\r\n      if (y > maxY) maxY = y;\r\n    }\r\n  }\r\n  if (minX === Infinity) {\r\n    minX = 0; minY = 0; maxX = 0; maxY = 0;\r\n  }\r\n\r\n  const result = { contours, bbox: { minX, minY, maxX, maxY } } as SvgPolylinesResult;\r\n  // store in cache\r\n  try {\r\n    const key = options && options.assetId ? `${options.assetId}::${tolerance}` : hashStringToKey(svgString + '::' + tolerance);\r\n    SVG_POLY_CACHE.set(key, { ts: Date.now(), value: result });\r\n    // evict if over capacity (simple FIFO)\r\n    while (SVG_POLY_CACHE.size > CACHE_MAX_ENTRIES) {\r\n      const firstKey = SVG_POLY_CACHE.keys().next().value;\r\n      if (!firstKey) break;\r\n      SVG_POLY_CACHE.delete(firstKey);\r\n    }\r\n  } catch (e) {}\r\n\r\n  return result;\r\n}\r\n\r\n// Note: this is intentionally a small, dependency-free implementation that\r\n// covers the common SVG constructs we use in assets. For full support (cubic\r\n// Beziers, arcs), replace the path parser/flattening with a robust library.\r\n", "import { svgToPolylines, SvgPolylinesResult } from './svgToPolylines';\r\n\r\nlet _svgHashes: Record<string, string> | null = null;\r\nfunction loadSvgHashes() {\r\n  if (_svgHashes !== null) return _svgHashes;\r\n  // In a browser environment, direct file system access is not possible.\r\n  // If svg hashes are needed, they should be pre-loaded or fetched.\r\n  // For now, return an empty object to prevent build errors.\r\n  _svgHashes = {};\r\n  return _svgHashes;\r\n}\r\n\r\n// Utility: extract hull outline polylines from SVG for shield/collision\r\n// Accepts optional `assetFilename` parameter so callers can supply the source filename\r\n// (used to form an `assetId` that keys the svgToPolylines cache). Backwards compatible\r\n// call: `getHullOutlineFromSvg(svgText, tolerance)` still works.\r\nexport function getHullOutlineFromSvg(svgText: string, tolerance: number = 1.5, assetFilename?: string): SvgPolylinesResult {\r\n  // Optionally strip non-hull elements for cleaner outline\r\n  const hullSvg = stripHullOnly(svgText);\r\n  try {\r\n    let assetId: string | undefined = undefined;\r\n    if (assetFilename) {\r\n      try {\r\n        assetId = assetFilename; // Simplified for browser environment\r\n      } catch (e) { assetId = assetFilename; }\r\n    }\r\n    return svgToPolylines(hullSvg, assetId ? { tolerance, assetId } : { tolerance });\r\n  } catch (e) {\r\n    // fallback to best-effort parsing\r\n    return svgToPolylines(hullSvg, { tolerance });\r\n  }\r\n}\r\n/* eslint-disable */\r\n// Clean authoritative svgLoader implementation (single export)\r\n\r\nexport function parseSvgForMounts(svgText: string) {\r\n  try {\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(svgText, 'image/svg+xml');\r\n    const svg = doc.querySelector('svg');\r\n    if (!svg) return { mounts: [], engineMounts: [], viewBox: null, colorRegions: [] };\r\n    const vbAttr = svg.getAttribute('viewBox');\r\n    let viewBox: { w: number; h: number } | null = null;\r\n    if (vbAttr) {\r\n      // viewBox syntax: minX minY width height\r\n      const parts = vbAttr.trim().split(/[\\s,]+/).map((s) => parseFloat(s));\r\n      if (parts.length >= 4 && !isNaN(parts[2]) && !isNaN(parts[3])) {\r\n        viewBox = { w: parts[2], h: parts[3] };\r\n      }\r\n    }\r\n    const toNumber = (v: string | null) => { const n = v == null ? NaN : parseFloat(v); return isNaN(n) ? null : n; };\r\n\r\n    // Mounts: data-mount or class 'turret'\r\n    const mountEls = Array.from(svg.querySelectorAll('[data-mount], .turret')) as Element[];\r\n    const mounts = mountEls.map((el) => {\r\n      const slot = el.getAttribute('data-mount') || (el.classList && (el.classList.contains('turret') ? 'turret' : null));\r\n      // center calculation for rects: x + width/2, y + height/2. For circles/ellipses use cx/cy.\r\n      const xAttr = el.getAttribute('cx') || el.getAttribute('x');\r\n      const yAttr = el.getAttribute('cy') || el.getAttribute('y');\r\n      let x = toNumber(xAttr);\r\n      let y = toNumber(yAttr);\r\n      if ((x == null || y == null) && el.getAttribute('width') && el.getAttribute('height')) {\r\n        const rx = toNumber(el.getAttribute('x'));\r\n        const ry = toNumber(el.getAttribute('y'));\r\n        const rw = toNumber(el.getAttribute('width'));\r\n        const rh = toNumber(el.getAttribute('height'));\r\n        if (rx != null && rw != null) x = rx + rw / 2;\r\n        if (ry != null && rh != null) y = ry + rh / 2;\r\n      }\r\n      return { x, y, slot };\r\n    });\r\n\r\n    // Engine mounts: data-engine-mount or class 'engine'\r\n    const engineEls = Array.from(svg.querySelectorAll('[data-engine-mount], .engine')) as Element[];\r\n    const engineMounts = engineEls.map((el) => {\r\n      const slot = el.getAttribute('data-engine-mount') || (el.classList && (el.classList.contains('engine') ? 'engine' : null));\r\n      const xAttr = el.getAttribute('cx') || el.getAttribute('x');\r\n      const yAttr = el.getAttribute('cy') || el.getAttribute('y');\r\n      let x = toNumber(xAttr);\r\n      let y = toNumber(yAttr);\r\n      if ((x == null || y == null) && el.getAttribute('width') && el.getAttribute('height')) {\r\n        const rx = toNumber(el.getAttribute('x'));\r\n        const ry = toNumber(el.getAttribute('y'));\r\n        const rw = toNumber(el.getAttribute('width'));\r\n        const rh = toNumber(el.getAttribute('height'));\r\n        if (rx != null && rw != null) x = rx + rw / 2;\r\n        if (ry != null && rh != null) y = ry + rh / 2;\r\n      }\r\n      return { x, y, slot };\r\n    });\r\n    const colorRegions = Array.from(svg.querySelectorAll('[data-team],[data-team-slot],[class*=\"team-fill-\"]')).map((el) => ({\r\n      tag: el.tagName,\r\n      id: (el as Element).id || null,\r\n      role: el.getAttribute('data-team') || el.getAttribute('data-team-slot') || null,\r\n    }));\r\n  return { mounts, engineMounts, viewBox, colorRegions };\r\n  } catch (e) {\r\n    return { mounts: [], engineMounts: [], viewBox: null, colorRegions: [] };\r\n  }\r\n}\r\n\r\nexport function applyTeamColorsToSvg(svgText: string, mapping: Record<string, string>, options?: { applyTo?: 'fill' | 'stroke' | 'both' }): string {\r\n  try {\r\n    const parser = new DOMParser();\r\n    const doc = parser.parseFromString(svgText, 'image/svg+xml');\r\n    const svg = doc.querySelector('svg');\r\n    if (!svg) return svgText;\r\n    const applyDefault = options && options.applyTo ? options.applyTo : 'both';\r\n    const els = Array.from(svg.querySelectorAll('[data-team],[data-team-slot],[data-team-slot-fill],[data-team-slot-stroke],[class*=\"team-fill-\"]')) as Element[];\r\n    for (const el of els) {\r\n      try {\r\n        const role = (el.getAttribute('data-team') || el.getAttribute('data-team-slot') || '').trim();\r\n        const fillRoleAttr = (el.getAttribute('data-team-slot-fill') || '').trim();\r\n        const strokeRoleAttr = (el.getAttribute('data-team-slot-stroke') || '').trim();\r\n        const cls = el.getAttribute('class') || '';\r\n        let classRole: string | undefined;\r\n        try { const m = cls.match(/team-fill-([a-z0-9_-]+)/i); if (m) classRole = m[1]; } catch (e) { classRole = undefined; }\r\n        const resolvedFillRole = fillRoleAttr || role || classRole || 'primary';\r\n        const resolvedStrokeRole = strokeRoleAttr || role || classRole || 'trim';\r\n        const fillColor = mapping[resolvedFillRole];\r\n        const strokeColor = mapping[resolvedStrokeRole] || fillColor;\r\n        if (!fillColor && !strokeColor) continue;\r\n        const applyAttr = (el.getAttribute('data-team-apply') || '').trim().toLowerCase();\r\n        const apply = applyAttr === 'fill' || applyAttr === 'stroke' ? (applyAttr as 'fill' | 'stroke') : applyDefault;\r\n        const setStyleProp = (prop: 'fill' | 'stroke', value: string) => {\r\n          try {\r\n            el.setAttribute(prop, value);\r\n            const cur = el.getAttribute('style') || '';\r\n            const re = new RegExp('(^|;)\\\\s*' + prop + '\\\\s*:\\\\s*[^;]+', 'i');\r\n            if (re.test(cur)) {\r\n              const replaced = cur.replace(re, `$1 ${prop}: ${value}`);\r\n              el.setAttribute('style', replaced);\r\n            } else {\r\n              const next = cur ? (cur + `; ${prop}: ${value}`) : `${prop}: ${value}`;\r\n              el.setAttribute('style', next);\r\n            }\r\n          } catch (e) {}\r\n        };\r\n        if ((apply === 'fill' || apply === 'both') && fillColor) setStyleProp('fill', fillColor);\r\n        if ((apply === 'stroke' || apply === 'both') && strokeColor) setStyleProp('stroke', strokeColor);\r\n      } catch (e) { continue; }\r\n    }\r\n    return new XMLSerializer().serializeToString(svg);\r\n  } catch (e) { return svgText; }\r\n}\r\n\r\nfunction encodeSvgDataUrl(svgText: string) {\r\n  try { return 'data:image/svg+xml;utf8,' + encodeURIComponent(svgText); } catch (e) { return 'data:image/svg+xml;utf8,' + svgText; }\r\n}\r\n\r\nasync function tryLoadUrlToCanvas(url: string, outW: number, outH: number): Promise<HTMLCanvasElement | undefined> {\r\n  return new Promise((resolve) => {\r\n    let settled = false;\r\n    const to = setTimeout(() => {\r\n      if (!settled) {\r\n        settled = true;\r\n        resolve(undefined);\r\n      }\r\n    }, 500);\r\n    const safeResolve = (v?: HTMLCanvasElement | undefined) => {\r\n      if (!settled) {\r\n        settled = true;\r\n        try { clearTimeout(to); } catch (e) {}\r\n        resolve(v);\r\n      }\r\n    };\r\n    try {\r\n      const img = new Image();\r\n      img.onload = () => {\r\n        try {\r\n          const c = document.createElement('canvas');\r\n          c.width = outW; c.height = outH;\r\n          const ctx = c.getContext('2d');\r\n          if (!ctx) return safeResolve(undefined);\r\n          ctx.clearRect(0, 0, outW, outH);\r\n          ctx.drawImage(img, 0, 0, outW, outH);\r\n          safeResolve(c);\r\n        } catch (e) { safeResolve(undefined); }\r\n      };\r\n      img.onerror = () => safeResolve(undefined);\r\n      img.src = url;\r\n    } catch (e) { safeResolve(undefined); }\r\n  });\r\n}\r\n\r\nfunction canvasHasOpaquePixels(c: HTMLCanvasElement, thresholdAlpha = 8): boolean {\r\n  try {\r\n    const ctx = c.getContext('2d'); if (!ctx) return false;\r\n    const w = Math.max(1, Math.min(16, c.width)); const h = Math.max(1, Math.min(16, c.height));\r\n    const data = ctx.getImageData(0, 0, w, h).data;\r\n    for (let i = 3; i < data.length; i += 4) if (data[i] > thresholdAlpha) return true;\r\n  } catch (e) { return true; }\r\n  return false;\r\n}\r\n\r\nexport async function rasterizeSvgToCanvasAsync(svgText: string, outW: number, outH: number): Promise<HTMLCanvasElement> {\r\n  const dataUrl = encodeSvgDataUrl(svgText);\r\n  let canvas = await tryLoadUrlToCanvas(dataUrl, outW, outH);\r\n  if (canvas && canvasHasOpaquePixels(canvas)) return canvas;\r\n  try {\r\n    const blob = new Blob([svgText], { type: 'image/svg+xml' });\r\n    const url = URL.createObjectURL(blob);\r\n    try {\r\n      const c2 = await tryLoadUrlToCanvas(url, outW, outH);\r\n      if (c2 && canvasHasOpaquePixels(c2)) return c2;\r\n      if (c2) return c2;\r\n    } finally { URL.revokeObjectURL(url); }\r\n  } catch (e) {}\r\n  if (canvas) return canvas;\r\n  throw new Error('Failed to rasterize SVG to canvas');\r\n}\r\n\r\nexport function rasterizeSvgToCanvas(svgText: string, outW: number, outH: number): HTMLCanvasElement | undefined {\r\n  try {\r\n    const dataUrl = encodeSvgDataUrl(svgText);\r\n    const img = new Image(); img.src = dataUrl; if (!img.complete) return undefined;\r\n    const c = document.createElement('canvas'); c.width = outW; c.height = outH;\r\n    const ctx = c.getContext('2d'); if (!ctx) return undefined; ctx.drawImage(img, 0, 0, outW, outH); return c;\r\n  } catch (e) { return undefined; }\r\n}\r\n\r\nfunction stripHullOnly(svgText: string) {\r\n  try {\r\n    const parser = new DOMParser(); const doc = parser.parseFromString(svgText, 'image/svg+xml'); const svg = doc.querySelector('svg'); if (!svg) return svgText;\r\n    const rects = Array.from(svg.querySelectorAll('rect')) as Element[];\r\n    for (const r of rects) {\r\n      try {\r\n        const cls = (r.getAttribute('class') || '').toLowerCase(); if (cls.includes('backdrop') || cls.includes('bg')) r.remove();\r\n        const w = parseFloat(r.getAttribute('width') || '0'); const h = parseFloat(r.getAttribute('height') || '0'); if (!isNaN(w) && !isNaN(h) && (w > 1000 || h > 1000)) r.remove();\r\n      } catch (e) {}\r\n    }\r\n    const turrets = Array.from(svg.querySelectorAll('[data-turret]')) as Element[]; for (const t of turrets) try { t.remove(); } catch (e) {}\r\n    return new XMLSerializer().serializeToString(svg);\r\n  } catch (e) { return svgText; }\r\n}\r\n\r\nexport async function rasterizeHullOnlySvgToCanvasAsync(svgText: string, outW: number, outH: number) {\r\n  const hull = stripHullOnly(svgText); return await rasterizeSvgToCanvasAsync(hull, outW, outH);\r\n}\r\n\r\n// Backwards-compatible sync wrapper: best-effort synchronous rasterization for callers that expect it.\r\nexport function rasterizeHullOnlySvgToCanvas(svgText: string, outW: number, outH: number): HTMLCanvasElement {\r\n  try {\r\n    // Try to use renderer cached canvas first\r\n    const c = getCachedHullCanvasSync(svgText, outW, outH);\r\n    if (c) return c;\r\n    // Try synchronous rasterize path\r\n    const hull = stripHullOnly(svgText);\r\n    const rc = rasterizeSvgToCanvas(hull, outW, outH);\r\n    if (rc) return rc;\r\n  } catch (e) {}\r\n  // Fallback: return an empty transparent canvas to preserve caller expectations\r\n  const empty = document.createElement('canvas'); empty.width = outW; empty.height = outH; return empty;\r\n}\r\n\r\nexport function getCachedHullCanvasSync(svgText: string, outW: number, outH: number, assetKey?: string): HTMLCanvasElement | undefined {\r\n  try {\r\n    // Prefer require (synchronous) so this function stays sync and Vitest mocks are visible\r\n    // Try multiple candidate module specifiers to match how tests may mock the module\r\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n    let svgRenderer: any = undefined;\r\n    const candidates = ['./svgRenderer', '../assets/svgRenderer', '../../src/assets/svgRenderer', 'src/assets/svgRenderer'];\r\n    for (const cpath of candidates) {\r\n      try {\r\n        svgRenderer = require(cpath);\r\n        if (svgRenderer) break;\r\n      } catch (e) {\r\n        svgRenderer = svgRenderer || undefined;\r\n      }\r\n    }\r\n    const getCanvasFn = (svgRenderer && svgRenderer.getCanvas) || (svgRenderer && svgRenderer.default && svgRenderer.default.getCanvas);\r\n    if (getCanvasFn && typeof getCanvasFn === 'function') {\r\n      try {\r\n        const c = getCanvasFn(assetKey || '', {}, outW, outH);\r\n        if (c) return c as HTMLCanvasElement;\r\n      } catch (e) {}\r\n    }\r\n  } catch (e) {}\r\n  try {\r\n    const hull = stripHullOnly(svgText);\r\n    try {\r\n      const rc = rasterizeSvgToCanvas(hull, outW, outH) as HTMLCanvasElement | undefined;\r\n      if (rc) return rc;\r\n    } catch (e) {}\r\n    // Synchronous rasterization may not be available in headless test envs.\r\n    // Return an empty placeholder canvas sized to the requested output so callers\r\n    // that expect a synchronous canvas receive a usable element.\r\n    const ph = document.createElement('canvas'); ph.width = outW; ph.height = outH; return ph;\r\n  } catch (e) { return undefined; }\r\n  return undefined; // Ensure a return value in all cases\r\n}\r\n\r\nexport async function ensureRasterizedAndCached(svgText: string, mapping: Record<string,string>, outW: number, outH: number, options?: { applyTo?: 'fill'|'stroke'|'both', assetKey?: string }): Promise<HTMLCanvasElement> {\r\n  const assetKey = options?.assetKey;\r\n  try {\r\n    // Check cache first\r\n    const cached = getCachedHullCanvasSync(svgText, outW, outH, assetKey);\r\n    if (cached) return cached;\r\n  } catch (e) {}\r\n  try {\r\n    // Ensure rasterization\r\n    const blob = new Blob([svgText], { type: 'image/svg+xml' });\r\n    const url = URL.createObjectURL(blob);\r\n    try {\r\n      const c2 = await tryLoadUrlToCanvas(url, outW, outH);\r\n      if (c2) return c2;\r\n    } finally { URL.revokeObjectURL(url); }\r\n  } catch (e) {}\r\n  throw new Error('Failed to ensure rasterized canvas');\r\n}\r\n", "import { applyTeamColorsToSvg, rasterizeSvgToCanvasAsync } from './svgLoader';\r\n\r\n// Simple stable stringify for objects (sort keys) to generate deterministic mapping key\r\nfunction stableStringify(obj: any): string {\r\n  if (obj === null || typeof obj !== 'object') return JSON.stringify(obj);\r\n  if (Array.isArray(obj)) return '[' + obj.map(stableStringify).join(',') + ']';\r\n  const keys = Object.keys(obj).sort();\r\n  return '{' + keys.map(k => JSON.stringify(k) + ':' + stableStringify(obj[k])).join(',') + '}';\r\n}\r\n\r\n// Simple djb2 hash to produce a compact hex string from input\r\nfunction djb2Hash(str: string): string {\r\n  let h = 5381;\r\n  for (let i = 0; i < str.length; i++) { h = ((h << 5) + h) + str.charCodeAt(i); h = h & 0xffffffff; }\r\n  // convert to unsigned and hex\r\n  return (h >>> 0).toString(16);\r\n}\r\n\r\n// Cache of in-flight and completed rasterizations. Keyed by computed cacheKey.\r\n// Each entry stores metadata so we can expose a synchronous getter and TTL info.\r\ntype CacheEntry = {\r\n  promise: Promise<HTMLCanvasElement> | null;\r\n  canvas?: HTMLCanvasElement;\r\n  createdAt: number;\r\n  lastAccess: number;\r\n};\r\nconst rasterCache: Map<string, CacheEntry> = new Map();\r\nlet rasterCacheMaxEntries = 256;\r\nlet rasterCacheMaxAgeMS = 0; // 0 means disabled\r\n\r\nfunction ensureCacheLimit() {\r\n  try {\r\n    const now = Date.now();\r\n    // Evict by TTL first\r\n    if (rasterCacheMaxAgeMS > 0) {\r\n      for (const [k, v] of Array.from(rasterCache.entries())) {\r\n        if (now - v.lastAccess > rasterCacheMaxAgeMS || now - v.createdAt > rasterCacheMaxAgeMS) {\r\n          rasterCache.delete(k);\r\n        }\r\n      }\r\n    }\r\n    // Then evict oldest entries until under limit\r\n    while (rasterCache.size > rasterCacheMaxEntries) {\r\n      const it = rasterCache.keys().next();\r\n      if (it.done) break;\r\n      rasterCache.delete(it.value);\r\n    }\r\n  } catch (e) {}\r\n}\r\n\r\n/**\r\n * Rasterize an SVG with team colors applied.\r\n * svgText: original svg source\r\n * mapping: { role: color }\r\n * outW,outH: output canvas size\r\n * options: { applyTo?: 'fill'|'stroke'|'both', assetKey?: string }\r\n * If options.assetKey is provided, it is used as the stable asset identifier in the cache key.\r\n */\r\nexport async function rasterizeSvgWithTeamColors(svgText: string, mapping: Record<string, string>, outW: number, outH: number, options?: { applyTo?: 'fill' | 'stroke' | 'both', assetKey?: string }): Promise<HTMLCanvasElement> {\r\n  // Fast-path for headless/test environments: if a 2D canvas context is\r\n  // not available, return a blank canvas immediately. This avoids waiting\r\n  // on image onload handlers that may never fire in environments like\r\n  // happy-dom or partial DOM shims used in tests.\r\n  // Detect headless/partial DOM where 2D context is unavailable. Don't return early;\r\n  // instead handle via cacheKey below so repeated calls with same key return the same placeholder.\r\n  let headlessNoCtx = false;\r\n  try {\r\n    if (typeof document !== 'undefined' && typeof document.createElement === 'function') {\r\n      const probe = document.createElement('canvas');\r\n      const ctx = (probe.getContext && probe.getContext('2d')) as CanvasRenderingContext2D | null;\r\n      if (!ctx) headlessNoCtx = true;\r\n    }\r\n  } catch (e) { headlessNoCtx = true; }\r\n  // compute mapping hash and asset identifier\r\n  const mappingStable = stableStringify(mapping || {});\r\n  const mappingHash = djb2Hash(mappingStable);\r\n  const assetId = options && options.assetKey ? options.assetKey : djb2Hash(stableStringify(svgText || ''));\r\n  const cacheKey = `${assetId}:${mappingHash}:${outW}x${outH}`;\r\n\r\n  if (rasterCache.has(cacheKey)) {\r\n    const entry = rasterCache.get(cacheKey)!;\r\n    // update lastAccess and promote to MRU\r\n    try {\r\n      entry.lastAccess = Date.now();\r\n      rasterCache.delete(cacheKey);\r\n      rasterCache.set(cacheKey, entry);\r\n    } catch (e) {}\r\n    // If a resolved canvas is present, return it quickly\r\n    if (entry.canvas) return Promise.resolve(entry.canvas);\r\n    // otherwise return the in-flight promise\r\n    if (entry.promise) return entry.promise;\r\n  }\r\n\r\n  const entry: CacheEntry = {\r\n    promise: null,\r\n    canvas: undefined,\r\n    createdAt: Date.now(),\r\n    lastAccess: Date.now(),\r\n  };\r\n\r\n  const p = (async () => {\r\n    try {\r\n      // If caller passed a path/URL instead of inline SVG markup, try to fetch it\r\n      let sourceSvg = svgText || '';\r\n      try {\r\n        if (!/<svg[\\s>]/i.test(sourceSvg) && typeof fetch === 'function') {\r\n          try {\r\n            const resp = await fetch(sourceSvg);\r\n            if (resp && resp.ok) {\r\n              const txt = await resp.text();\r\n              if (txt && /<svg[\\s>]/i.test(txt)) sourceSvg = txt;\r\n            }\r\n          } catch (e) {\r\n            // ignore fetch errors and continue with original string\r\n          }\r\n        }\r\n      } catch (e) {}\r\n\r\n      const recolored = applyTeamColorsToSvg(sourceSvg, mapping, options && { applyTo: options?.applyTo });\r\n      if (headlessNoCtx) {\r\n        // create a placeholder canvas and cache it so subsequent calls return same instance\r\n        const ph = ((): HTMLCanvasElement => {\r\n          try {\r\n            const c = document.createElement('canvas');\r\n            c.width = outW || 1; c.height = outH || 1; return c;\r\n          } catch (e) {\r\n            // as a last resort, create a minimal object that looks like a canvas\r\n            const obj: any = { width: outW || 1, height: outH || 1 }; return obj as unknown as HTMLCanvasElement;\r\n          }\r\n        })();\r\n        entry.canvas = ph;\r\n        entry.promise = Promise.resolve(ph);\r\n        entry.lastAccess = Date.now();\r\n        rasterCache.set(cacheKey, entry);\r\n        ensureCacheLimit();\r\n        return ph;\r\n      }\r\n      const canvas = await rasterizeSvgToCanvasAsync(recolored, outW, outH);\r\n      // store resolved canvas for synchronous reads\r\n      entry.canvas = canvas;\r\n      entry.promise = Promise.resolve(canvas);\r\n      entry.lastAccess = Date.now();\r\n      return canvas;\r\n    } catch (e) {\r\n      const canvas = await rasterizeSvgToCanvasAsync(svgText, outW, outH);\r\n      entry.canvas = canvas;\r\n      entry.promise = Promise.resolve(canvas);\r\n      entry.lastAccess = Date.now();\r\n      return canvas;\r\n    }\r\n  })();\r\n\r\n  entry.promise = p;\r\n  rasterCache.set(cacheKey, entry);\r\n  ensureCacheLimit();\r\n  try {\r\n    const res = await p;\r\n    return res;\r\n  } catch (e) {\r\n    // on error, remove from cache so future attempts can retry\r\n    rasterCache.delete(cacheKey);\r\n    throw e;\r\n  }\r\n}\r\n\r\nexport function _clearRasterCache() {\r\n  rasterCache.clear();\r\n}\r\n\r\n/**\r\n * Store an already-rendered canvas into the raster cache for the given asset/mapping/size.\r\n * Useful for synchronous renderer code that produces canvases and wants them cached for later reuse.\r\n */\r\nexport function cacheCanvasForAsset(assetKey: string, mapping: Record<string, string>, outW: number, outH: number, canvas: HTMLCanvasElement) {\r\n  const mappingStable = stableStringify(mapping || {});\r\n  const mappingHash = djb2Hash(mappingStable);\r\n  const assetId = assetKey || djb2Hash(stableStringify(''));\r\n  const cacheKey = `${assetId}:${mappingHash}:${outW}x${outH}`;\r\n  // Insert and promote to MRU, storing metadata for sync reads\r\n  try {\r\n    if (rasterCache.has(cacheKey)) rasterCache.delete(cacheKey);\r\n  } catch (e) {}\r\n  const entry: CacheEntry = {\r\n    promise: Promise.resolve(canvas),\r\n    canvas,\r\n    createdAt: Date.now(),\r\n    lastAccess: Date.now(),\r\n  };\r\n  rasterCache.set(cacheKey, entry);\r\n  ensureCacheLimit();\r\n}\r\n\r\n// Test helper: return current cache keys in insertion order (oldest -> newest)\r\nexport function _getRasterCacheKeysForTest(): string[] {\r\n  return Array.from(rasterCache.keys());\r\n}\r\n\r\nexport function setRasterCacheMaxEntries(n: number) {\r\n  // Allow small sizes for tests; enforce at least 1 entry\r\n  rasterCacheMaxEntries = Math.max(1, Math.floor(n) || 256);\r\n  ensureCacheLimit();\r\n}\r\n\r\n/**\r\n * Set maximum age for cache entries in milliseconds. 0 disables TTL.\r\n */\r\nexport function setRasterCacheMaxAge(ms: number) {\r\n  rasterCacheMaxAgeMS = Math.max(0, Math.floor(ms) || 0);\r\n  ensureCacheLimit();\r\n}\r\n\r\n/**\r\n * Synchronous getter: return an already-resolved canvas for the given key if present.\r\n * This allows renderers to prefer cached canvases without awaiting a Promise.\r\n */\r\nexport function getCanvasFromCache(assetKey: string, mapping: Record<string, string>, outW: number, outH: number): HTMLCanvasElement | undefined {\r\n  const mappingStable = stableStringify(mapping || {});\r\n  const mappingHash = djb2Hash(mappingStable);\r\n  const assetId = assetKey || djb2Hash(stableStringify(''));\r\n  const cacheKey = `${assetId}:${mappingHash}:${outW}x${outH}`;\r\n  const entry = rasterCache.get(cacheKey);\r\n  if (!entry) return undefined;\r\n  // Evict if expired\r\n  if (rasterCacheMaxAgeMS > 0) {\r\n    const now = Date.now();\r\n    if (now - entry.lastAccess > rasterCacheMaxAgeMS || now - entry.createdAt > rasterCacheMaxAgeMS) {\r\n      rasterCache.delete(cacheKey);\r\n      return undefined;\r\n    }\r\n  }\r\n  entry.lastAccess = Date.now();\r\n  // Promote to MRU\r\n  try {\r\n    rasterCache.delete(cacheKey);\r\n    rasterCache.set(cacheKey, entry);\r\n  } catch (e) {}\r\n  return entry.canvas;\r\n}\r\n\r\n// Named convenience export for clearer imports\r\nexport function getCanvas(assetKey: string, mapping: Record<string, string>, outW: number, outH: number) {\r\n  return getCanvasFromCache(assetKey, mapping, outW, outH);\r\n}\r\n\r\nexport default {\r\n  rasterizeSvgWithTeamColors,\r\n  _clearRasterCache,\r\n  cacheCanvasForAsset,\r\n  setRasterCacheMaxEntries,\r\n  setRasterCacheMaxAge,\r\n  getCanvasFromCache,\r\n  // synchronous alias for convenience: prefer calling svgRenderer.getCanvas(...)\r\n  getCanvas(assetKey: string, mapping: Record<string, string>, outW: number, outH: number) {\r\n    return getCanvasFromCache(assetKey, mapping, outW, outH);\r\n  },\r\n};\r\n", "import { AssetsConfig, getSpriteAsset } from \"../config/assets/assetsConfig\";\n\nfunction detectPipeline(type: string) {\n  const sprite = getSpriteAsset(type);\n  if (sprite.svg) return { pipeline: \"svg\", source: sprite.svg };\n  if (sprite.model3d && sprite.model3d.url)\n    return { pipeline: \"mesh3d\", source: sprite.model3d.url };\n  if (sprite.shape) return { pipeline: \"shape2d\", source: \"shapes2d\" };\n  return { pipeline: \"unknown\", source: \"-\" };\n}\n\nfunction createOverlay() {\n  if (typeof document === \"undefined\") return null;\n  const host = (location && location.hostname) || \"\";\n  const urlParams =\n    typeof URLSearchParams !== \"undefined\"\n      ? new URLSearchParams(location.search)\n      : null;\n  const enabled =\n    urlParams?.get(\"devShipTable\") === \"1\" ||\n    host === \"127.0.0.1\" ||\n    host === \"localhost\";\n  if (!enabled) return null;\n\n  const container = document.createElement(\"div\");\n  container.id = \"ship-pipeline-overlay\";\n  container.style.position = \"fixed\";\n  container.style.top = \"8px\";\n  container.style.right = \"8px\";\n  container.style.zIndex = \"99999\";\n  container.style.fontFamily = \"sans-serif\";\n  container.style.fontSize = \"12px\";\n  container.style.color = \"#fff\";\n\n  const badge = document.createElement(\"div\");\n  badge.id = \"ship-pipeline-badge\";\n  badge.style.background = \"rgba(20,20,30,0.9)\";\n  badge.style.padding = \"6px 10px\";\n  badge.style.borderRadius = \"6px\";\n  badge.style.cursor = \"pointer\";\n  badge.style.userSelect = \"none\";\n  badge.style.boxShadow = \"0 2px 8px rgba(0,0,0,0.6)\";\n  badge.textContent = \"Pipelines\";\n  badge.setAttribute(\"role\", \"button\");\n  badge.tabIndex = 0;\n\n  const panel = document.createElement(\"div\");\n  panel.id = \"ship-pipeline-panel\";\n  panel.style.marginTop = \"8px\";\n  panel.style.background = \"rgba(8,10,16,0.95)\";\n  panel.style.border = \"1px solid rgba(255,255,255,0.06)\";\n  panel.style.padding = \"8px\";\n  panel.style.borderRadius = \"6px\";\n  panel.style.maxHeight = \"320px\";\n  panel.style.overflowY = \"auto\";\n  panel.style.minWidth = \"220px\";\n  panel.style.display = \"none\";\n\n  const table = document.createElement(\"table\");\n  table.style.width = \"100%\";\n  table.style.borderCollapse = \"collapse\";\n\n  const thead = document.createElement(\"thead\");\n  const headerRow = document.createElement(\"tr\");\n  [\"Ship\", \"Pipeline\", \"Source\"].forEach((h) => {\n    const th = document.createElement(\"th\");\n    th.textContent = h;\n    th.style.textAlign = \"left\";\n    th.style.padding = \"4px 6px\";\n    th.style.fontSize = \"11px\";\n    th.style.opacity = \"0.9\";\n    headerRow.appendChild(th);\n  });\n  thead.appendChild(headerRow);\n  table.appendChild(thead);\n\n  const tbody = document.createElement(\"tbody\");\n\n  const types = new Set<string>([\n    ...Object.keys(AssetsConfig.shapes2d || {}),\n    ...Object.keys((AssetsConfig as any).svgAssets || {}),\n  ]);\n  for (const t of Array.from(types).sort()) {\n    const res = detectPipeline(t as string);\n    const tr = document.createElement(\"tr\");\n    const nameTd = document.createElement(\"td\");\n    nameTd.textContent = t;\n    nameTd.style.padding = \"4px 6px\";\n    const pTd = document.createElement(\"td\");\n    pTd.textContent = res.pipeline;\n    pTd.style.padding = \"4px 6px\";\n    pTd.style.opacity = \"0.95\";\n    const sTd = document.createElement(\"td\");\n    sTd.textContent = String(res.source).replace(/^\\s+|\\s+$/g, \"\");\n    sTd.style.padding = \"4px 6px\";\n    sTd.style.opacity = \"0.8\";\n    tr.appendChild(nameTd);\n    tr.appendChild(pTd);\n    tr.appendChild(sTd);\n    tbody.appendChild(tr);\n  }\n\n  table.appendChild(tbody);\n  panel.appendChild(table);\n\n  let open = false;\n  function setOpen(v: boolean) {\n    open = !!v;\n    panel.style.display = open ? \"block\" : \"none\";\n    badge.style.background = open\n      ? \"rgba(60,60,70,0.95)\"\n      : \"rgba(20,20,30,0.9)\";\n    try {\n      localStorage.setItem(\"shipPipelineOpen\", open ? \"1\" : \"0\");\n    } catch (e) {}\n  }\n\n  badge.addEventListener(\"click\", () => setOpen(!open));\n  badge.addEventListener(\"keydown\", (ev) => {\n    if (\n      (ev as KeyboardEvent).key === \"Enter\" ||\n      (ev as KeyboardEvent).key === \" \"\n    ) {\n      ev.preventDefault();\n      setOpen(!open);\n    }\n  });\n\n  // restore state\n  try {\n    if (localStorage.getItem(\"shipPipelineOpen\") === \"1\") setOpen(true);\n  } catch (e) {}\n\n  container.appendChild(badge);\n  container.appendChild(panel);\n  document.body.appendChild(container);\n  return { container, badge, panel };\n}\n\nexport default function initShipPipelineOverlay() {\n  try {\n    createOverlay();\n  } catch (e) {\n    console.warn(\"shipPipelineOverlay init failed\", e);\n  }\n}\n", "import type { GameState } from \"./types\";\n// Prefer ESM import shape but keep require() for CJS interop in tests\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst entitiesConfig = require(\"./config/entitiesConfig\");\nimport * as entitiesConfigESM from \"./config/entitiesConfig\";\nfunction getShipConfigSafe() {\n  let config = {};\n  // Try ESM named export first\n  if (typeof (entitiesConfigESM as any).getShipConfig === \"function\") {\n    try { config = (entitiesConfigESM as any).getShipConfig(); } catch {}\n  }\n  // Fallback to CJS require named export\n  if (!config || !Object.keys(config as any).length) {\n    if (typeof entitiesConfig.getShipConfig === \"function\") {\n      try { config = entitiesConfig.getShipConfig(); } catch {}\n    }\n  }\n  // Fallback to default export object (ESM or CJS)\n  if (!config || !Object.keys(config as any).length) {\n    if (entitiesConfigESM && typeof (entitiesConfigESM as any).default === \"object\") config = (entitiesConfigESM as any).default;\n    else if (typeof entitiesConfig.default === \"object\" && entitiesConfig.default) config = entitiesConfig.default;\n    else if (typeof entitiesConfig === \"object\" && entitiesConfig) config = entitiesConfig;\n  }\n  // Fallback config if nothing found\n  if (!config || !Object.keys(config).length) {\n    config = { fighter: { size: \"small\", maxHp: 1, cannons: [{ damage: 1, rate: 1 }] } };\n  }\n  return config;\n}\n\nfunction getDefaultShipTypeSafe() {\n  const config = getShipConfigSafe();\n  const keys = Object.keys(config);\n  return keys.length ? keys[0] : \"fighter\";\n}\nfunction getSizeDefaultsSafe(size: \"small\" | \"medium\" | \"large\") {\n  if (typeof entitiesConfig.getSizeDefaults === \"function\") return entitiesConfig.getSizeDefaults(size);\n  if (entitiesConfig.default && typeof entitiesConfig.default.getSizeDefaults === \"function\") return entitiesConfig.default.getSizeDefaults(size);\n  return {};\n}\n// (Removed duplicate getShipConfigSafe)\n// pooling helpers moved to src/pools; importers should use that module now\nimport { TEAM_DEFAULT } from \"./config/teamsConfig\";\nimport type { ShipConfigMap, ShipSpec } from \"./types\";\nimport Pool from \"./pools/pool\";\n\n// Pooling helpers were moved to `src/pools` \u2014 import from there directly.\n\nlet nextId = 1;\nexport function genId(): number {\n  return nextId++;\n}\n\nexport type Cannon = {\n  damage: number;\n  rate: number;\n  // runtime cooldown (internal) - optional\n  __cd?: number;\n  // optional range used by behavior logic\n  range?: number;\n  spread?: number;\n  muzzleSpeed?: number;\n  bulletRadius?: number;\n  bulletTTL?: number;\n};\n\nexport type Ship = {\n  id: number;\n  type: string;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  hp: number;\n  maxHp: number;\n  shield?: number;\n  maxShield?: number;\n  angle: number;\n  team?: string;\n  xp?: number;\n  level?: number;\n  cannons?: Cannon[];\n  accel?: number;\n  currentAccel?: number;\n  throttle?: number;\n  steering?: number;\n  turnRate?: number;\n  radius?: number;\n  maxSpeed?: number;\n  trail?: { x: number; y: number }[];\n  shieldRegen?: number;\n  shieldPercent?: number;\n  hpPercent?: number;\n  armor?: number;\n  size?: \"small\" | \"medium\" | \"large\";\n  // parentId is set on ships spawned by other entities (e.g. fighters launched by a carrier)\n  parentId?: number;\n  // Internal carrier timer accumulator (seconds). Not serialized.\n  _carrierTimer?: number;\n  // Turrets attached to the ship. Normalized via normalizeTurrets -> each turret\n  // is an object { position: [x,y], angle, targetAngle, spread, barrel, cooldown }\n  // Accept either normalized turret objects or shorthand [x,y] arrays for\n  // backwards compatibility with saved snapshots and concise configs.\n  turrets?: Array<\n    | [number, number]\n    | {\n        position: [number, number];\n        angle?: number;\n        targetAngle?: number;\n        spread?: number;\n        barrel?: number;\n        cooldown?: number;\n        kind?: string;\n      }\n  >;\n};\n\nexport function createShip(\n  type: string | undefined = undefined,\n  x = 0,\n  y = 0,\n  team = TEAM_DEFAULT,\n): Ship {\n  const shipCfg = getShipConfigSafe() as ShipConfigMap;\n  const availableTypes = Object.keys(shipCfg || {});\n  const resolvedType =\n    type && shipCfg[type]\n      ? type\n      : availableTypes.length\n        ? availableTypes[0]\n  : getDefaultShipTypeSafe();\n  const rawCfg = (shipCfg[resolvedType] ||\n  shipCfg[getDefaultShipTypeSafe()]) as Partial<ShipSpec>;\n  // Merge in per-size defaults for any fields not explicitly provided by the\n  // ship type config. This keeps configs concise while ensuring sensible\n  // defaults for armor/shields per size class.\n  const sizeVal =\n    (rawCfg as any).size ||\n    (rawCfg.radius && rawCfg.radius >= 36\n      ? \"large\"\n      : rawCfg.radius && rawCfg.radius >= 20\n        ? \"medium\"\n        : \"small\");\n  const sizeDefaults = getSizeDefaultsSafe(sizeVal as \"small\" | \"medium\" | \"large\");\n  const cfg = Object.assign({}, sizeDefaults, rawCfg) as Partial<ShipSpec>;\n  const ship = {\n    id: genId(),\n    type: resolvedType,\n    x,\n    y,\n    vx: 0,\n    vy: 0,\n    hp: cfg.maxHp ?? 0,\n    maxHp: cfg.maxHp ?? 0,\n    shield: cfg.maxShield ?? 0,\n    maxShield: cfg.maxShield ?? 0,\n    shieldRegen: cfg.shieldRegen ?? 0,\n    armor: cfg.armor ?? 0,\n    size: (cfg as any).size || sizeVal,\n    team,\n    xp: 0,\n    level: 1,\n    cannons: JSON.parse(JSON.stringify(cfg.cannons || [])),\n    // Keep raw turret defs here for now; we'll normalize below via helper so\n    // normalization logic is centralized and reusable by snapshot handlers.\n    turrets: cfg.turrets || [],\n    accel: cfg.accel || 0,\n    currentAccel: 0,\n    throttle: 0,\n    steering: 0,\n    turnRate: cfg.turnRate || 0,\n    radius: cfg.radius || 6,\n    // Ensure maxSpeed is always a sensible positive number. Some saved state\n    // or malformed configs may have maxSpeed omitted or set to 0 which causes\n    // ships to never translate (they can still rotate/fire). Prefer the\n    // configured value but fall back to a safe default > 0.\n    maxSpeed:\n      typeof cfg.maxSpeed === \"number\" && cfg.maxSpeed > 0 ? cfg.maxSpeed : 120,\n    angle: 0,\n    trail: undefined,\n    shieldPercent: 1,\n    hpPercent: 1,\n  } as Ship;\n  // Ensure turrets are normalized to the object shape (idempotent)\n  try {\n    normalizeTurrets(ship as any);\n  } catch (e) {}\n  return ship as Ship;\n}\n\n// normalizeTurrets\n// Converts turret shorthand arrays ([x,y]) into normalized turret objects\n// with default runtime fields. This function is idempotent and safe to call\n// on ships coming from snapshots or network/worker messages.\nexport function normalizeTurrets(ship: any): void {\n  try {\n    if (!ship) return;\n    const tarr = ship.turrets;\n    if (!Array.isArray(tarr)) return;\n    ship.turrets = tarr.map((t: any) => {\n      if (Array.isArray(t) && t.length === 2) {\n        return {\n          position: t,\n          angle: 0,\n          targetAngle: 0,\n          kind: \"basic\",\n          spread: 0,\n          barrel: 0,\n          cooldown: 1.0,\n        };\n      }\n      // If it's already an object turret, shallow-copy and ensure runtime defaults\n      if (t && typeof t === \"object\") {\n        const copy = Object.assign({}, t);\n        if (typeof copy.angle !== \"number\") copy.angle = 0;\n        if (typeof copy.targetAngle !== \"number\") copy.targetAngle = 0;\n        if (typeof copy.spread !== \"number\") copy.spread = 0;\n        if (typeof copy.barrel !== \"number\") copy.barrel = 0;\n        if (typeof copy.cooldown !== \"number\")\n          copy.cooldown = copy.cooldown || 1.0;\n        return copy;\n      }\n      return t;\n    });\n  } catch (e) {}\n}\n\n// normalizeStateShips\n// Normalizes turrets for every ship in the provided state, rebuilds a\n// shipMap for quick lookups and recomputes teamCounts (keeps red/blue keys).\nexport function normalizeStateShips(state: any): void {\n  if (!state || typeof state !== \"object\") return;\n  try {\n    const ships = Array.isArray(state.ships) ? state.ships : [];\n    // Normalize each ship's turret defs\n    for (const s of ships) {\n      try {\n        normalizeTurrets(s);\n      } catch (e) {}\n    }\n    // Rebuild shipMap\n    try {\n      (state as any).shipMap = new Map<number, any>();\n      for (const s of ships)\n        if (s && typeof s.id !== \"undefined\")\n          (state as any).shipMap.set(s.id, s);\n    } catch (e) {}\n    // Recompute teamCounts, preserve red/blue keys default\n    try {\n      const counts: Record<string, number> = { red: 0, blue: 0 };\n      for (const s of ships) {\n        try {\n          const t = String((s && (s as any).team) || \"\");\n          if (t) counts[t] = (counts[t] || 0) + 1;\n        } catch (e) {}\n      }\n      state.teamCounts = counts;\n    } catch (e) {}\n  } catch (e) {}\n}\n\nexport type Bullet = {\n  id: number;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  team: string;\n  ownerId?: number | null;\n  damage: number;\n  ttl: number;\n  radius?: number;\n  bulletRadius?: number;\n  bulletTTL?: number;\n  kind?: string;\n  alive?: boolean;\n  prevX?: number;\n  prevY?: number;\n  _prevX?: number;\n  _prevY?: number;\n};\n\nconst bulletPool = new Pool<Bullet>(\n  () => ({\n    id: 0,\n    x: 0,\n    y: 0,\n    vx: 0,\n    vy: 0,\n    team: TEAM_DEFAULT,\n    ownerId: null,\n    damage: 0,\n    ttl: 0,\n    prevX: 0,\n    prevY: 0,\n    _prevX: 0,\n    _prevY: 0,\n  }),\n  (b) => {\n    /* reset */ b.id = 0;\n    b.x = 0;\n    b.y = 0;\n    b.vx = 0;\n    b.vy = 0;\n    b.team = TEAM_DEFAULT;\n    b.ownerId = null;\n    b.damage = 0;\n    b.ttl = 0;\n    b.prevX = 0;\n    b.prevY = 0;\n    b._prevX = 0;\n    b._prevY = 0;\n  },\n);\n\nexport function createBullet(\n  x: number,\n  y: number,\n  vx: number,\n  vy: number,\n  team = TEAM_DEFAULT,\n  ownerId: number | null = null,\n  damage = 1,\n  ttl = 2.0,\n): Bullet {\n  const b = bulletPool.acquire();\n  b.id = genId();\n  b.x = x;\n  b.y = y;\n  b.vx = vx;\n  b.vy = vy;\n  b.team = team;\n  b.ownerId = ownerId;\n  b.damage = damage;\n  b.ttl = ttl;\n  b.prevX = x;\n  b.prevY = y;\n  b._prevX = x;\n  b._prevY = y;\n  b.alive = true;\n  return b;\n}\n\nexport function releaseBullet(b: Bullet) {\n  try {\n    b.alive = false;\n  } catch {}\n  bulletPool.release(b);\n}\n\nexport interface ExplosionEffect {\n  x: number;\n  y: number;\n  r?: number;\n  alive?: boolean;\n  _pooled?: boolean;\n  [key: string]: unknown;\n}\nexport interface ShieldHitEffect {\n  x: number;\n  y: number;\n  magnitude?: number;\n  alive?: boolean;\n  _pooled?: boolean;\n  [key: string]: unknown;\n}\nexport interface HealthHitEffect {\n  x: number;\n  y: number;\n  amount?: number;\n  alive?: boolean;\n  _pooled?: boolean;\n  [key: string]: unknown;\n}\n\nexport function createExplosionEffect(\n  init?: Partial<ExplosionEffect>,\n): ExplosionEffect {\n  return {\n    x: init?.x ?? 0,\n    y: init?.y ?? 0,\n    r: init?.r,\n    alive: true,\n    _pooled: false,\n    ...init,\n  };\n}\nexport function resetExplosionEffect(\n  obj: ExplosionEffect,\n  init?: Partial<ExplosionEffect>,\n) {\n  obj.x = init?.x ?? 0;\n  obj.y = init?.y ?? 0;\n  obj.r = init?.r;\n  obj.alive = true;\n  obj._pooled = false;\n  Object.assign(obj, init);\n}\nexport function createShieldHitEffect(\n  init?: Partial<ShieldHitEffect>,\n): ShieldHitEffect {\n  return {\n    x: init?.x ?? 0,\n    y: init?.y ?? 0,\n    magnitude: init?.magnitude,\n    alive: true,\n    _pooled: false,\n    ...init,\n  };\n}\nexport function resetShieldHitEffect(\n  obj: ShieldHitEffect,\n  init?: Partial<ShieldHitEffect>,\n) {\n  obj.x = init?.x ?? 0;\n  obj.y = init?.y ?? 0;\n  obj.magnitude = init?.magnitude;\n  obj.alive = true;\n  obj._pooled = false;\n  Object.assign(obj, init);\n}\nexport function createHealthHitEffect(\n  init?: Partial<HealthHitEffect>,\n): HealthHitEffect {\n  return {\n    x: init?.x ?? 0,\n    y: init?.y ?? 0,\n    amount: init?.amount,\n    alive: true,\n    _pooled: false,\n    ...init,\n  };\n}\nexport function resetHealthHitEffect(\n  obj: HealthHitEffect,\n  init?: Partial<HealthHitEffect>,\n) {\n  obj.x = init?.x ?? 0;\n  obj.y = init?.y ?? 0;\n  obj.amount = init?.amount;\n  obj.alive = true;\n  obj._pooled = false;\n  Object.assign(obj, init);\n}\n\nimport type { PoolEntry, TexturePoolEntry } from \"./types/pool\";\n// Provide a default initial GameState for simulation and tests\nexport function makeInitialState(): GameState {\n  return {\n    t: 0,\n    ships: [],\n    // fast lookup map kept in sync with ships[] where possible\n    shipMap: new Map<number, Ship>(),\n    // Cached counts per team to avoid per-frame filter allocations\n    teamCounts: { red: 0, blue: 0 },\n    bullets: [],\n    explosions: [],\n    shieldHits: [],\n    healthHits: [],\n    // optional event arrays used by GameState contract\n    particles: [],\n    flashes: [],\n    shieldFlashes: [],\n    healthFlashes: [],\n    engineTrailsEnabled: true,\n    assetPool: {\n      textures: new Map<string, PoolEntry<WebGLTexture>>(),\n      sprites: new Map<string, PoolEntry<any>>(),\n      effects: new Map<string, PoolEntry<any>>(),\n      counts: {\n        textures: new Map<string, number>(),\n        sprites: new Map<string, number>(),\n        effects: new Map<string, number>(),\n      },\n      config: {\n        texturePoolSize: 128,\n        spritePoolSize: 256,\n        effectPoolSize: 128,\n        textureOverflowStrategy: \"discard-oldest\",\n        spriteOverflowStrategy: \"discard-oldest\",\n        effectOverflowStrategy: \"discard-oldest\",\n      },\n    },\n  };\n}\n\n// Update team counts safely. oldTeam/newTeam may be undefined when adding or removing.\nexport function updateTeamCount(\n  state: GameState,\n  oldTeam?: string,\n  newTeam?: string,\n) {\n  try {\n    if (oldTeam) {\n      state.teamCounts[oldTeam] = Math.max(\n        0,\n        (state.teamCounts[oldTeam] || 0) - 1,\n      );\n    }\n    if (newTeam) {\n      state.teamCounts[newTeam] = (state.teamCounts[newTeam] || 0) + 1;\n    }\n  } catch (e) {}\n}\n", "// teamsConfig.ts - Teams and fleet helpers (typed)\nimport { getDefaultShipType, getShipConfig } from \"./entitiesConfig\"; // should be './config/entitiesConfig'\nimport { getDefaultBounds } from \"./simConfig\";\nexport type Team = { id: string; color: string; label?: string };\nexport const TeamsConfig = {\n  teams: {\n    red: { id: \"red\", color: \"#ff4d4d\", label: \"Red\" },\n    blue: { id: \"blue\", color: \"#4da6ff\", label: \"Blue\" },\n  },\n  defaultFleet: {\n    counts: (() => {\n      // Build a default counts map from available ShipConfig types so new\n      // ship types are automatically included without needing manual edits.\n      // Defensive: some module resolution paths may expose a non-function\n      // binding for getShipConfig (e.g. default object). Accept both a\n      // function or an object shape to avoid TypeError during tests.\n      const shipCfg =\n        (typeof getShipConfig === \"function\" && getShipConfig()) ||\n        // if imported as default-only: try default export object/function\n        (typeof (getShipConfig as any)?.default === \"function\" &&\n          (getShipConfig as any).default()) ||\n        (typeof (getShipConfig as any)?.default === \"object\" &&\n          (getShipConfig as any).default) ||\n        // some bundlers may bind getShipConfig to the config object itself\n        (typeof (getShipConfig as any) === \"object\" &&\n          (getShipConfig as any)) ||\n        {};\n      let types = Object.keys(shipCfg || {});\n      // Robust fallback: if we couldn't discover any types (interop edge-case),\n      // seed with the canonical baseline so feature tests remain stable.\n      if (types.length === 0) {\n        types = [\"fighter\", \"corvette\", \"frigate\", \"destroyer\", \"carrier\"];\n      }\n      // sane defaults: make fighters most common, others rarer\n      const defaultCounts: Record<string, number> = {};\n      for (const t of types) {\n        if (t === \"fighter\") defaultCounts[t] = 8;\n        else if (t === \"corvette\") defaultCounts[t] = 3;\n        else if (t === \"frigate\") defaultCounts[t] = 2;\n        else if (t === \"destroyer\") defaultCounts[t] = 1;\n        else if (t === \"carrier\") defaultCounts[t] = 1;\n        else defaultCounts[t] = 1;\n      }\n      return defaultCounts;\n    })(),\n    spacing: 28,\n    jitter: { x: 80, y: 120 },\n  },\n  // continuousReinforcement controls: enable/disable, scoreMargin is the\n  // imbalance fraction (e.g. 0.12 means reinforce when weakest ratio < 0.38),\n  // perTick is the maximum ships considered per reinforcement tick, and\n  // shipTypes is an optional array of types to choose from randomly. If\n  // omitted, keys from defaultFleet.counts are used.\n  continuousReinforcement: {\n    enabled: false,\n    scoreMargin: 0.12,\n    perTick: 1,\n    interval: 5.0,\n    shipTypes: undefined as string[] | undefined,\n  },\n};\n\n// Local seeded PRNG (does not affect global rng)\nfunction mulberry32(seed: number) {\n  let t = seed >>> 0;\n  return function () {\n    t += 0x6d2b79f5;\n    let r = Math.imul(t ^ (t >>> 15), 1 | t);\n    r ^= r + Math.imul(r ^ (r >>> 7), 61 | r);\n    return ((r ^ (r >>> 14)) >>> 0) / 4294967296;\n  };\n}\n\nfunction hashStringToInt(s: string) {\n  let h = 2166136261 >>> 0;\n  for (let i = 0; i < s.length; i++) {\n    h ^= s.charCodeAt(i);\n    h = Math.imul(h, 16777619) >>> 0;\n  }\n  return h >>> 0;\n}\n\nexport function generateFleetForTeam(\n  seed = 0,\n  teamId: \"red\" | \"blue\" = \"red\",\n  bounds?: { W: number; H: number },\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\n  options: any = {},\n) {\n  const b = bounds || getDefaultBounds();\n  const cfg = Object.assign({}, TeamsConfig.defaultFleet, options.fleet || {});\n  const spacing = options.spacing ?? cfg.spacing;\n  const jitter = Object.assign({}, cfg.jitter, options.jitter || {});\n  const centerY = b.H / 2;\n  const baseX = teamId === \"red\" ? b.W * 0.22 : b.W * 0.78;\n  const rng = mulberry32((seed >>> 0) + hashStringToInt(teamId));\n  const out: any[] = [];\n  for (const [type, count] of Object.entries(cfg.counts)) {\n    for (let i = 0; i < (count as number); i++) {\n      const r = spacing * Math.sqrt(rng());\n      const angle = rng() * Math.PI * 2;\n      const dx = Math.cos(angle) * r + (rng() - 0.5) * (jitter.x ?? 0);\n      const dy = Math.sin(angle) * r + (rng() - 0.5) * (jitter.y ?? 0);\n      const x = Math.max(0, Math.min(b.W - 1e-6, baseX + dx));\n      const y = Math.max(0, Math.min(b.H - 1e-6, centerY + dy));\n      if (typeof shipFactory === \"function\")\n        out.push(shipFactory(type, x, y, teamId));\n      else out.push({ type, x, y, team: teamId });\n    }\n  }\n  return out;\n}\n\nexport function makeInitialFleets(\n  seed = 0,\n  bounds?: { W: number; H: number },\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\n  options: any = {},\n) {\n  const b = bounds || getDefaultBounds();\n  const red = generateFleetForTeam(seed, \"red\", b, shipFactory, options);\n  const blue = generateFleetForTeam(seed + 1, \"blue\", b, shipFactory, options);\n  return red.concat(blue);\n}\n\nexport function chooseReinforcements(\n  seed = 0,\n  state: any = {},\n  options: any = {},\n) {\n  const cfg = Object.assign({}, TeamsConfig.continuousReinforcement, options);\n  // (no-op) merge options onto default continuous reinforcement config\n  if (!cfg.enabled) return [] as any[];\n  const teamStrength: Record<string, number> = {};\n  if (Array.isArray(state.ships)) {\n    for (const s of state.ships) {\n      if (!s || !s.team) continue;\n      const hp = typeof s.hp === \"number\" ? s.hp : 1;\n      teamStrength[s.team] = (teamStrength[s.team] || 0) + hp;\n    }\n  }\n  const teams = Object.keys(TeamsConfig.teams);\n  if (teams.length === 0) return [];\n  for (const t of teams) {\n    if (!teamStrength[t]) {\n      const cnt = (state.ships || []).filter(\n        (s: any) => s && s.team === t,\n      ).length;\n      teamStrength[t] = cnt > 0 ? cnt : 0;\n    }\n  }\n  let weakest = teams[0];\n  let strongest = teams[0];\n  for (const t of teams) {\n    if (teamStrength[t] < teamStrength[weakest]) weakest = t;\n    if (teamStrength[t] > teamStrength[strongest]) strongest = t;\n  }\n  const total = teams.reduce((s, t) => s + (teamStrength[t] || 0), 0) || 1;\n  const weakestRatio = (teamStrength[weakest] || 0) / total;\n  if (weakestRatio < 0.5 - cfg.scoreMargin) {\n    const orders: any[] = [];\n    const rng = mulberry32((seed >>> 0) + hashStringToInt(weakest));\n    // determine candidate ship types: either explicit list or keys from defaultFleet\n    const candidateTypes =\n      Array.isArray(cfg.shipTypes) && cfg.shipTypes.length\n        ? cfg.shipTypes\n        : Object.keys(TeamsConfig.defaultFleet.counts || { fighter: 1 });\n    // Build weights for candidate types using defaultFleet counts when available\n    const countsMap =\n      TeamsConfig && TeamsConfig.defaultFleet && TeamsConfig.defaultFleet.counts\n        ? TeamsConfig.defaultFleet.counts\n        : {};\n    const weights = candidateTypes.map((t: string) =>\n      Math.max(0, Number((countsMap as any)[t]) || 1),\n    );\n    const totalWeight =\n      weights.reduce((s: number, w: number) => s + w, 0) ||\n      candidateTypes.length ||\n      1;\n    // Helper: weighted random pick for ship types\n    const weightedPick = () => {\n      const r = rng() * totalWeight;\n      let acc = 0;\n      for (let i = 0; i < candidateTypes.length; i++) {\n        acc += weights[i];\n        if (r < acc) return candidateTypes[i];\n      }\n      return candidateTypes[candidateTypes.length - 1];\n    };\n    // Randomize number to spawn between 1 and cfg.perTick (inclusive)\n    const maxPerTick = Math.max(1, Math.floor(Number(cfg.perTick) || 1));\n    const spawnCount = Math.max(1, Math.floor(rng() * maxPerTick) + 1);\n    // spawnCount computed deterministically from the provided seed\n    const b = options.bounds || getDefaultBounds();\n    const centerY = b.H / 2;\n    const baseX = weakest === \"red\" ? b.W * 0.18 : b.W * 0.82;\n    for (let i = 0; i < spawnCount; i++) {\n      const x = Math.max(0, Math.min(b.W - 1e-6, baseX + (rng() - 0.5) * 120));\n      const y = Math.max(\n        0,\n        Math.min(b.H - 1e-6, centerY + (rng() - 0.5) * 160),\n      );\n      const type =\n        Array.isArray(cfg.shipTypes) && cfg.shipTypes.length\n          ? candidateTypes[Math.floor(rng() * candidateTypes.length)] ||\n            getDefaultShipType()\n          : weightedPick();\n      orders.push({ type, team: weakest, x, y });\n    }\n    // return deterministic orders\n    return orders;\n  }\n  return [] as any[];\n}\n\n// Team fallback default\nexport const TEAM_DEFAULT = \"red\";\n\nexport default TeamsConfig;\n\n// Helper: call chooseReinforcements using a manager-derived seed (from global RNG)\n// This is convenient for callers (like gamemanager) that want to keep\n// reinforcements deterministic relative to the global `srand`/`srandom` state.\nimport { srandom } from \"../rng\";\nexport function chooseReinforcementsWithManagerSeed(\n  state: any = {},\n  options: any = {},\n) {\n  const seed = Math.floor(srandom() * 0xffffffff) >>> 0;\n  return chooseReinforcements(seed, state, options);\n}\n", "import type { BoundaryBehavior } from \"./types\";\r\n\r\nexport interface SimConfig {\r\n  DT_MS: number;\r\n  MAX_ACC_MS: number;\r\n  bounds: { W: number; H: number };\r\n  friction: number; // Velocity damping factor for ships\r\n  gridCellSize?: number; // spatial grid cell size (px)\r\n}\r\n\r\nexport const SIM: SimConfig = {\r\n  DT_MS: 16,\r\n  MAX_ACC_MS: 250,\r\n  bounds: { W: 1920, H: 1080 }, // Use LOGICAL_MAP for default bounds\r\n  friction: 0.99,\r\n  gridCellSize: 64,\r\n};\r\n// boundaryBehavior: Tactical impact and pruning rationale\r\n// - 'remove': Ships/bullets are eliminated at map edge; punishes edge play, rewards central control. Pruning is immediate for out-of-bounds entities.\r\n// - 'wrap': Ships/bullets reappear on opposite edge; enables edge escapes, flanking via wrap, and kiting around boundaries. Pruning only occurs for expired entities.\r\n// - 'bounce': Ships/bullets reflect off edge; supports tactical repositioning, edge denial, and hit-and-run. Pruning is immediate for expired entities.\r\n// All entities, particles, and events are pruned immediately upon destruction, expiration, or leaving bounds, ensuring robust cleanup and tactical consistency.\r\nexport const boundaryBehavior: {\r\n  ships: BoundaryBehavior;\r\n  bullets: BoundaryBehavior;\r\n} = {\r\n  ships: \"wrap\",\r\n  bullets: \"remove\",\r\n};\r\n\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 + level * 50,\r\n};\r\n\r\nexport const LOGICAL_MAP = { W: 1920, H: 1080 };\r\n\r\nexport function getDefaultBounds() {\r\n  // Fixed logical map size for simulation and rendering\r\n  return { W: LOGICAL_MAP.W, H: LOGICAL_MAP.H };\r\n}\r\n\r\nexport default {\r\n  SIM,\r\n  progression,\r\n  boundaryBehavior,\r\n  LOGICAL_MAP,\r\n  getDefaultBounds,\r\n};\r\n", "// src/rng.ts - Seeded RNG utilities (ported from rng.js)\r\nlet _seed = 1;\r\n\r\nexport function srand(seed: number = 1) {\r\n  // store as 32-bit unsigned\r\n  _seed = seed >>> 0;\r\n}\r\n\r\n// mulberry32 PRNG\r\nfunction mulberry32(a: number) {\r\n  return function() {\r\n    let t = (a += 0x6D2B79F5) >>> 0;\r\n    t = Math.imul(t ^ (t >>> 15), t | 1);\r\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nexport function srandom(): number {\r\n  const f = mulberry32(_seed);\r\n  // advance seed deterministically\r\n  _seed = (_seed + 0x9E3779B1) >>> 0;\r\n  return f();\r\n}\r\n\r\nexport function srange(min: number, max: number): number {\r\n  return min + (max - min) * srandom();\r\n}\r\n\r\nexport function srangeInt(min: number, max: number): number {\r\n  // exclusive upper bound to match expectations\r\n  return Math.floor(srange(min, max));\r\n}\r\n\r\nexport default { srand, srandom, srange, srangeInt };\r\n", "// Generic object pool\nexport type ResetFn<T> = (obj: T) => void;\nexport default class Pool<T> {\n  private stack: T[] = [];\n  private factory: () => T;\n  private reset?: ResetFn<T>;\n  public created = 0;\n\n  constructor(factory: () => T, reset?: ResetFn<T>, initialSize = 0) {\n    this.factory = factory;\n    this.reset = reset;\n    for (let i = 0; i < initialSize; i++) this.stack.push(this.factory());\n    this.created = this.stack.length;\n  }\n\n  acquire(): T {\n    const obj = this.stack.pop();\n    if (typeof obj !== \"undefined\") return obj;\n    const newObj = this.factory();\n    this.created++;\n    return newObj;\n  }\n\n  release(obj: T): void {\n    if (this.reset) this.reset(obj);\n    // Avoid pushing the same object twice which can lead to duplicate\n    // references in the pool and subtle reuse bugs.\n    if (!this.stack.includes(obj)) this.stack.push(obj);\n  }\n\n  size(): number {\n    return this.stack.length;\n  }\n\n  clear(): void {\n    this.stack.length = 0;\n  }\n}\n", "\r\nexport function createGameManager({\r\n  useWorker = false,\r\n  renderer = null,\r\n  seed = 12345,\r\n  createSimWorker: createSimWorkerFactory,\r\n}: any = {}) {\r\n  function _evaluateAndEmit(dt: number) {\r\n    const result = evaluateReinforcement(dt, state, continuousOptions);\r\n    if (result && Array.isArray(result.spawned) && result.spawned.length) {\r\n      lastReinforcement = {\r\n        spawned: result.spawned,\r\n        timestamp: Date.now(),\r\n        options: { ...continuousOptions },\r\n      };\r\n      emit(\"reinforcements\", { spawned: result.spawned });\r\n    }\r\n  }\r\n  let state: GameState = makeInitialState();\r\n  let running = false;\r\n  const listeners = new Map<string, Function[]>();\r\n  const workerReadyCbs: Function[] = [];\r\n  let simWorker: any = null;\r\n  let _workerReadyHandler: Function | null = null;\r\n  let _workerSnapshotHandler: Function | null = null;\r\n  let _pendingRender = false;\r\n  let _workerReinforcementsHandler: Function | null = null;\r\n  let workerReady = false;\r\n  let lastReinforcement: { spawned: any[]; timestamp: number; options: any } = {\r\n    spawned: [],\r\n    timestamp: 0,\r\n    options: {},\r\n  };\r\n  let continuous = false;\r\n  let continuousOptions: any = {};\r\n  let last = typeof performance !== \"undefined\" && performance.now ? performance.now() : Date.now();\r\n  let acc = 0;\r\n  const score = { red: 0, blue: 0 };\r\n  const internal = { state, bounds: SIM.bounds };\r\n\r\n  function emit(type: string, msg: any) {\r\n    emitManagerEvent(listeners, type, msg);\r\n  }\r\n  function on(evt: string, cb: Function) {\r\n    const arr = listeners.get(evt) || [];\r\n    arr.push(cb);\r\n    listeners.set(evt, arr);\r\n  }\r\n  function off(evt: string, cb: Function) {\r\n    const arr = listeners.get(evt) || [];\r\n    const i = arr.indexOf(cb);\r\n    if (i !== -1) arr.splice(i, 1);\r\n  }\r\n  function destroy() {\r\n    running = false;\r\n    try {\r\n      if (simWorker) {\r\n        try {\r\n          if (typeof simWorker.off === \"function\") {\r\n            try { if (_workerReadyHandler) simWorker.off(\"ready\", _workerReadyHandler); } catch (e) {}\r\n            try { if (_workerSnapshotHandler) simWorker.off(\"snapshot\", _workerSnapshotHandler); } catch (e) {}\r\n            try { if (_workerReinforcementsHandler) simWorker.off(\"reinforcements\", _workerReinforcementsHandler); } catch (e) {}\r\n          }\r\n        } catch (e) {}\r\n        try { if (typeof simWorker.terminate === \"function\") simWorker.terminate(); else if (typeof simWorker.close === \"function\") simWorker.close(); else if (typeof simWorker.post === \"function\") simWorker.post({ type: \"stop\" }); } catch (e) {}\r\n        simWorker = null;\r\n      }\r\n    } catch (e) {}\r\n    workerReady = false;\r\n    workerReadyCbs.length = 0;\r\n  }\r\n  function start() {\r\n    if (!running) {\r\n      running = true;\r\n      last = typeof performance !== \"undefined\" && performance.now ? performance.now() : Date.now();\r\n      runLoop();\r\n    }\r\n  }\r\n  function pause() {\r\n    running = false;\r\n  }\r\n  function resetManager() {\r\n    state = makeInitialState();\r\n    if (simWorker)\r\n      try {\r\n        simWorker.post({ type: \"command\", cmd: \"setState\", args: { state } });\r\n      } catch (e) {}\r\n  }\r\n  function stepOnce(dt = SIM.DT_MS / 1000) {\r\n    const n = Number(dt) || SIM.DT_MS / 1000;\r\n    step(n);\r\n  }\r\n  function step(dtSeconds: number) {\r\n    const clampedDt = Math.min(dtSeconds, 0.05);\r\n    if (!simWorker) {\r\n      try { applySimpleAI(state, clampedDt, SIM.bounds); } catch (e) {}\r\n      try { simulateStep(state, clampedDt, SIM.bounds); } catch (e) {}\r\n    } else {\r\n      try { simWorker.post && simWorker.post({ type: \"snapshotRequest\" }); } catch (e) {}\r\n    }\r\n    _evaluateAndEmit(clampedDt);\r\n    if (renderer && typeof renderer.renderState === \"function\") {\r\n      try {\r\n        renderer.renderState({\r\n          ships: state.ships,\r\n          bullets: state.bullets,\r\n          flashes: state.flashes,\r\n          shieldFlashes: state.shieldFlashes,\r\n          healthFlashes: state.healthFlashes,\r\n          t: state.t,\r\n        });\r\n      } catch (e) {}\r\n    }\r\n  }\r\n  function runLoop() {\r\n    if (!running) return;\r\n    const now = typeof performance !== \"undefined\" && performance.now ? performance.now() : Date.now();\r\n    acc += now - last;\r\n    last = now;\r\n    if (acc > 250) acc = 250;\r\n    while (acc >= SIM.DT_MS) {\r\n      step(SIM.DT_MS / 1000);\r\n      acc -= SIM.DT_MS;\r\n    }\r\n    try { requestAnimationFrame(runLoop); } catch (e) { setTimeout(runLoop, SIM.DT_MS); }\r\n  }\r\n  function setContinuousEnabled(v: boolean = false) {\r\n    continuous = !!v;\r\n    if (simWorker) {\r\n      try { simWorker.post({ type: \"setContinuous\", value: !!v }); } catch (e) {}\r\n    } else {\r\n      if (continuous) {\r\n        const result = evaluateReinforcement(SIM.DT_MS / 1000, state, continuousOptions);\r\n        if (result && Array.isArray(result.spawned) && result.spawned.length) {\r\n          lastReinforcement = {\r\n            spawned: result.spawned,\r\n            timestamp: Date.now(),\r\n            options: { ...continuousOptions },\r\n          };\r\n          emit(\"reinforcements\", { spawned: result.spawned });\r\n        }\r\n      }\r\n    }\r\n  }\r\n  function isContinuousEnabled() { return !!continuous; }\r\n  function setContinuousOptions(opts: any = {}) {\r\n    continuousOptions = { ...continuousOptions, ...opts };\r\n    if (simWorker)\r\n      try { simWorker.post({ type: \"setContinuousOptions\", opts: continuousOptions }); } catch (e) {}\r\n  }\r\n  function getContinuousOptions() { return { ...continuousOptions }; }\r\n  function setReinforcementIntervalManager(seconds: number) {\r\n    setReinforcementInterval(seconds);\r\n    if (simWorker)\r\n      try { simWorker.post({ type: \"setReinforcementInterval\", seconds }); } catch (e) {}\r\n  }\r\n  function getReinforcementIntervalManager() { return getReinforcementInterval(); }\r\n  function isRunning() { return running; }\r\n  function isWorker() { return !!simWorker && !!workerReady; }\r\n  function onWorkerReady(cb: Function) { if (typeof cb === \"function\") workerReadyCbs.push(cb); }\r\n  function offWorkerReady(cb: Function) { const i = workerReadyCbs.indexOf(cb); if (i !== -1) workerReadyCbs.splice(i, 1); }\r\n  function spawnShip(team: string = \"red\", type?: string) {\r\n    try {\r\n      // Resolve default ship type safely across ESM/CJS; fallback to 'fighter'\r\n      const shipType = (() => {\r\n        if (type) return type;\r\n        try {\r\n          if (typeof getDefaultShipType === \"function\") return getDefaultShipType();\r\n        } catch {}\r\n        try {\r\n          const esm = EntitiesConfigESM as any;\r\n          if (esm && typeof esm.getDefaultShipType === \"function\") return esm.getDefaultShipType();\r\n          if (esm && esm.default && typeof esm.default === \"object\") {\r\n            const keys = Object.keys(esm.default || {});\r\n            if (keys.length) return keys[0];\r\n          }\r\n        } catch {}\r\n        return \"fighter\";\r\n      })();\r\n      const b = SIM.bounds;\r\n      const x = Math.max(0, Math.min(b.W - 1e-6, srandom() * b.W));\r\n      const y = Math.max(0, Math.min(b.H - 1e-6, srandom() * b.H));\r\n      const ship = createShip(shipType, x, y, team);\r\n      state.ships.push(ship);\r\n      try {\r\n        (state as any).shipMap && (state as any).shipMap.set(ship.id, ship);\r\n      } catch (e) {}\r\n      try {\r\n        updateTeamCount(state as any, undefined, String(ship.team));\r\n      } catch (e) {}\r\n      return ship;\r\n    } catch (e) { return null; }\r\n  }\r\n  function formFleets() {\r\n    try {\r\n      state.ships.length = 0;\r\n      const bounds = SIM.bounds;\r\n      const seedVal = Math.floor(srandom() * 0xffffffff) >>> 0;\r\n      const ships = makeInitialFleets(seedVal, bounds, createShip);\r\n      for (const ship of ships) {\r\n        state.ships.push(ship);\r\n      }\r\n      try { normalizeStateShips(state); } catch (e) {}\r\n    } catch (e) {}\r\n  }\r\n  function reseedManager(newSeed: number = Math.floor(srandom() * 0xffffffff)) {\r\n    _seed = newSeed >>> 0;\r\n    srand(_seed);\r\n    if (simWorker)\r\n      try { simWorker.post({ type: \"setSeed\", seed: _seed }); } catch (e) {}\r\n  }\r\n  function getLastReinforcement() { return { ...lastReinforcement }; }\r\n  function snapshot() {\r\n    return {\r\n      ships: state.ships.slice(),\r\n      bullets: state.bullets.slice(),\r\n      t: state.t,\r\n      teamCounts: state.teamCounts ? { ...state.teamCounts } : {},\r\n      flashes: state.flashes ? state.flashes.slice() : [],\r\n      shieldFlashes: state.shieldFlashes ? state.shieldFlashes.slice() : [],\r\n      healthFlashes: state.healthFlashes ? state.healthFlashes.slice() : [],\r\n    };\r\n  }\r\n  // Worker setup (optional, not used in current UI)\r\n  try {\r\n    if (useWorker) {\r\n      const factory = createSimWorkerFactory || createSimWorker;\r\n      let simWorkerUrl;\r\n      try {\r\n        simWorkerUrl = typeof import.meta !== \"undefined\" && import.meta.url ? new URL(\"./simWorker.js\", import.meta.url).href : \"./simWorker.js\";\r\n      } catch (e) { simWorkerUrl = \"./simWorker.js\"; }\r\n      simWorker = factory(simWorkerUrl);\r\n      _workerReadyHandler = () => {\r\n        workerReady = true;\r\n        for (const cb of workerReadyCbs.slice()) { try { cb(); } catch (e) {} }\r\n      };\r\n      simWorker.on && simWorker.on(\"ready\", _workerReadyHandler);\r\n      _workerSnapshotHandler = (m: any) => {\r\n        try {\r\n          if (m && m.state) {\r\n            state = m.state;\r\n            try { normalizeStateShips(state); } catch (e) {}\r\n            try { internal.state = state; } catch (e) {}\r\n            // Coalesce render to next RAF so UI updates once per frame\r\n            try {\r\n              if (renderer && typeof renderer.renderState === 'function') {\r\n                if (!_pendingRender) {\r\n                  _pendingRender = true;\r\n                  try {\r\n                    requestAnimationFrame(() => {\r\n                      try {\r\n                        renderer.renderState({\r\n                          ships: state.ships,\r\n                          bullets: state.bullets,\r\n                          flashes: state.flashes,\r\n                          shieldFlashes: state.shieldFlashes,\r\n                          healthFlashes: state.healthFlashes,\r\n                          t: state.t,\r\n                        });\r\n                      } catch (e) {}\r\n                      _pendingRender = false;\r\n                    });\r\n                  } catch (e) {\r\n                    setTimeout(() => {\r\n                      try {\r\n                        renderer.renderState({\r\n                          ships: state.ships,\r\n                          bullets: state.bullets,\r\n                          flashes: state.flashes,\r\n                          shieldFlashes: state.shieldFlashes,\r\n                          healthFlashes: state.healthFlashes,\r\n                          t: state.t,\r\n                        });\r\n                      } catch (e) {}\r\n                      _pendingRender = false;\r\n                    }, 0);\r\n                  }\r\n                }\r\n              }\r\n            } catch (e) {}\r\n          }\r\n        } catch (e) {}\r\n      };\r\n      simWorker.on && simWorker.on(\"snapshot\", _workerSnapshotHandler);\r\n      _workerReinforcementsHandler = (m: any) => { emit(\"reinforcements\", m); };\r\n      simWorker.on && simWorker.on(\"reinforcements\", _workerReinforcementsHandler);\r\n      try {\r\n        simWorker.post({ type: \"init\", seed, bounds: SIM.bounds, simDtMs: SIM.DT_MS, state });\r\n        simWorker.post({ type: \"start\" });\r\n      } catch (e) {}\r\n    }\r\n  } catch (e) { simWorker = null; }\r\n\r\n  return {\r\n    // Allow external callers (tests) to push snapshots into the manager\r\n    onSnapshot: (m: any) => {\r\n      try {\r\n        if (m && m.state) {\r\n          state = m.state;\r\n          try { normalizeStateShips(state); } catch (e) {}\r\n          try { internal.state = state; } catch (e) {}\r\n          if (renderer && typeof renderer.renderState === 'function') {\r\n            try {\r\n              if (!_pendingRender) {\r\n                _pendingRender = true;\r\n                try {\r\n                  requestAnimationFrame(() => {\r\n                    try {\r\n                      renderer.renderState({\r\n                        ships: state.ships,\r\n                        bullets: state.bullets,\r\n                        flashes: state.flashes,\r\n                        shieldFlashes: state.shieldFlashes,\r\n                        healthFlashes: state.healthFlashes,\r\n                        t: state.t,\r\n                      });\r\n                    } catch (e) {}\r\n                    _pendingRender = false;\r\n                  });\r\n                } catch (e) {\r\n                  setTimeout(() => {\r\n                    try {\r\n                      renderer.renderState({\r\n                        ships: state.ships,\r\n                        bullets: state.bullets,\r\n                        flashes: state.flashes,\r\n                        shieldFlashes: state.shieldFlashes,\r\n                        healthFlashes: state.healthFlashes,\r\n                        t: state.t,\r\n                      });\r\n                    } catch (e) {}\r\n                    _pendingRender = false;\r\n                  }, 0);\r\n                }\r\n              }\r\n            } catch (e) {}\r\n          }\r\n        }\r\n      } catch (e) {}\r\n    },\r\n    on,\r\n    off,\r\n    start,\r\n    pause,\r\n    reset: resetManager,\r\n    stepOnce,\r\n    setContinuousEnabled,\r\n    isContinuousEnabled,\r\n    setContinuousOptions,\r\n    getContinuousOptions,\r\n    setReinforcementInterval: setReinforcementIntervalManager,\r\n    getReinforcementInterval: getReinforcementIntervalManager,\r\n    isRunning,\r\n    isWorker,\r\n    onWorkerReady,\r\n    offWorkerReady,\r\n    spawnShip,\r\n    reseed: reseedManager,\r\n    getLastReinforcement,\r\n    snapshot,\r\n    score,\r\n    formFleets,\r\n    destroy,\r\n    _internal: internal,\r\n  };\r\n}\r\n\r\nexport default createGameManager;\r\n// Convenience runtime reset function used by tests (delegates to internal resetManager when using default manager instance)\r\nexport function reset(seed: number | null = null) {\r\n  // Resetting global manager state is test-specific; callers use makeInitialState directly in many tests.\r\n  // Provide a no-op reset to satisfy legacy tests that import reset from the module.\r\n  if (typeof seed === 'number') {\r\n    try { /* reseed global RNG if exposed */ } catch (e) {}\r\n  }\r\n}\r\nexport function releaseParticle(state: GameState, p?: Particle) {\r\n  if (!p) return;\r\n  const key = \"particle\";\r\n  try {\r\n    releaseEffect(state, key, p, (x) => {\r\n      /* no-op */\r\n    });\r\n  } catch {}\r\n  const idx = (state.particles || []).indexOf(p);\r\n  if (idx !== -1) (state.particles || []).splice(idx, 1);\r\n}\r\n// Minimal TypeScript shim that re-exports the existing JavaScript runtime implementation.\r\n// Import the runtime as a namespace and re-export value bindings to avoid\r\n// circular alias issues. Types are defined in `gamemanager.d.ts`.\r\n\r\n// Ported from gamemanager.js, now canonical TypeScript implementation\r\nimport {\r\n  makeInitialState,\r\n  createShip,\r\n  Ship,\r\n  Bullet,\r\n  genId,\r\n  ExplosionEffect,\r\n  ShieldHitEffect,\r\n  HealthHitEffect,\r\n  createExplosionEffect,\r\n  resetExplosionEffect,\r\n  createShieldHitEffect,\r\n  resetShieldHitEffect,\r\n  createHealthHitEffect,\r\n  resetHealthHitEffect,\r\n  normalizeTurrets,\r\n  normalizeStateShips,\r\n} from \"./entities\";\r\nimport { updateTeamCount } from \"./entities\";\r\nimport { PARTICLE_DEFAULTS } from \"./config/entitiesConfig\";\r\nimport { applySimpleAI } from \"./behavior\";\r\nimport { simulateStep } from \"./simulate\";\r\nimport { SIM } from \"./config/simConfig\";\r\nimport { srand, srandom } from \"./rng\";\r\nimport { createSimWorker } from \"./createSimWorker\";\r\nimport {\r\n  acquireEffect,\r\n  releaseEffect,\r\n  acquireSprite,\r\n  releaseSprite,\r\n  makePooled,\r\n} from \"./pools\";\r\nimport {\r\n  SHIELD,\r\n  HEALTH,\r\n  EXPLOSION,\r\n  STARS,\r\n  FALLBACK_POSITIONS,\r\n} from \"./config/gamemanagerConfig\";\r\nimport type { ShipConfigMap, GameState } from \"./types\";\r\nimport { getShipConfig, getDefaultShipType } from \"./config/entitiesConfig\";\r\nimport * as EntitiesConfigESM from \"./config/entitiesConfig\";\r\nimport {\r\n  chooseReinforcementsWithManagerSeed,\r\n  makeInitialFleets,\r\n  TeamsConfig,\r\n} from \"./config/teamsConfig\";\r\n\r\n// All runtime arrays are now managed via GameState for determinism and lifecycle control.\r\n// Bullet pooling\r\n// Bullets: support optional GameState-backed pooling. If `state` is provided,\r\n// use state.assetPool.sprites keyed by 'bullet', otherwise fallback to legacy in-memory pool.\r\nexport function acquireBullet(\r\n  state: GameState,\r\n  opts: Partial<Bullet> = {},\r\n): Bullet {\r\n  // Defensive: accept minimal/mocked state objects in tests by ensuring\r\n  // required collections exist. Do not overwrite existing richer assetPool.\r\n  if (!state) state = makeInitialState() as GameState;\r\n  (state as any).bullets = (state as any).bullets || [];\r\n  (state as any).assetPool = (state as any).assetPool || {\r\n    textures: new Map(),\r\n    sprites: new Map(),\r\n    effects: new Map(),\r\n    counts: {\r\n      textures: new Map(),\r\n      sprites: new Map(),\r\n      effects: new Map(),\r\n    },\r\n    config: {\r\n      texturePoolSize: 128,\r\n      spritePoolSize: 256,\r\n      effectPoolSize: 128,\r\n      textureOverflowStrategy: \"discard-oldest\",\r\n      spriteOverflowStrategy: \"discard-oldest\",\r\n      effectOverflowStrategy: \"discard-oldest\",\r\n    },\r\n  };\r\n  // Use state-backed sprite pool keyed by 'bullet'\r\n  const key = \"bullet\";\r\n  const b = acquireSprite(\r\n    state,\r\n    key,\r\n    () =>\r\n      makePooled(\r\n        { ...opts, id: genId(), alive: true } as any,\r\n        (o: any, initArgs?: any) => Object.assign(o, initArgs),\r\n      ),\r\n    opts,\r\n  ) as Bullet & any;\r\n  // push into the state-active array so simulation sees it\r\n  (state.bullets ||= []).push(b as Bullet);\r\n  return b;\r\n}\r\n\r\nexport function releaseBullet(state: GameState, b?: Bullet): void {\r\n  if (!b) return;\r\n  if (!b.alive) return; // Prevent double-free\r\n  b.alive = false;\r\n  // remove from the state's active bullets\r\n  const arr = state.bullets || ([] as Bullet[]);\r\n  const idx = arr.indexOf(b as Bullet);\r\n  if (idx !== -1) arr.splice(idx, 1);\r\n  releaseSprite(state, \"bullet\", b as any, undefined);\r\n}\r\n\r\n// Explosion pooling\r\nexport function acquireExplosion(\r\n  state: GameState,\r\n  opts: Partial<ExplosionEffect> = {},\r\n): ExplosionEffect {\r\n  const key = \"explosion\";\r\n  const e = acquireEffect<ExplosionEffect>(\r\n    state,\r\n    key,\r\n    () => makePooled(createExplosionEffect(opts), resetExplosionEffect),\r\n    opts,\r\n  );\r\n  (state.explosions ||= []).push(e);\r\n  return e;\r\n}\r\n\r\nexport function releaseExplosion(state: GameState, e?: ExplosionEffect) {\r\n  if (!e) return;\r\n  if (e._pooled) return;\r\n  if (!e.alive) return;\r\n  e.alive = false;\r\n  e._pooled = true;\r\n  const arr = state.explosions || ([] as ExplosionEffect[]);\r\n  const idx = arr.indexOf(e);\r\n  if (idx !== -1) arr.splice(idx, 1);\r\n  releaseEffect(state, \"explosion\", e, undefined);\r\n}\r\n\r\n// ShieldHit pooling\r\nexport function acquireShieldHit(\r\n  state: GameState,\r\n  opts: Partial<ShieldHitEffect> = {},\r\n): ShieldHitEffect {\r\n  const key = \"shieldHit\";\r\n  const sh = acquireEffect<ShieldHitEffect>(\r\n    state,\r\n    key,\r\n    () => makePooled(createShieldHitEffect(opts), resetShieldHitEffect),\r\n    opts,\r\n  );\r\n  (state.shieldHits ||= []).push(sh);\r\n  return sh;\r\n}\r\n\r\nexport function releaseShieldHit(state: GameState, sh?: ShieldHitEffect) {\r\n  if (!sh) return;\r\n  if (sh._pooled) return;\r\n  const arr = state.shieldHits || ([] as ShieldHitEffect[]);\r\n  const i = arr.indexOf(sh);\r\n  if (i !== -1) arr.splice(i, 1);\r\n  sh.alive = false;\r\n  sh._pooled = true;\r\n  releaseEffect(state, \"shieldHit\", sh, undefined);\r\n}\r\n\r\n// HealthHit pooling\r\nexport function acquireHealthHit(\r\n  state: GameState,\r\n  opts: Partial<HealthHitEffect> = {},\r\n): HealthHitEffect {\r\n  const key = \"healthHit\";\r\n  const hh = acquireEffect<HealthHitEffect>(\r\n    state,\r\n    key,\r\n    () => makePooled(createHealthHitEffect(opts), resetHealthHitEffect),\r\n    opts,\r\n  );\r\n  (state.healthHits ||= []).push(hh);\r\n  return hh;\r\n}\r\n\r\nexport function releaseHealthHit(state: GameState, hh?: HealthHitEffect) {\r\n  if (!hh) return;\r\n  if (hh._pooled) return;\r\n  const arr = state.healthHits || ([] as HealthHitEffect[]);\r\n  const i = arr.indexOf(hh);\r\n  if (i !== -1) arr.splice(i, 1);\r\n  hh.alive = false;\r\n  hh._pooled = true;\r\n  releaseEffect(state, \"healthHit\", hh, undefined);\r\n}\r\n\r\nexport const config = {\r\n  shield: { ...SHIELD },\r\n  health: { ...HEALTH },\r\n  explosion: { ...EXPLOSION },\r\n  stars: { ...STARS },\r\n};\r\n\r\nlet _seed: number | null = null;\r\nlet _reinforcementInterval: number =\r\n  TeamsConfig.continuousReinforcement?.interval ?? 5.0;\r\nlet _reinforcementAccumulator = 0;\r\nlet _starCanvasVersion = 0;\r\nlet starCanvas: HTMLCanvasElement | null = null;\r\nlet _lastSimulateFrameId: number | null = null;\r\nlet _doubleSimStrict = false;\r\n\r\nexport function setDoubleSimStrict(v: boolean = false) {\r\n  _doubleSimStrict = !!v;\r\n}\r\n\r\nexport class Particle {\r\n  x: number;\r\n  y: number;\r\n  vx: number;\r\n  vy: number;\r\n  ttl: number;\r\n  life: number;\r\n  color: string;\r\n  size: number;\r\n  alive: boolean;\r\n  _pooled?: boolean; // Add pooled flag to prevent double-free\r\n  constructor(x = 0, y = 0, vx = 0, vy = 0, ttl = 1, color = \"#fff\", size = 2) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.vx = vx;\r\n    this.vy = vy;\r\n    this.ttl = ttl;\r\n    this.life = ttl;\r\n    this.color = color;\r\n    this.size = size;\r\n    this.alive = true;\r\n    this._pooled = false;\r\n  }\r\n}\r\n\r\nexport function acquireParticle(\r\n  state: GameState,\r\n  x: number,\r\n  y: number,\r\n  opts: Partial<Particle> = {},\r\n): Particle {\r\n  // Resolve PARTICLE_DEFAULTS safely to handle any ESM/CJS interop hiccups during tests\r\n  const PARTICLE_DEFAULTS_SAFE = (() => {\r\n    try {\r\n      const v: any = PARTICLE_DEFAULTS as any;\r\n      if (v && typeof v.ttl === \"number\" && typeof v.size !== \"undefined\") return v;\r\n    } catch (e) {}\r\n    return { ttl: 1, color: \"#fff\", size: 2 } as const;\r\n  })();\r\n  const key = \"particle\";\r\n  const poolConfig = state.assetPool?.config || {};\r\n  const maxSize = poolConfig.effectPoolSize ?? 128;\r\n  const overflowStrategy = poolConfig.effectOverflowStrategy ?? \"discard-oldest\";\r\n  // Defensive: prune oldest if pool is full\r\n  if ((state.particles?.length ?? 0) >= maxSize) {\r\n    if (overflowStrategy === \"discard-oldest\" && state.particles?.length) {\r\n      state.particles?.shift();\r\n    } else if (overflowStrategy === \"error\") {\r\n      // Do not add new particle, return null\r\n      return null as any;\r\n    } // \"grow\" allows pool to grow\r\n  }\r\n  // Create a pooled Particle instance\r\n  const p = acquireEffect<Particle>(\r\n    state,\r\n    key,\r\n    () => makePooled(new Particle(x, y, opts.vx ?? 0, opts.vy ?? 0, opts.ttl ?? PARTICLE_DEFAULTS_SAFE.ttl, opts.color ?? PARTICLE_DEFAULTS_SAFE.color, opts.size ?? PARTICLE_DEFAULTS_SAFE.size), undefined),\r\n    {\r\n      x,\r\n      y,\r\n      vx: opts.vx ?? 0,\r\n      vy: opts.vy ?? 0,\r\n      ttl: opts.ttl ?? PARTICLE_DEFAULTS_SAFE.ttl,\r\n      color: opts.color ?? PARTICLE_DEFAULTS_SAFE.color,\r\n      size: opts.size ?? PARTICLE_DEFAULTS_SAFE.size,\r\n    },\r\n  );\r\n  // Rehydrate properties\r\n  p.x = x;\r\n  p.y = y;\r\n  p.vx = opts.vx ?? 0;\r\n  p.vy = opts.vy ?? 0;\r\n  p.ttl = opts.ttl ?? PARTICLE_DEFAULTS_SAFE.ttl;\r\n  p.life = p.ttl;\r\n  p.color = opts.color ?? PARTICLE_DEFAULTS_SAFE.color;\r\n  p.size = opts.size ?? PARTICLE_DEFAULTS_SAFE.size;\r\n  p.alive = true;\r\n  (state.particles ||= []).push(p);\r\n  return p;\r\n}\r\n\r\nexport function createStarCanvas(\r\n  state: GameState,\r\n  W = 800,\r\n  H = 600,\r\n  bg = \"#041018\",\r\n): HTMLCanvasElement | null {\r\n  if (!state || !Array.isArray(state.stars)) return null;\r\n  try {\r\n    const c =\r\n      typeof document !== \"undefined\" && document.createElement\r\n        ? document.createElement(\"canvas\")\r\n        : null;\r\n    if (!c) return null;\r\n    c.width = Math.max(1, Math.floor(W));\r\n    c.height = Math.max(1, Math.floor(H));\r\n    const ctx = c.getContext && c.getContext(\"2d\");\r\n    if (ctx) {\r\n      ctx.fillStyle = bg;\r\n      ctx.fillRect(0, 0, c.width, c.height);\r\n      for (const s of state.stars) {\r\n        const alpha = Math.max(\r\n          0,\r\n          Math.min(1, s.a != null ? s.a : s.baseA != null ? s.baseA : 1),\r\n        );\r\n        ctx.beginPath();\r\n        ctx.fillStyle = `rgba(255,255,255,${alpha})`;\r\n        const rr = Math.max(0.2, s.r || 0.5);\r\n        ctx.arc(s.x || 0, s.y || 0, rr, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      }\r\n    }\r\n    _starCanvasVersion = (_starCanvasVersion || 0) + 1;\r\n    (c as any)._version = _starCanvasVersion;\r\n    starCanvas = c;\r\n    return c;\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function getStarCanvasVersion() {\r\n  return _starCanvasVersion;\r\n}\r\n\r\nexport function setReinforcementInterval(seconds: number) {\r\n  _reinforcementInterval =\r\n    Number(seconds) || (TeamsConfig.continuousReinforcement?.interval ?? 5.0);\r\n}\r\nexport function getReinforcementInterval() {\r\n  return _reinforcementInterval;\r\n}\r\n\r\nfunction emitManagerEvent(\r\n  map: Map<string, Function[]>,\r\n  type: string,\r\n  data: any,\r\n) {\r\n  const arr = map.get(type) || [];\r\n  for (const cb of arr.slice()) {\r\n    try {\r\n      if (typeof cb === \"function\") cb(data);\r\n    } catch (e) {}\r\n  }\r\n}\r\n\r\nfunction evaluateReinforcement(\r\n  dt: number,\r\n  state: GameState,\r\n  continuousOptions: any = {},\r\n): { spawned: any[] } | null {\r\n  _reinforcementAccumulator += dt;\r\n  if (_reinforcementAccumulator >= _reinforcementInterval) {\r\n    _reinforcementAccumulator = 0;\r\n    try {\r\n      if (typeof chooseReinforcementsWithManagerSeed === \"function\") {\r\n        const orders = chooseReinforcementsWithManagerSeed(state, {\r\n          ...continuousOptions,\r\n          bounds: SIM.bounds,\r\n          enabled: true,\r\n        });\r\n        if (Array.isArray(orders) && orders.length) {\r\n          const spawned: any[] = [];\r\n          for (const o of orders) {\r\n            try {\r\n              const ship = createShip(\r\n                o.type || getDefaultShipType(),\r\n                o.x || 100,\r\n                o.y || 100,\r\n                o.team || \"red\",\r\n              );\r\n              state.ships.push(ship);\r\n              try {\r\n                (state as any).shipMap &&\r\n                  (state as any).shipMap.set(ship.id, ship);\r\n              } catch (e) {}\r\n              try {\r\n                updateTeamCount(state, undefined, ship.team);\r\n              } catch (e) {}\r\n              spawned.push(ship);\r\n            } catch (e) {}\r\n          }\r\n          return { spawned };\r\n        }\r\n      }\r\n      const fallback = getDefaultShipType();\r\n      const r = createShip(\r\n        fallback,\r\n        FALLBACK_POSITIONS[0].x,\r\n        FALLBACK_POSITIONS[0].y,\r\n        FALLBACK_POSITIONS[0].team,\r\n      );\r\n      const b = createShip(\r\n        fallback,\r\n        FALLBACK_POSITIONS[1].x,\r\n        FALLBACK_POSITIONS[1].y,\r\n        FALLBACK_POSITIONS[1].team,\r\n      );\r\n      state.ships.push(r);\r\n      try {\r\n        (state as any).shipMap && (state as any).shipMap.set(r.id, r);\r\n      } catch (e) {}\r\n      try {\r\n        updateTeamCount(state, undefined, String(r.team));\r\n      } catch (e) {}\r\n      state.ships.push(b);\r\n      try {\r\n        (state as any).shipMap && (state as any).shipMap.set(b.id, b);\r\n      } catch (e) {}\r\n      try {\r\n        updateTeamCount(state, undefined, String(b.team));\r\n      } catch (e) {}\r\n      return { spawned: [r, b] };\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function simulate(dt: number, W = 800, H = 600) {\r\n  try {\r\n    const now =\r\n      typeof performance !== \"undefined\" && performance.now\r\n        ? performance.now()\r\n        : Date.now();\r\n    const frame = Math.floor(now / 4);\r\n    if (_lastSimulateFrameId === frame) {\r\n      const msg =\r\n        \"[gamemanager] detected simulate() called multiple times in same frame\";\r\n      try {\r\n        const _isProd =\r\n          (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'production') ||\r\n          (typeof (globalThis as any).NODE_ENV !== 'undefined' && (globalThis as any).NODE_ENV === 'production');\r\n        if (_doubleSimStrict) throw new Error(msg);\r\n        else if (!_isProd) console.warn(msg);\r\n      } catch (e) {\r\n        // ignore environment detection errors and avoid noisy logs in production\r\n      }\r\n    }\r\n    _lastSimulateFrameId = frame;\r\n  } catch (e) {}\r\n  // Build a canonical GameState using makeInitialState to ensure assetPool exists\r\n  const state: GameState = makeInitialState();\r\n  (state as any).t = 0;\r\n  // No global arrays; all arrays are managed via GameState\r\n  evaluateReinforcement(dt, state);\r\n  try {\r\n    simulateStep(state, dt, SIM.bounds);\r\n  } catch (e) {}\r\n  // No global state to clear; callers should pass `state` explicitly to helpers.\r\n  return state;\r\n}\r\n\r\n\r\nexport function processStateEvents(state: any, dt: number = 0) {\r\n  return state;\r\n}\r\n", "export const EVASIVE_DURATION = 0.8; // seconds\r\nexport const TURN_RATES = { default: 4.0 } as const; // radians per second typical turn rate\r\nexport const EVASIVE_THRUST_MULT = 1.5; // multiplier for thrust during evasive maneuvers\r\nexport const SEPARATION_MULT = 0.6; // separation force multiplier between ships\r\n\r\n// AI logic thresholds and decision timer\r\nexport const AI_THRESHOLDS = {\r\n  decisionTimerMin: 0.5,\r\n  decisionTimerMax: 2.0,\r\n  hpEvadeThreshold: 0.35,\r\n  randomLow: 0.15,\r\n  randomHigh: 0.85,\r\n};\r\n\r\n// Ship movement global defaults (used if not per-ship)\r\nexport const SHIP_MOVEMENT_DEFAULTS = {\r\n  maxSpeed: 160,\r\n  maxAccel: 5,\r\n};\r\n\r\nexport default {\r\n  EVASIVE_DURATION,\r\n  TURN_RATES,\r\n  EVASIVE_THRUST_MULT,\r\n  SEPARATION_MULT,\r\n  AI_THRESHOLDS,\r\n  SHIP_MOVEMENT_DEFAULTS,\r\n};\r\n", "// behavior.ts - deterministic, simple AI for steering and firing\n// Uses seeded RNG for any randomness so results are reproducible.\nimport { srandom, srange } from \"./rng\";\nimport { createBullet } from \"./entities\";\nimport { acquireBullet } from \"./gamemanager\";\nimport { AI_THRESHOLDS, SHIP_MOVEMENT_DEFAULTS } from \"./config/behaviorConfig\";\nimport { BULLET_DEFAULTS } from \"./config/entitiesConfig\";\nimport { TEAM_DEFAULT } from \"./config/teamsConfig\";\n\ntype ShipLike = {\n  id?: number;\n  x?: number;\n  y?: number;\n  vx?: number;\n  vy?: number;\n  team?: string;\n  hp?: number;\n  maxHp?: number;\n  cannons?: any[];\n  accel?: number; // max acceleration from config\n  currentAccel?: number; // dynamic, set by AI/gamemanager, 0..accel\n  radius?: number;\n  turnRate?: number;\n  damage?: number;\n  dmg?: number;\n  maxSpeed?: number; // NEW: max speed per ship\n  steering?: number; // NEW: steering intent (-1..1)\n  throttle?: number; // NEW: throttle intent (0..1)\n  __ai?: any;\n  turrets?: any[];\n  angle?: number;\n  type?: string; // Added for config sync\n};\n\nimport type { GameState } from \"./types\";\nimport { getDefaultBounds } from \"./config/simConfig\";\ntype State = GameState;\n\nfunction len2(vx: number, vy: number) {\n  return vx * vx + vy * vy;\n}\nconst DEFAULT_BULLET_RANGE =\n  // Guard against undefined export in certain CJS/ESM interop paths\n  typeof (BULLET_DEFAULTS as any)?.range === \"number\"\n    ? (BULLET_DEFAULTS as any).range\n    : 300;\n\n// Local safe accessor for bullet defaults to avoid hard crashes when the\n// named export is unavailable due to module interop differences in tests.\nfunction getBulletDefaultsSafe() {\n  const fallback = { damage: 1, ttl: 2.0, radius: 1.5, muzzleSpeed: 24, range: 300 } as const;\n  // If BULLET_DEFAULTS is an object, use it; otherwise use fallback.\n  const src: any = BULLET_DEFAULTS as any;\n  return (src && typeof src === \"object\") ? src : (fallback as any);\n}\nfunction withinRange(\n  sx: number,\n  sy: number,\n  tx: number,\n  ty: number,\n  range: number,\n) {\n  const dx = tx - sx;\n  const dy = ty - sy;\n  return dx * dx + dy * dy <= range * range;\n}\nfunction clampSpeed(s: ShipLike, max: number) {\n  const v2 = len2(s.vx || 0, s.vy || 0);\n\n  const max2 = max * max;\n  if (v2 > max2 && v2 > 0) {\n    const inv = max / Math.sqrt(v2);\n    s.vx = (s.vx || 0) * inv;\n    s.vy = (s.vy || 0) * inv;\n  }\n}\n\nexport { clampSpeed };\n\nfunction aimWithSpread(from: ShipLike, to: ShipLike, spread = 0) {\n  let dx = (to.x || 0) - (from.x || 0);\n  let dy = (to.y || 0) - (from.y || 0);\n  const d = Math.hypot(dx, dy) || 1;\n  dx /= d;\n  dy /= d;\n  if (spread > 0) {\n    const ang = Math.atan2(dy, dx);\n    const jitter = srange(-spread, spread);\n    const na = ang + jitter;\n    return { x: Math.cos(na), y: Math.sin(na) };\n  }\n  return { x: dx, y: dy };\n}\n\nfunction tryFire(state: State, ship: ShipLike, target: ShipLike, dt: number) {\n  // Legacy cannons (single target, all fire at once)\n  if (Array.isArray(ship.cannons) && ship.cannons.length > 0) {\n    for (const c of ship.cannons) {\n      if (typeof c.__cd !== \"number\") c.__cd = 0;\n      c.__cd -= dt;\n      if (c.__cd > 0) continue;\n      const range =\n        typeof c.range === \"number\" ? c.range : DEFAULT_BULLET_RANGE;\n      if (\n        !withinRange(\n          ship.x || 0,\n          ship.y || 0,\n          target.x || 0,\n          target.y || 0,\n          range,\n        )\n      )\n        continue;\n      const spread = typeof c.spread === \"number\" ? c.spread : 0;\n      const dir = aimWithSpread(ship, target, spread);\n      const speed =\n        typeof c.muzzleSpeed === \"number\"\n          ? c.muzzleSpeed\n          : getBulletDefaultsSafe().muzzleSpeed;\n      const dmg =\n        typeof c.damage === \"number\"\n          ? c.damage\n          : typeof ship.damage === \"number\"\n            ? ship.damage\n            : typeof ship.dmg === \"number\"\n              ? ship.dmg\n              : getBulletDefaultsSafe().damage;\n      const ttl =\n        typeof c.bulletTTL === \"number\" ? c.bulletTTL : getBulletDefaultsSafe().ttl;\n      const radius =\n        typeof c.bulletRadius === \"number\"\n          ? c.bulletRadius\n          : getBulletDefaultsSafe().radius;\n      const vx = dir.x * speed;\n      const vy = dir.y * speed;\n      const b = Object.assign(\n        acquireBullet(state, {\n          x: ship.x || 0,\n          y: ship.y || 0,\n          vx,\n          vy,\n          team: ship.team || TEAM_DEFAULT,\n          ownerId: ship.id || null,\n          damage: dmg,\n          ttl,\n        }),\n        { radius },\n      );\n      const rate = typeof c.rate === \"number\" && c.rate > 0 ? c.rate : 1;\n      c.__cd = 1 / rate;\n    }\n  }\n  // Multi-turret support: each turret fires independently\n  if (Array.isArray(ship.turrets) && ship.turrets.length > 0) {\n    for (const [i, turret] of ship.turrets.entries()) {\n      if (!turret) continue;\n      if (typeof turret.__cd !== \"number\") turret.__cd = 0;\n      turret.__cd -= dt;\n      if (turret.__cd > 0) continue;\n      // Target selection per turret\n      let turretTarget: ShipLike | null = null;\n      if (turret.targeting === \"nearest\") {\n        const enemies = (state.ships || []).filter(\n          (sh) => sh && sh.team !== ship.team,\n        );\n        let minDist = Infinity;\n        for (const enemy of enemies) {\n          const dx = (enemy.x || 0) - (ship.x || 0);\n          const dy = (enemy.y || 0) - (ship.y || 0);\n          const d2 = dx * dx + dy * dy;\n          if (d2 < minDist) {\n            minDist = d2;\n            turretTarget = enemy;\n          }\n        }\n      } else if (turret.targeting === \"random\") {\n        const enemies = (state.ships || []).filter(\n          (sh) => sh && sh.team !== ship.team,\n        );\n        if (enemies.length)\n          turretTarget = enemies[Math.floor(srandom() * enemies.length)];\n      } else if (turret.targeting === \"focus\") {\n        // Use ship's main target if available (O(1) via shipMap)\n        if (ship.__ai && ship.__ai.targetId != null) {\n          const tId = ship.__ai.targetId as number | string | null;\n          turretTarget =\n            (state as any).shipMap && typeof tId !== \"undefined\" && tId !== null\n              ? (state as any).shipMap.get(Number(tId)) || null\n              : (state.ships || []).find((sh) => sh && sh.id === tId) || null;\n        }\n      } else {\n        // Default: nearest\n        const enemies = (state.ships || []).filter(\n          (sh) => sh && sh.team !== ship.team,\n        );\n        let minDist = Infinity;\n        for (const enemy of enemies) {\n          const dx = (enemy.x || 0) - (ship.x || 0);\n          const dy = (enemy.y || 0) - (ship.y || 0);\n          const d2 = dx * dx + dy * dy;\n          if (d2 < minDist) {\n            minDist = d2;\n            turretTarget = enemy;\n          }\n        }\n      }\n      if (!turretTarget) continue;\n      // Fire from turret position (relative to ship center, using config radius)\n      const spread =\n        typeof turret.spread === \"number\"\n          ? turret.spread\n          : 0.05; // default turret spread when not provided\n      // Compute turret mount world position and aim from that mount\n      const mountPos =\n        Array.isArray(turret) && turret.length === 2\n          ? turret\n          : turret && Array.isArray((turret as any).position)\n            ? (turret as any).position\n            : [0, 0];\n      const [mTx, mTy] = mountPos;\n      const shipAngle = ship.angle || 0;\n      const configRadiusLocal =\n        typeof ship.radius === \"number\" && ship.radius > 0 ? ship.radius : 12;\n      const mountX =\n        (ship.x || 0) +\n        Math.cos(shipAngle) * mTx * configRadiusLocal -\n        Math.sin(shipAngle) * mTy * configRadiusLocal;\n      const mountY =\n        (ship.y || 0) +\n        Math.sin(shipAngle) * mTx * configRadiusLocal +\n        Math.cos(shipAngle) * mTy * configRadiusLocal;\n      const dir = aimWithSpread({ x: mountX, y: mountY }, turretTarget, spread);\n      const speed =\n        typeof turret.muzzleSpeed === \"number\"\n          ? turret.muzzleSpeed\n          : getBulletDefaultsSafe().muzzleSpeed;\n      const dmg =\n        typeof turret.damage === \"number\"\n          ? turret.damage\n          : typeof ship.damage === \"number\"\n            ? ship.damage\n            : getBulletDefaultsSafe().damage;\n      const ttl =\n        typeof turret.bulletTTL === \"number\"\n          ? turret.bulletTTL\n          : getBulletDefaultsSafe().ttl;\n      const radius =\n        typeof turret.bulletRadius === \"number\"\n          ? turret.bulletRadius\n          : getBulletDefaultsSafe().radius;\n\n      const range =\n        typeof turret.range === \"number\" ? turret.range : DEFAULT_BULLET_RANGE;\n      const dxT = (turretTarget.x || 0) - mountX;\n      const dyT = (turretTarget.y || 0) - mountY;\n      if (dxT * dxT + dyT * dyT > range * range) continue;\n      const vx = dir.x * speed;\n      const vy = dir.y * speed;\n      // If turret defines a barrel offset (in local turret coords), spawn from the tip\n      let spawnX = mountX;\n      let spawnY = mountY;\n      const barrelLen =\n        turret && typeof (turret as any).barrel === \"number\"\n          ? (turret as any).barrel\n          : turret && (turret as any).barrel && (turret as any).barrel.length\n            ? (turret as any).barrel[0]\n            : 0;\n      if (barrelLen && barrelLen > 0) {\n        // turret world angle: shipAngle + (turret.angle || 0)\n        const turretLocalAngle =\n          turret && typeof (turret as any).angle === \"number\"\n            ? (turret as any).angle\n            : 0;\n        const turretWorldAngle = shipAngle + turretLocalAngle;\n        spawnX = mountX + Math.cos(turretWorldAngle) * barrelLen;\n        spawnY = mountY + Math.sin(turretWorldAngle) * barrelLen;\n      }\n      const b = Object.assign(\n        acquireBullet(state, {\n          x: spawnX,\n          y: spawnY,\n          vx,\n          vy,\n          team: ship.team || TEAM_DEFAULT,\n          ownerId: ship.id || null,\n          damage: dmg,\n          ttl,\n        }),\n        { radius },\n      );\n      turret.__cd =\n        typeof turret.cooldown === \"number\" && turret.cooldown > 0\n          ? turret.cooldown\n          : 1.0;\n    }\n  }\n}\n\nfunction ensureShipAiState(s: ShipLike) {\n  if (!s.__ai) {\n    s.__ai = { state: \"idle\", decisionTimer: 0, targetId: null };\n  }\n  return s.__ai;\n}\n\nfunction chooseNewTarget(state: State, ship: ShipLike) {\n  const enemies = (state.ships || []).filter(\n    (sh) => sh && sh.team !== ship.team,\n  );\n  if (!enemies.length) return null;\n  const idx = Math.floor(srandom() * enemies.length);\n  return enemies[idx];\n}\n\nfunction steerAway(\n  s: ShipLike,\n  tx: number,\n  ty: number,\n  accel: number,\n  dt: number,\n) {\n  const dx = (s.x || 0) - tx;\n  const dy = (s.y || 0) - ty;\n  const d = Math.hypot(dx, dy) || 1;\n  const nx = dx / d;\n  const ny = dy / d;\n  s.vx = (s.vx || 0) + nx * accel * dt;\n  s.vy = (s.vy || 0) + ny * accel * dt;\n}\n\nexport function applySimpleAI(\n  state: State,\n  dt: number,\n  bounds = getDefaultBounds(),\n) {\n  if (!state || !Array.isArray(state.ships)) return;\n  for (const s of state.ships) {\n    const ai = ensureShipAiState(s);\n    ai.decisionTimer = Math.max(0, (ai.decisionTimer || 0) - dt);\n\n    let target: ShipLike | null = null;\n    if (ai.targetId != null)\n      target =\n        (state as any).shipMap &&\n        typeof ai.targetId !== \"undefined\" &&\n        ai.targetId !== null\n          ? (state as any).shipMap.get(Number(ai.targetId)) || null\n          : (state.ships || []).find((sh) => sh && sh.id === ai.targetId) ||\n            null;\n    if (!target) target = chooseNewTarget(state, s);\n    if (target) ai.targetId = target.id;\n\n    // Set throttle and steering dynamically based on intent\n    const maxAccel = typeof s.accel === \"number\" ? s.accel : 100;\n    const maxSpeed = typeof s.maxSpeed === \"number\" ? s.maxSpeed : 160;\n    s.steering = typeof s.steering === \"number\" ? s.steering : 0;\n    s.throttle = typeof s.throttle === \"number\" ? s.throttle : 0;\n\n    if (!target) {\n      // Idle: no acceleration, no steering\n      s.throttle = 0;\n      s.steering = 0;\n      ai.state = \"idle\";\n    } else {\n      if (ai.decisionTimer <= 0) {\n        const hpFrac = (s.hp || 0) / Math.max(1, s.maxHp || 1);\n        const rnd = srandom();\n        if (\n          hpFrac < AI_THRESHOLDS.hpEvadeThreshold ||\n          rnd < AI_THRESHOLDS.randomLow\n        )\n          ai.state = \"evade\";\n        else if (rnd < AI_THRESHOLDS.randomHigh) ai.state = \"engage\";\n        else ai.state = \"idle\";\n        ai.decisionTimer =\n          AI_THRESHOLDS.decisionTimerMin +\n          srandom() *\n            (AI_THRESHOLDS.decisionTimerMax - AI_THRESHOLDS.decisionTimerMin);\n        // If ship has ready cannons and target is within any cannon's range,\n        // prefer engage to make immediate firing deterministic in minimal test states.\n        try {\n          if (\n            ai.state !== \"engage\" &&\n            Array.isArray(s.cannons) &&\n            s.cannons.length > 0\n          ) {\n            for (const c of s.cannons) {\n              const ready = typeof c.__cd !== \"number\" || c.__cd <= 0;\n              const range =\n                typeof c.range === \"number\" ? c.range : DEFAULT_BULLET_RANGE;\n              if (\n                ready &&\n                target &&\n                withinRange(\n                  s.x || 0,\n                  s.y || 0,\n                  target.x || 0,\n                  target.y || 0,\n                  range,\n                )\n              ) {\n                ai.state = \"engage\";\n                break;\n              }\n            }\n          }\n        } catch (e) {}\n      }\n\n      // Calculate desired angle to target\n      const dx = (target.x || 0) - (s.x || 0);\n      const dy = (target.y || 0) - (s.y || 0);\n      // Ensure dx/dy order matches atan2(y, x) convention; atan2(dy, dx)\n      const desiredAngle = Math.atan2(dy, dx);\n      const currentAngle = typeof s.angle === \"number\" ? s.angle : 0;\n      let da = desiredAngle - currentAngle;\n      while (da < -Math.PI) da += Math.PI * 2;\n      while (da > Math.PI) da -= Math.PI * 2;\n      // Normalize steering to -1..1 using config\n      const steeringNorm = Math.PI / 2; // could be config if needed\n      const steering = Math.max(-1, Math.min(1, da / steeringNorm));\n\n      if (ai.state === \"engage\") {\n        s.throttle = 1;\n        s.steering = steering;\n        tryFire(state, s, target, dt);\n      } else if (ai.state === \"evade\") {\n        s.throttle = 0.8; // could be config if needed\n        // Steer away from target\n        const awayAngle = Math.atan2(\n          (s.y || 0) - (target.y || 0),\n          (s.x || 0) - (target.x || 0),\n        );\n        let daAway = awayAngle - currentAngle;\n        while (daAway < -Math.PI) daAway += Math.PI * 2;\n        while (daAway > Math.PI) daAway -= Math.PI * 2;\n        s.steering = Math.max(-1, Math.min(1, daAway / steeringNorm));\n      } else {\n        s.throttle = 0;\n        s.steering = 0;\n      }\n    }\n    clampSpeed(s, maxSpeed);\n  }\n}\n\nexport function getShipAiState(ship: ShipLike) {\n  if (!ship || !ship.__ai) return null;\n  const { targetId, ...rest } = ship.__ai;\n  return Object.assign({}, rest);\n}\n\nexport default { applySimpleAI, getShipAiState };\n", "// simulate.ts - TypeScript implementation ported from simulate.js\nimport { srange, srand, srandom } from \"./rng\";\nimport { createShip, updateTeamCount, normalizeTurrets } from \"./entities\";\nimport { getShipConfig } from \"./config/entitiesConfig\";\nimport * as EntitiesConfigESM from \"./config/entitiesConfig\";\nimport AssetsConfig from \"./config/assets/assetsConfig\";\nimport { progression as progressionCfg } from \"./config/progressionConfig\";\nimport { SIM, boundaryBehavior } from \"./config/simConfig\";\nimport { clampSpeed } from \"./behavior\";\nimport {\n  acquireBullet,\n  releaseBullet,\n  acquireExplosion,\n  releaseExplosion,\n  acquireShieldHit,\n  releaseShieldHit,\n  acquireHealthHit,\n  releaseHealthHit,\n  releaseParticle,\n} from \"./gamemanager\";\nimport type { GameState } from \"./types\";\nimport * as SpatialGridModule from \"./spatialGrid\";\n// typed as any to avoid strict import/typing issues in this hotpath\nconst SpatialGrid: any =\n  (SpatialGridModule as any).default || SpatialGridModule;\nconst segmentIntersectsCircle: any = (SpatialGridModule as any)\n  .segmentIntersectsCircle;\n\nexport type Bounds = { W: number; H: number };\n\n// SIM constants migrated to simConfig.ts\n// Use SIM.DT_MS and SIM.MAX_ACC_MS instead\n\nfunction dist2(a: { x: number; y: number }, b: { x: number; y: number }) {\n  const dx = a.x - b.x;\n  const dy = a.y - b.y;\n  return dx * dx + dy * dy;\n}\n\nexport function simulateStep(\n  state: GameState,\n  dtSeconds: number,\n  bounds: Bounds,\n) {\n  pruneAll(state, dtSeconds, bounds);\n  // Advance time\n  state.t = (state.t || 0) + dtSeconds;\n\n  // Move bullets and handle boundary behavior\n  for (let i = (state.bullets || []).length - 1; i >= 0; i--) {\n    const b = state.bullets[i];\n    // store previous position for swept collision tests (both legacy and\n    // internal names). Some compiled code reads _prevX/_prevY while other\n    // paths read prevX/prevY; keep them synchronized.\n    const prevXVal = typeof b.x === \"number\" ? b.x : 0;\n    const prevYVal = typeof b.y === \"number\" ? b.y : 0;\n    b.prevX = prevXVal;\n    b.prevY = prevYVal;\n    (b as any)._prevX = prevXVal;\n    (b as any)._prevY = prevYVal;\n    b.x += (b.vx || 0) * dtSeconds;\n    b.y += (b.vy || 0) * dtSeconds;\n    b.ttl = (b.ttl || 0) - dtSeconds;\n    let outX = b.x < 0 || b.x >= bounds.W;\n    let outY = b.y < 0 || b.y >= bounds.H;\n    let outOfBounds = outX || outY;\n    let remove = false;\n    if (b.ttl <= 0) remove = true;\n    else if (outOfBounds) {\n      switch (boundaryBehavior.bullets) {\n        case \"remove\":\n          remove = true;\n          break;\n        case \"wrap\":\n          if (b.x < 0) b.x += bounds.W;\n          if (b.x >= bounds.W) b.x -= bounds.W;\n          if (b.y < 0) b.y += bounds.H;\n          if (b.y >= bounds.H) b.y -= bounds.H;\n          break;\n        case \"bounce\":\n          if (outX) {\n            b.vx = -(b.vx || 0);\n            b.x = Math.max(0, Math.min(bounds.W, b.x));\n          }\n          if (outY) {\n            b.vy = -(b.vy || 0);\n            b.y = Math.max(0, Math.min(bounds.H, b.y));\n          }\n          break;\n      }\n    }\n    if (remove) {\n      try {\n        releaseBullet(state, b);\n      } catch (e) {}\n    }\n  }\n  // Batched in-place pruning for all high-frequency event arrays\n  function pruneAll(state: GameState, dtSeconds: number, bounds: Bounds) {\n    // Ensure all event arrays are initialized\n    state.particles = state.particles || [];\n    state.explosions = state.explosions || [];\n    state.shieldHits = state.shieldHits || [];\n    state.healthHits = state.healthHits || [];\n    state.flashes = state.flashes || [];\n    state.shieldFlashes = state.shieldFlashes || [];\n    state.healthFlashes = state.healthFlashes || [];\n    // Bullets: prune expired/out-of-bounds\n    let writeBullet = 0;\n    for (let read = 0; read < state.bullets.length; read++) {\n      const b = state.bullets[read];\n      const prevXVal = typeof b.x === \"number\" ? b.x : 0;\n      const prevYVal = typeof b.y === \"number\" ? b.y : 0;\n      b.prevX = prevXVal;\n      b.prevY = prevYVal;\n      (b as any)._prevX = prevXVal;\n      (b as any)._prevY = prevYVal;\n      b.x += (b.vx || 0) * dtSeconds;\n      b.y += (b.vy || 0) * dtSeconds;\n      b.ttl = (b.ttl || 0) - dtSeconds;\n      let outX = b.x < 0 || b.x >= bounds.W;\n      let outY = b.y < 0 || b.y >= bounds.H;\n      let outOfBounds = outX || outY;\n      let remove = false;\n      if (b.ttl <= 0) remove = true;\n      else if (outOfBounds) {\n        switch (boundaryBehavior.bullets) {\n          case \"remove\":\n            remove = true;\n            break;\n          case \"wrap\":\n            if (b.x < 0) b.x += bounds.W;\n            if (b.x >= bounds.W) b.x -= bounds.W;\n            if (b.y < 0) b.y += bounds.H;\n            if (b.y >= bounds.H) b.y -= bounds.H;\n            break;\n          case \"bounce\":\n            if (outX) {\n              b.vx = -(b.vx || 0);\n              b.x = Math.max(0, Math.min(bounds.W, b.x));\n            }\n            if (outY) {\n              b.vy = -(b.vy || 0);\n              b.y = Math.max(0, Math.min(bounds.H, b.y));\n            }\n            break;\n        }\n      }\n      if (!remove) {\n        state.bullets[writeBullet++] = b;\n      } else {\n        releaseBullet(state, b);\n      }\n    }\n    state.bullets.length = writeBullet;\n\n    // Particles: prune expired\n    let writeParticle = 0;\n    for (let read = 0; read < state.particles.length; read++) {\n      const p = state.particles[read];\n      p.life = (p.life || p.ttl || 0) - dtSeconds;\n      if (p.life > 0) {\n        state.particles[writeParticle++] = p;\n      } else {\n        releaseParticle(p);\n      }\n    }\n    state.particles.length = writeParticle;\n\n    // Explosions: prune expired\n    let writeExplosion = 0;\n    for (let read = 0; read < state.explosions.length; read++) {\n      const e = state.explosions[read];\n      e.life = (e.life || e.ttl || 0) - dtSeconds;\n      if (e.life > 0) {\n        state.explosions[writeExplosion++] = e;\n      } else {\n        releaseExplosion(e);\n      }\n    }\n    state.explosions.length = writeExplosion;\n\n    // ShieldHits: prune out-of-bounds\n    let writeShield = 0;\n    for (let read = 0; read < state.shieldHits.length; read++) {\n      const sh = state.shieldHits[read];\n      if (\n        typeof sh.x === \"number\" &&\n        typeof sh.y === \"number\" &&\n        sh.x >= 0 &&\n        sh.x < bounds.W &&\n        sh.y >= 0 &&\n        sh.y < bounds.H\n      ) {\n        state.shieldHits[writeShield++] = sh;\n      } else {\n        releaseShieldHit(sh);\n      }\n    }\n    state.shieldHits.length = writeShield;\n\n    // HealthHits: prune out-of-bounds\n    let writeHealth = 0;\n    for (let read = 0; read < state.healthHits.length; read++) {\n      const hh = state.healthHits[read];\n      if (\n        typeof hh.x === \"number\" &&\n        typeof hh.y === \"number\" &&\n        hh.x >= 0 &&\n        hh.x < bounds.W &&\n        hh.y >= 0 &&\n        hh.y < bounds.H\n      ) {\n        state.healthHits[writeHealth++] = hh;\n      } else {\n        releaseHealthHit(hh);\n      }\n    }\n    state.healthHits.length = writeHealth;\n  }\n\n  // Move ships and update heading\n  for (let si = (state.ships || []).length - 1; si >= 0; si--) {\n    const s = state.ships[si];\n    // --- Physics-based movement ---\n    const throttle = typeof s.throttle === \"number\" ? s.throttle : 0;\n    const steering = typeof s.steering === \"number\" ? s.steering : 0;\n    const accel = typeof s.accel === \"number\" ? s.accel : 0;\n    const turnRate = typeof s.turnRate === \"number\" ? s.turnRate : 3;\n    const maxSpeed = typeof s.maxSpeed === \"number\" ? s.maxSpeed : 160;\n    const angle = typeof s.angle === \"number\" ? s.angle : 0;\n\n    // Update angle based on steering\n    const maxTurn = turnRate * Math.abs(steering) * dtSeconds;\n    if (steering !== 0) {\n      let a = angle + Math.sign(steering) * maxTurn;\n      while (a < -Math.PI) a += Math.PI * 2;\n      while (a > Math.PI) a -= Math.PI * 2;\n      s.angle = a;\n    }\n\n    // Update velocity based on throttle and angle\n    const actualAccel = accel * throttle;\n    if (actualAccel > 0) {\n      s.vx = (s.vx || 0) + Math.cos(s.angle || 0) * actualAccel * dtSeconds;\n      s.vy = (s.vy || 0) + Math.sin(s.angle || 0) * actualAccel * dtSeconds;\n    }\n\n    // Apply friction/damping to velocity (from simConfig)\n    const friction = typeof SIM.friction === \"number\" ? SIM.friction : 0.98;\n    s.vx = (s.vx || 0) * friction;\n    s.vy = (s.vy || 0) * friction;\n\n    // Clamp speed using shared function\n    clampSpeed(s, maxSpeed);\n\n    // Move ship\n    s.x += (s.vx || 0) * dtSeconds;\n    s.y += (s.vy || 0) * dtSeconds;\n    // Boundary behavior for ships\n    const r = typeof s.radius === \"number\" ? s.radius : 12;\n    let outX = s.x < -r || s.x > bounds.W + r;\n    let outY = s.y < -r || s.y > bounds.H + r;\n    let outOfBounds = outX || outY;\n    let remove = false;\n    if (outOfBounds) {\n      switch (boundaryBehavior.ships) {\n        case \"remove\":\n          remove = true;\n          break;\n        case \"wrap\":\n          if (s.x < -r) s.x += bounds.W + r * 2;\n          if (s.x > bounds.W + r) s.x -= bounds.W + r * 2;\n          if (s.y < -r) s.y += bounds.H + r * 2;\n          if (s.y > bounds.H + r) s.y -= bounds.H + r * 2;\n          break;\n        case \"bounce\":\n          if (outX) {\n            s.vx = -(s.vx || 0);\n            s.x = Math.max(-r, Math.min(bounds.W + r, s.x));\n          }\n          if (outY) {\n            s.vy = -(s.vy || 0);\n            s.y = Math.max(-r, Math.min(bounds.H + r, s.y));\n          }\n          break;\n      }\n    }\n    if (remove) {\n      const rem = state.ships.splice(si, 1);\n      if (rem && rem.length) {\n        try {\n          (state as any).shipMap && (state as any).shipMap.delete(rem[0].id);\n        } catch (e) {}\n        try {\n          if (rem[0] && rem[0].team)\n            state.teamCounts[rem[0].team] = Math.max(\n              0,\n              (state.teamCounts[rem[0].team] || 0) - 1,\n            );\n        } catch (e) {}\n      }\n    }\n    // --- Turret per-frame integration: advance turret.angle toward targetAngle using turnRate ---\n    try {\n      // Normalize turret definitions via single helper so tuple shorthand\n      // ([x,y]) and object turrets are made consistent across systems before AI\n      try {\n        normalizeTurrets(s as any);\n      } catch (e) {}\n      // Basic turret AI: if turret has no explicit targetAngle, aim at nearest enemy ship\n      try {\n        if (\n          Array.isArray(state.ships) &&\n          Array.isArray((s as any).turrets) &&\n          (s as any).turrets.length\n        ) {\n          for (let ti = 0; ti < (s as any).turrets.length; ti++) {\n            try {\n              const t = (s as any).turrets[ti];\n              if (!t || Array.isArray(t)) continue; // skip tuple mounts\n              // If caller already provided a targetAngle, don't override\n              if (typeof t.targetAngle === \"number\") continue;\n              // Find nearest enemy ship (team different from s.team)\n              let best: any = null;\n              let bestDist = Infinity;\n              for (const other of state.ships || []) {\n                if (!other || other.id === s.id) continue;\n                if (other.team === s.team) continue;\n                const dx = (other.x || 0) - (s.x || 0);\n                const dy = (other.y || 0) - (s.y || 0);\n                const d2 = dx * dx + dy * dy;\n                if (d2 < bestDist) {\n                  bestDist = d2;\n                  best = other;\n                }\n              }\n              if (best) {\n                // Compute desired world angle from turret mount to target\n                const mount = Array.isArray(t.position)\n                  ? {\n                      x:\n                        (Math.cos(s.angle || 0) * t.position[0] -\n                          Math.sin(s.angle || 0) * t.position[1]) *\n                          (s.radius || 12) +\n                        (s.x || 0),\n                      y:\n                        (Math.sin(s.angle || 0) * t.position[0] +\n                          Math.cos(s.angle || 0) * t.position[1]) *\n                          (s.radius || 12) +\n                        (s.y || 0),\n                    }\n                  : { x: s.x || 0, y: s.y || 0 };\n                const desiredWorld = Math.atan2(\n                  (best.y || 0) - mount.y,\n                  (best.x || 0) - mount.x,\n                );\n                // Store targetAngle as local angle relative to ship (so simulate integration uses local space)\n                // Store targetAngle as local angle relative to ship (so simulate integration uses local space)\n                // Note: ensure we normalize into -PI..PI to avoid opposite-angle miswrap\n                let local = desiredWorld - (s.angle || 0);\n                while (local < -Math.PI) local += Math.PI * 2;\n                while (local > Math.PI) local -= Math.PI * 2;\n                t.targetAngle = local;\n              }\n            } catch (e) {}\n          }\n        }\n      } catch (e) {}\n      // Normalize turret definitions via single helper so tuple shorthand\n      // ([x,y]) and object turrets are made consistent across systems.\n      try {\n        normalizeTurrets(s as any);\n      } catch (e) {}\n      // Ensure per-turret numeric fields and integrate turret angles\n      if (Array.isArray((s as any).turrets) && (s as any).turrets.length) {\n        const turretDefs = (s as any).turrets;\n        for (let ti = 0; ti < turretDefs.length; ti++) {\n          try {\n            const t = turretDefs[ti];\n            if (!t) continue;\n            // Ensure numeric fields exist and perform per-turret integration\n            t.angle =\n              typeof t.angle === \"number\"\n                ? t.angle\n                : typeof (s as any).turretAngle === \"number\"\n                  ? (s as any).turretAngle\n                  : s.angle || 0;\n            t.targetAngle =\n              typeof t.targetAngle === \"number\"\n                ? t.targetAngle\n                : typeof t.desiredAngle === \"number\"\n                  ? t.desiredAngle\n                  : t.angle;\n            // Determine turret turnRate: use instance value, else turretDefaults by kind, else fallback\n            let defaultTurn = Math.PI * 1.5;\n            try {\n              const td =\n                (AssetsConfig as any).turretDefaults &&\n                (AssetsConfig as any).turretDefaults[t.kind || \"basic\"];\n              if (td && typeof td.turnRate === \"number\")\n                defaultTurn = td.turnRate;\n            } catch (e) {}\n            const maxTurn =\n              (typeof t.turnRate === \"number\" ? t.turnRate : defaultTurn) *\n              dtSeconds;\n            // Shortest angular difference\n            let diff = t.targetAngle - t.angle;\n            while (diff < -Math.PI) diff += Math.PI * 2;\n            while (diff > Math.PI) diff -= Math.PI * 2;\n            const step = Math.sign(diff) * Math.min(Math.abs(diff), maxTurn);\n            t.angle = t.angle + step;\n            // Normalize angle into -PI..PI\n            while (t.angle < -Math.PI) t.angle += Math.PI * 2;\n            while (t.angle > Math.PI) t.angle -= Math.PI * 2;\n            turretDefs[ti] = t;\n          } catch (e) {}\n        }\n      }\n    } catch (e) {}\n    // Carrier spawning: if this ship type has a carrier config, accumulate\n    // a per-ship timer and spawn fighters as children up to maxFighters.\n    try {\n      // Resolve ship config safely across ESM/CJS\n      let shipCfg: any = {};\n      if (typeof getShipConfig === \"function\") {\n        try { shipCfg = getShipConfig(); } catch {}\n      }\n      if (!shipCfg || !Object.keys(shipCfg).length) {\n        try {\n          const esm: any = EntitiesConfigESM;\n          if (esm && typeof esm.getShipConfig === \"function\") shipCfg = esm.getShipConfig();\n          else if (esm && esm.default && typeof esm.default === \"object\") shipCfg = esm.default;\n        } catch {}\n      }\n      const typeCfg = shipCfg && s.type ? shipCfg[s.type] : undefined;\n      if (typeCfg && (typeCfg as any).carrier) {\n        const carrierCfg = (typeCfg as any).carrier;\n        // ensure timer exists\n        (s as any)._carrierTimer = (s as any)._carrierTimer || 0;\n        (s as any)._carrierTimer += dtSeconds;\n        const cooldown = Number(carrierCfg.fighterCooldown) || 1.5;\n        if ((s as any)._carrierTimer >= cooldown) {\n          (s as any)._carrierTimer = 0;\n          // count existing fighters spawned by this carrier\n          const existing = (state.ships || []).filter(\n            (sh: any) => sh && sh.parentId === s.id && sh.type === \"fighter\",\n          ).length;\n          const maxF = Number(carrierCfg.maxFighters) || 0;\n          const spawnPer = Number(carrierCfg.spawnPerCooldown) || 1;\n          const canSpawn = Math.max(0, maxF - existing);\n          let toSpawn = Math.min(canSpawn, spawnPer);\n          while (toSpawn > 0) {\n            const angle = srandom() * Math.PI * 2;\n            const dist = (s.radius || 20) + 8 + srandom() * 8;\n            const nx = (s.x || 0) + Math.cos(angle) * dist;\n            const ny = (s.y || 0) + Math.sin(angle) * dist;\n            try {\n              const f = createShip(\"fighter\", nx, ny, s.team);\n              f.parentId = s.id;\n              f.angle = s.angle;\n              (state.ships ||= []).push(f);\n              try {\n                (state as any).shipMap && (state as any).shipMap.set(f.id, f);\n              } catch (e) {}\n              try {\n                updateTeamCount(state as any, undefined, String(f.team));\n              } catch (e) {}\n            } catch (e) {}\n            toSpawn--;\n          }\n        }\n      }\n    } catch (e) {}\n  }\n\n  // Bullet collisions\n  // Use spatial grid to reduce collision checks from O(N*M) to local queries\n  // Acquire a pooled grid instance and reuse it between frames to avoid allocations\n  const cellSize = (SIM && (SIM as any).gridCellSize) || 64;\n  const grid = SpatialGrid.acquire(cellSize);\n  const ships = state.ships || [];\n  for (let i = 0; i < ships.length; i++) grid.insert(ships[i]);\n  // Track ships removed during collision processing to avoid double-collision\n  const removedShipIds = new Set<any>();\n\n  for (let bi = (state.bullets || []).length - 1; bi >= 0; bi--) {\n    const b = state.bullets[bi];\n    const searchRadius = (b.radius || 1) + 64; // conservative search radius (cell-sized)\n    const candidates = grid.queryRadius(b.x || 0, b.y || 0, searchRadius);\n    let collided = false;\n    for (let ci = 0; ci < candidates.length; ci++) {\n      const s = candidates[ci];\n      if (!s || removedShipIds.has(s.id)) continue;\n      if (s.team === b.team) continue;\n      const r = (s.radius || 6) + (b.radius || 1);\n      // Swept collision: check segment from previous bullet pos (if available) to current pos\n      const bxPrev =\n        typeof (b as any)._prevX === \"number\"\n          ? (b as any)._prevX\n          : b.x - (b.vx || 0) * dtSeconds;\n      const byPrev =\n        typeof (b as any)._prevY === \"number\"\n          ? (b as any)._prevY\n          : b.y - (b.vy || 0) * dtSeconds;\n      const didHit =\n        dist2(b, s) <= r * r ||\n        segmentIntersectsCircle(\n          bxPrev,\n          byPrev,\n          b.x || 0,\n          b.y || 0,\n          s.x || 0,\n          s.y || 0,\n          r,\n        );\n      if (didHit) {\n        const attacker =\n          typeof b.ownerId === \"number\" || typeof b.ownerId === \"string\"\n            ? (state as any).shipMap &&\n              (state as any).shipMap.get(Number(b.ownerId))\n            : (undefined as any);\n        let dealtToShield = 0;\n        let dealtToHealth = 0;\n        const shield = s.shield || 0;\n        if (shield > 0) {\n          const absorbed = Math.min(shield, b.damage || 0);\n          s.shield = shield - absorbed;\n          const hitAngle = Math.atan2(\n            (b.y || 0) - (s.y || 0),\n            (b.x || 0) - (s.x || 0),\n          );\n          (state.shieldHits ||= []).push(\n            acquireShieldHit(state, {\n              id: s.id,\n              x: b.x,\n              y: b.y,\n              team: s.team,\n              amount: absorbed,\n              hitAngle,\n            }),\n          );\n          // expose damage event for renderer (shield hit)\n          (state.damageEvents ||= []).push({\n            id: s.id,\n            type: \"shield\",\n            amount: absorbed,\n            x: b.x,\n            y: b.y,\n            team: s.team,\n            attackerId: attacker && attacker.id,\n          });\n          const remaining = (b.damage || 0) - absorbed;\n          if (remaining > 0) {\n            // Apply armor reduction to damage dealt to hull. Each armor point\n            // reduces incoming hull damage by 10% (config uses small integers).\n            const armor = s.armor || 0;\n            const dmgMul = Math.max(0, 1 - 0.1 * armor);\n            const dealt = Math.max(0, remaining * dmgMul);\n            s.hp -= dealt;\n            (state.healthHits ||= []).push(\n              acquireHealthHit(state, {\n                id: s.id,\n                x: b.x,\n                y: b.y,\n                team: s.team,\n                amount: dealt,\n              }),\n            );\n            // expose damage event for renderer (health hit)\n            (state.damageEvents ||= []).push({\n              id: s.id,\n              type: \"hp\",\n              amount: dealt,\n              x: b.x,\n              y: b.y,\n              team: s.team,\n              attackerId: attacker && attacker.id,\n            });\n          }\n          dealtToShield = absorbed;\n          // remaining damage after shields, reduced by armor\n          const remainingAfterShield = Math.max(0, (b.damage || 0) - absorbed);\n          const armorAfterShield = s.armor || 0;\n          dealtToHealth = Math.max(\n            0,\n            remainingAfterShield * Math.max(0, 1 - 0.1 * armorAfterShield),\n          );\n        } else {\n          // No shields - apply armor reduction directly to bullet damage\n          const armor = s.armor || 0;\n          const dmgMulNoShield = Math.max(0, 1 - 0.1 * armor);\n          const dealtNoShield = Math.max(0, (b.damage || 0) * dmgMulNoShield);\n          s.hp -= dealtNoShield;\n          (state.healthHits ||= []).push(\n            acquireHealthHit(state, {\n              id: s.id,\n              x: b.x,\n              y: b.y,\n              team: s.team,\n              amount: dealtNoShield,\n            }),\n          );\n          // expose damage event for renderer (health hit)\n          (state.damageEvents ||= []).push({\n            id: s.id,\n            type: \"hp\",\n            amount: dealtNoShield,\n            x: b.x,\n            y: b.y,\n            team: s.team,\n            attackerId: attacker && attacker.id,\n          });\n          dealtToHealth = dealtNoShield;\n        }\n\n        // Update percent fields for renderer convenience\n        s.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\n        s.shieldPercent =\n          typeof s.maxShield === \"number\" && s.maxShield > 0\n            ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield))\n            : 0;\n        // XP for damage\n        if (attacker) {\n          attacker.xp =\n            (attacker.xp || 0) +\n            (dealtToShield + dealtToHealth) * (progressionCfg.xpPerDamage || 0);\n          while (\n            (attacker.xp || 0) >= progressionCfg.xpToLevel(attacker.level || 1)\n          ) {\n            attacker.xp -= progressionCfg.xpToLevel(attacker.level || 1);\n            attacker.level = (attacker.level || 1) + 1;\n            // Support function or number scalars for progression\n            const resolveScalar = (s: any, lvl: number) =>\n              typeof s === \"function\" ? s(lvl) : s || 0;\n            const lvl = attacker.level || 1;\n            const hpScalar = resolveScalar(\n              progressionCfg.hpPercentPerLevel,\n              lvl,\n            );\n            const shScalar = resolveScalar(\n              progressionCfg.shieldPercentPerLevel,\n              lvl,\n            );\n            const dmgScalar = resolveScalar(\n              progressionCfg.dmgPercentPerLevel,\n              lvl,\n            );\n            const speedScalar = resolveScalar(\n              (progressionCfg as any).speedPercentPerLevel,\n              lvl,\n            );\n            const regenScalar = resolveScalar(\n              (progressionCfg as any).regenPercentPerLevel,\n              lvl,\n            );\n\n            const hpMul = 1 + hpScalar;\n            const shMul = 1 + shScalar;\n            const dmgMul = 1 + dmgScalar;\n\n            attacker.maxHp = (attacker.maxHp || 0) * hpMul;\n            attacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\n            if (typeof attacker.maxShield === \"number\") {\n              attacker.maxShield = (attacker.maxShield || 0) * shMul;\n              attacker.shield = Math.min(\n                attacker.maxShield,\n                (attacker.shield || 0) * shMul,\n              );\n            }\n            if (Array.isArray(attacker.cannons)) {\n              for (const c of attacker.cannons) {\n                if (typeof c.damage === \"number\") c.damage *= dmgMul;\n              }\n            }\n            // Apply optional speed and shield regen increases\n            if (\n              typeof speedScalar === \"number\" &&\n              typeof attacker.accel === \"number\"\n            )\n              attacker.accel = attacker.accel * (1 + speedScalar);\n            if (\n              typeof regenScalar === \"number\" &&\n              typeof attacker.shieldRegen === \"number\"\n            )\n              attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\n          }\n        }\n\n        try {\n          releaseBullet(state, b);\n        } catch (e) {\n          try {\n            state.bullets.splice(bi, 1);\n          } catch (e) {}\n        }\n        collided = true;\n        // No need to check other candidates for this bullet\n        if (s.hp <= 0) {\n          if (attacker) {\n            attacker.xp = (attacker.xp || 0) + (progressionCfg.xpPerKill || 0);\n            while (\n              (attacker.xp || 0) >=\n              progressionCfg.xpToLevel(attacker.level || 1)\n            ) {\n              attacker.xp -= progressionCfg.xpToLevel(attacker.level || 1);\n              attacker.level = (attacker.level || 1) + 1;\n              const resolveScalar = (s: any, lvl: number) =>\n                typeof s === \"function\" ? s(lvl) : s || 0;\n              const lvl = attacker.level || 1;\n              const hpScalar = resolveScalar(\n                progressionCfg.hpPercentPerLevel,\n                lvl,\n              );\n              const shScalar = resolveScalar(\n                progressionCfg.shieldPercentPerLevel,\n                lvl,\n              );\n              const dmgScalar = resolveScalar(\n                progressionCfg.dmgPercentPerLevel,\n                lvl,\n              );\n              const speedScalar = resolveScalar(\n                (progressionCfg as any).speedPercentPerLevel,\n                lvl,\n              );\n              const regenScalar = resolveScalar(\n                (progressionCfg as any).regenPercentPerLevel,\n                lvl,\n              );\n\n              const hpMul = 1 + hpScalar;\n              const shMul = 1 + shScalar;\n              const dmgMul = 1 + dmgScalar;\n              attacker.maxHp = (attacker.maxHp || 0) * hpMul;\n              attacker.hp = Math.min(\n                attacker.maxHp,\n                (attacker.hp || 0) * hpMul,\n              );\n              if (typeof attacker.maxShield === \"number\") {\n                attacker.maxShield = (attacker.maxShield || 0) * shMul;\n                attacker.shield = Math.min(\n                  attacker.maxShield,\n                  (attacker.shield || 0) * shMul,\n                );\n              }\n              if (Array.isArray(attacker.cannons)) {\n                for (const c of attacker.cannons) {\n                  if (typeof c.damage === \"number\") c.damage *= dmgMul;\n                }\n              }\n              if (\n                typeof speedScalar === \"number\" &&\n                typeof attacker.accel === \"number\"\n              )\n                attacker.accel = attacker.accel * (1 + speedScalar);\n              if (\n                typeof regenScalar === \"number\" &&\n                typeof attacker.shieldRegen === \"number\"\n              )\n                attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\n            }\n          }\n          (state.explosions ||= []).push(\n            acquireExplosion(state, {\n              x: s.x,\n              y: s.y,\n              team: s.team,\n              life: 0.5,\n              ttl: 0.5,\n            }),\n          );\n          // remove from ships array and mark as removed for this frame\n          const idx = (state.ships || []).findIndex(\n            (sh: any) => sh && sh.id === s.id,\n          );\n          if (idx >= 0) {\n            state.ships.splice(idx, 1);\n            try {\n              (state as any).shipMap && (state as any).shipMap.delete(s.id);\n            } catch (e) {}\n            try {\n              if (s && s.team)\n                state.teamCounts[s.team] = Math.max(\n                  0,\n                  (state.teamCounts[s.team] || 0) - 1,\n                );\n            } catch (e) {}\n          }\n          removedShipIds.add(s.id);\n        }\n        break;\n      }\n    }\n    // continue to next bullet\n  }\n  // release pooled grid for reuse next frame\n  SpatialGrid.release(grid);\n\n  // Shield regen\n  for (const s of state.ships || []) {\n    if (s.maxShield)\n      s.shield = Math.min(\n        s.maxShield,\n        (s.shield || 0) + (s.shieldRegen || 0) * dtSeconds,\n      );\n  }\n\n  // refresh percent convenience fields after regen\n  for (const s of state.ships || []) {\n    s.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\n    s.shieldPercent =\n      typeof s.maxShield === \"number\" && s.maxShield > 0\n        ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield))\n        : 0;\n  }\n\n  return state;\n}\n\nexport default { simulateStep };\n", "// Enhanced progression with diminishing returns and extra per-level scalars\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 * Math.pow(1.25, level - 1),\r\n  hpPercentPerLevel: (level: number) => Math.min(0.10, 0.05 + 0.05 / Math.sqrt(level)),\r\n  dmgPercentPerLevel: 0.08,\r\n  shieldPercentPerLevel: 0.06,\r\n  speedPercentPerLevel: 0.03,\r\n  regenPercentPerLevel: 0.04,\r\n};\r\n\r\nexport default progression;\r\n", "// Lightweight spatial grid for 2D entity partitioning\r\n// Lightweight spatial grid for 2D entity partitioning\r\nexport default class SpatialGrid {\r\n  private cellSize: number;\r\n  private grid: Map<string, any[]>;\r\n\r\n  // simple pooled instances to avoid per-frame allocations\r\n  // pool keyed by cellSize to avoid reuse mismatch; cap instances per key\r\n  private static _pools: Map<number, SpatialGrid[]> = new Map();\r\n  private static _perKeyCap = 4;\r\n\r\n  static acquire(cellSize: number = 64) {\r\n    const key = cellSize | 0;\r\n    const pool = this._pools.get(key) || [];\r\n    const inst = pool.pop();\r\n    if (inst) {\r\n      inst.cellSize = cellSize;\r\n      return inst;\r\n    }\r\n    return new SpatialGrid(cellSize);\r\n  }\r\n\r\n  static release(inst: SpatialGrid) {\r\n    const key = (inst.cellSize || 64) | 0;\r\n    inst.clear();\r\n    let pool = this._pools.get(key);\r\n    if (!pool) {\r\n      pool = [];\r\n      this._pools.set(key, pool);\r\n    }\r\n    if (pool.length < this._perKeyCap) pool.push(inst);\r\n    // else drop instance and let GC collect\r\n  }\r\n\r\n  constructor(cellSize: number = 64) {\r\n    this.cellSize = cellSize;\r\n    this.grid = new Map();\r\n  }\r\n\r\n  private key(cx: number, cy: number) {\r\n    return cx + \",\" + cy;\r\n  }\r\n\r\n  insert(entity: any) {\r\n    const cx = Math.floor((entity.x || 0) / this.cellSize);\r\n    const cy = Math.floor((entity.y || 0) / this.cellSize);\r\n    const k = this.key(cx, cy);\r\n    let bucket = this.grid.get(k);\r\n    if (!bucket) {\r\n      bucket = [];\r\n      this.grid.set(k, bucket);\r\n    }\r\n    bucket.push(entity);\r\n  }\r\n\r\n  queryRadius(x: number, y: number, radius: number) {\r\n    const minCx = Math.floor((x - radius) / this.cellSize);\r\n    const maxCx = Math.floor((x + radius) / this.cellSize);\r\n    const minCy = Math.floor((y - radius) / this.cellSize);\r\n    const maxCy = Math.floor((y + radius) / this.cellSize);\r\n    const results: any[] = [];\r\n    const seen = new Set<any>();\r\n    for (let cx = minCx; cx <= maxCx; cx++) {\r\n      for (let cy = minCy; cy <= maxCy; cy++) {\r\n        const bucket = this.grid.get(this.key(cx, cy));\r\n        if (!bucket) continue;\r\n        for (const e of bucket) {\r\n          if (!seen.has(e)) {\r\n            seen.add(e);\r\n            results.push(e);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n\r\n  // clear internal storage for reuse\r\n  clear() {\r\n    this.grid.clear();\r\n  }\r\n}\r\n\r\n// Utility: segment-circle intersection test used for swept collisions\r\nexport function segmentIntersectsCircle(\r\n  x1: number,\r\n  y1: number,\r\n  x2: number,\r\n  y2: number,\r\n  cx: number,\r\n  cy: number,\r\n  r: number,\r\n) {\r\n  // Translate so circle at origin\r\n  const dx = x2 - x1;\r\n  const dy = y2 - y1;\r\n  const fx = x1 - cx;\r\n  const fy = y1 - cy;\r\n\r\n  const a = dx * dx + dy * dy;\r\n  const b = 2 * (fx * dx + fy * dy);\r\n  const c = fx * fx + fy * fy - r * r;\r\n\r\n  // Solve quadratic a*t^2 + b*t + c = 0\r\n  let discriminant = b * b - 4 * a * c;\r\n  if (discriminant < 0) return false;\r\n  discriminant = Math.sqrt(discriminant);\r\n  const t1 = (-b - discriminant) / (2 * a);\r\n  const t2 = (-b + discriminant) / (2 * a);\r\n  // If either t within [0,1], segment intersects\r\n  if ((t1 >= 0 && t1 <= 1) || (t2 >= 0 && t2 <= 1)) return true;\r\n  return false;\r\n}\r\n", "// src/createSimWorker.ts - TypeScript helper to create and manage the sim Worker\r\nexport type SimMessage = any;\r\n\r\nexport function createSimWorker(url: string = './simWorker.js') {\r\n  const worker = new Worker(url, { type: 'module' });\r\n  const listeners = new Map<string, (msg: any) => void>();\r\n\r\n  worker.onmessage = (ev: MessageEvent) => {\r\n    const msg = ev.data;\r\n    const cb = listeners.get(msg && msg.type);\r\n    if (cb) cb(msg);\r\n  };\r\n\r\n  return {\r\n    post(msg: SimMessage) { worker.postMessage(msg); },\r\n    on(type: string, cb: (msg: any) => void) { listeners.set(type, cb); },\r\n    terminate() { worker.terminate(); }\r\n  };\r\n}\r\n\r\nexport default createSimWorker;\r\n", "import type { PoolEntry, PoolConfig, Disposer } from '../types/pool';\r\n\r\n// Lightweight PoolManager helpers. These are intentionally small and\r\n// runtime-friendly so they can be used in both renderer and simulation code.\r\n\r\nexport const DEFAULT_CONFIG: PoolConfig = {\r\n  max: undefined,\r\n  strategy: 'discard-oldest',\r\n  min: 0,\r\n};\r\n\r\nfunction _incCount(map: Map<string, number> | undefined, key: string, delta: number) {\r\n  if (!map) return;\r\n  const cur = map.get(key) || 0;\r\n  const next = cur + delta;\r\n  if (next <= 0) map.delete(key);\r\n  else map.set(key, next);\r\n}\r\n\r\nexport function makePoolEntry<T>(opts?: {\r\n  config?: Partial<PoolConfig>;\r\n  disposer?: Disposer<T>;\r\n}): PoolEntry<T> {\r\n  return {\r\n    freeList: [],\r\n    allocated: 0,\r\n    config: Object.assign({}, DEFAULT_CONFIG, opts?.config || {}),\r\n    disposer: opts?.disposer,\r\n  } as PoolEntry<T>;\r\n}\r\n\r\nexport function ensureEntryForKey<T>(\r\n  map: Map<string, PoolEntry<T>>,\r\n  key: string,\r\n  opts?: { config?: Partial<PoolConfig>; disposer?: Disposer<T> },\r\n): PoolEntry<T> {\r\n  let e = map.get(key) as PoolEntry<T> | undefined;\r\n  if (!e) {\r\n    e = makePoolEntry<T>(opts);\r\n    map.set(key, e);\r\n  }\r\n  return e;\r\n}\r\n\r\n// Simple helper to release all freeList items via disposer (if present)\r\n// and clear freeList. Returns number of disposed items.\r\nexport async function clearEntryFreeList<T>(entry: PoolEntry<T>): Promise<number> {\r\n  const list = entry.freeList.splice(0);\r\n  let disposed = 0;\r\n  if (entry.disposer) {\r\n    for (const it of list) {\r\n      await entry.disposer(it);\r\n      disposed++;\r\n    }\r\n  }\r\n  return disposed;\r\n}\r\n\r\n// Generic acquire/release helpers implementing overflow semantics.\r\nexport function acquireItem<T>(params: {\r\n  map: Map<string, PoolEntry<T>>;\r\n  counts?: Map<string, number>;\r\n  key: string;\r\n  createFn: () => T;\r\n  globalMax?: number; // fallback max when entry.config.max not set\r\n  globalStrategy?: PoolConfig['strategy'];\r\n  initFn?: (obj: T, initArgs?: any) => void;\r\n  initArgs?: any;\r\n}): T {\r\n  const { map, counts, key, createFn, globalMax, globalStrategy, initFn, initArgs } = params;\r\n  let entry = map.get(key) as PoolEntry<T> | undefined;\r\n  if (!entry) {\r\n    entry = makePoolEntry<T>({ config: { max: globalMax, strategy: globalStrategy } });\r\n    map.set(key, entry);\r\n  }\r\n  const free = entry.freeList;\r\n  if (free.length) {\r\n    const obj = free.pop()! as T;\r\n    try {\r\n      if (initFn) initFn(obj, initArgs);\r\n      else if (initArgs && typeof obj === 'object') Object.assign(obj as any, initArgs);\r\n    } catch {}\r\n    return obj;\r\n  }\r\n  const max = (entry.config && typeof entry.config.max === 'number') ? entry.config.max : (globalMax ?? Infinity);\r\n  const strategy = entry.config?.strategy ?? globalStrategy ?? 'discard-oldest';\r\n  const total = entry.allocated || (counts ? counts.get(key) || 0 : 0);\r\n  if (total < (max || Infinity) || strategy === 'grow') {\r\n    const e = createFn();\r\n    try {\r\n      if (initFn) initFn(e, initArgs);\r\n      else if (initArgs && typeof e === 'object') Object.assign(e as any, initArgs);\r\n    } catch {}\r\n    entry.allocated = (entry.allocated || 0) + 1;\r\n    if (counts) _incCount(counts, key, 1);\r\n    return e;\r\n  }\r\n  if (strategy === 'error') throw new Error(`Pool exhausted for key \"${key}\" (max=${max})`);\r\n  const e = createFn();\r\n  entry.allocated = (entry.allocated || 0) + 1;\r\n  if (counts) _incCount(counts, key, 1);\r\n  return e;\r\n}\r\n\r\nexport function releaseItem<T>(params: {\r\n  map: Map<string, PoolEntry<T>>;\r\n  counts?: Map<string, number>;\r\n  key: string;\r\n  item: T;\r\n  disposeFn?: (t: T) => void;\r\n  globalMax?: number;\r\n  globalStrategy?: PoolConfig['strategy'];\r\n}) {\r\n  const { map, counts, key, item, disposeFn, globalMax, globalStrategy } = params;\r\n  let entry = map.get(key) as PoolEntry<T> | undefined;\r\n  if (!entry) {\r\n    entry = makePoolEntry<T>({ config: { max: globalMax, strategy: globalStrategy } });\r\n    map.set(key, entry);\r\n  }\r\n  const free = entry.freeList;\r\n  if (!free.includes(item as any)) free.push(item as any);\r\n  const max = (entry.config && typeof entry.config.max === 'number') ? entry.config.max : (globalMax ?? Infinity);\r\n  const strategy = entry.config?.strategy ?? globalStrategy ?? 'discard-oldest';\r\n  if (strategy === 'grow') return;\r\n  const countsMap = counts || undefined;\r\n  while (free.length > (max || Infinity)) {\r\n    const victim = strategy === 'discard-oldest' ? free.shift()! : free.pop()!;\r\n    try {\r\n      if (entry!.disposer) entry!.disposer(victim as any);\r\n      else if (disposeFn) disposeFn(victim as any);\r\n    } catch {}\r\n    if (countsMap) _incCount(countsMap, key, -1);\r\n    entry.allocated = Math.max(0, (entry.allocated || 0) - 1);\r\n  }\r\n  if (strategy === 'error' && free.length > (max || Infinity)) {\r\n    const victim = free.pop()!;\r\n    try {\r\n      if (entry!.disposer) entry!.disposer(victim as any);\r\n      else if (disposeFn) disposeFn(victim as any);\r\n    } catch {}\r\n    if (countsMap) _incCount(countsMap, key, -1);\r\n    entry.allocated = Math.max(0, (entry.allocated || 0) - 1);\r\n  }\r\n}\r\n\r\nexport default {\r\n  DEFAULT_CONFIG,\r\n  makePoolEntry,\r\n  ensureEntryForKey,\r\n  clearEntryFreeList,\r\n};\r\n", "import type { GameState } from \"../types\";\r\nimport { acquireItem, releaseItem } from './PoolManager';\r\n\r\n// PoolEntry and Pooled types\r\nexport type PoolEntry<T> = {\r\n  freeList: T[];\r\n  allocated: number;\r\n  config?: { max?: number; strategy?: \"discard-oldest\" | \"grow\" | \"error\" };\r\n  disposer?: (item: T) => void;\r\n};\r\nexport type TexturePoolEntry = PoolEntry<WebGLTexture>;\r\n\r\nexport interface Pooled<T = Record<string, unknown>> {\r\n  reset?: (initArgs?: Partial<T>) => void;\r\n}\r\n\r\nfunction _getStrategy(v: unknown, def: \"discard-oldest\" | \"grow\" | \"error\") {\r\n  return v === \"grow\" || v === \"error\" || v === \"discard-oldest\"\r\n    ? (v as \"discard-oldest\" | \"grow\" | \"error\")\r\n    : def;\r\n}\r\nfunction _incCount(map: Map<string, number>, key: string, delta: number) {\r\n  const cur = map.get(key) || 0;\r\n  const next = cur + delta;\r\n  if (next <= 0) map.delete(key);\r\n  else map.set(key, next);\r\n}\r\n\r\n// Helper: prefer per-entry config.max if set, otherwise use the named global config\r\nfunction entryConfigOr(state: any, key: string, globalName: 'texturePoolSize' | 'spritePoolSize' | 'effectPoolSize') {\r\n  const poolMap = (globalName === 'texturePoolSize' ? state.assetPool.textures : globalName === 'spritePoolSize' ? state.assetPool.sprites : state.assetPool.effects) as Map<string, PoolEntry<any>>;\r\n  const entry = poolMap && poolMap.get ? poolMap.get(key) : undefined;\r\n  if (entry && entry.config && typeof entry.config.max === 'number') return entry.config.max;\r\n  return state.assetPool.config ? state.assetPool.config[globalName] : undefined;\r\n}\r\n\r\nfunction entryStrategyOr(state: any, key: string, globalName: 'textureOverflowStrategy' | 'spriteOverflowStrategy' | 'effectOverflowStrategy') {\r\n  const poolMap = (globalName === 'textureOverflowStrategy' ? state.assetPool.textures : globalName === 'spriteOverflowStrategy' ? state.assetPool.sprites : state.assetPool.effects) as Map<string, PoolEntry<any>>;\r\n  const entry = poolMap && poolMap.get ? poolMap.get(key) : undefined;\r\n  if (entry && entry.config && entry.config.strategy) return entry.config.strategy;\r\n  return state.assetPool.config ? state.assetPool.config[globalName] : undefined;\r\n}\r\n\r\nexport function makePooled<T extends object>(\r\n  obj: T,\r\n  resetFn?: (obj: T, initArgs?: Partial<T>) => void,\r\n): T & Pooled<T> {\r\n  const o = obj as T & Pooled<T>;\r\n  if (typeof o.reset !== \"function\") {\r\n    if (typeof resetFn === \"function\") {\r\n      o.reset = function (initArgs?: Partial<T>) {\r\n        try {\r\n          resetFn(o, initArgs);\r\n        } catch {}\r\n      };\r\n    } else {\r\n      o.reset = function (initArgs?: Partial<T>) {\r\n        if (initArgs && typeof initArgs === \"object\") Object.assign(o, initArgs);\r\n      };\r\n    }\r\n  }\r\n  return o;\r\n}\r\n\r\nexport type PooledFactory<T extends object> = {\r\n  create: () => T;\r\n  reset?: (obj: T, initArgs?: Partial<T>) => void;\r\n};\r\nexport function createPooledFactory<T extends object>(\r\n  createOrFactory: (() => T) | PooledFactory<T>,\r\n  resetFn?: (obj: T, initArgs?: Partial<T>) => void,\r\n): PooledFactory<T> {\r\n  if (typeof createOrFactory === \"function\")\r\n    return { create: createOrFactory as () => T, reset: resetFn };\r\n  const f = createOrFactory as PooledFactory<T>;\r\n  return { create: f.create, reset: f.reset };\r\n}\r\n\r\n// Ensure state.assetPool shape exists and has sensible defaults\r\nexport function ensureAssetPool(state: any) {\r\n  if (!state) return;\r\n  if (!state.assetPool || typeof state.assetPool !== \"object\") {\r\n    state.assetPool = {\r\n      textures: new Map<string, PoolEntry<WebGLTexture>>(),\r\n      sprites: new Map<string, PoolEntry<any>>(),\r\n      effects: new Map<string, PoolEntry<any>>(),\r\n      counts: {\r\n        textures: new Map<string, number>(),\r\n        sprites: new Map<string, number>(),\r\n        effects: new Map<string, number>(),\r\n      },\r\n      config: {\r\n        texturePoolSize: 128,\r\n        spritePoolSize: 256,\r\n        effectPoolSize: 128,\r\n        textureOverflowStrategy: \"discard-oldest\",\r\n        spriteOverflowStrategy: \"discard-oldest\",\r\n        effectOverflowStrategy: \"discard-oldest\",\r\n      },\r\n    } as any;\r\n  } else {\r\n    state.assetPool.textures = state.assetPool.textures || new Map();\r\n    state.assetPool.sprites = state.assetPool.sprites || new Map();\r\n    state.assetPool.effects = state.assetPool.effects || new Map();\r\n    state.assetPool.counts = state.assetPool.counts || {\r\n      textures: new Map<string, number>(),\r\n      sprites: new Map<string, number>(),\r\n      effects: new Map<string, number>(),\r\n    };\r\n    state.assetPool.config = state.assetPool.config || {\r\n      texturePoolSize: 128,\r\n      spritePoolSize: 256,\r\n      effectPoolSize: 128,\r\n      textureOverflowStrategy: \"discard-oldest\",\r\n      spriteOverflowStrategy: \"discard-oldest\",\r\n      effectOverflowStrategy: \"discard-oldest\",\r\n    };\r\n  }\r\n}\r\n\r\nexport function acquireEffect<T extends object>(\r\n  state: GameState,\r\n  key: string,\r\n  createFn: () => T & Pooled<T>,\r\n  initArgs?: Partial<T>,\r\n): T & Pooled<T> {\r\n  ensureAssetPool(state);\r\n  // Delegate to PoolManager.acquireItem to centralize overflow semantics\r\n  const poolMap = state.assetPool.effects as Map<string, PoolEntry<T & Pooled<T>>>;\r\n  state.assetPool.counts = state.assetPool.counts || { textures: new Map(), sprites: new Map(), effects: new Map() } as any;\r\n  const counts = state.assetPool.counts!.effects as Map<string, number>;\r\n  return acquireItem<T & Pooled<T>>({\r\n    map: poolMap,\r\n    counts,\r\n    key,\r\n    createFn: createFn as any,\r\n    globalMax: state.assetPool.config.effectPoolSize,\r\n    globalStrategy: _getStrategy(state.assetPool.config.effectOverflowStrategy, 'discard-oldest'),\r\n    initFn: (obj: T & Pooled<T>, args?: Partial<T>) => {\r\n      try {\r\n        if (typeof obj.reset === 'function') obj.reset(args);\r\n        else if (args && typeof args === 'object') Object.assign(obj as any, args);\r\n      } catch {}\r\n    },\r\n    initArgs,\r\n  }) as T & Pooled<T>;\r\n}\r\n\r\nexport function releaseEffect<T extends object>(\r\n  state: GameState,\r\n  key: string,\r\n  effect: T & Pooled<T>,\r\n  disposeFn?: (e: T) => void,\r\n) {\r\n  ensureAssetPool(state);\r\n  const poolMap = state.assetPool.effects as Map<string, PoolEntry<T & Pooled<T>>>;\r\n  state.assetPool.counts = state.assetPool.counts || { textures: new Map(), sprites: new Map(), effects: new Map() } as any;\r\n  const counts = state.assetPool.counts!.effects as Map<string, number>;\r\n  return releaseItem<T & Pooled<T>>({\r\n    map: poolMap,\r\n    counts,\r\n    key,\r\n    item: effect,\r\n    disposeFn: disposeFn as any,\r\n    globalMax: state.assetPool.config.effectPoolSize,\r\n    globalStrategy: _getStrategy(state.assetPool.config.effectOverflowStrategy, 'discard-oldest'),\r\n  });\r\n}\r\n\r\nexport function acquireTexture(\r\n  state: GameState,\r\n  key: string,\r\n  createFn: () => WebGLTexture,\r\n): WebGLTexture {\r\n  ensureAssetPool(state);\r\n  const poolMap = state.assetPool.textures as Map<string, TexturePoolEntry>;\r\n  state.assetPool.counts = state.assetPool.counts || { textures: new Map(), sprites: new Map(), effects: new Map() } as any;\r\n  const counts = state.assetPool.counts!.textures as Map<string, number>;\r\n  return acquireItem<WebGLTexture>({\r\n    map: poolMap,\r\n    counts,\r\n    key,\r\n    createFn: createFn as any,\r\n    globalMax: entryConfigOr(state, key, 'texturePoolSize'),\r\n    globalStrategy: entryStrategyOr(state, key, 'textureOverflowStrategy'),\r\n  });\r\n}\r\n\r\nexport function releaseTexture(\r\n  state: GameState,\r\n  key: string,\r\n  tex: WebGLTexture,\r\n  disposeFn?: (t: WebGLTexture) => void,\r\n) {\r\n  ensureAssetPool(state);\r\n  const poolMap = state.assetPool.textures as Map<string, TexturePoolEntry>;\r\n  state.assetPool.counts = state.assetPool.counts || { textures: new Map(), sprites: new Map(), effects: new Map() } as any;\r\n  const counts = state.assetPool.counts!.textures as Map<string, number>;\r\n  return releaseItem<WebGLTexture>({\r\n    map: poolMap,\r\n    counts,\r\n    key,\r\n    item: tex,\r\n    disposeFn: disposeFn as any,\r\n    globalMax: entryConfigOr(state, key, 'texturePoolSize'),\r\n    globalStrategy: entryStrategyOr(state, key, 'textureOverflowStrategy'),\r\n  });\r\n}\r\n\r\nexport function acquireSprite<T extends object>(\r\n  state: GameState,\r\n  key: string,\r\n  createFn: () => T & Pooled<T>,\r\n  initArgs?: Partial<T>,\r\n): T & Pooled<T> {\r\n  ensureAssetPool(state);\r\n  state.assetPool.counts = state.assetPool.counts || { textures: new Map(), sprites: new Map(), effects: new Map() } as any;\r\n  const poolMap = state.assetPool.sprites as Map<string, PoolEntry<T & Pooled<T>>>;\r\n  const counts = state.assetPool.counts!.sprites as Map<string, number>;\r\n  return acquireItem<T & Pooled<T>>({\r\n    map: poolMap,\r\n    counts,\r\n    key,\r\n    createFn: createFn as any,\r\n    globalMax: state.assetPool.config.spritePoolSize,\r\n    globalStrategy: _getStrategy(state.assetPool.config.spriteOverflowStrategy, 'discard-oldest'),\r\n    initFn: (obj: T & Pooled<T>, args?: Partial<T>) => {\r\n      try {\r\n        if (typeof obj.reset === 'function') obj.reset(args);\r\n        else if (args && typeof args === 'object') Object.assign(obj as any, args);\r\n      } catch {}\r\n    },\r\n    initArgs,\r\n  }) as T & Pooled<T>;\r\n}\r\n\r\nexport function releaseSprite<T extends object>(\r\n  state: GameState,\r\n  key: string,\r\n  sprite: T & Pooled<T>,\r\n  disposeFn?: (s: T) => void,\r\n) {\r\n  ensureAssetPool(state);\r\n  state.assetPool.counts = state.assetPool.counts || { textures: new Map(), sprites: new Map(), effects: new Map() } as any;\r\n  const poolMap = state.assetPool.sprites as Map<string, PoolEntry<T & Pooled<T>>>;\r\n  const counts = state.assetPool.counts!.sprites as Map<string, number>;\r\n  return releaseItem<T & Pooled<T>>({\r\n    map: poolMap,\r\n    counts,\r\n    key,\r\n    item: sprite,\r\n    disposeFn: disposeFn as any,\r\n    globalMax: state.assetPool.config.spritePoolSize,\r\n    globalStrategy: _getStrategy(state.assetPool.config.spriteOverflowStrategy, 'discard-oldest'),\r\n  });\r\n}\r\n\r\nexport default {} as any;\r\n", "export const SHIELD = {\r\n  ttl: 0.4, particleCount: 6, particleTTL: 0.5, particleColor: '#88ccff', particleSize: 2,\r\n  // arcWidth (radians) for shield hit visual/particle spread centered on hitAngle\r\n  // NOTE: Used in assetsConfig.ts visualStateDefaults and renderer logic. If not consumed, consider removing.\r\n  arcWidth: Math.PI / 6, // TODO: Ensure renderer/particle logic uses this or remove if redundant\r\n};\r\n\r\nexport const HEALTH = {\r\n  ttl: 0.6, particleCount: 8, particleTTL: 0.6, particleColor: '#ffb3b3', particleSize: 2.5,\r\n};\r\n\r\nexport const EXPLOSION = {\r\n  particleCount: 30, particleTTL: 1.2, particleColor: '#ffaa33', particleSize: 3, minSpeed: 20, maxSpeed: 140,\r\n  // TODO: Unify particle effect configs with assetsConfig.ts animations for maintainability\r\n};\r\n\r\nexport const FALLBACK_POSITIONS = [\r\n  { x: 100, y: 100, team: 'red' },\r\n  { x: 700, y: 500, team: 'blue' }\r\n];\r\n\r\nexport const STARS = { twinkle: true, redrawInterval: 500, count: 140 };\r\n\r\nexport default { SHIELD, HEALTH, EXPLOSION, STARS, FALLBACK_POSITIONS };\r\n", "export const DISPLAY_DEFAULTS = {\r\n  renderScale: 1.0,\r\n  displayScale: 1.0,\r\n  hpBar: { bg: \"#222\", fill: \"#4caf50\", w: 20, h: 4, dx: -10, dy: -12 },\r\n};\r\n\r\nexport default {};\r\n", "import { DISPLAY_DEFAULTS } from './displayConfig';\r\n\r\nexport const RendererConfig = {\r\n  preferred: 'canvas' as 'canvas' | 'webgl',\r\n  allowUrlOverride: true,\r\n  allowWebGL: true,\r\n  renderScale: DISPLAY_DEFAULTS.renderScale,\r\n  displayScale: DISPLAY_DEFAULTS.displayScale,\r\n  dynamicScaleEnabled: false,\r\n  lastFrameTime: 0,\r\n  frameScore: 'green', // green, yellow, red\r\n  // UI overlays configuration\r\n  hpBar: DISPLAY_DEFAULTS.hpBar,\r\n};\r\n\r\nexport function getPreferredRenderer(): 'canvas' | 'webgl' {\r\n  try {\r\n    if (RendererConfig.allowUrlOverride && typeof window !== 'undefined' && window.location && window.location.search) {\r\n      const p = new URLSearchParams(window.location.search);\r\n      const r = p.get('renderer');\r\n      if (r === 'canvas' || r === 'webgl') return r;\r\n    }\r\n  } catch (e) {}\r\n  return RendererConfig.preferred;\r\n}\r\n\r\nexport default RendererConfig;\r\n", "// Helper: get SVG asset or warn if missing\nexport function getSvgAssetOrWarn(type: string): string {\n  const assetsConfig =\n    typeof globalThis !== \"undefined\" && (globalThis as any).AssetsConfig\n      ? (globalThis as any).AssetsConfig\n      : undefined;\n  const svg = assetsConfig?.svgAssets?.[type] ?? \"\";\n  if (!svg) {\n    try {\n      const _isProd =\n        (typeof process !== \"undefined\" &&\n          process.env &&\n          process.env.NODE_ENV === \"production\") ||\n        (typeof (globalThis as any).NODE_ENV !== \"undefined\" &&\n          (globalThis as any).NODE_ENV === \"production\");\n      if (!_isProd) {\n        console.warn(\n          `[CanvasRenderer] WARNING: SVG asset for type '${type}' is missing or empty.`,\n        );\n      }\n    } catch (e) {\n      // ignore environment detection errors\n    }\n  }\n  return svg;\n}\n// Imports required by the renderer (kept after helper to avoid import hoisting issues in some loaders)\nimport type { GameState } from \"./types\";\nimport {\n  createExplosionEffect,\n  resetExplosionEffect,\n  createHealthHitEffect,\n  resetHealthHitEffect,\n  ExplosionEffect,\n  HealthHitEffect,\n} from \"./entities\";\nimport {\n  acquireSprite,\n  releaseSprite,\n  acquireEffect,\n  releaseEffect,\n  makePooled,\n} from \"./pools\";\nimport RendererConfig from \"./config/rendererConfig\";\nimport { getDefaultBounds } from \"./config/simConfig\";\nimport AssetsConfig, {\n  getVisualConfig,\n  getShipAsset,\n  getBulletAsset,\n  getTurretAsset,\n  getEngineTrailConfig,\n  getSpriteAsset,\n} from \"./config/assets/assetsConfig\";\nimport * as svgLoader from \"./assets/svgLoader\";\nimport TeamsConfig from \"./config/teamsConfig\";\nimport TintedHullPool from \"./pools/tintedHullPool\";\nconst entitiesConfig = require(\"./config/entitiesConfig\");\nfunction getShipConfigSafe() {\n  if (typeof entitiesConfig.getShipConfig === \"function\") return entitiesConfig.getShipConfig();\n  if (entitiesConfig.default && typeof entitiesConfig.default.getShipConfig === \"function\") return entitiesConfig.default.getShipConfig();\n  if (typeof entitiesConfig.default === \"object\" && entitiesConfig.default) return entitiesConfig.default;\n  return {};\n}\nfunction getDefaultShipTypeSafe() {\n  const cfg = getShipConfigSafe();\n  const keys = Object.keys(cfg || {});\n  return keys.length ? keys[0] : \"fighter\";\n}\n\n// Helper: produce a mapping object that maps common SVG data-team-slot\n// role names to the provided team color. Many SVGs use different role\n// names (hull, primary, hangar, trim, etc.) \u2014 map them all so a single\n// team color will recolor any of those slots.\nfunction teamMapping(color: string) {\n  return {\n    primary: color,\n    hull: color,\n    trim: color,\n    hangar: color,\n    launch: color,\n    engine: color,\n    glow: color,\n    turret: color,\n    panel: color,\n    secondary: color,\n    accent: color,\n    weapon: color,\n    detail: color,\n  } as Record<string, string>;\n}\n\nexport class CanvasRenderer {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D | null = null;\n  bufferCanvas: HTMLCanvasElement;\n  bufferCtx: CanvasRenderingContext2D | null = null;\n  providesOwnLoop = false;\n  type = \"canvas\";\n  // ratio between backing store pixels and CSS (logical) pixels\n  pixelRatio = 1;\n  // cache for svg-extracted turret mountpoints in ship-local radius units\n  _svgMountCache: Record<string, [number, number][]> | null = null;\n  // cache for svg-extracted engine mountpoints in ship-local radius units\n  _svgEngineMountCache: Record<string, [number, number][]> | null = null;\n  // rasterized turret sprite cache: kind -> offscreen canvas\n  _turretSpriteCache: Record<string, HTMLCanvasElement> | null = null;\n  // rasterized hull-only SVG cache: shipType -> offscreen canvas\n  _svgHullCache: Record<string, HTMLCanvasElement | undefined> = {};\n  // tinted hull cache implemented as a per-team capped pool for canvases\n  _tintedHullPool: TintedHullPool | null = null;\n  // Backwards-compatible Map-like facade for tests that expect _tintedHullCache\n  get _tintedHullCache(): Map<string, HTMLCanvasElement> {\n    const self = this;\n    // Minimal Map-like wrapper exposing iterable behaviour backed by _tintedHullPool\n    class MapWrapper {\n      [Symbol.toStringTag] = \"Map\";\n      constructor() {}\n      get size() {\n        try {\n          return self._tintedHullPool\n            ? (self._tintedHullPool as any).size || 0\n            : 0;\n        } catch (e) {\n          return 0;\n        }\n      }\n      clear(): void {\n        if (self._tintedHullPool) (self._tintedHullPool as any).clear();\n      }\n      delete(key: string): boolean {\n        if (!self._tintedHullPool) return false;\n        return !!(\n          self._tintedHullPool.has(key) &&\n          (self._tintedHullPool.delete(key), true)\n        );\n      }\n      forEach(\n        cb: (\n          value: HTMLCanvasElement,\n          key: string,\n          map: Map<string, HTMLCanvasElement>,\n        ) => void,\n        thisArg?: any,\n      ): void {\n        if (!self._tintedHullPool) return;\n        for (const k of (self._tintedHullPool as any).keys()) {\n          const v = (self._tintedHullPool as any).get(k);\n          cb.call(thisArg, v, k as string, this as any);\n        }\n      }\n      get(key: string): HTMLCanvasElement | undefined {\n        return self._tintedHullPool\n          ? ((self._tintedHullPool as any).get(key) as\n              | HTMLCanvasElement\n              | undefined)\n          : undefined;\n      }\n      has(key: string): boolean {\n        return !!(\n          self._tintedHullPool && (self._tintedHullPool as any).has(key)\n        );\n      }\n      set(key: string, value: HTMLCanvasElement): this {\n        self._setTintedCanvas(key, value);\n        return this;\n      }\n      *entries(): IterableIterator<[string, HTMLCanvasElement]> {\n        if (!self._tintedHullPool) return;\n        for (const k of (self._tintedHullPool as any).keys()) {\n          yield [\n            k as string,\n            (self._tintedHullPool as any).get(k) as HTMLCanvasElement,\n          ];\n        }\n      }\n      *keys(): IterableIterator<string> {\n        if (!self._tintedHullPool) return;\n        for (const k of (self._tintedHullPool as any).keys()) yield k as string;\n      }\n      *values(): IterableIterator<HTMLCanvasElement> {\n        if (!self._tintedHullPool) return;\n        for (const k of (self._tintedHullPool as any).keys())\n          yield (self._tintedHullPool as any).get(k) as HTMLCanvasElement;\n      }\n      [Symbol.iterator](): IterableIterator<[string, HTMLCanvasElement]> {\n        return this.entries();\n      }\n    }\n    return new MapWrapper() as any;\n  }\n\n  // Clear the tinted hull cache (useful when palette/team colors change)\n  clearTintedHullCache(): void {\n    try {\n      if (this._tintedHullPool) this._tintedHullPool.clear();\n    } catch (e) {}\n  }\n\n  // Internal helper: set a tinted canvas in the Map and enforce LRU cap.\n  private _setTintedCanvas(key: string, canvas: HTMLCanvasElement) {\n    if (!this._tintedHullPool)\n      this._tintedHullPool = new TintedHullPool({\n        globalCap: 256,\n        perTeamCap: 64,\n      });\n    this._tintedHullPool.set(key, canvas);\n  }\n\n  // Test helper: allow tests to inject entries deterministically without TS private access errors.\n  // Kept separate so production code still uses private _setTintedCanvas.\n  _testSetTintedCanvas(key: string, canvas: HTMLCanvasElement) {\n    this._setTintedCanvas(key, canvas);\n  }\n\n  constructor(canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    // Create offscreen buffer sized at logical map \u00D7 renderer scale\n    this.bufferCanvas = document.createElement(\"canvas\");\n    this.bufferCtx = this.bufferCanvas.getContext(\"2d\");\n  }\n\n  init(): boolean {\n    this.ctx = this.canvas.getContext(\"2d\");\n    // If running in a test environment (DOM emulation) getContext may be unimplemented.\n    // Provide a minimal no-op 2D context so renderState can still resize buffers and run logic.\n    if (!this.ctx) {\n      // create a lightweight no-op ctx that satisfies the subset used by the renderer\n      const noop = () => {};\n      const noOpCtx: any = {\n        setTransform: noop,\n        imageSmoothingEnabled: true,\n        clearRect: noop,\n        save: noop,\n        restore: noop,\n        fillRect: noop,\n        beginPath: noop,\n        moveTo: noop,\n        lineTo: noop,\n        closePath: noop,\n        fill: noop,\n        stroke: noop,\n        arc: noop,\n        translate: noop,\n        rotate: noop,\n        drawImage: noop,\n        globalAlpha: 1,\n        strokeStyle: \"#000\",\n        fillStyle: \"#000\",\n        lineWidth: 1,\n        globalCompositeOperation: \"source-over\",\n      };\n      this.ctx = noOpCtx as unknown as CanvasRenderingContext2D;\n    }\n    this.bufferCtx = this.bufferCanvas.getContext(\"2d\") || this.ctx;\n    // bufferCtx must be present (either real or no-op) for renderState to proceed\n    if (!this.bufferCtx) return false;\n    // compute pixelRatio from renderScale only\n    try {\n      const renderScale =\n        RendererConfig &&\n        typeof (RendererConfig as any).renderScale === \"number\"\n          ? (RendererConfig as any).renderScale\n          : 1;\n      this.pixelRatio = renderScale;\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // No scaling here; only when compositing buffer\n      this.ctx.imageSmoothingEnabled = true;\n    } catch (e) {\n      this.pixelRatio = 1;\n    }\n    // Kick off async preload of SVG assets to extract turret mountpoints.\n    // Run async but don't block init; cache will populate when ready.\n    try {\n      // call and ignore promise errors to avoid breaking init\n      (this as any).preloadAllAssets &&\n        (this as any).preloadAllAssets().catch(() => {});\n    } catch (e) {}\n    return true;\n  }\n\n  // Preload SVG assets listed in AssetsConfig.svgAssets, extract mountpoints\n  // and normalize them into radius-unit coordinates compatible with shapes2d\n  async preloadAllAssets(): Promise<void> {\n    try {\n      const svgAssets = (AssetsConfig as any).svgAssets || {};\n      // Compute team colors up-front so we can do a deterministic placeholder\n      // pre-warm for headless/test environments before any async rasterization.\n      const teams =\n        TeamsConfig && (TeamsConfig as any).teams\n          ? (TeamsConfig as any).teams\n          : {};\n      const teamColors: string[] = [];\n      for (const tName of Object.keys(teams)) {\n        const t = teams[tName];\n        if (t && t.color) teamColors.push(t.color);\n      }\n      if (teamColors.length === 0) {\n        const p = (AssetsConfig as any).palette || {};\n        if (p.shipHull) teamColors.push(p.shipHull);\n        if (p.shipAccent) teamColors.push(p.shipAccent);\n      }\n      // Ensure a placeholder tinted canvas exists for each declared shipType/teamColor\n      try {\n        if (!this._tintedHullPool)\n          this._tintedHullPool = new TintedHullPool({\n            globalCap: 256,\n            perTeamCap: 64,\n          });\n        for (const shipType of Object.keys(svgAssets)) {\n          try {\n            for (const col of teamColors) {\n              const k = `${shipType}::${col}`;\n              if (!this._tintedHullPool.has(k)) {\n                const pc = document.createElement(\"canvas\");\n                pc.width = 16;\n                pc.height = 16;\n                try {\n                  this._setTintedCanvas(k, pc);\n                } catch (e) {\n                  if (this._tintedHullPool) this._tintedHullPool.set(k, pc);\n                }\n              }\n            }\n          } catch (e) {}\n        }\n      } catch (e) {}\n      // In headless/test environments, rasterization can be async. Create\n      // immediate placeholder canvases for declared svg assets so tests\n      // that inspect _svgHullCache see entries synchronously.\n      try {\n        this._svgHullCache = this._svgHullCache || {};\n        for (const k of Object.keys(svgAssets)) {\n          if (\n            !this._svgHullCache[k] &&\n            typeof (svgAssets as any)[k] === \"string\"\n          ) {\n            const ph = document.createElement(\"canvas\");\n            ph.width = 128;\n            ph.height = 128;\n            const pctx = ph.getContext(\"2d\");\n            if (pctx) {\n              pctx.fillStyle = \"#fff\";\n              pctx.fillRect(0, 0, ph.width, ph.height);\n            }\n            this._svgHullCache[k] = ph;\n          }\n        }\n      } catch (e) {}\n      this._svgMountCache = this._svgMountCache || {};\n      for (const key of Object.keys(svgAssets)) {\n        try {\n          const rel = (svgAssets as any)[key];\n          let svgText = \"\";\n          // If svgAssets contains an inlined SVG string (standalone build\n          // injection), use it directly. Otherwise try fetch(rel) as a URL.\n          try {\n            if (typeof rel === \"string\" && rel.trim().startsWith(\"<svg\")) {\n              svgText = rel;\n            } else {\n              if (typeof fetch === \"function\") {\n                const resp = await fetch(rel as string);\n                if (resp && resp.ok) {\n                  svgText = await resp.text();\n                }\n              }\n            }\n          } catch (e) {\n            svgText = \"\";\n          }\n          // If fetch failed or not available, skip Node-specific disk read in browser build\n          if (!svgText) continue;\n          const parsed = svgLoader.parseSvgForMounts(svgText);\n          const mounts = parsed.mounts || [];\n          const engineMounts = parsed.engineMounts || [];\n          const vb = parsed.viewBox || { w: 128, h: 128 };\n          // Compute shape extent from shapes2d config so that normalized coords\n          // map to the same scale used by shapes2d points. Fallback to 1.\n          const shapeEntry: any =\n            AssetsConfig.shapes2d && (AssetsConfig as any).shapes2d[key];\n          let extent = 1;\n          if (shapeEntry) {\n            let maxv = 0;\n            if (\n              shapeEntry.type === \"compound\" &&\n              Array.isArray(shapeEntry.parts)\n            ) {\n              for (const p of shapeEntry.parts) {\n                if (p.type === \"circle\")\n                  maxv = Math.max(maxv, Math.abs(p.r || 0));\n                else if (p.type === \"polygon\")\n                  for (const pt of p.points || []) {\n                    maxv = Math.max(\n                      maxv,\n                      Math.abs(pt[0] || 0),\n                      Math.abs(pt[1] || 0),\n                    );\n                  }\n              }\n            } else if (shapeEntry.type === \"polygon\") {\n              for (const pt of shapeEntry.points || []) {\n                maxv = Math.max(\n                  maxv,\n                  Math.abs(pt[0] || 0),\n                  Math.abs(pt[1] || 0),\n                );\n              }\n            } else if (shapeEntry.type === \"circle\")\n              maxv = Math.max(maxv, Math.abs(shapeEntry.r || 0));\n            extent = maxv || 1;\n          }\n          // Normalize turret mountpoints: convert from SVG viewBox coords to shape units\n          const norm: [number, number][] = mounts.map((m: any) => {\n            const nx = ((m.x || 0) - vb.w / 2) / (vb.w / 2 || 1);\n            const ny = ((m.y || 0) - vb.h / 2) / (vb.h / 2 || 1);\n            return [nx * extent, ny * extent];\n          });\n          this._svgMountCache[key] = norm;\n          // Normalize engine mountpoints\n          const engineNorm: [number, number][] = engineMounts.map((m: any) => {\n            const nx = ((m.x || 0) - vb.w / 2) / (vb.w / 2 || 1);\n            const ny = ((m.y || 0) - vb.h / 2) / (vb.h / 2 || 1);\n            return [nx * extent, ny * extent];\n          });\n          this._svgEngineMountCache = this._svgEngineMountCache || {};\n          this._svgEngineMountCache[key] = engineNorm;\n          // Attempt to asynchronously rasterize and cache a hull-only canvas\n          // using the higher-level svgRenderer. This ensures _svgHullCache\n          // is populated with a resolved canvas (not a blank placeholder)\n          // so sync reads later (getCachedHullCanvasSync) can draw immediately.\n          try {\n            const svgRenderer = require(\"./assets/svgRenderer\");\n            if (\n              svgRenderer &&\n              typeof svgRenderer.rasterizeSvgWithTeamColors === \"function\"\n            ) {\n              // Use the viewBox dimensions if available\n              const outW = (vb && vb.w) || 128;\n              const outH = (vb && vb.h) || 128;\n              // Request rasterization with no mapping (hull-only baseline)\n              (async () => {\n                try {\n                  const canvas = await svgRenderer.rasterizeSvgWithTeamColors(\n                    svgText,\n                    {},\n                    outW,\n                    outH,\n                    { applyTo: \"both\", assetKey: key },\n                  );\n                  try {\n                    this._svgHullCache = this._svgHullCache || {};\n                    this._svgHullCache[key] = canvas;\n                  } catch (e) {}\n                } catch (e) {\n                  // ignore async raster errors \u2014 fallback placeholders remain\n                }\n              })();\n            }\n          } catch (e) {}\n          // Try to rasterize hull-only SVG proactively for faster first-draw\n          try {\n            const outW = vb.w || 128;\n            const outH = vb.h || 128;\n            // Kick off background rasterization only when no placeholder exists\n            try {\n              if (!this._svgHullCache || !this._svgHullCache[key]) {\n                const outW = vb.w || 128;\n                const outH = vb.h || 128;\n                (async () => {\n                  try {\n                    let hullCanvas: HTMLCanvasElement | undefined = undefined;\n                    try {\n                      if (\n                        typeof (svgLoader as any)\n                          .rasterizeHullOnlySvgToCanvasAsync === \"function\"\n                      ) {\n                        hullCanvas = await (\n                          svgLoader as any\n                        ).rasterizeHullOnlySvgToCanvasAsync(\n                          svgText,\n                          outW,\n                          outH,\n                        );\n                      } else {\n                        hullCanvas = svgLoader.rasterizeHullOnlySvgToCanvas(\n                          svgText,\n                          outW,\n                          outH,\n                        ) as HTMLCanvasElement;\n                      }\n                    } catch (e) {\n                      hullCanvas = undefined;\n                    }\n                    if (hullCanvas) {\n                      try {\n                        this._svgHullCache = this._svgHullCache || {};\n                        this._svgHullCache[key] = hullCanvas;\n                      } catch (e) {}\n                      try {\n                        const svgRenderer = require(\"./assets/svgRenderer\");\n                        if (\n                          svgRenderer &&\n                          typeof svgRenderer.cacheCanvasForAsset === \"function\"\n                        ) {\n                          svgRenderer.cacheCanvasForAsset(\n                            key,\n                            {},\n                            hullCanvas.width,\n                            hullCanvas.height,\n                            hullCanvas,\n                          );\n                        }\n                      } catch (e) {}\n                    }\n                  } catch (e) {}\n                })();\n              }\n            } catch (e) {}\n          } catch (e) {\n            // ignore rasterization errors here; will fallback to lazy raster later\n          }\n          // Optionally, populate AssetsConfig.svgEngineMounts for backward compatibility\n          try {\n            (AssetsConfig as any).svgEngineMounts =\n              (AssetsConfig as any).svgEngineMounts || {};\n            (AssetsConfig as any).svgEngineMounts[key] = engineNorm;\n          } catch (e) {}\n        } catch (e) {\n          // ignore per-asset errors\n          // console.warn('Failed to preload SVG for', key, e);\n        }\n      }\n      // Pre-warm tinted hull cache for known teams/types\n      try {\n        if (!this._tintedHullPool)\n          this._tintedHullPool = new TintedHullPool({\n            globalCap: 256,\n            perTeamCap: 64,\n          });\n        const teams =\n          TeamsConfig && (TeamsConfig as any).teams\n            ? (TeamsConfig as any).teams\n            : {};\n        const teamColors: string[] = [];\n        for (const tName of Object.keys(teams)) {\n          const t = teams[tName];\n          if (t && t.color) teamColors.push(t.color);\n        }\n        // Fallback to palette shipHull and shipAccent if no teams defined\n        if (teamColors.length === 0) {\n          const p = (AssetsConfig as any).palette || {};\n          if (p.shipHull) teamColors.push(p.shipHull);\n          if (p.shipAccent) teamColors.push(p.shipAccent);\n        }\n        const declaredSvgAssets = (AssetsConfig as any).svgAssets || {};\n        for (const shipType of Object.keys(declaredSvgAssets)) {\n          try {\n            let hullCanvas = (this._svgHullCache as any)[shipType] as\n              | HTMLCanvasElement\n              | undefined;\n            if (!hullCanvas) {\n              try {\n                const rel = (declaredSvgAssets as any)[shipType];\n                if (typeof rel === \"string\" && rel.trim().startsWith(\"<svg\")) {\n                  const vbMatch =\n                    /viewBox\\s*=\\s*\"(\\d+)[^\\d]+(\\d+)[^\\d]+(\\d+)[^\\d]+(\\d+)\"/.exec(\n                      rel,\n                    );\n                  let outW = 128,\n                    outH = 128;\n                  if (vbMatch) {\n                    outW = parseInt(vbMatch[3]) || 128;\n                    outH = parseInt(vbMatch[4]) || 128;\n                  }\n                  try {\n                    if (\n                      typeof (svgLoader as any)\n                        .rasterizeHullOnlySvgToCanvasAsync === \"function\"\n                    ) {\n                      try {\n                        hullCanvas = await (\n                          svgLoader as any\n                        ).rasterizeHullOnlySvgToCanvasAsync(rel, outW, outH);\n                      } catch (e) {\n                        hullCanvas = undefined;\n                      }\n                    } else {\n                      hullCanvas = svgLoader.rasterizeHullOnlySvgToCanvas(\n                        rel,\n                        outW,\n                        outH,\n                      );\n                    }\n                  } catch (e) {\n                    hullCanvas = undefined;\n                  }\n                  if (!hullCanvas) {\n                    const ph = document.createElement(\"canvas\");\n                    ph.width = outW;\n                    ph.height = outH;\n                    const pctx = ph.getContext(\"2d\");\n                    if (pctx) {\n                      pctx.fillStyle = \"#fff\";\n                      pctx.fillRect(0, 0, outW, outH);\n                    }\n                    hullCanvas = ph;\n                  }\n                  this._svgHullCache = this._svgHullCache || {};\n                  this._svgHullCache[shipType] = hullCanvas;\n                }\n              } catch (e) {}\n            }\n            if (!hullCanvas) continue;\n            for (const col of teamColors) {\n              const k = `${shipType}::${col}`;\n              if (this._tintedHullPool && this._tintedHullPool.has(k)) continue;\n              try {\n                const tc = document.createElement(\"canvas\");\n                tc.width = hullCanvas.width;\n                tc.height = hullCanvas.height;\n                const tctx = tc.getContext(\"2d\");\n                if (tctx) {\n                  tctx.clearRect(0, 0, tc.width, tc.height);\n                  tctx.drawImage(hullCanvas, 0, 0);\n                  tctx.globalCompositeOperation = \"source-atop\";\n                  tctx.fillStyle = col;\n                  tctx.fillRect(0, 0, tc.width, tc.height);\n                  tctx.globalCompositeOperation = \"source-over\";\n                  this._setTintedCanvas(k, tc);\n                  try {\n                    const svgRenderer = require(\"./assets/svgRenderer\");\n                    if (\n                      svgRenderer &&\n                      typeof svgRenderer.cacheCanvasForAsset === \"function\"\n                    ) {\n                      svgRenderer.cacheCanvasForAsset(\n                        shipType,\n                        teamMapping(col),\n                        tc.width,\n                        tc.height,\n                        tc,\n                      );\n                    }\n                  } catch (e) {}\n                }\n              } catch (e) {\n                /* ignore pre-warm errors */\n              }\n            }\n          } catch (e) {\n            /* ignore per-type pre-warm errors */\n          }\n        }\n        // Ensure any declared assets that still lack hull canvases get a placeholder\n        try {\n          const declaredSvgAssets2 = (AssetsConfig as any).svgAssets || {};\n          for (const shipType of Object.keys(declaredSvgAssets2)) {\n            if (!this._svgHullCache || !this._svgHullCache[shipType]) {\n              const ph = document.createElement(\"canvas\");\n              ph.width = 128;\n              ph.height = 128;\n              const pctx = ph.getContext(\"2d\");\n              if (pctx) {\n                pctx.fillStyle = \"#fff\";\n                pctx.fillRect(0, 0, ph.width, ph.height);\n              }\n              this._svgHullCache = this._svgHullCache || {};\n              this._svgHullCache[shipType] = ph;\n              for (const col of teamColors) {\n                const k = `${shipType}::${col}`;\n                if (this._tintedHullPool && this._tintedHullPool.has(k))\n                  continue;\n                try {\n                  const tc = document.createElement(\"canvas\");\n                  tc.width = ph.width;\n                  tc.height = ph.height;\n                  const tctx = tc.getContext(\"2d\");\n                  if (tctx) {\n                    tctx.clearRect(0, 0, tc.width, tc.height);\n                    try {\n                      tctx.drawImage(ph, 0, 0);\n                    } catch (e) {}\n                    try {\n                      tctx.globalCompositeOperation = \"source-atop\";\n                      tctx.fillStyle = col;\n                      tctx.fillRect(0, 0, tc.width, tc.height);\n                      tctx.globalCompositeOperation = \"source-over\";\n                    } catch (e) {}\n                  }\n                  this._setTintedCanvas(k, tc);\n                  try {\n                    const svgRenderer = require(\"./assets/svgRenderer\");\n                    if (\n                      svgRenderer &&\n                      typeof svgRenderer.cacheCanvasForAsset === \"function\"\n                    ) {\n                      svgRenderer.cacheCanvasForAsset(\n                        shipType,\n                        teamMapping(col),\n                        tc.width,\n                        tc.height,\n                        tc,\n                      );\n                    }\n                  } catch (e) {}\n                } catch (e) {\n                  /* ignore per-key placeholder errors */\n                }\n              }\n            }\n          }\n        } catch (e) {}\n      } catch (e) {\n        /* ignore pre-warm errors */\n      }\n      // Rasterize turret sprites for kinds listed in turretDefaults (or default 'basic')\n      try {\n        this._turretSpriteCache = this._turretSpriteCache || {};\n        const turretDefs = (AssetsConfig as any).turretDefaults || {\n          basic: { sprite: \"turretBasic\" },\n        };\n        const kinds = Object.keys(turretDefs);\n        for (const k of kinds) {\n          try {\n            const spriteKey = (turretDefs as any)[k].sprite || \"turretBasic\";\n            const tshape: any =\n              (AssetsConfig as any).shapes2d &&\n              (AssetsConfig as any).shapes2d[spriteKey];\n            if (!tshape) continue;\n            // Create offscreen canvas sized using renderer renderScale and a modest base\n            const basePx = Math.max(\n              24,\n              Math.round(24 * (RendererConfig as any).renderScale || 1),\n            );\n            const canvas = document.createElement(\"canvas\");\n            const size = Math.max(16, basePx * 2);\n            canvas.width = size;\n            canvas.height = size;\n            const ctx2 = canvas.getContext(\"2d\");\n            if (!ctx2) continue;\n            ctx2.clearRect(0, 0, canvas.width, canvas.height);\n            ctx2.translate(size / 2, size / 2);\n            ctx2.fillStyle = (AssetsConfig as any).palette?.turret || \"#94a3b8\";\n            // Determine a scale factor to map shape unit coords into pixel space\n            const scale = size / 2 / 2; // heuristic: shape unit ~2 units radius\n            if (tshape.type === \"circle\") {\n              ctx2.beginPath();\n              ctx2.arc(0, 0, (tshape.r || 1) * scale, 0, Math.PI * 2);\n              ctx2.fill();\n            } else if (tshape.type === \"polygon\") {\n              ctx2.beginPath();\n              const pts = tshape.points || [];\n              if (pts.length) {\n                ctx2.moveTo((pts[0][0] || 0) * scale, (pts[0][1] || 0) * scale);\n                for (let i = 1; i < pts.length; i++)\n                  ctx2.lineTo(\n                    (pts[i][0] || 0) * scale,\n                    (pts[i][1] || 0) * scale,\n                  );\n                ctx2.closePath();\n                ctx2.fill();\n              }\n            } else if (tshape.type === \"compound\") {\n              for (const part of tshape.parts || []) {\n                if (part.type === \"circle\") {\n                  ctx2.beginPath();\n                  ctx2.arc(0, 0, (part.r || 1) * scale, 0, Math.PI * 2);\n                  ctx2.fill();\n                } else if (part.type === \"polygon\") {\n                  ctx2.beginPath();\n                  const pts = part.points || [];\n                  if (pts.length) {\n                    ctx2.moveTo(\n                      (pts[0][0] || 0) * scale,\n                      (pts[0][1] || 0) * scale,\n                    );\n                    for (let i = 1; i < pts.length; i++)\n                      ctx2.lineTo(\n                        (pts[i][0] || 0) * scale,\n                        (pts[i][1] || 0) * scale,\n                      );\n                    ctx2.closePath();\n                    ctx2.fill();\n                  }\n                }\n              }\n            }\n            this._turretSpriteCache[k] = canvas;\n          } catch (e) {\n            /* ignore turret raster errors */\n          }\n        }\n      } catch (e) {}\n    } catch (e) {\n      // ignore global errors\n    }\n  }\n\n  isRunning(): boolean {\n    return false;\n  }\n\n  renderState(state: GameState, interpolation = 0): void {\n    // helper: draw a stroked ring (used for explosions / flashes)\n    function drawRing(\n      x: number,\n      y: number,\n      R: number,\n      color: string,\n      alpha = 1.0,\n      thickness = 2,\n    ) {\n      try {\n        withContext(() => {\n          activeBufferCtx.globalAlpha = Math.max(0, Math.min(1, alpha));\n          activeBufferCtx.strokeStyle = color;\n          activeBufferCtx.lineWidth = thickness * renderScale;\n          activeBufferCtx.beginPath();\n          activeBufferCtx.arc(\n            x * renderScale,\n            y * renderScale,\n            Math.max(1, R * renderScale),\n            0,\n            Math.PI * 2,\n          );\n          activeBufferCtx.stroke();\n        });\n      } catch (e) {\n        /* ignore draw errors */\n      }\n    }\n    // --- Offscreen buffer rendering ---\n    // 1. Resize bufferCanvas to logical size \u00D7 renderer scale BEFORE any drawing\n    // 2. Draw all simulation visuals to bufferCanvas\n    // 3. Copy bufferCanvas to main canvas ONLY after all drawing is finished\n    const ctx = this.ctx!;\n    const bufferCtx = this.bufferCtx!;\n    if (!ctx || !bufferCtx) return;\n    // Prefer canonical logical bounds from simConfig so renderer matches simulation\n    // defaults. If unavailable, fall back to previous hard-coded values.\n    const defaultBounds =\n      typeof getDefaultBounds === \"function\"\n        ? getDefaultBounds()\n        : { W: 1920, H: 1080 };\n    const LOGICAL_W =\n      defaultBounds && typeof defaultBounds.W === \"number\"\n        ? defaultBounds.W\n        : 1920;\n    const LOGICAL_H =\n      defaultBounds && typeof defaultBounds.H === \"number\"\n        ? defaultBounds.H\n        : 1080;\n    const renderScale =\n      RendererConfig && typeof (RendererConfig as any).renderScale === \"number\"\n        ? (RendererConfig as any).renderScale\n        : 1;\n    const fitScale = (RendererConfig as any)._fitScale || 1;\n    // Resize bufferCanvas if needed (before any drawing)\n    const bufferW = Math.round(LOGICAL_W * renderScale);\n    const bufferH = Math.round(LOGICAL_H * renderScale);\n    if (\n      this.bufferCanvas.width !== bufferW ||\n      this.bufferCanvas.height !== bufferH\n    ) {\n      this.bufferCanvas.width = bufferW;\n      this.bufferCanvas.height = bufferH;\n      // After resizing, need to re-acquire bufferCtx\n      this.bufferCtx = this.bufferCanvas.getContext(\"2d\");\n      if (!this.bufferCtx) return;\n    }\n    // Always use latest bufferCtx after possible resize\n    const activeBufferCtx = this.bufferCtx!;\n    // Draw simulation to bufferCanvas\n    activeBufferCtx.setTransform(1, 0, 0, 1, 0, 0); // No scaling here; scale coordinates instead\n    activeBufferCtx.clearRect(0, 0, bufferW, bufferH);\n    withContext(() => {\n      activeBufferCtx.fillStyle =\n        (AssetsConfig as any).palette?.background || \"#0b1220\";\n      activeBufferCtx.fillRect(0, 0, bufferW, bufferH);\n    });\n\n    // helper: draw a polygon path from points (already scaled/rotated by transform)\n    function drawPolygon(points: number[][]) {\n      if (!points || points.length === 0) return;\n      activeBufferCtx.beginPath();\n      activeBufferCtx.moveTo(\n        points[0][0] * renderScale,\n        points[0][1] * renderScale,\n      );\n      for (let i = 1; i < points.length; i++)\n        activeBufferCtx.lineTo(\n          points[i][0] * renderScale,\n          points[i][1] * renderScale,\n        );\n      activeBufferCtx.closePath();\n      activeBufferCtx.fill();\n    }\n\n    // background starCanvas if present\n    if (state && state.starCanvas) {\n      if (state.starCanvas) {\n        withContext(() => {\n          activeBufferCtx.globalAlpha = 0.5;\n          activeBufferCtx.drawImage(\n            state.starCanvas as CanvasImageSource,\n            0,\n            0,\n            bufferW,\n            bufferH,\n          );\n        });\n      }\n    }\n\n    // helper: current time for animation pulses\n    const now = (state && state.t) || 0;\n\n    // Spawn damage particles from recent damage events (renderer-owned particle bursts)\n    try {\n      const dmgAnim =\n        AssetsConfig.animations && AssetsConfig.animations.damageParticles;\n      if (Array.isArray(state.damageEvents) && dmgAnim) {\n        state.particles = state.particles || [];\n        for (const ev of state.damageEvents) {\n          const count = dmgAnim.count || 6;\n          for (let i = 0; i < count; i++) {\n            const angle = Math.random() * Math.PI * 2;\n            const speed = Math.random() * (dmgAnim.spread || 0.6);\n            state.particles.push({\n              x: ev.x || 0,\n              y: ev.y || 0,\n              vx: Math.cos(angle) * speed,\n              vy: Math.sin(angle) * speed,\n              r: 0.6 + Math.random() * 0.8,\n              color:\n                dmgAnim.color ||\n                (AssetsConfig as any).palette?.shipAccent ||\n                \"#ff6b6b\",\n              lifetime: dmgAnim.lifetime || 0.8,\n              age: 0,\n              shape: \"circle\",\n            });\n          }\n        }\n        // clear damageEvents after spawning so they are one-shot\n        state.damageEvents = [];\n      }\n    } catch (e) {\n      /* ignore particle spawn errors */\n    }\n\n    // Engine trail rendering (config-driven, per ship)\n    // Helper to perform ship-local drawing with guaranteed save/restore.\n    function withShipContext(s: any, fn: () => void) {\n      activeBufferCtx.save();\n      try {\n        activeBufferCtx.translate(\n          (s.x || 0) * renderScale,\n          (s.y || 0) * renderScale,\n        );\n        activeBufferCtx.rotate(s.angle || 0);\n        fn();\n      } finally {\n        try {\n          activeBufferCtx.restore();\n        } catch (e) {\n          /* ignore restore errors */\n        }\n      }\n    }\n\n    // Generic helper to run a callback with save/restore around it.\n    function withContext(fn: () => void) {\n      activeBufferCtx.save();\n      try {\n        fn();\n      } finally {\n        try {\n          activeBufferCtx.restore();\n        } catch (e) {\n          /* ignore */\n        }\n      }\n    }\n\n    for (const s of state.ships || []) {\n      const sx = (s.x || 0) * renderScale;\n      const sy = (s.y || 0) * renderScale;\n      if (sx < 0 || sx >= bufferW || sy < 0 || sy >= bufferH) continue;\n      // Update trail history (store in s.trail)\n      if (state.engineTrailsEnabled) {\n        s.trail = s.trail || [];\n        // Only add new trail point if ship moved\n        const last = s.trail.length ? s.trail[s.trail.length - 1] : null;\n        if (!last || last.x !== s.x || last.y !== s.y) {\n          s.trail.push({ x: s.x, y: s.y });\n        }\n        // Limit trail length using config\n        const trailConfig = getEngineTrailConfig(\n          s.type || getDefaultShipTypeSafe(),\n        );\n        const maxTrail = trailConfig?.maxLength || 40;\n        while (s.trail.length > maxTrail) s.trail.shift();\n      }\n\n      // Draw engine trail (configurable shape, color, width, fade)\n      if (Array.isArray(s.trail)) {\n        const trailConfig = getEngineTrailConfig(\n          s.type || getDefaultShipTypeSafe(),\n        );\n        const color =\n          trailConfig?.color ||\n          (AssetsConfig as any).palette?.bullet ||\n          \"#aee1ff\";\n        const width =\n          (trailConfig?.width || 0.35) * (s.radius || 12) * renderScale;\n        const fade = trailConfig?.fade || 0.35;\n        // Use SVG engine mountpoints if available\n        const engineMounts =\n          this._svgEngineMountCache &&\n          this._svgEngineMountCache[s.type || getDefaultShipTypeSafe()];\n        if (Array.isArray(engineMounts) && engineMounts.length > 0) {\n          for (const [emx, emy] of engineMounts) {\n            for (let i = 0; i < s.trail.length; i++) {\n              // Place trail at engine mount offset, rotated by ship angle\n              const angle = s.angle || 0;\n              const tx =\n                s.x +\n                (Math.cos(angle) * emx - Math.sin(angle) * emy) *\n                  (s.radius || 12);\n              const ty =\n                s.y +\n                (Math.sin(angle) * emx + Math.cos(angle) * emy) *\n                  (s.radius || 12);\n              // Fade alpha from fade to 1.0\n              const tAlpha = fade + (1 - fade) * (i / s.trail.length);\n              const txx = tx * renderScale;\n              const tyy = ty * renderScale;\n              if (txx < 0 || txx >= bufferW || tyy < 0 || tyy >= bufferH)\n                continue;\n              withContext(() => {\n                activeBufferCtx.globalAlpha = tAlpha;\n                activeBufferCtx.fillStyle = color;\n                activeBufferCtx.beginPath();\n                activeBufferCtx.arc(txx, tyy, width, 0, Math.PI * 2);\n                activeBufferCtx.fill();\n              });\n            }\n          }\n        } else {\n          // Fallback: single trail at ship center\n          for (let i = 0; i < s.trail.length; i++) {\n            const tx = s.trail[i].x || 0;\n            const ty = s.trail[i].y || 0;\n            // Fade alpha from fade to 1.0\n            const tAlpha = fade + (1 - fade) * (i / s.trail.length);\n            const txx = tx * renderScale;\n            const tyy = ty * renderScale;\n            if (txx < 0 || txx >= bufferW || tyy < 0 || tyy >= bufferH)\n              continue;\n            withContext(() => {\n              activeBufferCtx.globalAlpha = tAlpha;\n              activeBufferCtx.fillStyle = color;\n              activeBufferCtx.beginPath();\n              activeBufferCtx.arc(txx, tyy, width, 0, Math.PI * 2);\n              activeBufferCtx.fill();\n            });\n          }\n        }\n      }\n\n      // Draw ship hull using asset-agnostic sprite provider inside a ship-local\n      // context so shapes can be drawn around (0,0).\n  const sprite = getSpriteAsset(s.type || getDefaultShipTypeSafe());\n      withShipContext(s, () => {\n        // Resolve team color via TeamsConfig if available; fall back to palette\n        let teamColor = (AssetsConfig as any).palette?.shipHull || \"#888\";\n        try {\n          if (s && s.team && TeamsConfig && (TeamsConfig as any).teams) {\n            const teamEntry = (TeamsConfig as any).teams[s.team];\n            if (teamEntry && teamEntry.color) teamColor = teamEntry.color;\n          }\n        } catch {}\n        activeBufferCtx.fillStyle = teamColor;\n        // --- SVG hull rendering ---\n        let hullDrawn = false;\n        if (sprite.svg) {\n          // Cache rasterized hull-only SVG per ship type\n          this._svgHullCache = this._svgHullCache || {};\n          const cacheKey = s.type || getDefaultShipTypeSafe();\n          let hullCanvas = this._svgHullCache[cacheKey];\n          if (!hullCanvas) {\n            try {\n              // Use svgLoader to rasterize hull-only SVG\n              const svgText = sprite.svg;\n              // Use a reasonable size for rasterization (match viewBox or default)\n              let outW = 128,\n                outH = 128;\n              const vbMatch =\n                /viewBox\\s*=\\s*\"(\\d+)[^\\d]+(\\d+)[^\\d]+(\\d+)[^\\d]+(\\d+)\"/.exec(\n                  svgText,\n                );\n              if (vbMatch) {\n                outW = parseInt(vbMatch[3]) || 128;\n                outH = parseInt(vbMatch[4]) || 128;\n              }\n              // Prefer a synchronously-available cached canvas from svgRenderer\n              hullCanvas = (svgLoader as any).getCachedHullCanvasSync\n                ? (svgLoader as any).getCachedHullCanvasSync(\n                    svgText,\n                    outW,\n                    outH,\n                    cacheKey,\n                  )\n                : undefined;\n              if (!hullCanvas) {\n                // If no sync cached canvas, try local synchronous rasterization as a fallback\n                try {\n                  hullCanvas = svgLoader.rasterizeHullOnlySvgToCanvas(\n                    svgText,\n                    outW,\n                    outH,\n                  ) as HTMLCanvasElement;\n                } catch (e) {\n                  hullCanvas = undefined;\n                }\n              }\n              this._svgHullCache[cacheKey] = hullCanvas;\n            } catch (e) {\n              hullCanvas = undefined;\n            }\n          }\n          if (hullCanvas) {\n            // Center and scale hullCanvas to ship radius\n            const scale =\n              ((s.radius || 12) * renderScale) / (hullCanvas.width / 2);\n            // Prepare tinted cache (per-team pool)\n            if (!this._tintedHullPool)\n              this._tintedHullPool = new TintedHullPool({\n                globalCap: 256,\n                perTeamCap: 64,\n              });\n            const tintedKey = `${cacheKey}::${teamColor}`;\n            // Try to read and promote existing entry to MRU via pool\n            let tintedCanvas: HTMLCanvasElement | undefined = undefined;\n            if (this._tintedHullPool.has(tintedKey)) {\n              const existing = this._tintedHullPool.get(tintedKey) as\n                | HTMLCanvasElement\n                | undefined;\n              if (existing) {\n                // If the existing cached canvas matches the desired size,\n                // promote to MRU and use it. If it doesn't match (e.g. a\n                // small placeholder pre-warmed during init), remove it so\n                // we can generate or fetch a correctly-sized tinted canvas.\n                try {\n                  if (\n                    existing.width === hullCanvas.width &&\n                    existing.height === hullCanvas.height\n                  ) {\n                    // Promote to MRU by re-setting the entry\n                    this._tintedHullPool.delete(tintedKey);\n                    this._tintedHullPool.set(tintedKey, existing);\n                    tintedCanvas = existing;\n                  } else {\n                    // size mismatch -> remove placeholder so we can create real one\n                    try {\n                      this._tintedHullPool.delete(tintedKey);\n                    } catch (ee) {}\n                  }\n                } catch (e) {\n                  // On any errors, fall back to treating as missing\n                  try {\n                    this._tintedHullPool.delete(tintedKey);\n                  } catch (ee) {}\n                }\n              }\n            }\n            if (!tintedCanvas) {\n              try {\n                // lazy require to avoid circular imports at module load time\n                const svgRenderer = require(\"./assets/svgRenderer\");\n                if (\n                  svgRenderer &&\n                  typeof svgRenderer.getCanvas === \"function\"\n                ) {\n                  const assetKey = cacheKey; // reuse cacheKey (shipType)\n                  const mapping = teamMapping(teamColor);\n                  // Prefer synchronous cached canvas if available\n                  try {\n                    const c = svgRenderer.getCanvas(\n                      assetKey,\n                      mapping,\n                      hullCanvas.width,\n                      hullCanvas.height,\n                    );\n                    if (c) {\n                      tintedCanvas = c;\n                      this._setTintedCanvas(tintedKey, c);\n                    } else if (\n                      typeof svgRenderer.rasterizeSvgWithTeamColors ===\n                      \"function\"\n                    ) {\n                      // Trigger svgLoader.ensureRasterizedAndCached to populate cache async\n                      try {\n                        (svgLoader as any).ensureRasterizedAndCached &&\n                          (svgLoader as any).ensureRasterizedAndCached(\n                            sprite.svg,\n                            mapping,\n                            hullCanvas.width,\n                            hullCanvas.height,\n                            { assetKey, applyTo: \"both\" },\n                          );\n                      } catch (e) {}\n                    }\n                  } catch (e) {\n                    /* ignore cache lookup errors */\n                  }\n                }\n              } catch (e) {}\n\n              // If the raster cache did not provide a synchronous canvas, create\n              // a local tinted copy so we can draw this frame while the async\n              // cached raster is produced for future frames.\n              if (!tintedCanvas) {\n                try {\n                  const tc = document.createElement(\"canvas\");\n                  tc.width = hullCanvas.width;\n                  tc.height = hullCanvas.height;\n                  const tctx = tc.getContext(\"2d\");\n                  if (tctx) {\n                    tctx.clearRect(0, 0, tc.width, tc.height);\n                    tctx.drawImage(hullCanvas, 0, 0);\n                    tctx.globalCompositeOperation = \"source-in\";\n                    tctx.fillStyle = teamColor;\n                    tctx.fillRect(0, 0, tc.width, tc.height);\n                    tctx.globalCompositeOperation = \"source-over\";\n                    tintedCanvas = tc;\n                    this._setTintedCanvas(tintedKey, tc);\n                  }\n                } catch (e) {\n                  /* ignore local tint errors */\n                }\n              }\n            }\n\n            // Draw the tinted (or original) canvas centered and scaled\n            withContext(() => {\n              activeBufferCtx.save();\n              activeBufferCtx.scale(scale, scale);\n              try {\n                activeBufferCtx.drawImage(\n                  tintedCanvas || hullCanvas,\n                  -hullCanvas.width / 2,\n                  -hullCanvas.height / 2,\n                );\n              } catch (e) {\n                // fallback to drawing original if tinted draw fails\n                try {\n                  activeBufferCtx.drawImage(\n                    hullCanvas,\n                    -hullCanvas.width / 2,\n                    -hullCanvas.height / 2,\n                  );\n                } catch (e) {}\n              }\n              activeBufferCtx.restore();\n            });\n            hullDrawn = true;\n          }\n        }\n        // Fallback: draw shape if SVG hull not drawn\n        if (!hullDrawn) {\n          const shape = sprite.shape;\n          if (shape) {\n            if (shape.type === \"circle\") {\n              activeBufferCtx.beginPath();\n              activeBufferCtx.arc(\n                0,\n                0,\n                (s.radius || 12) * renderScale,\n                0,\n                Math.PI * 2,\n              );\n              activeBufferCtx.fill();\n            } else if (shape.type === \"polygon\") {\n              drawPolygon(shape.points as number[][]);\n            } else if (shape.type === \"compound\") {\n              for (const part of shape.parts) {\n                if (part.type === \"circle\") {\n                  activeBufferCtx.beginPath();\n                  activeBufferCtx.arc(\n                    0,\n                    0,\n                    (part.r || 1) * (s.radius || 12) * renderScale,\n                    0,\n                    Math.PI * 2,\n                  );\n                  activeBufferCtx.fill();\n                } else if (part.type === \"polygon\") {\n                  drawPolygon(part.points as number[][]);\n                }\n              }\n            }\n          }\n        }\n        // Draw engine flare if configured (local-space polygon offset behind/forward of ship)\n        try {\n          const vconf = getVisualConfig(s.type || getDefaultShipTypeSafe());\n          const engineName =\n            vconf && vconf.visuals && vconf.visuals.engine\n              ? vconf.visuals.engine\n              : \"engineFlare\";\n          const engAnim =\n            (AssetsConfig as any).animations &&\n            (AssetsConfig as any).animations[engineName];\n          if (engAnim && Array.isArray(engAnim.points)) {\n            const radius = s.radius || 12;\n            const offsetLocal =\n              typeof engAnim.offset === \"number\"\n                ? engAnim.offset * radius * renderScale\n                : 0;\n            withContext(() => {\n              activeBufferCtx.translate(offsetLocal, 0);\n              activeBufferCtx.globalAlpha =\n                typeof engAnim.alpha === \"number\" ? engAnim.alpha : 1.0;\n              activeBufferCtx.fillStyle =\n                engAnim.color ||\n                (AssetsConfig as any).palette?.shipAccent ||\n                \"#ffffff\";\n              activeBufferCtx.beginPath();\n              const pts: number[][] = engAnim.points || [];\n              if (pts.length) {\n                activeBufferCtx.moveTo(\n                  (pts[0][0] || 0) * radius * renderScale,\n                  (pts[0][1] || 0) * radius * renderScale,\n                );\n                for (let pi = 1; pi < pts.length; pi++)\n                  activeBufferCtx.lineTo(\n                    (pts[pi][0] || 0) * radius * renderScale,\n                    (pts[pi][1] || 0) * radius * renderScale,\n                  );\n                activeBufferCtx.closePath();\n                activeBufferCtx.fill();\n              }\n            });\n          }\n        } catch (e) {\n          /* ignore engine flare draw errors */\n        }\n        // Draw turrets. Turrets may have independent angles (turret.angle) and\n        // turnRate. Mount positions can come from the ship instance, shapes2d\n        // config, or extracted from SVGs (svgMounts). We prefer instance\n        // positions, then shape config, then svgMounts as a last resort.\n        const shipType = s.type || \"fighter\";\n  const shipCfg = getShipConfigSafe()[shipType];\n        const configRadius =\n          shipCfg && typeof shipCfg.radius === \"number\"\n            ? shipCfg.radius\n            : s.radius || 12;\n        const shapeEntry: any =\n          AssetsConfig.shapes2d && (AssetsConfig.shapes2d as any)[shipType];\n        const svgMounts =\n          (AssetsConfig as any).svgMounts &&\n          (AssetsConfig as any).svgMounts[shipType];\n        const instanceTurrets = Array.isArray((s as any).turrets)\n          ? (s as any).turrets\n          : (shapeEntry && shapeEntry.turrets) || [];\n        for (let ti = 0; ti < instanceTurrets.length; ti++) {\n          try {\n            const turret = instanceTurrets[ti];\n            // If turret is a simple position tuple from svgMounts, normalize to object\n            let turretObj: any = turret;\n            if (!turretObj) continue;\n            if (\n              !turretObj.position &&\n              Array.isArray(turret) &&\n              turret.length === 2\n            ) {\n              turretObj = { kind: \"basic\", position: turret };\n            }\n            // As a last resort, try to use svgMounts mapping for this index\n            if (\n              (!turretObj.position || turretObj.position.length !== 2) &&\n              Array.isArray(svgMounts) &&\n              svgMounts[ti]\n            ) {\n              turretObj.position = svgMounts[ti];\n            }\n            if (!turretObj.position) continue;\n            const turretKind = turretObj.kind || \"basic\";\n            const turretShape = getTurretAsset(turretKind as any);\n            // Turret angle: instance-provided turret.angle if present, else default to ship angle\n            // turretObj.angle is stored as local turret rotation relative to ship\n            const turretLocalAngle =\n              typeof turretObj.angle === \"number\"\n                ? turretObj.angle\n                : typeof (s as any).turretAngle === \"number\"\n                  ? (s as any).turretAngle\n                  : 0;\n            // Turret turnRate: instance value, else assets-config default, else fallback\n            const turretTurnRate =\n              typeof turretObj.turnRate === \"number\"\n                ? turretObj.turnRate\n                : ((AssetsConfig as any).turretDefaults &&\n                    (AssetsConfig as any).turretDefaults[turretKind] &&\n                    (AssetsConfig as any).turretDefaults[turretKind]\n                      .turnRate) ||\n                  Math.PI * 1.5;\n            const [tx, ty] = turretObj.position; // mount local coords (radius units)\n            // Convert mount local coords (radius units) into ship-local pixels and rotate by ship heading\n            const angle = s.angle || 0;\n            const turretX =\n              (Math.cos(angle) * tx - Math.sin(angle) * ty) *\n              configRadius *\n              renderScale;\n            const turretY =\n              (Math.sin(angle) * tx + Math.cos(angle) * ty) *\n              configRadius *\n              renderScale;\n            const turretScale = configRadius * renderScale * 0.5;\n            withContext(() => {\n              activeBufferCtx.translate(turretX, turretY);\n              // Rotate turret independently by turretAngle (relative to world)\n              activeBufferCtx.rotate(turretLocalAngle - (s.angle || 0));\n              // Try to draw cached rasterized turret sprite for this kind\n              const spriteCanvas =\n                this._turretSpriteCache && this._turretSpriteCache[turretKind];\n              if (spriteCanvas) {\n                try {\n                  const pw = spriteCanvas.width;\n                  const ph = spriteCanvas.height;\n                  activeBufferCtx.drawImage(\n                    spriteCanvas,\n                    -pw / 2,\n                    -ph / 2,\n                    pw,\n                    ph,\n                  );\n                  return;\n                } catch (e) {}\n              }\n              // Fallback vector draw\n              activeBufferCtx.fillStyle =\n                (AssetsConfig as any).palette?.turret || \"#94a3b8\";\n              if (turretShape.type === \"circle\") {\n                activeBufferCtx.beginPath();\n                activeBufferCtx.arc(\n                  0,\n                  0,\n                  (turretShape.r || 1) * turretScale,\n                  0,\n                  Math.PI * 2,\n                );\n                activeBufferCtx.fill();\n              } else if (turretShape.type === \"polygon\") {\n                withContext(() => {\n                  activeBufferCtx.scale(turretScale, turretScale);\n                  drawPolygon(turretShape.points as number[][]);\n                });\n              } else if (turretShape.type === \"compound\") {\n                for (const part of turretShape.parts) {\n                  if (part.type === \"circle\") {\n                    activeBufferCtx.beginPath();\n                    activeBufferCtx.arc(\n                      0,\n                      0,\n                      (part.r || 1) * turretScale,\n                      0,\n                      Math.PI * 2,\n                    );\n                    activeBufferCtx.fill();\n                  } else if (part.type === \"polygon\") {\n                    withContext(() => {\n                      activeBufferCtx.scale(turretScale, turretScale);\n                      drawPolygon(part.points as number[][]);\n                    });\n                  }\n                }\n              }\n            });\n          } catch (e) {\n            /* ignore turret draw errors per turret */\n          }\n        }\n\n        // Draw shield effect (outline) in ship-local coords at 0,0\n        if ((s.shield ?? 0) > 0) {\n          const shAnim =\n            (AssetsConfig as any).animations &&\n            (AssetsConfig as any).animations.shieldEffect;\n          try {\n            // Compute alpha and stroke params from animation config if present\n            const pulse =\n              shAnim && typeof shAnim.pulseRate === \"number\"\n                ? 0.5 + 0.5 * Math.sin(now * shAnim.pulseRate)\n                : 1.0;\n            const shieldNorm = Math.max(\n              0,\n              Math.min(1, (s.shield || 0) / (s.maxShield || s.shield || 1)),\n            );\n            const alphaBase =\n              shAnim && typeof shAnim.alphaBase === \"number\"\n                ? shAnim.alphaBase\n                : (shAnim && shAnim.alpha) || 0.25;\n            const alphaScale =\n              shAnim && typeof shAnim.alphaScale === \"number\"\n                ? shAnim.alphaScale\n                : 0.75;\n            const alpha = Math.max(\n              0,\n              Math.min(1, alphaBase + alphaScale * pulse * shieldNorm),\n            );\n            const strokeColor =\n              (shAnim && shAnim.color) ||\n              (AssetsConfig as any).palette?.shipAccent ||\n              \"#3ab6ff\";\n            const strokeWidth =\n              (shAnim &&\n                (shAnim.strokeWidth || 0.08) *\n                  (s.radius || 12) *\n                  renderScale) ||\n              3 * renderScale;\n\n            // Try to extract SVG hull outline for shield stroke\n            let stroked = false;\n            try {\n              const { getHullOutlineFromSvg } = require(\"./assets/svgLoader\");\n              const svgText = getShipAsset(s.type);\n              if (svgText) {\n                const outline = getHullOutlineFromSvg(svgText, 1.5);\n                if (outline && outline.contours && outline.contours.length) {\n                  withContext(() => {\n                    activeBufferCtx.globalAlpha = alpha;\n                    activeBufferCtx.strokeStyle = strokeColor;\n                    activeBufferCtx.lineWidth = strokeWidth;\n                    for (const contour of outline.contours) {\n                      if (contour.length) {\n                        activeBufferCtx.beginPath();\n                        activeBufferCtx.moveTo(\n                          (contour[0][0] || 0) * (s.radius || 12) * renderScale,\n                          (contour[0][1] || 0) * (s.radius || 12) * renderScale,\n                        );\n                        for (let i = 1; i < contour.length; i++)\n                          activeBufferCtx.lineTo(\n                            (contour[i][0] || 0) *\n                              (s.radius || 12) *\n                              renderScale,\n                            (contour[i][1] || 0) *\n                              (s.radius || 12) *\n                              renderScale,\n                          );\n                        activeBufferCtx.closePath();\n                        activeBufferCtx.stroke();\n                      }\n                    }\n                  });\n                  stroked = true;\n                }\n              }\n            } catch (e) {\n              /* ignore shield draw errors */\n            }\n            // Fallback: legacy circle stroke if no polygon\n            if (!stroked) {\n              withContext(() => {\n                activeBufferCtx.globalAlpha = alpha;\n                activeBufferCtx.strokeStyle = strokeColor;\n                activeBufferCtx.lineWidth = strokeWidth;\n                activeBufferCtx.beginPath();\n                activeBufferCtx.arc(\n                  0,\n                  0,\n                  (s.radius || 12) * renderScale,\n                  0,\n                  Math.PI * 2,\n                );\n                activeBufferCtx.stroke();\n              });\n            }\n            // HP/shield bar rendering (restored baseline)\n            const baseW = Math.max(20, (s.radius || 12) * 1.6);\n            const baseH = Math.max(4, Math.round((s.radius || 12) * 0.25));\n            const dx = -Math.round(baseW / 2);\n            const dy = -(s.radius || 12) - baseH - 6;\n            const hbBg = (AssetsConfig as any).palette?.background || \"#222\";\n            const hbFill = (AssetsConfig as any).palette?.shipHull || \"#4caf50\";\n            const hpPct =\n              typeof (s as any).hpPercent === \"number\"\n                ? (s as any).hpPercent\n                : Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\n            const shPct =\n              typeof (s as any).shieldPercent === \"number\"\n                ? (s as any).shieldPercent\n                : typeof s.maxShield === \"number\" && s.maxShield > 0\n                  ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield))\n                  : 0;\n            const w = Math.max(1, Math.round(baseW * renderScale));\n            const h = Math.max(1, Math.round(baseH * renderScale));\n            const ox = Math.round(dx * renderScale);\n            const oy = Math.round(dy * renderScale);\n            const sx = Math.round((s.x || 0) * renderScale);\n            const sy = Math.round((s.y || 0) * renderScale);\n            withContext(() => {\n              // Background\n              activeBufferCtx.fillStyle = hbBg;\n              activeBufferCtx.fillRect(sx + ox, sy + oy, w, h);\n              // HP fill (left-to-right)\n              activeBufferCtx.fillStyle = hbFill;\n              activeBufferCtx.fillRect(\n                sx + ox,\n                sy + oy,\n                Math.max(1, Math.round(w * hpPct)),\n                h,\n              );\n              // Shield overlay: thin bar above HP bar\n              if (shPct > 0) {\n                const shH = Math.max(1, Math.round(h * 0.5));\n                activeBufferCtx.fillStyle =\n                  (AssetsConfig as any).palette?.shipAccent || \"#3ab6ff\";\n                activeBufferCtx.fillRect(\n                  sx + ox,\n                  sy + oy - shH - 2,\n                  Math.max(1, Math.round(w * shPct)),\n                  shH,\n                );\n              }\n            });\n          } catch (e) {\n            /* ignore shield draw errors */\n          }\n        }\n      }); // end withShipContext for this ship\n\n      // Health hits: render freshest per-ship health flash using index (reddish rings), pooled\n      try {\n        const nowT = state.t || 0;\n        for (const s of state.ships || []) {\n          try {\n            let flash: any = null;\n            const arr = Array.isArray(state.healthFlashes)\n              ? state.healthFlashes.filter((f: any) => f.id === s.id)\n              : [];\n            let bestTs = -Infinity;\n            for (const f of arr) {\n              if (!f) continue;\n              const fTs = typeof f._ts === \"number\" ? f._ts : 0;\n              const fTtl = typeof f.ttl === \"number\" ? f.ttl : 0.4;\n              if (fTs + fTtl >= nowT - 1e-6 && fTs > bestTs) {\n                bestTs = fTs;\n                flash = f;\n              }\n            }\n            if (flash) {\n              // Use pooled effect for health flash\n              const pooledFlash = acquireEffect(\n                state,\n                \"healthFlash\",\n                () =>\n                  makePooled(\n                    // Use typed factory to create base health effect and attach render fields via reset\n                    createHealthHitEffect({\n                      x: flash.x || s.x || 0,\n                      y: flash.y || s.y || 0,\n                    }),\n                    (obj, initArgs) => {\n                      // rehydrate base health fields\n                      resetHealthHitEffect(obj, initArgs as any);\n                      // attach/rehydrate render-specific fields\n                      (obj as any).ttl = initArgs?.ttl ?? 0.4;\n                      (obj as any).life = initArgs?.life ?? (obj as any).ttl;\n                      (obj as any).color = \"#ff7766\";\n                      (obj as any).radius = 6;\n                    },\n                  ),\n                flash,\n              );\n              type RenderHealthFlash = HealthHitEffect & {\n                ttl: number;\n                life: number;\n                color: string;\n                radius: number;\n              };\n              const pf = pooledFlash as unknown as RenderHealthFlash;\n              const t = Math.max(0, Math.min(1, pf.life / pf.ttl));\n              const R = (pf.radius as number) + (1 - t) * 18;\n              const alpha = 0.9 * t;\n              const fx = (pf.x as number) * renderScale;\n              const fy = (pf.y as number) * renderScale;\n              if (fx >= 0 && fx < bufferW && fy >= 0 && fy < bufferH) {\n                withContext(() => {\n                  activeBufferCtx.globalAlpha = Math.max(0, Math.min(1, alpha));\n                  activeBufferCtx.strokeStyle = pf.color;\n                  activeBufferCtx.lineWidth = 2 * renderScale;\n                  activeBufferCtx.beginPath();\n                  activeBufferCtx.arc(\n                    fx,\n                    fy,\n                    Math.max(1, R * renderScale),\n                    0,\n                    Math.PI * 2,\n                  );\n                  activeBufferCtx.stroke();\n                });\n              }\n              releaseEffect(state, \"healthFlash\", pooledFlash);\n            }\n          } catch (e) {}\n        }\n      } catch (e) {}\n\n      // bullets\n      for (const b of state.bullets || []) {\n        try {\n          const bx = (b.x || 0) * renderScale;\n          const by = (b.y || 0) * renderScale;\n          if (bx < 0 || bx >= bufferW || by < 0 || by >= bufferH) continue;\n          const r = b.radius || b.bulletRadius || 1.5;\n          const kind =\n            typeof b.bulletRadius === \"number\"\n              ? b.bulletRadius < 2\n                ? \"small\"\n                : b.bulletRadius < 3\n                  ? \"medium\"\n                  : \"large\"\n              : \"small\";\n          const shape = getBulletAsset(kind as any);\n          withContext(() => {\n            activeBufferCtx.translate(bx, by);\n            const px = Math.max(1, r * renderScale);\n            activeBufferCtx.fillStyle = AssetsConfig.palette.bullet;\n            if (shape.type === \"circle\") {\n              activeBufferCtx.beginPath();\n              activeBufferCtx.arc(0, 0, px, 0, Math.PI * 2);\n              activeBufferCtx.fill();\n            } else if (shape.type === \"polygon\") {\n              drawPolygon(shape.points as number[][]);\n            } else if (shape.type === \"compound\") {\n              for (const part of shape.parts) {\n                if (part.type === \"circle\") {\n                  activeBufferCtx.beginPath();\n                  activeBufferCtx.arc(0, 0, (part.r || 1) * px, 0, Math.PI * 2);\n                  activeBufferCtx.fill();\n                } else if (part.type === \"polygon\") {\n                  drawPolygon(part.points as number[][]);\n                }\n              }\n            }\n          });\n        } catch (e) {}\n      }\n      // particles (pooled)\n      try {\n        const shapes = (AssetsConfig as any).shapes2d || {};\n        for (const p of state.particles || []) {\n          try {\n            // Use pooled sprite for particle visuals\n            const particle = acquireSprite(\n              state,\n              \"particle\",\n              () =>\n                makePooled(\n                  {\n                    x: p.x || 0,\n                    y: p.y || 0,\n                    r: p.r || 1,\n                    color:\n                      p.color ||\n                      (AssetsConfig as any).palette?.bullet ||\n                      \"#ffdca8\",\n                    age: p.age || 0,\n                    lifetime: p.lifetime || 1,\n                    assetShape: p.assetShape,\n                  },\n                  (obj, initArgs) => {\n                    obj.x = initArgs?.x ?? 0;\n                    obj.y = initArgs?.y ?? 0;\n                    obj.r = initArgs?.r ?? 1;\n                    obj.color = initArgs?.color ?? \"#ffdca8\";\n                    obj.age = initArgs?.age ?? 0;\n                    obj.lifetime = initArgs?.lifetime ?? 1;\n                    obj.assetShape = initArgs?.assetShape;\n                  },\n                ),\n              p,\n            );\n            const px = particle.x * renderScale;\n            const py = particle.y * renderScale;\n            if (px < 0 || px >= bufferW || py < 0 || py >= bufferH) continue;\n            withContext(() => {\n              const shapeName =\n                particle.assetShape ||\n                (particle.r > 0.5 ? \"particleMedium\" : \"particleSmall\");\n              const shape = shapes[shapeName];\n              activeBufferCtx.fillStyle = particle.color;\n              activeBufferCtx.globalAlpha = Math.max(\n                0,\n                Math.min(1, 1 - particle.age / particle.lifetime),\n              );\n              activeBufferCtx.translate(px, py);\n              if (shape) {\n                if (shape.type === \"circle\") {\n                  const rr = (shape.r || 0.12) * particle.r * renderScale * 6;\n                  activeBufferCtx.beginPath();\n                  activeBufferCtx.arc(0, 0, rr, 0, Math.PI * 2);\n                  activeBufferCtx.fill();\n                } else if (shape.type === \"polygon\") {\n                  activeBufferCtx.beginPath();\n                  const pts = shape.points || [];\n                  if (pts.length) {\n                    activeBufferCtx.moveTo(\n                      (pts[0][0] || 0) * renderScale,\n                      (pts[0][1] || 0) * renderScale,\n                    );\n                    for (let i = 1; i < pts.length; i++)\n                      activeBufferCtx.lineTo(\n                        (pts[i][0] || 0) * renderScale,\n                        (pts[i][1] || 0) * renderScale,\n                      );\n                    activeBufferCtx.closePath();\n                    activeBufferCtx.fill();\n                  }\n                } else if (shape.type === \"compound\") {\n                  for (const part of shape.parts || []) {\n                    if (part.type === \"circle\") {\n                      const rr =\n                        (part.r || 0.12) * particle.r * renderScale * 6;\n                      activeBufferCtx.beginPath();\n                      activeBufferCtx.arc(0, 0, rr, 0, Math.PI * 2);\n                      activeBufferCtx.fill();\n                    } else if (part.type === \"polygon\") {\n                      activeBufferCtx.beginPath();\n                      const pts = part.points || [];\n                      if (pts.length) {\n                        activeBufferCtx.moveTo(\n                          (pts[0][0] || 0) * renderScale,\n                          (pts[0][1] || 0) * renderScale,\n                        );\n                        for (let i = 1; i < pts.length; i++)\n                          activeBufferCtx.lineTo(\n                            (pts[i][0] || 0) * renderScale,\n                            (pts[i][1] || 0) * renderScale,\n                          );\n                        activeBufferCtx.closePath();\n                        activeBufferCtx.fill();\n                      }\n                    }\n                  }\n                } else {\n                  activeBufferCtx.beginPath();\n                  activeBufferCtx.arc(\n                    0,\n                    0,\n                    (particle.r || 2) * renderScale,\n                    0,\n                    Math.PI * 2,\n                  );\n                  activeBufferCtx.fill();\n                }\n              } else {\n                activeBufferCtx.beginPath();\n                activeBufferCtx.arc(\n                  0,\n                  0,\n                  (particle.r || 2) * renderScale,\n                  0,\n                  Math.PI * 2,\n                );\n                activeBufferCtx.fill();\n              }\n            });\n            releaseSprite(state, \"particle\", particle);\n          } catch (e) {}\n        }\n      } catch (e) {\n        /* ignore particle render errors */\n      }\n\n      // Explosions (flashes) use explosionParticle if available, pooled via acquireEffect\n      try {\n        const expShape =\n          (AssetsConfig as any).shapes2d &&\n          (AssetsConfig as any).shapes2d.explosionParticle;\n        for (const ex of state.explosions || []) {\n          try {\n            // Use pooled effect for explosion visuals\n            const effect = acquireEffect(\n              state,\n              \"explosion\",\n              () =>\n                makePooled(\n                  createExplosionEffect({\n                    x: ex.x || 0,\n                    y: ex.y || 0,\n                    r: (expShape && expShape.r) || 0.32,\n                  }),\n                  (obj, initArgs) => {\n                    // rehydrate base explosion fields\n                    resetExplosionEffect(obj, initArgs as any);\n                    // attach/rehydrate render-specific fields\n                    (obj as any).scale = initArgs?.scale ?? 1;\n                    (obj as any).color = initArgs?.color ?? \"#ffd089\";\n                    (obj as any).alpha =\n                      initArgs?.alpha ??\n                      (1 - (ex.life || 0.5) / (ex.ttl || 0.5)) * 0.9;\n                  },\n                ),\n              ex,\n            );\n            type RenderExplosion = ExplosionEffect & {\n              scale?: number;\n              color?: string;\n              alpha?: number;\n            };\n            const ef = effect as unknown as RenderExplosion;\n            withContext(() => {\n              activeBufferCtx.globalAlpha = (ef.alpha as number) || 0;\n              activeBufferCtx.translate(\n                (ef.x as number) * renderScale,\n                (ef.y as number) * renderScale,\n              );\n              activeBufferCtx.fillStyle =\n                ef.color || (AssetsConfig as any).palette?.bullet || \"#ffd089\";\n              if (expShape && expShape.type === \"circle\") {\n                const rr = (ef.r || 0.32) * (ef.scale || 1) * renderScale * 6;\n                activeBufferCtx.beginPath();\n                activeBufferCtx.arc(\n                  0,\n                  0,\n                  rr * (1 + (1 - (ex.life || 0.5) / (ex.ttl || 0.5))),\n                  0,\n                  Math.PI * 2,\n                );\n                activeBufferCtx.fill();\n              } else {\n                activeBufferCtx.beginPath();\n                activeBufferCtx.arc(\n                  0,\n                  0,\n                  Math.max(\n                    2,\n                    (ef.scale || 1) *\n                      12 *\n                      (1 - (ex.life || 0.5) / (ex.ttl || 0.5)),\n                  ),\n                  0,\n                  Math.PI * 2,\n                );\n                activeBufferCtx.fill();\n              }\n            });\n            releaseEffect(state, \"explosion\", effect);\n          } catch (e) {}\n        }\n      } catch (e) {}\n\n      // --- Copy bufferCanvas to main canvas, scaling to fit window ---\n      // Only copy after all drawing is finished\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transform for drawImage\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      ctx.imageSmoothingEnabled = false;\n      // Copy buffer to canvas at 1:1 scaling; let CSS handle visual scaling if needed\n      ctx.drawImage(\n        this.bufferCanvas,\n        0,\n        0,\n        this.bufferCanvas.width,\n        this.bufferCanvas.height,\n        0,\n        0,\n        this.canvas.width,\n        this.canvas.height,\n      );\n      ctx.restore();\n    }\n  }\n}\n\nexport default CanvasRenderer;\n", "// Lightweight per-team capped pool for tinted hull canvases.\r\n// Keeps insertion order and enforces a per-team cap and a global cap.\r\nexport type TintedHullPoolOptions = {\r\n  globalCap?: number;\r\n  perTeamCap?: number;\r\n};\r\n\r\nexport default class TintedHullPool {\r\n  private map: Map<string, HTMLCanvasElement> = new Map();\r\n  private teamMap: Map<string, string[]> = new Map(); // teamColor -> array of keys (in insertion order)\r\n  // expose caps so callers/tests can read/update them if needed\r\n  public globalCap: number;\r\n  public perTeamCap: number;\r\n\r\n  constructor(opts?: TintedHullPoolOptions) {\r\n    this.globalCap = opts?.globalCap ?? 256;\r\n    this.perTeamCap = opts?.perTeamCap ?? 64;\r\n  }\r\n\r\n  get size(): number {\r\n    return this.map.size;\r\n  }\r\n\r\n  has(key: string): boolean {\r\n    return this.map.has(key);\r\n  }\r\n\r\n  get(key: string): HTMLCanvasElement | undefined {\r\n    return this.map.get(key);\r\n  }\r\n\r\n  // set a canvas and enforce caps\r\n  set(key: string, canvas: HTMLCanvasElement): this {\r\n    // If already present, delete so we re-insert (move to MRU)\r\n    if (this.map.has(key)) {\r\n      this._removeKeyFromTeam(key);\r\n      this.map.delete(key);\r\n    }\r\n    // Development-time assert: detect if the same canvas object is being reused\r\n    // across different keys. This usually indicates accidental shared mutable\r\n    // canvas instances which lead to tint/caching bugs.\r\n    const nodeEnv = (typeof process !== 'undefined' && (process.env && process.env.NODE_ENV)) ? process.env.NODE_ENV : (typeof (globalThis as any).NODE_ENV !== 'undefined' ? (globalThis as any).NODE_ENV : 'development');\r\n    const throwFlag = (typeof process !== 'undefined' && process.env && process.env.THROW_ON_SHARED_TINT) ? process.env.THROW_ON_SHARED_TINT : (typeof (globalThis as any).THROW_ON_SHARED_TINT !== 'undefined' ? (globalThis as any).THROW_ON_SHARED_TINT : undefined);\r\n    const shouldCheck = nodeEnv !== 'production';\r\n    if (shouldCheck) {\r\n      for (const [k, v] of this.map.entries()) {\r\n        if (v === canvas && k !== key) {\r\n          const msg = `[TintedHullPool] Detected shared canvas instance across keys: existing='${k}' new='${key}'. Avoid reusing the same HTMLCanvasElement for different tinted keys.`;\r\n          if (throwFlag === '1' || String(throwFlag).toLowerCase() === 'true') {\r\n            throw new Error(msg);\r\n          } else {\r\n            // eslint-disable-next-line no-console\r\n            console.warn(msg);\r\n          }\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    this.map.set(key, canvas);\r\n    const team = this._teamForKey(key);\r\n    if (!this.teamMap.has(team)) this.teamMap.set(team, []);\r\n    this.teamMap.get(team)!.push(key);\r\n\r\n    // Enforce per-team cap\r\n    const arr = this.teamMap.get(team)!;\r\n    while (arr.length > this.perTeamCap) {\r\n      const oldestKey = arr.shift();\r\n      if (oldestKey) this.map.delete(oldestKey);\r\n    }\r\n\r\n    // Enforce global cap (evict oldest broadly)\r\n    while (this.map.size > this.globalCap) {\r\n      const it = this.map.keys();\r\n      const oldest = it.next().value as string | undefined;\r\n      if (!oldest) break;\r\n      this._removeKeyFromTeam(oldest);\r\n      this.map.delete(oldest);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  delete(key: string): boolean {\r\n    this._removeKeyFromTeam(key);\r\n    return this.map.delete(key);\r\n  }\r\n\r\n  clear(): void {\r\n    this.map.clear();\r\n    this.teamMap.clear();\r\n  }\r\n\r\n  keys(): IterableIterator<string> {\r\n    return this.map.keys();\r\n  }\r\n\r\n  // Helper: extract team color from key formatted as \"<shipType>::<teamColor>\"\r\n  private _teamForKey(key: string): string {\r\n    const parts = key.split('::');\r\n    return parts.length >= 2 ? parts.slice(1).join('::') : '';\r\n  }\r\n\r\n  private _removeKeyFromTeam(key: string) {\r\n    const team = this._teamForKey(key);\r\n    const arr = this.teamMap.get(team);\r\n    if (!arr) return;\r\n    const idx = arr.indexOf(key);\r\n    if (idx >= 0) arr.splice(idx, 1);\r\n    if (arr.length === 0) this.teamMap.delete(team);\r\n  }\r\n}\r\n", "// Minimal, typed WebGL renderer focused on texture baking and lifecycle\r\n// Implements the public API expected by main.ts and tests.\r\n\r\nimport { AssetsConfig, Shape2D } from \"./config/assets/assetsConfig\";\r\nimport TeamsConfig from \"./config/teamsConfig\";\r\nimport type { GameState } from \"./types\";\r\nimport {\r\n  createExplosionEffect,\r\n  resetExplosionEffect,\r\n  ExplosionEffect,\r\n} from \"./entities\";\r\nimport {\r\n  acquireTexture,\r\n  releaseTexture,\r\n  acquireSprite,\r\n  releaseSprite,\r\n  acquireEffect,\r\n  releaseEffect,\r\n  makePooled,\r\n} from \"./pools\";\r\n\r\nexport class WebGLRenderer {\r\n  private canvas: HTMLCanvasElement;\r\n  private gl: WebGL2RenderingContext | WebGLRenderingContext | null = null;\r\n  // Renderer may run its own loop in advanced impls (not used here)\r\n  public providesOwnLoop = false;\r\n\r\n  // Cache of baked textures keyed by asset key\r\n  private shapeTextures: Record<string, WebGLTexture> = {};\r\n  // Last-seen GameState (to support release to pool during dispose)\r\n  private gameState: GameState | null = null;\r\n  // Optional textured-quad resources (not required by tests)\r\n  private quadVBO: WebGLBuffer | null = null;\r\n  private quadProg: WebGLProgram | null = null;\r\n  // Optional FBO resources for render-to-texture\r\n  private fbo: WebGLFramebuffer | null = null;\r\n  private fboTex: WebGLTexture | null = null;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n  }\r\n\r\n  // Initialize GL context and basic state\r\n  init(): boolean {\r\n    try {\r\n      const gl =\r\n        (this.canvas.getContext(\"webgl2\") as WebGL2RenderingContext | null) ||\r\n        (this.canvas.getContext(\"webgl\") as WebGLRenderingContext | null);\r\n      if (!gl) return false;\r\n      this.gl = gl;\r\n      gl.clearColor(0.02, 0.03, 0.06, 1.0);\r\n      // Lazily initialize optional programs/buffers when used\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Called when canvas backing store size changes\r\n  updateScale(): void {\r\n    if (!this.gl) return;\r\n    try {\r\n      this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    } catch {}\r\n  }\r\n\r\n  isRunning(): boolean {\r\n    return false;\r\n  }\r\n\r\n  // Render a state frame. This stub clears the screen and ensures\r\n  // textures for present ship types are baked and cached.\r\n  renderState(state: GameState, _interpolation = 0): void {\r\n    if (!this.gl) return;\r\n    // Remember the state so dispose can release assets back to the pool\r\n    this.gameState = state;\r\n    const gl = this.gl;\r\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    try {\r\n      const ships = (state && state.ships) || [];\r\n      for (const s of ships) {\r\n        const type = (s && s.type) || \"fighter\";\r\n        // Determine team color (fall back to palette.shipHull)\r\n        let teamColor = (AssetsConfig as any).palette?.shipHull || \"#b0b7c3\";\r\n        try {\r\n          if (s && s.team && TeamsConfig && (TeamsConfig as any).teams) {\r\n            const t = (TeamsConfig as any).teams[s.team];\r\n            if (t && t.color) teamColor = t.color;\r\n          }\r\n        } catch {}\r\n        this.bakeShapeToTexture(state, type, teamColor);\r\n        // Acquire a transient sprite object for this ship and rehydrate it.\r\n        try {\r\n          const key = `ship:${type}`;\r\n          const sprite = acquireSprite(this.gameState || (state as any), key, () => ({ type }));\r\n          // Reset/rehydrate runtime fields used by renderer\r\n          type RenderSprite = { type: string; x?: number; y?: number; angle?: number };\r\n          const sp = sprite as unknown as RenderSprite;\r\n          try {\r\n            sp.x = s.x || 0;\r\n            sp.y = s.y || 0;\r\n            sp.angle = s.angle || 0;\r\n          } catch {}\r\n          try { releaseSprite(this.gameState || (state as any), key, sprite); } catch {}\r\n        } catch {}\r\n      }\r\n      // Process visual flashes/effects and use effect pooling for transient objects\r\n      try {\r\n    const flashes = state.flashes || [];\r\n    for (const f of flashes) {\r\n          try {\r\n            const key = `flash`;\r\n            const pooled = acquireEffect(this.gameState || (state as any), key, () => makePooled(\r\n              createExplosionEffect({ x: f.x || 0, y: f.y || 0 }),\r\n              (obj, initArgs) => {\r\n                resetExplosionEffect(obj, initArgs as any);\r\n                // attach render-only fields\r\n                (obj as any).ttl = initArgs?.ttl ?? 0.5;\r\n              }\r\n            ), f);\r\n            type RenderFlash = ExplosionEffect & { ttl?: number };\r\n            const ef = pooled as unknown as RenderFlash;\r\n            try {\r\n              if (ef) {\r\n                // ef.x/ef.y already set by reset on acquire; ensure numeric\r\n                ef.x = ef.x || 0;\r\n                ef.y = ef.y || 0;\r\n                ef.ttl = ef.ttl ?? 0.5;\r\n              }\r\n            } catch {}\r\n            try { releaseEffect(this.gameState || (state as any), key, pooled); } catch {}\r\n          } catch {}\r\n        }\r\n      } catch {}\r\n    } catch {}\r\n  }\r\n\r\n  // Pre-bake textures for all known shapes\r\n  preloadAllAssets(): void {\r\n    if (!this.gl) return;\r\n    try {\r\n      const shapes = (AssetsConfig as any).shapes2d || {};\r\n      for (const key of Object.keys(shapes)) this.bakeShapeToTexture(this.gameState, key);\r\n    } catch {}\r\n  }\r\n\r\n  // Testing helper: check if we have a cached texture for a key\r\n  hasCachedTexture(key: string): boolean {\r\n    return !!this.shapeTextures[key];\r\n  }\r\n\r\n  // Dispose all GL resources and clear caches\r\n  dispose(): void {\r\n    if (this.gl) {\r\n      try {\r\n        for (const key of Object.keys(this.shapeTextures)) {\r\n          const tex = this.shapeTextures[key];\r\n          if (!tex) continue;\r\n          if (this.gameState) {\r\n            // Return texture to pool for reuse; allow pool to dispose overflow via deleter\r\n            try {\r\n              const gl = this.gl as WebGLRenderingContext;\r\n              releaseTexture(this.gameState, key, tex, (t) => { try { gl.deleteTexture(t); } catch {} });\r\n            } catch {}\r\n          } else {\r\n            // No pool available, delete GL resource\r\n            try { (this.gl as WebGLRenderingContext).deleteTexture(tex); } catch {}\r\n          }\r\n        }\r\n        // Optional resources cleanup\r\n        try { if (this.quadVBO) (this.gl as WebGLRenderingContext).deleteBuffer(this.quadVBO); } catch {}\r\n        try { if (this.quadProg) (this.gl as WebGLRenderingContext).deleteProgram(this.quadProg); } catch {}\r\n        try { if (this.fboTex) (this.gl as WebGLRenderingContext).deleteTexture(this.fboTex); } catch {}\r\n        try { if (this.fbo) (this.gl as WebGLRenderingContext).deleteFramebuffer(this.fbo); } catch {}\r\n      } catch {}\r\n    }\r\n    this.shapeTextures = {};\r\n    this.quadVBO = null;\r\n    this.quadProg = null;\r\n    this.fbo = null;\r\n    this.fboTex = null;\r\n    this.gl = null;\r\n  }\r\n\r\n  // Internal: bake a simple 2D shape into a texture and cache it\r\n  private bakeShapeToTexture(\r\n    state: GameState | null,\r\n    key: string,\r\n    teamColor?: string,\r\n  ): WebGLTexture | null {\r\n    if (!this.gl) return null;\r\n    const cacheKey = teamColor ? `${key}::${teamColor}` : key;\r\n    if (this.shapeTextures[cacheKey]) return this.shapeTextures[cacheKey];\r\n    try {\r\n      const gl = this.gl as WebGLRenderingContext;\r\n      const shapes = (AssetsConfig as any).shapes2d || {};\r\n      const shape: Shape2D | undefined = shapes[key];\r\n      // Offscreen rasterization canvas\r\n      const size = 128;\r\n      const cvs = document.createElement(\"canvas\");\r\n      cvs.width = size;\r\n      cvs.height = size;\r\n      const ctx = cvs.getContext(\"2d\");\r\n      if (!ctx) return null;\r\n      ctx.clearRect(0, 0, size, size);\r\n      ctx.save();\r\n      ctx.translate(size / 2, size / 2);\r\n      const scale = size / 4;\r\n  // Use provided team color if present, otherwise fall back to palette\r\n  ctx.fillStyle = teamColor || (AssetsConfig.palette && (AssetsConfig.palette as any).shipHull) || \"#b0b7c3\";\r\n      // Basic vector draw covering circle, polygon and compound\r\n      if (!shape) {\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, Math.max(4, size * 0.12), 0, Math.PI * 2);\r\n        ctx.fill();\r\n      } else if ((shape as any).type === \"circle\") {\r\n        const r = ((shape as any).r ?? 0.5) * scale;\r\n        ctx.beginPath();\r\n        ctx.arc(0, 0, r, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      } else if ((shape as any).type === \"polygon\") {\r\n        const pts: number[][] = (shape as any).points || [];\r\n        if (pts.length) {\r\n          ctx.beginPath();\r\n          ctx.moveTo((pts[0][0] || 0) * scale, (pts[0][1] || 0) * scale);\r\n          for (let i = 1; i < pts.length; i++)\r\n            ctx.lineTo((pts[i][0] || 0) * scale, (pts[i][1] || 0) * scale);\r\n          ctx.closePath();\r\n          ctx.fill();\r\n        }\r\n      } else if ((shape as any).type === \"compound\") {\r\n        const parts = (shape as any).parts || [];\r\n        for (const part of parts) {\r\n          if ((part as any).type === \"circle\") {\r\n            const r = ((part as any).r ?? 0.5) * scale;\r\n            ctx.beginPath();\r\n            ctx.arc(0, 0, r, 0, Math.PI * 2);\r\n            ctx.fill();\r\n          } else if ((part as any).type === \"polygon\") {\r\n            const pts: number[][] = (part as any).points || [];\r\n            if (pts.length) {\r\n              ctx.beginPath();\r\n              ctx.moveTo((pts[0][0] || 0) * scale, (pts[0][1] || 0) * scale);\r\n              for (let i = 1; i < pts.length; i++)\r\n                ctx.lineTo((pts[i][0] || 0) * scale, (pts[i][1] || 0) * scale);\r\n              ctx.closePath();\r\n              ctx.fill();\r\n            }\r\n          }\r\n        }\r\n      }\r\n      ctx.restore();\r\n\r\n      // Create or acquire texture via pool when state is available\r\n      const createTex = (): WebGLTexture => {\r\n        const t = gl.createTexture()!;\r\n        gl.bindTexture(gl.TEXTURE_2D, t);\r\n        gl.pixelStorei((gl as any).UNPACK_PREMULTIPLY_ALPHA_WEBGL ?? 0x8063, 0);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, cvs);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        return t;\r\n      };\r\n\r\n      let tex: WebGLTexture | null = null;\r\n      if (state) {\r\n        try {\r\n          tex = acquireTexture(state, cacheKey, createTex);\r\n        } catch {\r\n          // Fallback to direct creation if pooling fails\r\n          tex = createTex();\r\n        }\r\n      } else {\r\n        tex = createTex();\r\n      }\r\n      if (!tex) return null;\r\n      gl.bindTexture(gl.TEXTURE_2D, tex);\r\n\r\n      this.shapeTextures[cacheKey] = tex;\r\n      return tex;\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Optional future path: draw a textured quad (not used in tests yet)\r\n  // Keeping a stub to document intent and ease future extension.\r\n  // private drawTexturedQuad(_tex: WebGLTexture, _x: number, _y: number, _w: number, _h: number): void {\r\n  //   // Intentionally empty in minimal stub\r\n  // }\r\n}\r\n\r\nexport default WebGLRenderer;\r\n", "// This allows the build to treat the app as TypeScript while we incrementally port internals.\n// main.ts \u2014 TypeScript entrypoint (ported from main.js). Uses TS imports so\n// the module graph resolves to .ts sources during migration.\nimport { createGameManager } from \"./gamemanager\";\nimport { makeInitialState } from \"./entities\";\nimport type { GameState } from \"./types\";\nimport { CanvasRenderer } from \"./canvasrenderer\";\nimport { WebGLRenderer } from \"./webglrenderer\";\nimport { getDefaultBounds } from \"./config/simConfig\";\nimport { SIM } from \"./config/simConfig\";\nimport { getPreferredRenderer, RendererConfig } from \"./config/rendererConfig\";\nimport { getShipConfig } from \"./config/entitiesConfig\";\n\n// Allow temporary extension of window.gm used by the app during migration.\ndeclare global {\n  interface Window {\n    gm?: any;\n  }\n}\n\nexport async function startApp(rootDocument: Document = document) {\n  // Instantiate canonical GameState at startup\n  const gameState: GameState = makeInitialState();\n\n  let canvas = rootDocument.getElementById(\"world\") as HTMLCanvasElement | null;\n  // If the host document doesn't already have a canvas#world (some DOM emulators\n  // may provide a fresh document per test), create one so renderers can attach.\n  if (!canvas) {\n    try {\n      const el = rootDocument.createElement(\"canvas\");\n      el.id = \"world\";\n      rootDocument.body.appendChild(el);\n      canvas = el as HTMLCanvasElement;\n    } catch (e) {\n      canvas = null;\n    }\n  }\n  const ui: any = {\n    startPause: rootDocument.getElementById(\"startPause\"),\n    reset: rootDocument.getElementById(\"reset\"),\n    addRed: rootDocument.getElementById(\"addRed\"),\n    addBlue: rootDocument.getElementById(\"addBlue\"),\n    toggleTrails: rootDocument.getElementById(\"toggleTrails\"),\n    speed: rootDocument.getElementById(\"speed\"),\n    redScore: rootDocument.getElementById(\"redScore\"),\n    blueScore: rootDocument.getElementById(\"blueScore\"),\n    stats: rootDocument.getElementById(\"stats\"),\n    continuousCheckbox: rootDocument.getElementById(\"continuousCheckbox\"),\n    seedBtn: rootDocument.getElementById(\"seedBtn\"),\n    formationBtn: rootDocument.getElementById(\"formationBtn\"),\n  };\n\n  try {\n    if (ui.stats) ui.stats.textContent = \"Ships: 0 (R:0 B:0) Bullets: 0\";\n  } catch (e) {}\n\n  // Always use fixed logical bounds for simulation/game loop\n  const LOGICAL_BOUNDS = getDefaultBounds();\n\n  // --- Disposable tracking helpers to avoid memory leaks ---\n  const disposables: Array<() => void> = [];\n  let uiRaf: number | null = null;\n  let workerIndicatorRaf: number | null = null;\n  const pendingTimers = new Set<number>();\n  let isUiTickRunning = false;\n\n  function addListener(\n    target: EventTarget | null,\n    type: string,\n    handler: EventListenerOrEventListenerObject,\n  ) {\n    if (!target) return;\n    try {\n      target.addEventListener(type, handler as EventListener);\n      disposables.push(() => {\n        try {\n          target.removeEventListener(type, handler as EventListener);\n        } catch (e) {}\n      });\n    } catch (e) {}\n  }\n\n  function clearAllTimers() {\n    for (const id of Array.from(pendingTimers)) {\n      try {\n        clearTimeout(id as unknown as number);\n      } catch (e) {}\n      pendingTimers.delete(id);\n    }\n  }\n\n  // Only update backing store when renderScale changes\n  function updateCanvasBackingStore() {\n    const dpr = window.devicePixelRatio || 1;\n    const renderScale =\n      RendererConfig && typeof (RendererConfig as any).renderScale === \"number\"\n        ? (RendererConfig as any).renderScale\n        : 1;\n    const logicalW = LOGICAL_BOUNDS.W;\n    const logicalH = LOGICAL_BOUNDS.H;\n    if (canvas) {\n      const bufferW = Math.round((logicalW * renderScale) / dpr);\n      const bufferH = Math.round((logicalH * renderScale) / dpr);\n      canvas.width = bufferW;\n      canvas.height = bufferH;\n      canvas.style.width = bufferW + \"px\";\n      canvas.style.height = bufferH + \"px\";\n      const dimsEl = document.getElementById(\"rendererDims\");\n      if (dimsEl) {\n        dimsEl.textContent = `${canvas.width} x ${canvas.height} px @ ${dpr}x`;\n      }\n    }\n    (RendererConfig as any)._renderScale = renderScale;\n    (RendererConfig as any)._offsetX = 0;\n    (RendererConfig as any)._offsetY = 0;\n    const scaleVal = rootDocument.getElementById(\"rendererScaleValue\");\n    if (scaleVal) scaleVal.textContent = renderScale.toFixed(2);\n  }\n\n  // Only update CSS size on window resize\n  function fitCanvasToWindow() {\n    const winW = window.innerWidth;\n    const winH = window.innerHeight;\n    const bufferW = canvas ? canvas.width : LOGICAL_BOUNDS.W;\n    const bufferH = canvas ? canvas.height : LOGICAL_BOUNDS.H;\n    // Compute scale to fit buffer into window, preserving aspect ratio\n    const scale = Math.min(winW / bufferW, winH / bufferH);\n    const scaledW = bufferW * scale;\n    const scaledH = bufferH * scale;\n    const offsetX = Math.round((winW - scaledW) / 2);\n    const offsetY = Math.round((winH - scaledH) / 2);\n    if (canvas) {\n      // Set width/height to buffer size, but use transform for scaling\n      canvas.style.width = `${bufferW}px`;\n      canvas.style.height = `${bufferH}px`;\n      canvas.style.position = \"absolute\";\n      canvas.style.left = `${offsetX}px`;\n      canvas.style.top = `${offsetY}px`;\n      canvas.style.transformOrigin = \"top left\";\n      canvas.style.transform = `scale(${scale})`;\n    }\n    // Prevent scrollbars\n    document.body.style.overflow = \"hidden\";\n  }\n  // Renderer scale slider and dynamic scaling wiring\n  const scaleSlider = rootDocument.getElementById(\"rendererScaleRange\");\n  const dynamicCheckbox = rootDocument.getElementById(\"dynamicScaleCheckbox\");\n  let internalScaleUpdate = false;\n  if (scaleSlider) {\n    const onScaleInput = (ev: any) => {\n      if (internalScaleUpdate) return; // ignore internal updates\n      const val = parseFloat(ev.target.value);\n      if (!isNaN(val)) {\n        (RendererConfig as any).renderScale = val;\n        (RendererConfig as any).dynamicScaleEnabled = false;\n        if (dynamicCheckbox)\n          (dynamicCheckbox as HTMLInputElement).checked = false;\n        updateCanvasBackingStore();\n        fitCanvasToWindow();\n      }\n    };\n    addListener(scaleSlider, \"input\", onScaleInput);\n    // Set initial value display\n    const scaleVal = rootDocument.getElementById(\"rendererScaleValue\");\n    if (scaleVal)\n      scaleVal.textContent = (scaleSlider as HTMLInputElement).value;\n    // Ensure initial fit-to-window calculation uses current scale\n    updateCanvasBackingStore();\n    fitCanvasToWindow();\n  }\n  if (dynamicCheckbox) {\n    const onDynamicChange = (ev: any) => {\n      const enabled = !!ev.target.checked;\n      (RendererConfig as any).dynamicScaleEnabled = enabled;\n    };\n    addListener(dynamicCheckbox, \"change\", onDynamicChange);\n    (dynamicCheckbox as HTMLInputElement).checked = !!(RendererConfig as any)\n      .dynamicScaleEnabled;\n  }\n\n  fitCanvasToWindow();\n  addListener(window, \"resize\", fitCanvasToWindow);\n\n  let renderer: any = null;\n  const pref = getPreferredRenderer();\n  if (canvas) {\n    if (pref === \"webgl\") {\n      try {\n        const w = new WebGLRenderer(canvas);\n        if (w && w.init && w.init()) renderer = w;\n      } catch (e) {}\n    }\n    if (!renderer) {\n      try {\n        renderer = new CanvasRenderer(canvas);\n        renderer.init && renderer.init();\n      } catch (e) {\n        renderer = null;\n      }\n    }\n  }\n  // Preload all assets if renderer supports it\n  if (renderer && typeof renderer.preloadAllAssets === \"function\") {\n    try {\n      renderer.preloadAllAssets();\n    } catch (e) {}\n  }\n  // If we don't have a canvas (or renderer failed), provide a minimal no-op renderer\n  if (!renderer) {\n    renderer = {\n      type: \"noop\",\n      init: () => false,\n      renderState: (_: any) => {},\n      isRunning: () => false,\n    };\n  }\n\n  try {\n    window.gm = window.gm || {};\n  } catch (e) {}\n  // Pass fixed logical bounds and canonical GameState to game manager\n  const gm = createGameManager({ renderer, useWorker: false, seed: 12345 });\n  if (gm && gm._internal) {\n    gm._internal.bounds = LOGICAL_BOUNDS;\n    gm._internal.state = gameState;\n  }\n  try {\n    if (typeof window !== \"undefined\" && (window as any).gm)\n      Object.assign((window as any).gm, gm);\n    // Expose renderer for debugging on localhost only. This allows us to\n    // inspect caches and mapping at runtime without permanently leaking\n    // internals in production bundles.\n    try {\n      const host = (location && location.hostname) || \"\";\n      if (host === \"127.0.0.1\" || host === \"localhost\") {\n        try {\n          // Attach a non-enumerable debug handle\n          Object.defineProperty(window, \"__renderer\", {\n            value: renderer,\n            writable: false,\n            configurable: true,\n            enumerable: false,\n          });\n        } catch (e) {\n          try {\n            (window as any).__renderer = renderer;\n          } catch (err) {}\n        }\n      }\n    } catch (e) {}\n  } catch (e) {}\n\n  // Initialize dev overlay (toggle with ?devShipTable=1)\n  try {\n    if (typeof window !== \"undefined\") {\n      // Enable overlay in non-production builds or when URL param present\n      // Runtime-only check: enable overlay on localhost or when URL param devShipTable=1\n      const host = (location && location.hostname) || \"\";\n      const urlParams =\n        typeof URLSearchParams !== \"undefined\"\n          ? new URLSearchParams(location.search)\n          : null;\n      const enabled =\n        host === \"127.0.0.1\" ||\n        host === \"localhost\" ||\n        urlParams?.get(\"devShipTable\") === \"1\";\n      if (enabled) {\n        // Lazy import to avoid affecting production bundles when tree-shaken\n        import(\"./dev/shipPipelineOverlay\")\n          .then((m) => {\n            try {\n              m.default && m.default();\n            } catch (e) {}\n          })\n          .catch((e) => {\n            console.warn(\"Failed to load dev overlay\", e);\n          });\n      }\n    }\n  } catch (e) {}\n\n  // Speed multiplier logic\n  let simSpeedMultiplier = 1;\n  if (ui.speed) {\n    const onSpeedClick = () => {\n      simSpeedMultiplier =\n        simSpeedMultiplier >= 4 ? 0.25 : simSpeedMultiplier * 2;\n      ui.speed.textContent = `Speed: ${simSpeedMultiplier}\u00D7`;\n    };\n    addListener(ui.speed, \"click\", onSpeedClick);\n    ui.speed.textContent = `Speed: ${simSpeedMultiplier}\u00D7`;\n  }\n\n  // Patch stepOnce to use multiplier\n  if (gm && typeof gm.stepOnce === \"function\") {\n    const origStepOnce = gm.stepOnce.bind(gm);\n    // Use canonical SIM.DT_MS (millisecond timestep) converted to seconds\n    // as the default step size so the UI multiplier wraps the same base dt\n    // the simulation run-loop uses. This prevents hard-coded mismatches.\n    gm.stepOnce = (dt: number = SIM.DT_MS / 1000) =>\n      origStepOnce(dt * simSpeedMultiplier);\n  }\n\n  // Fleet formation logic\n  if (ui.formationBtn) {\n    const onFormationClick = () => {\n      if (gm && typeof gm.formFleets === \"function\") {\n        gm.formFleets();\n      }\n    };\n    addListener(ui.formationBtn, \"click\", onFormationClick);\n  }\n\n  // Engine trail UI toggle state\n  let engineTrailsEnabled = true;\n  gameState.engineTrailsEnabled = engineTrailsEnabled;\n  if (ui.toggleTrails) {\n    const onToggleTrails = () => {\n      engineTrailsEnabled = !engineTrailsEnabled;\n      gameState.engineTrailsEnabled = engineTrailsEnabled;\n      ui.toggleTrails.textContent = engineTrailsEnabled\n        ? \"\u2604 Trails: On\"\n        : \"\u2604 Trails: Off\";\n    };\n    addListener(ui.toggleTrails, \"click\", onToggleTrails);\n    ui.toggleTrails.textContent = engineTrailsEnabled\n      ? \"\u2604 Trails: On\"\n      : \"\u2604 Trails: Off\";\n  }\n\n  try {\n    const host = (location && location.hostname) || \"\";\n    const urlParams =\n      typeof URLSearchParams !== \"undefined\"\n        ? new URLSearchParams(location.search)\n        : null;\n    const autotest =\n      (urlParams && urlParams.get(\"autotest\") === \"1\") ||\n      !!(window as any).__AUTO_REINFORCE_DEV__;\n    if ((host === \"127.0.0.1\" || host === \"localhost\") && autotest) {\n      try {\n        if (gm && typeof gm.setContinuousEnabled === \"function\")\n          gm.setContinuousEnabled(true);\n      } catch (e) {}\n      try {\n        if (gm && typeof gm.setReinforcementInterval === \"function\")\n          gm.setReinforcementInterval(0.01);\n      } catch (e) {}\n      try {\n        if (gm && typeof gm.stepOnce === \"function\") gm.stepOnce(0.02);\n      } catch (e) {}\n    }\n  } catch (e) {}\n\n  let lastReinforcementSummary = \"\";\n  let reinforcementsHandler: ((msg: any) => void) | null = null;\n  try {\n    if (gm && typeof gm.on === \"function\") {\n      reinforcementsHandler = (msg: any) => {\n        const list = (msg && msg.spawned) || [];\n        const types = list.map((s: any) => s.type).filter(Boolean);\n        const summary = `Reinforcements: spawned ${list.length} ships (${types.join(\", \")})`;\n        lastReinforcementSummary = summary;\n        try {\n          const tid = setTimeout(() => {\n            lastReinforcementSummary = \"\";\n          }, 3000);\n          pendingTimers.add(tid as unknown as number);\n        } catch (e) {}\n        try {\n          if (ui && ui.stats)\n            ui.stats.textContent = `${ui.stats.textContent} | ${summary}`;\n        } catch (e) {}\n      };\n      gm.on(\"reinforcements\", reinforcementsHandler);\n    }\n  } catch (e) {}\n\n  const workerIndicator = rootDocument.getElementById(\"workerIndicator\");\n  let toastContainer = rootDocument.getElementById(\"toastContainer\");\n  if (!toastContainer) {\n    try {\n      toastContainer = rootDocument.createElement(\"div\");\n      toastContainer.id = \"toastContainer\";\n      toastContainer.style.position = \"fixed\";\n      toastContainer.style.right = \"16px\";\n      toastContainer.style.top = \"16px\";\n      toastContainer.style.zIndex = \"9999\";\n      toastContainer.style.pointerEvents = \"none\";\n      rootDocument.body.appendChild(toastContainer);\n      disposables.push(() => {\n        try {\n          if (toastContainer && toastContainer.parentNode)\n            toastContainer.parentNode.removeChild(toastContainer);\n        } catch (e) {}\n      });\n    } catch (e) {\n      toastContainer = null;\n    }\n  }\n\n  function showToast(msg: string, opts: any = {}) {\n    try {\n      if (!toastContainer) return;\n      const ttl = typeof opts.ttl === \"number\" ? opts.ttl : 2000;\n      const el = rootDocument.createElement(\"div\");\n      el.style.background = \"rgba(20,20,30,0.9)\";\n      el.style.color = \"#fff\";\n      el.style.padding = \"8px 12px\";\n      el.style.marginTop = \"6px\";\n      el.style.borderRadius = \"6px\";\n      el.style.boxShadow = \"0 2px 8px rgba(0,0,0,0.5)\";\n      el.style.fontFamily = \"sans-serif\";\n      el.style.fontSize = \"13px\";\n      el.style.pointerEvents = \"auto\";\n      el.textContent = msg;\n      toastContainer.appendChild(el);\n      const tid = setTimeout(() => {\n        try {\n          el.style.transition = \"opacity 300ms ease\";\n          el.style.opacity = \"0\";\n        } catch (e) {}\n        setTimeout(() => {\n          try {\n            if (el && el.parentNode) el.parentNode.removeChild(el);\n          } catch (err) {}\n        }, 350);\n      }, ttl);\n      pendingTimers.add(tid as unknown as number);\n    } catch (e) {}\n  }\n\n  let levelupHandler: ((m: any) => void) | null = null;\n  try {\n    if (gm && typeof gm.on === \"function\") {\n      levelupHandler = (m: any) => {\n        try {\n          const ship = (m && m.ship) || null;\n          const lvl =\n            (m && m.newLevel) || (m && m.newLevel === 0 ? 0 : undefined);\n          const who = ship && ship.team ? `${ship.team} ship` : \"Ship\";\n          const msg = `${who} leveled up to ${lvl}`;\n          showToast(msg, { ttl: 2200 });\n        } catch (e) {}\n      };\n      gm.on(\"levelup\", levelupHandler);\n    }\n  } catch (e) {}\n\n  if (workerIndicator) {\n    try {\n      const refresh = () => {\n        try {\n          workerIndicator.textContent =\n            gm.isWorker && gm.isWorker() ? \"Worker\" : \"Main\";\n        } catch (e) {}\n        try {\n          workerIndicatorRaf = requestAnimationFrame(refresh);\n        } catch (e) {\n          workerIndicatorRaf = null;\n        }\n      };\n      refresh();\n    } catch (e) {\n      workerIndicator.textContent = \"Unknown\";\n    }\n  }\n\n  try {\n    if (ui.startPause)\n      addListener(ui.startPause, \"click\", () => {\n        if (gm.isRunning()) {\n          gm.pause();\n          ui.startPause.textContent = \"\u25B6 Start\";\n        } else {\n          gm.start();\n          ui.startPause.textContent = \"\u23F8 Pause\";\n        }\n      });\n  } catch (e) {}\n  try {\n    if (ui.reset) addListener(ui.reset, \"click\", () => gm.reset());\n  } catch (e) {}\n  // Populate ship type selector (for deterministic, seeded spawns)\n  try {\n    const cfg = getShipConfig();\n    const selectEl = rootDocument.getElementById(\n      \"shipTypeSelect\",\n    ) as HTMLSelectElement | null;\n    if (selectEl && cfg) {\n      // Clear existing\n      selectEl.innerHTML = \"\";\n      for (const key of Object.keys(cfg)) {\n        try {\n          const opt = rootDocument.createElement(\"option\");\n          opt.value = key;\n          opt.textContent = key;\n          selectEl.appendChild(opt);\n        } catch (e) {}\n      }\n    }\n  } catch (e) {}\n\n  // Generic spawn helper that respects seeded RNG via gm.spawnShip's internal use of srandom\n  function spawnSelected(team: string) {\n    try {\n      const selectEl = rootDocument.getElementById(\n        \"shipTypeSelect\",\n      ) as HTMLSelectElement | null;\n      const selectedType = selectEl ? selectEl.value : null;\n      // If gm.spawnShip supports (team, type) signature, prefer that\n      try {\n        if (gm && typeof gm.spawnShip === \"function\") {\n          // Try calling with (team, type) if supported\n          if (selectedType) {\n            try {\n              const maybe = (gm as any).spawnShip(team, selectedType);\n              if (maybe) return maybe;\n            } catch (e) {\n              // ignore and fall back\n            }\n          }\n          const ship = gm.spawnShip(team);\n          if (ship && selectedType) {\n            try {\n              ship.type = selectedType;\n              // attach config snapshot if available\n              try {\n                const scfg = getShipConfig();\n                if (scfg && scfg[selectedType])\n                  (ship as any)._config = scfg[selectedType];\n              } catch (e) {}\n            } catch (e) {}\n          }\n          return ship;\n        }\n      } catch (e) {}\n    } catch (e) {}\n    return null;\n  }\n\n  try {\n    if (ui.addRed) addListener(ui.addRed, \"click\", () => spawnSelected(\"red\"));\n  } catch (e) {}\n  try {\n    if (ui.addBlue)\n      addListener(ui.addBlue, \"click\", () => spawnSelected(\"blue\"));\n  } catch (e) {}\n  function onSeedBtnClick() {\n    try {\n      const raw =\n        typeof window !== \"undefined\" && typeof window.prompt === \"function\"\n          ? window.prompt(\"Enter new seed (leave blank for random):\", \"\")\n          : null;\n      if (raw == null) return;\n      const trimmed = String(raw).trim();\n      if (trimmed === \"\") {\n        try {\n          gm.reseed();\n          showToast(\"Reseeded with random seed\");\n        } catch (e) {}\n        return;\n      }\n      const asNum = Number(trimmed);\n      if (!Number.isFinite(asNum) || Math.floor(asNum) !== asNum) {\n        try {\n          showToast(\"Invalid seed. Please enter an integer.\");\n        } catch (e) {}\n        return;\n      }\n      try {\n        gm.reseed(asNum >>> 0);\n        showToast(`Reseeded with ${asNum >>> 0}`);\n      } catch (e) {}\n    } catch (e) {}\n  }\n  try {\n    if (ui.seedBtn) addListener(ui.seedBtn, \"click\", onSeedBtnClick);\n  } catch (e) {}\n  // try { ui.formationBtn.addEventListener('click', () => gm.formFleets()); } catch (e) {}\n  try {\n    if (ui.continuousCheckbox) {\n      addListener(ui.continuousCheckbox, \"change\", (ev: any) => {\n        const v = !!ev.target.checked;\n        if (gm && typeof gm.setContinuousEnabled === \"function\")\n          gm.setContinuousEnabled(v);\n      });\n    }\n  } catch (e) {}\n\n  function uiTick() {\n    if (isUiTickRunning) return; // Prevent multiple loops\n    isUiTickRunning = true;\n    const startTick = performance.now();\n    let skipRender = false;\n    try {\n      const s = gm.snapshot();\n      ui.redScore.textContent = `Red ${gm.score.red}`;\n      ui.blueScore.textContent = `Blue ${gm.score.blue}`;\n      const redCount = (s.teamCounts && (s.teamCounts as any).red) || 0;\n      const blueCount = (s.teamCounts && (s.teamCounts as any).blue) || 0;\n      ui.stats.textContent =\n        `Ships: ${s.ships.length} (R:${redCount} B:${blueCount}) Bullets: ${s.bullets.length}` +\n        (lastReinforcementSummary ? ` | ${lastReinforcementSummary}` : \"\");\n    } catch (e) {}\n    const endTick = performance.now();\n    const tickTime = endTick - startTick;\n    if (tickTime > SIM.DT_MS) {\n      skipRender = true;\n    }\n    // --- Dynamic buffer scaling logic ---\n    const dynamicEnabled = !!(RendererConfig as any).dynamicScaleEnabled;\n    const scaleSliderEl = rootDocument.getElementById(\n      \"rendererScaleRange\",\n    ) as HTMLInputElement;\n    const scaleValEl = rootDocument.getElementById(\"rendererScaleValue\");\n    // Track frame time\n    const now = performance.now();\n    (RendererConfig as any)._lastUiTick =\n      (RendererConfig as any)._lastUiTick || now;\n    const dt = now - (RendererConfig as any)._lastUiTick;\n    (RendererConfig as any)._lastUiTick = now;\n    (RendererConfig as any).lastFrameTime = dt;\n    // Score frame time\n    let frameScore = \"green\";\n    if (dt > 33) frameScore = \"red\";\n    else if (dt > 20) frameScore = \"yellow\";\n    (RendererConfig as any).frameScore = frameScore;\n    // Color slider value for feedback\n    if (scaleValEl) {\n      scaleValEl.style.color =\n        frameScore === \"green\"\n          ? \"#4caf50\"\n          : frameScore === \"yellow\"\n            ? \"#ffd600\"\n            : \"#ff1744\";\n    }\n    // Dynamic scaling logic\n    if (dynamicEnabled && scaleSliderEl) {\n      let scale = (RendererConfig as any).renderScale;\n      // If frame is slow, reduce scale; if fast, increase scale\n      if (frameScore === \"red\" && scale > 0.25)\n        scale = Math.max(0.25, scale - 0.05);\n      else if (frameScore === \"green\" && scale < 2.0)\n        scale = Math.min(2.0, scale + 0.01);\n      // Only update if changed\n      if (scale !== (RendererConfig as any).renderScale) {\n        (RendererConfig as any).renderScale = scale;\n        internalScaleUpdate = true;\n        scaleSliderEl.value = scale.toFixed(2);\n        if (scaleValEl) scaleValEl.textContent = scale.toFixed(2);\n        fitCanvasToWindow();\n        internalScaleUpdate = false;\n      }\n    }\n    if (!skipRender) {\n      try {\n        uiRaf = requestAnimationFrame(() => {\n          isUiTickRunning = false;\n          uiTick();\n        });\n      } catch (e) {\n        uiRaf = null;\n        isUiTickRunning = false;\n      }\n    } else {\n      // Only update simulation, skip rendering for this frame\n      const tid = setTimeout(() => {\n        isUiTickRunning = false;\n        uiTick();\n      }, SIM.DT_MS);\n      if (typeof tid === \"number\") pendingTimers.add(tid as number);\n    }\n  }\n  uiRaf = requestAnimationFrame(uiTick);\n\n  function dispose() {\n    // First, destroy game manager resources (worker, handlers)\n    try {\n      if (gm && typeof gm.destroy === \"function\") gm.destroy();\n    } catch (e) {}\n\n    // Stop the game manager run loop\n    try {\n      if (gm && typeof gm.pause === \"function\") gm.pause();\n    } catch (e) {}\n\n    // Unregister gm-level listeners we added\n    try {\n      if (gm && typeof gm.off === \"function\") {\n        if (reinforcementsHandler)\n          gm.off(\"reinforcements\", reinforcementsHandler);\n        if (levelupHandler) gm.off(\"levelup\", levelupHandler);\n      }\n    } catch (e) {}\n\n    // Cancel RAFs started here\n    if (uiRaf != null) {\n      try {\n        cancelAnimationFrame(uiRaf);\n      } catch (e) {}\n      uiRaf = null;\n    }\n    isUiTickRunning = false;\n    if (workerIndicatorRaf != null) {\n      try {\n        cancelAnimationFrame(workerIndicatorRaf);\n      } catch (e) {}\n      workerIndicatorRaf = null;\n    }\n\n    // Clear timers\n    try {\n      clearAllTimers();\n    } catch (e) {}\n\n    // Run registered disposables (removes DOM listeners, etc)\n    for (const fn of disposables.slice()) {\n      try {\n        fn();\n      } catch (e) {}\n    }\n    disposables.length = 0;\n\n    // Optionally clear global gm reference (defensive)\n    try {\n      if (typeof window !== \"undefined\" && (window as any).gm) {\n        // Only remove properties we assigned (don't blow away other properties)\n        try {\n          delete (window as any).gm;\n        } catch (e) {}\n      }\n    } catch (e) {}\n  }\n\n  return { gm, renderer, dispose };\n}\n\nif (typeof window !== \"undefined\") {\n  let appInstance: { gm: any; renderer: any; dispose: () => void } | null =\n    null;\n  function safeStartApp(doc: Document) {\n    if (appInstance && typeof appInstance.dispose === \"function\") {\n      appInstance.dispose();\n    }\n    startApp(doc).then((instance) => {\n      appInstance = instance;\n    });\n  }\n  if (document.readyState === \"loading\")\n    document.addEventListener(\"DOMContentLoaded\", () => safeStartApp(document));\n  else safeStartApp(document);\n  window.addEventListener(\"beforeunload\", () => {\n    if (appInstance && typeof appInstance.dispose === \"function\") {\n      appInstance.dispose();\n    }\n  });\n}\n\nexport default startApp;\n"],
  "mappings": "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",
  "names": ["out", "e", "ux", "uy", "vx", "vy", "entry", "mulberry32", "config", "SpatialGrid", "segmentIntersectsCircle", "state", "dtSeconds", "bounds", "maxTurn", "angle", "s", "lvl", "e", "e", "_seed", "e", "_seed", "entitiesConfig", "getShipConfigSafe", "getDefaultShipTypeSafe", "outW", "outH", "teams", "teamColors", "e", "getHullOutlineFromSvg", "sx", "sy", "s", "safeStartApp"]
}
