{
  "version": 3,
  "sources": ["../src/config/entitiesConfig.ts", "../src/entities.ts", "../src/config/teamsConfig.ts", "../src/rng.ts", "../src/gamemanager.ts", "../src/config/behaviorConfig.ts", "../src/behavior.ts", "../src/config/progressionConfig.ts", "../src/config/simConfig.ts", "../src/simulate.ts", "../src/config/displayConfig.ts", "../src/createSimWorker.ts", "../src/config/gamemanagerConfig.ts", "../src/config/assets/assetsConfig.ts", "../src/canvasrenderer.ts", "../src/config/rendererConfig.ts", "../src/webglrenderer.ts", "../src/main.ts"],
  "sourcesContent": ["// entitiesConfig.ts - ship-type defaults and visuals helpers (typed)\n//\n// Tuning rationale (2025-08-24):\n// - Playfield size: 1920x1080\n// - Ship speeds (maxSpeed, accel): Higher speed enables kiting and rapid repositioning; slower ships are easier to flank.\n// - Turn rates (turnRate): Higher turn rate allows ships to evade, flank, and respond to threats quickly; low turn rate makes ships vulnerable to flanking.\n// - Weapon ranges (muzzleSpeed * bulletTTL): Longer range supports kiting and edge play; shorter range requires close engagement and rewards flanking.\n// - Weapon rate (rate): Higher fire rate enables sustained pressure and kiting; lower rate rewards timing and positioning.\n// - Ship radius: Larger ships are easier to hit and harder to flank; smaller ships excel at flanking and evasion.\n// - Boundary options (see simConfig.ts): Enable edge play (wrap, bounce, remove) for tactical escapes and repositioning.\n// - See patch history for details\nimport {\n  getShipAsset,\n  getBulletAsset,\n  getTurretAsset,\n} from \"./assets/assetsConfig\";\n\n// CannonCfg parameters and tactical impact:\n// - damage: Higher damage increases threat, rewards flanking and burst attacks.\n// - rate: Higher rate supports kiting and pressure; lower rate rewards timing.\n// - spread: More spread makes weapons less accurate, favors close-range flanking.\n// - muzzleSpeed: Higher speed increases range and kiting potential.\n// - bulletRadius: Larger radius makes shots easier to land, favors area denial.\n// - bulletTTL: Longer TTL increases range, supports edge play and kiting.\nexport type CannonCfg = {\n  damage: number;\n  rate: number;\n  spread?: number;\n  muzzleSpeed?: number;\n  bulletRadius?: number;\n  bulletTTL?: number;\n};\n\n// ShipTypeCfg parameters and tactical impact:\n// - maxHp, armor, maxShield: Higher values increase survivability, allow for riskier flanking and edge play.\n// - shieldRegen: Faster regen supports hit-and-run and kiting.\n// - damage/dmg: Higher damage rewards successful flanking and burst attacks.\n// - radius: Smaller radius makes ships harder to hit and better at flanking; larger radius increases vulnerability.\n// - cannons: Weapon loadout affects tactical options (see CannonCfg).\n// - accel: Higher acceleration enables rapid repositioning and kiting.\n// - turnRate: Higher turn rate allows for quick flanking, evasion, and edge play.\n// - maxSpeed: Higher speed supports kiting and edge escapes; lower speed makes ships easier to pursue and flank.\n// - turrets: Multiple turrets increase area control, make flanking harder.\n// - friction: Lower friction (closer to 1) enables sustained velocity for kiting and edge play; higher friction increases tactical vulnerability to pursuit and flanking.\n// All entities and events are pruned immediately upon destruction or expiration, ensuring tactical scenarios remain robust and consistent.\nexport type ShipTypeCfg = {\n  maxHp: number;\n  armor?: number;\n  maxShield?: number;\n  shieldRegen?: number;\n  dmg?: number;\n  damage?: number;\n  radius?: number;\n  cannons?: CannonCfg[];\n  accel?: number;\n  turnRate?: number;\n  maxSpeed?: number;\n  carrier?: {\n    fighterCooldown: number;\n    maxFighters: number;\n    spawnPerCooldown: number;\n  };\n  turrets?: Array<{\n    position: [number, number]; // relative to ship center, in radius units\n    kind: string; // turret asset kind\n    targeting?: \"nearest\" | \"random\" | \"focus\" | \"custom\"; // targeting logic\n    cooldown?: number; // seconds between shots\n    lastFired?: number; // timestamp of last shot\n  }>;\n};\n\nexport type ShipConfigMap = Record<string, ShipTypeCfg>;\n\nexport const ShipConfig: ShipConfigMap = {\n  fighter: {\n    maxHp: 15,\n    armor: 0,\n    maxShield: 8,\n    shieldRegen: 1.0,\n    dmg: 3,\n    damage: 3,\n    radius: 12,\n    cannons: [\n      {\n        damage: 3,\n        rate: 3,\n        spread: 0.1,\n        muzzleSpeed: 260, // was 300\n        bulletRadius: 1.5,\n        bulletTTL: 1.1, // was 1.2\n      },\n    ],\n    accel: 5,\n    turnRate: 6,\n    maxSpeed: 160,\n  },\n  corvette: {\n    maxHp: 50,\n    armor: 0,\n    maxShield: Math.round(50 * 0.6),\n    shieldRegen: 0.5,\n    dmg: 5,\n    damage: 5,\n    radius: 20,\n    accel: 5,\n    turnRate: 3.5, // was 3\n    maxSpeed: 145, // was 140\n    cannons: [\n      {\n        damage: 6,\n        rate: 1.2,\n        spread: 0.05,\n        muzzleSpeed: 180, // was 220\n        bulletRadius: 2,\n        bulletTTL: 1.8, // was 2.0\n      },\n    ],\n  },\n  frigate: {\n    maxHp: 80,\n    armor: 1,\n    maxShield: Math.round(80 * 0.6),\n    shieldRegen: 0.4,\n    dmg: 8,\n    damage: 8,\n    radius: 24,\n    cannons: [\n      {\n        damage: 8,\n        rate: 1.0,\n        spread: 0.06,\n        muzzleSpeed: 180, // was 200\n        bulletRadius: 2.5,\n        bulletTTL: 2.0, // was 2.2\n      },\n    ],\n    accel: 5,\n    turnRate: 2.5, // was 2.2\n    maxSpeed: 125, // was 120\n  },\n  destroyer: {\n    maxHp: 120,\n    armor: 2,\n    maxShield: Math.round(120 * 0.6),\n    shieldRegen: 0.3,\n    dmg: 12,\n    damage: 12,\n    radius: 40,\n    cannons: new Array(6).fill(0).map(() => ({\n      damage: 6,\n      rate: 0.8,\n      spread: 0.08,\n      muzzleSpeed: 160, // was 240\n      bulletRadius: 2.5,\n      bulletTTL: 1.8, // was 2.4\n    })),\n    accel: 5,\n    turnRate: 2.0, // was 1.6\n    maxSpeed: 110, // was 100\n    turrets: [\n      {\n        position: [1.2, 0.8],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n      {\n        position: [-1.2, 0.8],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n      {\n        position: [1.2, -0.8],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n      {\n        position: [-1.2, -0.8],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n      {\n        position: [0, 1.5],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n      {\n        position: [0, -1.5],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 0.8,\n      },\n    ],\n  },\n  carrier: {\n    maxHp: 200,\n    armor: 3,\n    maxShield: Math.round(200 * 0.6),\n    shieldRegen: 0.2,\n    dmg: 2,\n    damage: 2,\n    radius: 40,\n    cannons: new Array(4).fill(0).map(() => ({\n      damage: 4,\n      rate: 0.6,\n      spread: 0.12,\n      muzzleSpeed: 140, // was 180\n      bulletRadius: 3,\n      bulletTTL: 2.2, // was 2.8\n    })),\n    accel: 5,\n    turnRate: 1.2, // was 0.8\n    maxSpeed: 95, // was 80\n    carrier: { fighterCooldown: 1.5, maxFighters: 6, spawnPerCooldown: 2 },\n    turrets: [\n      {\n        position: [2.0, 1.2],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 1.0,\n      },\n      {\n        position: [-2.0, 1.2],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 1.0,\n      },\n      {\n        position: [2.0, -1.2],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 1.0,\n      },\n      {\n        position: [-2.0, -1.2],\n        kind: \"basic\",\n        targeting: \"nearest\",\n        cooldown: 1.0,\n      },\n    ],\n  },\n};\nexport function getShipConfig() {\n  return ShipConfig;\n}\n\n// Bullet global defaults (used if not per-ship)\nexport const BULLET_DEFAULTS = {\n  damage: 1,\n  ttl: 2.0,\n  radius: 1.5,\n  muzzleSpeed: 240,\n};\n\n// Particle defaults (used for generic effects)\nexport const PARTICLE_DEFAULTS = {\n  ttl: 1,\n  color: \"#fff\",\n  size: 2,\n};\n\n// Team fallback default\n\nexport function bulletKindForRadius(r: number): string {\n  if (r < 2) return \"small\";\n  if (r < 2.5) return \"medium\";\n  if (r < 3.5) return \"large\";\n  return \"heavy\";\n}\n\nexport function getDefaultShipType(): string {\n  return Object.keys(ShipConfig)[0] || \"fighter\";\n}\n\nexport default ShipConfig;\n", "import { getShipConfig, getDefaultShipType, BULLET_DEFAULTS } from \"./config/entitiesConfig\";\nimport { TEAM_DEFAULT } from \"./config/teamsConfig\";\nimport type { ShipConfigMap, ShipSpec } from \"./types/index\";\n\nlet nextId = 1;\nexport function genId(): number {\n  return nextId++;\n}\n\nexport type Cannon = {\n  damage: number;\n  rate: number;\n  spread?: number;\n  muzzleSpeed?: number;\n  bulletRadius?: number;\n  bulletTTL?: number;\n};\n\nexport type Ship = {\n  id: number;\n  type: string;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  hp: number;\n  maxHp: number;\n  shield?: number;\n  maxShield?: number;\n  team?: string;\n  xp?: number;\n  level?: number;\n  cannons?: Cannon[];\n  accel?: number; // max acceleration from config\n  currentAccel?: number; // dynamic, set by AI/gamemanager, 0..accel\n  throttle?: number; // 0..1, set by AI/gamemanager\n  steering?: number; // -1..1, set by AI/gamemanager\n  turnRate?: number;\n  radius?: number;\n  angle?: number; // heading in radians\n  friction?: number; // velocity damping factor (default 0.98)\n  maxSpeed?: number; // max speed override for tests/simulation\n  // optional AI runtime slot used by tests and behavior logic\n  __ai?: any;\n};\n\nexport function createShip(\n  type: string | undefined = undefined,\n  x = 0,\n  y = 0,\n  team = TEAM_DEFAULT,\n): Ship {\n  const shipCfg = getShipConfig() as ShipConfigMap;\n  const availableTypes = Object.keys(shipCfg || {});\n  const resolvedType =\n    type && shipCfg[type]\n      ? type\n      : availableTypes.length\n        ? availableTypes[0]\n        : getDefaultShipType();\n  const cfg = (shipCfg[resolvedType] ||\n    shipCfg[getDefaultShipType()]) as Partial<ShipSpec>;\n  return {\n    id: genId(),\n    type: resolvedType,\n    x,\n    y,\n    vx: 0,\n    vy: 0,\n    hp: cfg.maxHp,\n    maxHp: cfg.maxHp,\n    shield: cfg.maxShield || 0,\n    maxShield: cfg.maxShield || 0,\n    team,\n    xp: 0,\n    level: 1,\n    cannons: JSON.parse(JSON.stringify(cfg.cannons || [])),\n    accel: cfg.accel || 0,\n    currentAccel: 0, // start at rest, AI/gamemanager sets this\n    throttle: 0, // start at rest, AI/gamemanager sets this\n    steering: 0, // start straight, AI/gamemanager sets this\n    turnRate: cfg.turnRate || 0,\n    radius: cfg.radius || 6,\n    maxSpeed: cfg.maxSpeed || undefined,\n    angle: 0,\n  } as Ship;\n}\n\nexport type Bullet = {\n  id: number;\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  team: string;\n  ownerId?: number | null;\n  damage: number;\n  ttl: number;\n};\n\nexport function createBullet(\n  x: number,\n  y: number,\n  vx: number,\n  vy: number,\n  team = TEAM_DEFAULT,\n  ownerId: number | null = null,\n  damage = 1,\n  ttl = 2.0,\n): Bullet {\n  return {\n    id: genId(),\n    x,\n    y,\n    vx,\n    vy,\n    team,\n    ownerId,\n    damage,\n    ttl,\n  } as Bullet;\n}\n\nexport type GameState = {\n  t: number;\n  ships: Ship[];\n  bullets: Bullet[];\n  explosions: any[];\n  shieldHits: any[];\n  healthHits: any[];\n  engineTrailsEnabled?: boolean;\n};\n\nexport function makeInitialState(): GameState {\n  return {\n    t: 0,\n    ships: [],\n    bullets: [],\n    explosions: [],\n    shieldHits: [],\n    healthHits: [],\n    engineTrailsEnabled: true,\n  };\n}\n\nexport default { createShip, createBullet, makeInitialState };\n", "// teamsConfig.ts - Teams and fleet helpers (typed)\nimport { getDefaultShipType, getShipConfig } from \"./entitiesConfig\"; // should be './config/entitiesConfig'\nexport type Team = { id: string; color: string; label?: string };\nexport const TeamsConfig = {\n  teams: {\n    red: { id: \"red\", color: \"#ff4d4d\", label: \"Red\" },\n    blue: { id: \"blue\", color: \"#4da6ff\", label: \"Blue\" },\n  },\n  defaultFleet: {\n    counts: (() => {\n      // Build a default counts map from available ShipConfig types so new\n      // ship types are automatically included without needing manual edits.\n      const shipCfg = getShipConfig();\n      const types = Object.keys(shipCfg || {});\n      // sane defaults: make fighters most common, others rarer\n      const defaultCounts: Record<string, number> = {};\n      for (const t of types) {\n        if (t === \"fighter\") defaultCounts[t] = 8;\n        else if (t === \"corvette\") defaultCounts[t] = 3;\n        else if (t === \"frigate\") defaultCounts[t] = 2;\n        else if (t === \"destroyer\") defaultCounts[t] = 1;\n        else if (t === \"carrier\") defaultCounts[t] = 1;\n        else defaultCounts[t] = 1;\n      }\n      return defaultCounts;\n    })(),\n    spacing: 28,\n    jitter: { x: 80, y: 120 },\n  },\n  // continuousReinforcement controls: enable/disable, scoreMargin is the\n  // imbalance fraction (e.g. 0.12 means reinforce when weakest ratio < 0.38),\n  // perTick is the maximum ships considered per reinforcement tick, and\n  // shipTypes is an optional array of types to choose from randomly. If\n  // omitted, keys from defaultFleet.counts are used.\n  continuousReinforcement: {\n    enabled: false,\n    scoreMargin: 0.12,\n    perTick: 1,\n    interval: 5.0,\n    shipTypes: undefined as string[] | undefined,\n  },\n};\n\n// Local seeded PRNG (does not affect global rng)\nfunction mulberry32(seed: number) {\n  let t = seed >>> 0;\n  return function () {\n    t += 0x6d2b79f5;\n    let r = Math.imul(t ^ (t >>> 15), 1 | t);\n    r ^= r + Math.imul(r ^ (r >>> 7), 61 | r);\n    return ((r ^ (r >>> 14)) >>> 0) / 4294967296;\n  };\n}\n\nfunction hashStringToInt(s: string) {\n  let h = 2166136261 >>> 0;\n  for (let i = 0; i < s.length; i++) {\n    h ^= s.charCodeAt(i);\n    h = Math.imul(h, 16777619) >>> 0;\n  }\n  return h >>> 0;\n}\n\nexport function generateFleetForTeam(\n  seed = 0,\n  teamId: \"red\" | \"blue\" = \"red\",\n  bounds = { W: 800, H: 600 },\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\n  options: any = {},\n) {\n  const cfg = Object.assign({}, TeamsConfig.defaultFleet, options.fleet || {});\n  const spacing = options.spacing ?? cfg.spacing;\n  const jitter = Object.assign({}, cfg.jitter, options.jitter || {});\n  const centerY = bounds.H / 2;\n  const baseX = teamId === \"red\" ? bounds.W * 0.22 : bounds.W * 0.78;\n  const rng = mulberry32((seed >>> 0) + hashStringToInt(teamId));\n  const out: any[] = [];\n  for (const [type, count] of Object.entries(cfg.counts)) {\n    for (let i = 0; i < (count as number); i++) {\n      const r = spacing * Math.sqrt(rng());\n      const angle = rng() * Math.PI * 2;\n      const dx = Math.cos(angle) * r + (rng() - 0.5) * (jitter.x ?? 0);\n      const dy = Math.sin(angle) * r + (rng() - 0.5) * (jitter.y ?? 0);\n      const x = Math.max(0, Math.min(bounds.W - 1e-6, baseX + dx));\n      const y = Math.max(0, Math.min(bounds.H - 1e-6, centerY + dy));\n      if (typeof shipFactory === \"function\")\n        out.push(shipFactory(type, x, y, teamId));\n      else out.push({ type, x, y, team: teamId });\n    }\n  }\n  return out;\n}\n\nexport function makeInitialFleets(\n  seed = 0,\n  bounds = { W: 800, H: 600 },\n  shipFactory?: (type: string, x: number, y: number, team: string) => any,\n  options: any = {},\n) {\n  const red = generateFleetForTeam(seed, \"red\", bounds, shipFactory, options);\n  const blue = generateFleetForTeam(\n    seed + 1,\n    \"blue\",\n    bounds,\n    shipFactory,\n    options,\n  );\n  return red.concat(blue);\n}\n\nexport function chooseReinforcements(\n  seed = 0,\n  state: any = {},\n  options: any = {},\n) {\n  const cfg = Object.assign({}, TeamsConfig.continuousReinforcement, options);\n  // (no-op) merge options onto default continuous reinforcement config\n  if (!cfg.enabled) return [] as any[];\n  const teamStrength: Record<string, number> = {};\n  if (Array.isArray(state.ships)) {\n    for (const s of state.ships) {\n      if (!s || !s.team) continue;\n      const hp = typeof s.hp === \"number\" ? s.hp : 1;\n      teamStrength[s.team] = (teamStrength[s.team] || 0) + hp;\n    }\n  }\n  const teams = Object.keys(TeamsConfig.teams);\n  if (teams.length === 0) return [];\n  for (const t of teams) {\n    if (!teamStrength[t]) {\n      const cnt = (state.ships || []).filter(\n        (s: any) => s && s.team === t,\n      ).length;\n      teamStrength[t] = cnt > 0 ? cnt : 0;\n    }\n  }\n  let weakest = teams[0];\n  let strongest = teams[0];\n  for (const t of teams) {\n    if (teamStrength[t] < teamStrength[weakest]) weakest = t;\n    if (teamStrength[t] > teamStrength[strongest]) strongest = t;\n  }\n  const total = teams.reduce((s, t) => s + (teamStrength[t] || 0), 0) || 1;\n  const weakestRatio = (teamStrength[weakest] || 0) / total;\n  if (weakestRatio < 0.5 - cfg.scoreMargin) {\n    const orders: any[] = [];\n    const rng = mulberry32((seed >>> 0) + hashStringToInt(weakest));\n    // determine candidate ship types: either explicit list or keys from defaultFleet\n    const candidateTypes =\n      Array.isArray(cfg.shipTypes) && cfg.shipTypes.length\n        ? cfg.shipTypes\n        : Object.keys(TeamsConfig.defaultFleet.counts || { fighter: 1 });\n    // Build weights for candidate types using defaultFleet counts when available\n    const countsMap =\n      TeamsConfig && TeamsConfig.defaultFleet && TeamsConfig.defaultFleet.counts\n        ? TeamsConfig.defaultFleet.counts\n        : {};\n    const weights = candidateTypes.map((t: string) =>\n      Math.max(0, Number((countsMap as any)[t]) || 1),\n    );\n    const totalWeight =\n      weights.reduce((s: number, w: number) => s + w, 0) ||\n      candidateTypes.length ||\n      1;\n    // Helper: weighted random pick for ship types\n    const weightedPick = () => {\n      const r = rng() * totalWeight;\n      let acc = 0;\n      for (let i = 0; i < candidateTypes.length; i++) {\n        acc += weights[i];\n        if (r < acc) return candidateTypes[i];\n      }\n      return candidateTypes[candidateTypes.length - 1];\n    };\n    // Randomize number to spawn between 1 and cfg.perTick (inclusive)\n    const maxPerTick = Math.max(1, Math.floor(Number(cfg.perTick) || 1));\n    const spawnCount = Math.max(1, Math.floor(rng() * maxPerTick) + 1);\n    // spawnCount computed deterministically from the provided seed\n    const b = options.bounds || { W: 800, H: 600 };\n    const centerY = b.H / 2;\n    const baseX = weakest === \"red\" ? b.W * 0.18 : b.W * 0.82;\n    for (let i = 0; i < spawnCount; i++) {\n      const x = Math.max(0, Math.min(b.W - 1e-6, baseX + (rng() - 0.5) * 120));\n      const y = Math.max(\n        0,\n        Math.min(b.H - 1e-6, centerY + (rng() - 0.5) * 160),\n      );\n      const type =\n        Array.isArray(cfg.shipTypes) && cfg.shipTypes.length\n          ? candidateTypes[Math.floor(rng() * candidateTypes.length)] ||\n            getDefaultShipType()\n          : weightedPick();\n      orders.push({ type, team: weakest, x, y });\n    }\n    // return deterministic orders\n    return orders;\n  }\n  return [] as any[];\n}\n\n// Team fallback default\nexport const TEAM_DEFAULT = \"red\";\n\nexport default TeamsConfig;\n\n// Helper: call chooseReinforcements using a manager-derived seed (from global RNG)\n// This is convenient for callers (like gamemanager) that want to keep\n// reinforcements deterministic relative to the global `srand`/`srandom` state.\nimport { srandom } from \"../rng\";\nexport function chooseReinforcementsWithManagerSeed(\n  state: any = {},\n  options: any = {},\n) {\n  const seed = Math.floor(srandom() * 0xffffffff) >>> 0;\n  return chooseReinforcements(seed, state, options);\n}\n", "// src/rng.ts - Seeded RNG utilities (ported from rng.js)\r\nlet _seed = 1;\r\n\r\nexport function srand(seed: number = 1) {\r\n  // store as 32-bit unsigned\r\n  _seed = seed >>> 0;\r\n}\r\n\r\n// mulberry32 PRNG\r\nfunction mulberry32(a: number) {\r\n  return function() {\r\n    let t = (a += 0x6D2B79F5) >>> 0;\r\n    t = Math.imul(t ^ (t >>> 15), t | 1);\r\n    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);\r\n    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nexport function srandom(): number {\r\n  const f = mulberry32(_seed);\r\n  // advance seed deterministically\r\n  _seed = (_seed + 0x9E3779B1) >>> 0;\r\n  return f();\r\n}\r\n\r\nexport function srange(min: number, max: number): number {\r\n  return min + (max - min) * srandom();\r\n}\r\n\r\nexport function srangeInt(min: number, max: number): number {\r\n  // exclusive upper bound to match expectations\r\n  return Math.floor(srange(min, max));\r\n}\r\n\r\nexport default { srand, srandom, srange, srangeInt };\r\n", "// Minimal TypeScript shim that re-exports the existing JavaScript runtime implementation.\n// Import the runtime as a namespace and re-export value bindings to avoid\n// circular alias issues. Types are defined in `gamemanager.d.ts`.\n\n// Ported from gamemanager.js, now canonical TypeScript implementation\nimport { makeInitialState, createShip } from \"./entities\";\nimport { PARTICLE_DEFAULTS } from \"./config/entitiesConfig\";\nimport { applySimpleAI } from \"./behavior\";\nimport { simulateStep } from \"./simulate\";\nimport { SIM } from \"./config/simConfig\";\nimport { srand, srandom } from \"./rng\";\nimport { getDefaultBounds } from \"./config/displayConfig\";\nimport { createSimWorker } from \"./createSimWorker\";\nimport {\n  SHIELD,\n  HEALTH,\n  EXPLOSION,\n  STARS,\n  FALLBACK_POSITIONS,\n} from \"./config/gamemanagerConfig\";\nimport type { ShipConfigMap } from \"./types\";\nimport {\n  getShipConfig,\n  getDefaultShipType,\n} from \"./config/entitiesConfig\";\nimport {\n  chooseReinforcementsWithManagerSeed,\n  makeInitialFleets,\n  TeamsConfig,\n} from \"./config/teamsConfig\";\n\nexport const ships: any[] = [];\nexport const bullets: any[] = [];\nexport const particles: any[] = [];\nexport const stars: any[] = [];\nexport const flashes: any[] = [];\nexport const shieldFlashes: any[] = [];\nexport const healthFlashes: any[] = [];\nexport const particlePool: any[] = [];\n\nexport const config = {\n  shield: { ...SHIELD },\n  health: { ...HEALTH },\n  explosion: { ...EXPLOSION },\n  stars: { ...STARS },\n};\n\nlet _seed: number | null = null;\nlet _reinforcementInterval: number = TeamsConfig.continuousReinforcement?.interval ?? 5.0;\nlet _reinforcementAccumulator = 0;\nlet _starCanvasVersion = 0;\nlet starCanvas: HTMLCanvasElement | null = null;\nlet _lastSimulateFrameId: number | null = null;\nlet _doubleSimStrict = false;\n\nexport function setDoubleSimStrict(v: boolean = false) {\n  _doubleSimStrict = !!v;\n}\n\nexport class Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  ttl: number;\n  life: number;\n  color: string;\n  size: number;\n  alive: boolean;\n  constructor(x = 0, y = 0, vx = 0, vy = 0, ttl = 1, color = \"#fff\", size = 2) {\n    this.x = x;\n    this.y = y;\n    this.vx = vx;\n    this.vy = vy;\n    this.ttl = ttl;\n    this.life = ttl;\n    this.color = color;\n    this.size = size;\n    this.alive = true;\n  }\n}\n\nexport function acquireParticle(\n  x: number,\n  y: number,\n  opts: Partial<Particle> = {},\n): Particle {\n  let p: Particle | null = null;\n  if (particlePool.length) {\n    p = particlePool.pop() as Particle;\n    p.x = x;\n    p.y = y;\n    p.vx = opts.vx ?? 0;\n    p.vy = opts.vy ?? 0;\n    p.ttl = opts.ttl ?? PARTICLE_DEFAULTS.ttl;\n    p.life = p.ttl;\n    p.color = opts.color ?? PARTICLE_DEFAULTS.color;\n    p.size = opts.size ?? PARTICLE_DEFAULTS.size;\n    p.alive = true;\n  } else {\n    p = new Particle(\n      x,\n      y,\n      opts.vx ?? 0,\n      opts.vy ?? 0,\n      opts.ttl ?? PARTICLE_DEFAULTS.ttl,\n      opts.color ?? PARTICLE_DEFAULTS.color,\n      opts.size ?? PARTICLE_DEFAULTS.size,\n    );\n  }\n  particles.push(p);\n  return p;\n}\n\nexport function releaseParticle(p: Particle) {\n  const i = particles.indexOf(p);\n  if (i !== -1) particles.splice(i, 1);\n  p.alive = false;\n  particlePool.push(p);\n}\n\nexport function reset(seedValue: number | null = null) {\n  ships.length = 0;\n  bullets.length = 0;\n  particles.length = 0;\n  stars.length = 0;\n  flashes.length = 0;\n  shieldFlashes.length = 0;\n  healthFlashes.length = 0;\n  _reinforcementAccumulator = 0;\n  if (typeof seedValue === \"number\") {\n    _seed = seedValue >>> 0;\n    srand(_seed);\n  }\n}\n\nexport function initStars(state: any, W = 800, H = 600, count = 140) {\n  if (!state || !Array.isArray(state.stars)) return;\n  state.stars.length = 0;\n  for (let i = 0; i < count; i++) {\n    const x = srandom() * W;\n    const y = srandom() * H;\n    const r = 0.3 + srandom() * 1.3;\n    const a = 0.3 + srandom() * 0.7;\n    const twPhase = srandom() * Math.PI * 2;\n    const twSpeed = 0.5 + srandom() * 1.5;\n    state.stars.push({ x, y, r, a, baseA: a, twPhase, twSpeed });\n  }\n}\n\nexport function createStarCanvas(\n  state: any,\n  W = 800,\n  H = 600,\n  bg = \"#041018\",\n): HTMLCanvasElement | null {\n  if (!state || !Array.isArray(state.stars)) return null;\n  try {\n    const c =\n      typeof document !== \"undefined\" && document.createElement\n        ? document.createElement(\"canvas\")\n        : null;\n    if (!c) return null;\n    c.width = Math.max(1, Math.floor(W));\n    c.height = Math.max(1, Math.floor(H));\n    const ctx = c.getContext && c.getContext(\"2d\");\n    if (ctx) {\n      ctx.fillStyle = bg;\n      ctx.fillRect(0, 0, c.width, c.height);\n      for (const s of state.stars) {\n        const alpha = Math.max(\n          0,\n          Math.min(1, s.a != null ? s.a : s.baseA != null ? s.baseA : 1),\n        );\n        ctx.beginPath();\n        ctx.fillStyle = `rgba(255,255,255,${alpha})`;\n        const rr = Math.max(0.2, s.r || 0.5);\n        ctx.arc(s.x || 0, s.y || 0, rr, 0, Math.PI * 2);\n        ctx.fill();\n      }\n    }\n    _starCanvasVersion = (_starCanvasVersion || 0) + 1;\n    (c as any)._version = _starCanvasVersion;\n    starCanvas = c;\n    return c;\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function getStarCanvasVersion() {\n  return _starCanvasVersion;\n}\n\nexport function setReinforcementInterval(seconds: number) {\n  _reinforcementInterval = Number(seconds) || (TeamsConfig.continuousReinforcement?.interval ?? 5.0);\n}\nexport function getReinforcementInterval() {\n  return _reinforcementInterval;\n}\n\nfunction emitManagerEvent(\n  map: Map<string, Function[]>,\n  type: string,\n  data: any,\n) {\n  const arr = map.get(type) || [];\n  for (const cb of arr.slice()) {\n    try {\n      if (typeof cb === \"function\") cb(data);\n    } catch (e) {}\n  }\n}\n\nfunction evaluateReinforcement(\n  dt: number,\n  state: any,\n  continuousOptions: any = {},\n): { spawned: any[] } | null {\n  _reinforcementAccumulator += dt;\n  if (_reinforcementAccumulator >= _reinforcementInterval) {\n    _reinforcementAccumulator = 0;\n    try {\n      if (typeof chooseReinforcementsWithManagerSeed === \"function\") {\n        const orders = chooseReinforcementsWithManagerSeed(state, {\n          ...continuousOptions,\n          bounds: getDefaultBounds(),\n          enabled: true,\n        });\n        if (Array.isArray(orders) && orders.length) {\n          const spawned: any[] = [];\n          for (const o of orders) {\n            try {\n              const ship = createShip(\n                o.type || getDefaultShipType(),\n                o.x || 100,\n                o.y || 100,\n                o.team || \"red\",\n              );\n              state.ships.push(ship);\n              spawned.push(ship);\n            } catch (e) {}\n          }\n          return { spawned };\n        }\n      }\n      const fallback = getDefaultShipType();\n      const r = createShip(\n        fallback,\n        FALLBACK_POSITIONS[0].x,\n        FALLBACK_POSITIONS[0].y,\n        FALLBACK_POSITIONS[0].team,\n      );\n      const b = createShip(\n        fallback,\n        FALLBACK_POSITIONS[1].x,\n        FALLBACK_POSITIONS[1].y,\n        FALLBACK_POSITIONS[1].team,\n      );\n      state.ships.push(r);\n      state.ships.push(b);\n      return { spawned: [r, b] };\n    } catch (e) {\n      return null;\n    }\n  }\n  return null;\n}\n\nexport interface GameManagerOptions {\n  useWorker?: boolean;\n  renderer?: any;\n  seed?: number;\n  createSimWorker?: typeof createSimWorker;\n}\n\nexport function createGameManager({\n  useWorker = true,\n  renderer = null,\n  seed = 12345,\n  createSimWorker: createSimWorkerFactory,\n}: GameManagerOptions = {}) {\n  let state = makeInitialState();\n  let running = false;\n  const listeners = new Map<string, Function[]>();\n  const workerReadyCbs: Function[] = [];\n  let simWorker: any = null;\n  let workerReady = false;\n  let lastReinforcement: { spawned: any[]; timestamp: number; options: any } = {\n    spawned: [],\n    timestamp: 0,\n    options: {},\n  };\n  let continuous = false;\n  let continuousOptions: any = {};\n\n  function emit(type: string, msg: any) {\n    emitManagerEvent(listeners, type, msg);\n  }\n  function _mgr_random() {\n    return srandom();\n  }\n\n  try {\n    if (useWorker) {\n      const factory = createSimWorkerFactory || createSimWorker;\n      let simWorkerUrl;\n      try {\n        // Only use import.meta.url if available (ES2022+)\n        simWorkerUrl = typeof import.meta !== 'undefined' && import.meta.url\n          ? new URL(\"./simWorker.js\", import.meta.url).href\n          : \"./simWorker.js\";\n      } catch (e) {\n        simWorkerUrl = \"./simWorker.js\";\n      }\n      simWorker = factory(simWorkerUrl);\n      simWorker.on &&\n        simWorker.on(\"ready\", () => {\n          workerReady = true;\n          for (const cb of workerReadyCbs.slice()) {\n            try {\n              cb();\n            } catch (e) {}\n          }\n        });\n      simWorker.on &&\n        simWorker.on(\"snapshot\", (m: any) => {\n          if (m && m.state) state = m.state;\n        });\n      simWorker.on &&\n        simWorker.on(\"reinforcements\", (m: any) => {\n          emit(\"reinforcements\", m);\n        });\n      try {\n        simWorker.post({\n          type: \"init\",\n          seed,\n          bounds: getDefaultBounds(),\n          simDtMs: SIM.DT_MS,\n          state,\n        });\n        simWorker.post({ type: \"start\" });\n      } catch (e) {}\n    }\n  } catch (e) {\n    simWorker = null;\n  }\n\n  function _evaluateAndEmit(dt: number) {\n    const result = evaluateReinforcement(dt, state, continuousOptions);\n    if (result && Array.isArray(result.spawned) && result.spawned.length) {\n      lastReinforcement = {\n        spawned: result.spawned,\n        timestamp: Date.now(),\n        options: { ...continuousOptions },\n      };\n      emit(\"reinforcements\", { spawned: result.spawned });\n    }\n  }\n\n  function step(dtSeconds: number) {\n    // Clamp dtSeconds to a max of 0.05 to prevent teleportation on lag spikes\n    const clampedDt = Math.min(dtSeconds, 0.05);\n    if (!simWorker) {\n      // Run AI logic before simulation step\n      try {\n        applySimpleAI(state, clampedDt, getDefaultBounds());\n      } catch (e) {}\n      try {\n        simulateStep(state, clampedDt, getDefaultBounds());\n      } catch (e) {}\n    } else {\n      try {\n        simWorker.post && simWorker.post({ type: \"snapshotRequest\" });\n      } catch (e) {}\n    }\n    _evaluateAndEmit(clampedDt);\n    // Prune dead entities from GameManager arrays\n    ships.splice(0, ships.length, ...state.ships.filter((s: any) => s.hp > 0));\n    bullets.splice(0, bullets.length, ...state.bullets.filter((b: any) => b.ttl > 0));\n    // Prune particles after their lifetime\n    for (let i = particles.length - 1; i >= 0; i--) {\n      const p = particles[i];\n      p.life = (p.life || p.ttl || 0) - clampedDt;\n      if (p.life <= 0) releaseParticle(p);\n    }\n    // Prune flashes/events after their lifetime\n    function decay(arr: any[], dt: number) {\n      for (let i = arr.length - 1; i >= 0; i--) {\n        const it = arr[i];\n        it.life = (it.life || it.ttl || 0) - dt;\n        if (it.life <= 0) arr.splice(i, 1);\n      }\n    }\n    decay(flashes, clampedDt);\n    decay(shieldFlashes, clampedDt);\n    decay(healthFlashes, clampedDt);\n    if (renderer && typeof renderer.renderState === \"function\") {\n      try {\n        renderer.renderState({\n          ships: state.ships,\n          bullets: state.bullets,\n          flashes,\n          shieldFlashes,\n          healthFlashes,\n          t: state.t,\n        });\n      } catch (e) {}\n    }\n  }\n\n  let last =\n    typeof performance !== \"undefined\" && performance.now\n      ? performance.now()\n      : Date.now();\n  let acc = 0;\n  function runLoop() {\n    if (!running) return;\n    const now =\n      typeof performance !== \"undefined\" && performance.now\n        ? performance.now()\n        : Date.now();\n    acc += now - last;\n    last = now;\n    if (acc > 250) acc = 250;\n    while (acc >= SIM.DT_MS) {\n      step(SIM.DT_MS / 1000);\n      acc -= SIM.DT_MS;\n    }\n    try {\n      requestAnimationFrame(runLoop);\n    } catch (e) {\n  setTimeout(runLoop, SIM.DT_MS);\n    }\n  }\n\n  function on(evt: string, cb: Function) {\n    const arr = listeners.get(evt) || [];\n    arr.push(cb);\n    listeners.set(evt, arr);\n  }\n  function off(evt: string, cb: Function) {\n    const arr = listeners.get(evt) || [];\n    const i = arr.indexOf(cb);\n    if (i !== -1) arr.splice(i, 1);\n  }\n  function start() {\n    if (!running) {\n      running = true;\n      last =\n        typeof performance !== \"undefined\" && performance.now\n          ? performance.now()\n          : Date.now();\n      runLoop();\n    }\n  }\n  function pause() {\n    running = false;\n  }\n  function resetManager() {\n    state = makeInitialState();\n    if (simWorker)\n      try {\n        simWorker.post({ type: \"command\", cmd: \"setState\", args: { state } });\n      } catch (e) {}\n  }\n  function stepOnce(dt = SIM.DT_MS / 1000) {\n    const n = Number(dt) || SIM.DT_MS / 1000;\n    step(n);\n  }\n  function setContinuousEnabled(v: boolean = false) {\n    continuous = !!v;\n    if (simWorker) {\n      try {\n        simWorker.post({ type: \"setContinuous\", value: !!v });\n      } catch (e) {}\n    } else {\n      if (continuous) {\n        const result = evaluateReinforcement(\n          SIM.DT_MS / 1000,\n          state,\n          continuousOptions,\n        );\n        if (result && Array.isArray(result.spawned) && result.spawned.length) {\n          lastReinforcement = {\n            spawned: result.spawned,\n            timestamp: Date.now(),\n            options: { ...continuousOptions },\n          };\n          emit(\"reinforcements\", { spawned: result.spawned });\n        }\n      }\n    }\n  }\n  function isContinuousEnabled() {\n    return !!continuous;\n  }\n  function setContinuousOptions(opts: any = {}) {\n    continuousOptions = { ...continuousOptions, ...opts };\n    if (simWorker)\n      try {\n        simWorker.post({\n          type: \"setContinuousOptions\",\n          opts: continuousOptions,\n        });\n      } catch (e) {}\n  }\n  function getContinuousOptions() {\n    return { ...continuousOptions };\n  }\n  function setReinforcementIntervalManager(seconds: number) {\n    setReinforcementInterval(seconds);\n    if (simWorker)\n      try {\n        simWorker.post({ type: \"setReinforcementInterval\", seconds });\n      } catch (e) {}\n  }\n  function getReinforcementIntervalManager() {\n    return getReinforcementInterval();\n  }\n  function isRunning() {\n    return running;\n  }\n  function isWorker() {\n    return !!simWorker && !!workerReady;\n  }\n  function onWorkerReady(cb: Function) {\n    if (typeof cb === \"function\") workerReadyCbs.push(cb);\n  }\n  function offWorkerReady(cb: Function) {\n    const i = workerReadyCbs.indexOf(cb);\n    if (i !== -1) workerReadyCbs.splice(i, 1);\n  }\n  function spawnShip(team: string = \"red\") {\n    try {\n      const type = getDefaultShipType();\n      const b = getDefaultBounds();\n      const x = Math.max(0, Math.min(b.W - 1e-6, srandom() * b.W));\n      const y = Math.max(0, Math.min(b.H - 1e-6, srandom() * b.H));\n      const ship = createShip(type, x, y, team);\n      state.ships.push(ship);\n      return ship;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  // Fleet formation (config-driven)\n  function formFleets() {\n    try {\n      // Remove all ships\n      state.ships.length = 0;\n      // Use makeInitialFleets from teamsConfig (static import)\n      const bounds = getDefaultBounds();\n      const seed = Math.floor(srandom() * 0xffffffff) >>> 0;\n      const ships = makeInitialFleets(seed, bounds, createShip);\n      for (const ship of ships) {\n        state.ships.push(ship);\n      }\n    } catch (e) {\n      /* ignore errors */\n    }\n  }\n  function reseedManager(newSeed: number = Math.floor(srandom() * 0xffffffff)) {\n    _seed = newSeed >>> 0;\n    srand(_seed);\n    if (simWorker)\n      try {\n        simWorker.post({ type: \"setSeed\", seed: _seed });\n      } catch (e) {}\n  }\n  function getLastReinforcement() {\n    return { ...lastReinforcement };\n  }\n  function snapshot() {\n    return {\n      ships: state.ships.slice(),\n      bullets: state.bullets.slice(),\n      t: state.t,\n    };\n  }\n  const score = { red: 0, blue: 0 };\n  const internal = { state, bounds: getDefaultBounds() };\n\n  return {\n    on,\n    off,\n    start,\n    pause,\n    reset: resetManager,\n    stepOnce,\n    setContinuousEnabled,\n    isContinuousEnabled,\n    setContinuousOptions,\n    getContinuousOptions,\n    setReinforcementInterval: setReinforcementIntervalManager,\n    getReinforcementInterval: getReinforcementIntervalManager,\n    isRunning,\n    isWorker,\n    onWorkerReady,\n    offWorkerReady,\n    spawnShip,\n    reseed: reseedManager,\n    getLastReinforcement,\n    snapshot,\n    score,\n    formFleets,\n    _internal: internal,\n  };\n}\n\nexport function simulate(dt: number, W = 800, H = 600) {\n  try {\n    const now =\n      typeof performance !== \"undefined\" && performance.now\n        ? performance.now()\n        : Date.now();\n    const frame = Math.floor(now / 4);\n    if (_lastSimulateFrameId === frame) {\n      const msg =\n        \"[gamemanager] detected simulate() called multiple times in same frame\";\n      if (_doubleSimStrict) throw new Error(msg);\n      else console.warn(msg);\n    }\n    _lastSimulateFrameId = frame;\n  } catch (e) {}\n  const state = {\n    ships,\n    bullets,\n    particles,\n    stars,\n    explosions: [],\n    shieldHits: [],\n    healthHits: [],\n  };\n  evaluateReinforcement(dt, state);\n  try {\n    simulateStep(state, dt, { W, H });\n  } catch (e) {}\n  for (const ex of state.explosions) {\n    if (ex && typeof ex === \"object\") flashes.push({ ...(ex as object) });\n    try {\n      const count = 12;\n      for (let i = 0; i < count; i++) {\n        const ang = srandom() * Math.PI * 2;\n        const sp = 30 + srandom() * 90;\n        acquireParticle((ex as any).x || 0, (ex as any).y || 0, {\n          vx: Math.cos(ang) * sp,\n          vy: Math.sin(ang) * sp,\n          ttl: 0.6,\n          color: \"rgba(255,200,100,0.95)\",\n          size: 3,\n        });\n      }\n    } catch (e) {}\n  }\n  for (const h of state.shieldHits) {\n    if (h && typeof h === \"object\") shieldFlashes.push({ ...(h as object) });\n  }\n  for (const h of state.healthHits) {\n    if (h && typeof h === \"object\") healthFlashes.push({ ...(h as object) });\n  }\n  return {\n    ships,\n    bullets,\n    particles,\n    flashes,\n    shieldFlashes,\n    healthFlashes,\n    stars,\n    starCanvas,\n  };\n}\n\nexport function processStateEvents(state: any, dt: number = 0) {\n  return state;\n}\n\nexport default createGameManager;\n", "export const EVASIVE_DURATION = 0.8; // seconds\nexport const TURN_RATES = { default: 4.0 } as const; // radians per second typical turn rate\nexport const EVASIVE_THRUST_MULT = 1.5; // multiplier for thrust during evasive maneuvers\nexport const SEPARATION_MULT = 0.6; // separation force multiplier between ships\n\n// AI logic thresholds and decision timer\nexport const AI_THRESHOLDS = {\n  decisionTimerMin: 0.5,\n  decisionTimerMax: 2.0,\n  hpEvadeThreshold: 0.35,\n  randomLow: 0.15,\n  randomHigh: 0.85,\n};\n\n// Ship movement global defaults (used if not per-ship)\nexport const SHIP_MOVEMENT_DEFAULTS = {\n  maxSpeed: 160,\n  maxAccel: 5,\n};\n\nexport default {\n  EVASIVE_DURATION,\n  TURN_RATES,\n  EVASIVE_THRUST_MULT,\n  SEPARATION_MULT,\n  AI_THRESHOLDS,\n  SHIP_MOVEMENT_DEFAULTS,\n};\n", "// behavior.ts - deterministic, simple AI for steering and firing\n// Uses seeded RNG for any randomness so results are reproducible.\nimport { srandom, srange } from \"./rng\";\nimport { createBullet } from \"./entities\";\nimport { AI_THRESHOLDS, SHIP_MOVEMENT_DEFAULTS } from \"./config/behaviorConfig\";\nimport { BULLET_DEFAULTS } from \"./config/entitiesConfig\";\nimport { TEAM_DEFAULT } from \"./config/teamsConfig\";\n\ntype ShipLike = {\n  id?: number;\n  x?: number;\n  y?: number;\n  vx?: number;\n  vy?: number;\n  team?: string;\n  hp?: number;\n  maxHp?: number;\n  cannons?: any[];\n  accel?: number; // max acceleration from config\n  currentAccel?: number; // dynamic, set by AI/gamemanager, 0..accel\n  radius?: number;\n  turnRate?: number;\n  damage?: number;\n  dmg?: number;\n  maxSpeed?: number; // NEW: max speed per ship\n  steering?: number; // NEW: steering intent (-1..1)\n  throttle?: number; // NEW: throttle intent (0..1)\n  __ai?: any;\n  turrets?: any[];\n  angle?: number;\n  type?: string; // Added for config sync\n};\n\ntype State = { ships: ShipLike[]; bullets: any[] };\n\nfunction len2(vx: number, vy: number) {\n  return vx * vx + vy * vy;\n}\nfunction clampSpeed(s: ShipLike, max: number) {\n  const v2 = len2(s.vx || 0, s.vy || 0);\n  const max2 = max * max;\n  if (v2 > max2 && v2 > 0) {\n    const inv = max / Math.sqrt(v2);\n    s.vx = (s.vx || 0) * inv;\n    s.vy = (s.vy || 0) * inv;\n  }\n}\n\nexport { clampSpeed };\n\nfunction aimWithSpread(from: ShipLike, to: ShipLike, spread = 0) {\n  let dx = (to.x || 0) - (from.x || 0);\n  let dy = (to.y || 0) - (from.y || 0);\n  const d = Math.hypot(dx, dy) || 1;\n  dx /= d;\n  dy /= d;\n  if (spread > 0) {\n    const ang = Math.atan2(dy, dx);\n    const jitter = srange(-spread, spread);\n    const na = ang + jitter;\n    return { x: Math.cos(na), y: Math.sin(na) };\n  }\n  return { x: dx, y: dy };\n}\n\nfunction tryFire(state: State, ship: ShipLike, target: ShipLike, dt: number) {\n  // Legacy cannons (single target, all fire at once)\n  if (Array.isArray(ship.cannons) && ship.cannons.length > 0) {\n    for (const c of ship.cannons) {\n      if (typeof c.__cd !== \"number\") c.__cd = 0;\n      c.__cd -= dt;\n      if (c.__cd > 0) continue;\n      const spread = typeof c.spread === \"number\" ? c.spread : 0;\n      const dir = aimWithSpread(ship, target, spread);\n      const speed = typeof c.muzzleSpeed === \"number\" ? c.muzzleSpeed : BULLET_DEFAULTS.muzzleSpeed;\n      const dmg = typeof c.damage === \"number\"\n        ? c.damage\n        : typeof ship.damage === \"number\"\n          ? ship.damage\n          : typeof ship.dmg === \"number\"\n            ? ship.dmg\n            : BULLET_DEFAULTS.damage;\n      const ttl = typeof c.bulletTTL === \"number\" ? c.bulletTTL : BULLET_DEFAULTS.ttl;\n      const radius = typeof c.bulletRadius === \"number\" ? c.bulletRadius : BULLET_DEFAULTS.radius;\n      const vx = dir.x * speed;\n      const vy = dir.y * speed;\n      const b = Object.assign(\n        createBullet(\n          ship.x || 0,\n          ship.y || 0,\n          vx,\n          vy,\n          ship.team || TEAM_DEFAULT,\n          ship.id || null,\n          dmg,\n          ttl,\n        ),\n        { radius },\n      );\n      state.bullets.push(b);\n      const rate = typeof c.rate === \"number\" && c.rate > 0 ? c.rate : 1;\n      c.__cd = 1 / rate;\n    }\n  }\n  // Multi-turret support: each turret fires independently\n  if (Array.isArray(ship.turrets) && ship.turrets.length > 0) {\n    for (const [i, turret] of ship.turrets.entries()) {\n      if (!turret) continue;\n      if (typeof turret.__cd !== \"number\") turret.__cd = 0;\n      turret.__cd -= dt;\n      if (turret.__cd > 0) continue;\n      // Target selection per turret\n      let turretTarget: ShipLike | null = null;\n      if (turret.targeting === \"nearest\") {\n        const enemies = (state.ships || []).filter(\n          (sh) => sh && sh.team !== ship.team,\n        );\n        let minDist = Infinity;\n        for (const enemy of enemies) {\n          const dx = (enemy.x || 0) - (ship.x || 0);\n          const dy = (enemy.y || 0) - (ship.y || 0);\n          const d2 = dx * dx + dy * dy;\n          if (d2 < minDist) {\n            minDist = d2;\n            turretTarget = enemy;\n          }\n        }\n      } else if (turret.targeting === \"random\") {\n        const enemies = (state.ships || []).filter(\n          (sh) => sh && sh.team !== ship.team,\n        );\n        if (enemies.length)\n          turretTarget = enemies[Math.floor(srandom() * enemies.length)];\n      } else if (turret.targeting === \"focus\") {\n        // Use ship's main target if available\n        if (ship.__ai && ship.__ai.targetId != null) {\n          turretTarget =\n            (state.ships || []).find(\n              (sh) => sh && sh.id === ship.__ai.targetId,\n            ) || null;\n        }\n      } else {\n        // Default: nearest\n        const enemies = (state.ships || []).filter(\n          (sh) => sh && sh.team !== ship.team,\n        );\n        let minDist = Infinity;\n        for (const enemy of enemies) {\n          const dx = (enemy.x || 0) - (ship.x || 0);\n          const dy = (enemy.y || 0) - (ship.y || 0);\n          const d2 = dx * dx + dy * dy;\n          if (d2 < minDist) {\n            minDist = d2;\n            turretTarget = enemy;\n          }\n        }\n      }\n      if (!turretTarget) continue;\n      // Fire from turret position (relative to ship center, using config radius)\n      const spread = typeof turret.spread === \"number\" ? turret.spread : 0.05;\n      const dir = aimWithSpread(ship, turretTarget, spread);\n      const speed = typeof turret.muzzleSpeed === \"number\" ? turret.muzzleSpeed : BULLET_DEFAULTS.muzzleSpeed;\n      const dmg = typeof turret.damage === \"number\"\n        ? turret.damage\n        : typeof ship.damage === \"number\"\n          ? ship.damage\n          : BULLET_DEFAULTS.damage;\n      const ttl = typeof turret.bulletTTL === \"number\" ? turret.bulletTTL : BULLET_DEFAULTS.ttl;\n      const radius = typeof turret.bulletRadius === \"number\" ? turret.bulletRadius : BULLET_DEFAULTS.radius;\n      // Always use config radius for turret position\n      const angle = ship.angle || 0;\n      // Get latest config radius for this ship type\n      const shipType = ship.type || \"fighter\";\n      const shipCfg = require(\"./config/entitiesConfig\").getShipConfig()[shipType];\n      const configRadius = shipCfg && typeof shipCfg.radius === \"number\" ? shipCfg.radius : (ship.radius || 12);\n      const [tx, ty] = turret.position || [0, 0];\n      const turretX =\n        (ship.x || 0) +\n        Math.cos(angle) * tx * configRadius -\n        Math.sin(angle) * ty * configRadius;\n      const turretY =\n        (ship.y || 0) +\n        Math.sin(angle) * tx * configRadius +\n        Math.cos(angle) * ty * configRadius;\n      const vx = dir.x * speed;\n      const vy = dir.y * speed;\n      const b = Object.assign(\n        createBullet(\n          turretX,\n          turretY,\n          vx,\n          vy,\n          ship.team || TEAM_DEFAULT,\n          ship.id || null,\n          dmg,\n          ttl,\n        ),\n        { radius },\n      );\n      state.bullets.push(b);\n      turret.__cd =\n        typeof turret.cooldown === \"number\" && turret.cooldown > 0\n          ? turret.cooldown\n          : 1.0;\n    }\n  }\n}\n\nfunction ensureShipAiState(s: ShipLike) {\n  if (!s.__ai) {\n    s.__ai = { state: \"idle\", decisionTimer: 0, targetId: null };\n  }\n  return s.__ai;\n}\n\nfunction chooseNewTarget(state: State, ship: ShipLike) {\n  const enemies = (state.ships || []).filter(\n    (sh) => sh && sh.team !== ship.team,\n  );\n  if (!enemies.length) return null;\n  const idx = Math.floor(srandom() * enemies.length);\n  return enemies[idx];\n}\n\nfunction steerAway(\n  s: ShipLike,\n  tx: number,\n  ty: number,\n  accel: number,\n  dt: number,\n) {\n  const dx = (s.x || 0) - tx;\n  const dy = (s.y || 0) - ty;\n  const d = Math.hypot(dx, dy) || 1;\n  const nx = dx / d;\n  const ny = dy / d;\n  s.vx = (s.vx || 0) + nx * accel * dt;\n  s.vy = (s.vy || 0) + ny * accel * dt;\n}\n\nexport function applySimpleAI(\n  state: State,\n  dt: number,\n  bounds = { W: 800, H: 600 },\n) {\n  if (!state || !Array.isArray(state.ships)) return;\n  for (const s of state.ships) {\n    const ai = ensureShipAiState(s);\n    ai.decisionTimer = Math.max(0, (ai.decisionTimer || 0) - dt);\n\n    let target: ShipLike | null = null;\n    if (ai.targetId != null)\n      target =\n        (state.ships || []).find((sh) => sh && sh.id === ai.targetId) || null;\n    if (!target) target = chooseNewTarget(state, s);\n    if (target) ai.targetId = target.id;\n\n    // Set throttle and steering dynamically based on intent\n    const maxAccel = typeof s.accel === \"number\" ? s.accel : 100;\n    const maxSpeed = typeof s.maxSpeed === \"number\" ? s.maxSpeed : 160;\n    s.steering = typeof s.steering === \"number\" ? s.steering : 0;\n    s.throttle = typeof s.throttle === \"number\" ? s.throttle : 0;\n\n    if (!target) {\n      // Idle: no acceleration, no steering\n      s.throttle = 0;\n      s.steering = 0;\n      ai.state = \"idle\";\n    } else {\n      if (ai.decisionTimer <= 0) {\n        const hpFrac = (s.hp || 0) / Math.max(1, s.maxHp || 1);\n        const rnd = srandom();\n        if (hpFrac < AI_THRESHOLDS.hpEvadeThreshold || rnd < AI_THRESHOLDS.randomLow) ai.state = \"evade\";\n        else if (rnd < AI_THRESHOLDS.randomHigh) ai.state = \"engage\";\n        else ai.state = \"idle\";\n        ai.decisionTimer = AI_THRESHOLDS.decisionTimerMin + srandom() * (AI_THRESHOLDS.decisionTimerMax - AI_THRESHOLDS.decisionTimerMin);\n      }\n\n      // Calculate desired angle to target\n      const dx = (target.x || 0) - (s.x || 0);\n      const dy = (target.y || 0) - (s.y || 0);\n      const desiredAngle = Math.atan2(dy, dx);\n      const currentAngle = typeof s.angle === \"number\" ? s.angle : 0;\n      let da = desiredAngle - currentAngle;\n      while (da < -Math.PI) da += Math.PI * 2;\n      while (da > Math.PI) da -= Math.PI * 2;\n      // Normalize steering to -1..1 using config\n      const steeringNorm = Math.PI / 2; // could be config if needed\n      const steering = Math.max(-1, Math.min(1, da / steeringNorm));\n\n      if (ai.state === \"engage\") {\n        s.throttle = 1;\n        s.steering = steering;\n        tryFire(state, s, target, dt);\n      } else if (ai.state === \"evade\") {\n        s.throttle = 0.8; // could be config if needed\n        // Steer away from target\n        const awayAngle = Math.atan2(\n          (s.y || 0) - (target.y || 0),\n          (s.x || 0) - (target.x || 0),\n        );\n        let daAway = awayAngle - currentAngle;\n        while (daAway < -Math.PI) daAway += Math.PI * 2;\n        while (daAway > Math.PI) daAway -= Math.PI * 2;\n        s.steering = Math.max(-1, Math.min(1, daAway / steeringNorm));\n      } else {\n        s.throttle = 0;\n        s.steering = 0;\n      }\n    }\n    clampSpeed(s, maxSpeed);\n  }\n}\n\nexport function getShipAiState(ship: ShipLike) {\n  if (!ship || !ship.__ai) return null;\n  const { targetId, ...rest } = ship.__ai;\n  return Object.assign({}, rest);\n}\n\nexport default { applySimpleAI, getShipAiState };\n", "// Enhanced progression with diminishing returns and extra per-level scalars\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level: number) => 100 * Math.pow(1.25, level - 1),\r\n  hpPercentPerLevel: (level: number) => Math.min(0.10, 0.05 + 0.05 / Math.sqrt(level)),\r\n  dmgPercentPerLevel: 0.08,\r\n  shieldPercentPerLevel: 0.06,\r\n  speedPercentPerLevel: 0.03,\r\n  regenPercentPerLevel: 0.04,\r\n};\r\n\r\nexport default progression;\r\n", "import type { BoundaryBehavior } from './types';\nexport const SIM = { DT_MS: 16, MAX_ACC_MS: 250 } as const;\n// boundaryBehavior: Tactical impact and pruning rationale\n// - 'remove': Ships/bullets are eliminated at map edge; punishes edge play, rewards central control. Pruning is immediate for out-of-bounds entities.\n// - 'wrap': Ships/bullets reappear on opposite edge; enables edge escapes, flanking via wrap, and kiting around boundaries. Pruning only occurs for expired entities.\n// - 'bounce': Ships/bullets reflect off edge; supports tactical repositioning, edge denial, and hit-and-run. Pruning is immediate for expired entities.\n// All entities, particles, and events are pruned immediately upon destruction, expiration, or leaving bounds, ensuring robust cleanup and tactical consistency.\nexport const boundaryBehavior: { ships: BoundaryBehavior; bullets: BoundaryBehavior } = {\n  ships: 'wrap',\n  bullets: 'remove',\n};\n\nexport const progression = {\n  xpPerDamage: 1,\n  xpPerKill: 50,\n  xpToLevel: (level: number) => 100 + level * 50,\n};\n\nexport default { SIM, progression, boundaryBehavior };\n", "// simulate.ts - TypeScript implementation ported from simulate.js\nimport { srange, srand, srandom } from \"./rng\";\nimport { progression as progressionCfg } from \"./config/progressionConfig\";\nimport { SIM, boundaryBehavior } from \"./config/simConfig\";\nimport { clampSpeed } from \"./behavior\";\n\nexport type Bounds = { W: number; H: number };\n\n// SIM constants migrated to simConfig.ts\n// Use SIM.DT_MS and SIM.MAX_ACC_MS instead\n\nfunction dist2(a: { x: number; y: number }, b: { x: number; y: number }) {\n  const dx = a.x - b.x;\n  const dy = a.y - b.y;\n  return dx * dx + dy * dy;\n}\n\nexport function simulateStep(state: any, dtSeconds: number, bounds: Bounds) {\n  // Advance time\n  state.t = (state.t || 0) + dtSeconds;\n\n  // Move bullets and handle boundary behavior\n  for (let i = (state.bullets || []).length - 1; i >= 0; i--) {\n    const b = state.bullets[i];\n    b.x += (b.vx || 0) * dtSeconds;\n    b.y += (b.vy || 0) * dtSeconds;\n    b.ttl = (b.ttl || 0) - dtSeconds;\n    let outX = b.x < 0 || b.x >= bounds.W;\n    let outY = b.y < 0 || b.y >= bounds.H;\n    let outOfBounds = outX || outY;\n    let remove = false;\n    if (b.ttl <= 0) remove = true;\n    else if (outOfBounds) {\n      switch (boundaryBehavior.bullets) {\n        case 'remove':\n          remove = true;\n          break;\n        case 'wrap':\n          if (b.x < 0) b.x += bounds.W;\n          if (b.x >= bounds.W) b.x -= bounds.W;\n          if (b.y < 0) b.y += bounds.H;\n          if (b.y >= bounds.H) b.y -= bounds.H;\n          break;\n        case 'bounce':\n          if (outX) {\n            b.vx = -(b.vx || 0);\n            b.x = Math.max(0, Math.min(bounds.W, b.x));\n          }\n          if (outY) {\n            b.vy = -(b.vy || 0);\n            b.y = Math.max(0, Math.min(bounds.H, b.y));\n          }\n          break;\n      }\n    }\n    if (remove) state.bullets.splice(i, 1);\n  }\n  // Prune out-of-bounds shieldHits, healthHits, explosions, damageEvents\n  function pruneHits(arr: any[], bounds: Bounds) {\n    if (!Array.isArray(arr)) return arr;\n    return arr.filter(\n      (e) =>\n        typeof e.x === \"number\" &&\n        typeof e.y === \"number\" &&\n        e.x >= 0 &&\n        e.x < bounds.W &&\n        e.y >= 0 &&\n        e.y < bounds.H,\n    );\n  }\n  if (Array.isArray(state.shieldHits))\n  // Prune particles/events after their lifetime\n  if (state.particles) {\n    state.particles = state.particles.filter((p: any) => {\n      p.life = (p.life || p.ttl || 0) - dtSeconds;\n      return p.life > 0;\n    });\n  }\n  if (state.explosions) {\n    state.explosions = state.explosions.filter((e: any) => {\n      e.life = (e.life || e.ttl || 0) - dtSeconds;\n      return e.life > 0;\n    });\n  }\n    state.shieldHits = pruneHits(state.shieldHits, bounds);\n  if (Array.isArray(state.healthHits))\n    state.healthHits = pruneHits(state.healthHits, bounds);\n  if (Array.isArray(state.explosions))\n    state.explosions = pruneHits(state.explosions, bounds);\n  if (Array.isArray(state.damageEvents))\n    state.damageEvents = pruneHits(state.damageEvents, bounds);\n\n  // Move ships and update heading\n  for (let si = (state.ships || []).length - 1; si >= 0; si--) {\n    const s = state.ships[si];\n    // --- Physics-based movement ---\n    const throttle = typeof s.throttle === \"number\" ? s.throttle : 0;\n    const steering = typeof s.steering === \"number\" ? s.steering : 0;\n    const accel = typeof s.accel === \"number\" ? s.accel : 0;\n    const turnRate = typeof s.turnRate === \"number\" ? s.turnRate : 3;\n    const maxSpeed = typeof s.maxSpeed === \"number\" ? s.maxSpeed : 160;\n    const angle = typeof s.angle === \"number\" ? s.angle : 0;\n\n    // Update angle based on steering\n    const maxTurn = turnRate * Math.abs(steering) * dtSeconds;\n    if (steering !== 0) {\n      let a = angle + Math.sign(steering) * maxTurn;\n      while (a < -Math.PI) a += Math.PI * 2;\n      while (a > Math.PI) a -= Math.PI * 2;\n      s.angle = a;\n    }\n\n    // Update velocity based on throttle and angle\n    const actualAccel = accel * throttle;\n    if (actualAccel > 0) {\n      s.vx = (s.vx || 0) + Math.cos(s.angle || 0) * actualAccel * dtSeconds;\n      s.vy = (s.vy || 0) + Math.sin(s.angle || 0) * actualAccel * dtSeconds;\n    }\n\n    // Apply friction/damping to velocity\n    const friction = typeof s.friction === \"number\" ? s.friction : 0.98;\n    s.vx = (s.vx || 0) * friction;\n    s.vy = (s.vy || 0) * friction;\n\n    // Clamp speed using shared function\n    clampSpeed(s, maxSpeed);\n\n    // Move ship\n    s.x += (s.vx || 0) * dtSeconds;\n    s.y += (s.vy || 0) * dtSeconds;\n    // Boundary behavior for ships\n    const r = typeof s.radius === \"number\" ? s.radius : 12;\n    let outX = s.x < -r || s.x > bounds.W + r;\n    let outY = s.y < -r || s.y > bounds.H + r;\n    let outOfBounds = outX || outY;\n    let remove = false;\n    if (outOfBounds) {\n      switch (boundaryBehavior.ships) {\n        case 'remove':\n          remove = true;\n          break;\n        case 'wrap':\n          if (s.x < -r) s.x += bounds.W + r * 2;\n          if (s.x > bounds.W + r) s.x -= bounds.W + r * 2;\n          if (s.y < -r) s.y += bounds.H + r * 2;\n          if (s.y > bounds.H + r) s.y -= bounds.H + r * 2;\n          break;\n        case 'bounce':\n          if (outX) {\n            s.vx = -(s.vx || 0);\n            s.x = Math.max(-r, Math.min(bounds.W + r, s.x));\n          }\n          if (outY) {\n            s.vy = -(s.vy || 0);\n            s.y = Math.max(-r, Math.min(bounds.H + r, s.y));\n          }\n          break;\n      }\n    }\n    if (remove) state.ships.splice(si, 1);\n  }\n\n  // Bullet collisions\n  for (let bi = (state.bullets || []).length - 1; bi >= 0; bi--) {\n    const b = state.bullets[bi];\n    for (let si = (state.ships || []).length - 1; si >= 0; si--) {\n      const s = state.ships[si];\n      if (s.team === b.team) continue;\n      const r = (s.radius || 6) + (b.radius || 1);\n      if (dist2(b, s) <= r * r) {\n        const attacker =\n          typeof b.ownerId === \"number\" || typeof b.ownerId === \"string\"\n            ? (state.ships || []).find((sh: any) => sh.id === b.ownerId)\n            : undefined;\n        let dealtToShield = 0;\n        let dealtToHealth = 0;\n        const shield = s.shield || 0;\n        if (shield > 0) {\n          const absorbed = Math.min(shield, b.damage || 0);\n          s.shield = shield - absorbed;\n          const hitAngle = Math.atan2(\n            (b.y || 0) - (s.y || 0),\n            (b.x || 0) - (s.x || 0),\n          );\n          (state.shieldHits ||= []).push({\n            id: s.id,\n            hitX: b.x,\n            hitY: b.y,\n            team: s.team,\n            amount: absorbed,\n            hitAngle,\n          });\n          // expose damage event for renderer (shield hit)\n          (state.damageEvents ||= []).push({\n            id: s.id,\n            type: \"shield\",\n            amount: absorbed,\n            x: b.x,\n            y: b.y,\n            team: s.team,\n            attackerId: attacker && attacker.id,\n          });\n          const remaining = (b.damage || 0) - absorbed;\n          if (remaining > 0) {\n            s.hp -= remaining;\n            (state.healthHits ||= []).push({\n              id: s.id,\n              hitX: b.x,\n              hitY: b.y,\n              team: s.team,\n              amount: remaining,\n            });\n            // expose damage event for renderer (health hit)\n            (state.damageEvents ||= []).push({\n              id: s.id,\n              type: \"hp\",\n              amount: remaining,\n              x: b.x,\n              y: b.y,\n              team: s.team,\n              attackerId: attacker && attacker.id,\n            });\n          }\n          dealtToShield = absorbed;\n          dealtToHealth = Math.max(0, (b.damage || 0) - absorbed);\n        } else {\n          s.hp -= b.damage || 0;\n          (state.healthHits ||= []).push({\n            id: s.id,\n            hitX: b.x,\n            hitY: b.y,\n            team: s.team,\n            amount: b.damage || 0,\n          });\n          // expose damage event for renderer (health hit)\n          (state.damageEvents ||= []).push({\n            id: s.id,\n            type: \"hp\",\n            amount: b.damage || 0,\n            x: b.x,\n            y: b.y,\n            team: s.team,\n            attackerId: attacker && attacker.id,\n          });\n          dealtToHealth = b.damage || 0;\n        }\n\n        // Update percent fields for renderer convenience\n        s.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\n        s.shieldPercent =\n          typeof s.maxShield === \"number\" && s.maxShield > 0\n            ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield))\n            : 0;\n        // XP for damage\n        if (attacker) {\n          attacker.xp =\n            (attacker.xp || 0) +\n            (dealtToShield + dealtToHealth) * (progressionCfg.xpPerDamage || 0);\n          while (\n            (attacker.xp || 0) >= progressionCfg.xpToLevel(attacker.level || 1)\n          ) {\n            attacker.xp -= progressionCfg.xpToLevel(attacker.level || 1);\n            attacker.level = (attacker.level || 1) + 1;\n            // Support function or number scalars for progression\n            const resolveScalar = (s: any, lvl: number) =>\n              typeof s === \"function\" ? s(lvl) : s || 0;\n            const lvl = attacker.level || 1;\n            const hpScalar = resolveScalar(\n              progressionCfg.hpPercentPerLevel,\n              lvl,\n            );\n            const shScalar = resolveScalar(\n              progressionCfg.shieldPercentPerLevel,\n              lvl,\n            );\n            const dmgScalar = resolveScalar(\n              progressionCfg.dmgPercentPerLevel,\n              lvl,\n            );\n            const speedScalar = resolveScalar(\n              (progressionCfg as any).speedPercentPerLevel,\n              lvl,\n            );\n            const regenScalar = resolveScalar(\n              (progressionCfg as any).regenPercentPerLevel,\n              lvl,\n            );\n\n            const hpMul = 1 + hpScalar;\n            const shMul = 1 + shScalar;\n            const dmgMul = 1 + dmgScalar;\n\n            attacker.maxHp = (attacker.maxHp || 0) * hpMul;\n            attacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\n            if (typeof attacker.maxShield === \"number\") {\n              attacker.maxShield = (attacker.maxShield || 0) * shMul;\n              attacker.shield = Math.min(\n                attacker.maxShield,\n                (attacker.shield || 0) * shMul,\n              );\n            }\n            if (Array.isArray(attacker.cannons)) {\n              for (const c of attacker.cannons) {\n                if (typeof c.damage === \"number\") c.damage *= dmgMul;\n              }\n            }\n            // Apply optional speed and shield regen increases\n            if (\n              typeof speedScalar === \"number\" &&\n              typeof attacker.accel === \"number\"\n            )\n              attacker.accel = attacker.accel * (1 + speedScalar);\n            if (\n              typeof regenScalar === \"number\" &&\n              typeof attacker.shieldRegen === \"number\"\n            )\n              attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\n          }\n        }\n        state.bullets.splice(bi, 1);\n        if (s.hp <= 0) {\n          // eslint-disable-next-line no-console\n          console.log(\n            \"DEBUG: KILL BRANCH, attacker\",\n            attacker && attacker.id,\n            \"xp before\",\n            attacker && attacker.xp,\n          );\n          if (attacker) {\n            attacker.xp = (attacker.xp || 0) + (progressionCfg.xpPerKill || 0);\n            // eslint-disable-next-line no-console\n            console.log(\n              \"DEBUG: KILL XP AWARDED, attacker\",\n              attacker.id,\n              \"xp after\",\n              attacker.xp,\n            );\n            while (\n              (attacker.xp || 0) >=\n              progressionCfg.xpToLevel(attacker.level || 1)\n            ) {\n              attacker.xp -= progressionCfg.xpToLevel(attacker.level || 1);\n              attacker.level = (attacker.level || 1) + 1;\n              // Support function or number scalars for progression on kill XP\n              const resolveScalar = (s: any, lvl: number) =>\n                typeof s === \"function\" ? s(lvl) : s || 0;\n              const lvl = attacker.level || 1;\n              const hpScalar = resolveScalar(\n                progressionCfg.hpPercentPerLevel,\n                lvl,\n              );\n              const shScalar = resolveScalar(\n                progressionCfg.shieldPercentPerLevel,\n                lvl,\n              );\n              const dmgScalar = resolveScalar(\n                progressionCfg.dmgPercentPerLevel,\n                lvl,\n              );\n              const speedScalar = resolveScalar(\n                (progressionCfg as any).speedPercentPerLevel,\n                lvl,\n              );\n              const regenScalar = resolveScalar(\n                (progressionCfg as any).regenPercentPerLevel,\n                lvl,\n              );\n\n              const hpMul = 1 + hpScalar;\n              const shMul = 1 + shScalar;\n              const dmgMul = 1 + dmgScalar;\n              attacker.maxHp = (attacker.maxHp || 0) * hpMul;\n              attacker.hp = Math.min(\n                attacker.maxHp,\n                (attacker.hp || 0) * hpMul,\n              );\n              if (typeof attacker.maxShield === \"number\") {\n                attacker.maxShield = (attacker.maxShield || 0) * shMul;\n                attacker.shield = Math.min(\n                  attacker.maxShield,\n                  (attacker.shield || 0) * shMul,\n                );\n              }\n              if (Array.isArray(attacker.cannons)) {\n                for (const c of attacker.cannons) {\n                  if (typeof c.damage === \"number\") c.damage *= dmgMul;\n                }\n              }\n              // Apply optional speed and shield regen increases\n              if (\n                typeof speedScalar === \"number\" &&\n                typeof attacker.accel === \"number\"\n              )\n                attacker.accel = attacker.accel * (1 + speedScalar);\n              if (\n                typeof regenScalar === \"number\" &&\n                typeof attacker.shieldRegen === \"number\"\n              )\n                attacker.shieldRegen = attacker.shieldRegen * (1 + regenScalar);\n            }\n          }\n          (state.explosions ||= []).push({ x: s.x, y: s.y, team: s.team });\n          state.ships.splice(si, 1);\n        }\n        break;\n      }\n    }\n  }\n\n  // Shield regen\n  for (const s of state.ships || []) {\n    if (s.maxShield)\n      s.shield = Math.min(\n        s.maxShield,\n        (s.shield || 0) + (s.shieldRegen || 0) * dtSeconds,\n      );\n  }\n\n  // refresh percent convenience fields after regen\n  for (const s of state.ships || []) {\n    s.hpPercent = Math.max(0, Math.min(1, (s.hp || 0) / (s.maxHp || 1)));\n    s.shieldPercent =\n      typeof s.maxShield === \"number\" && s.maxShield > 0\n        ? Math.max(0, Math.min(1, (s.shield || 0) / s.maxShield))\n        : 0;\n  }\n\n  return state;\n}\n\nexport default { simulateStep };\n", "export const DISPLAY_DEFAULTS = {\r\n  logicalMap: { W: 1920, H: 1080 },\r\n  renderScale: 1.0,\r\n  displayScale: 1.0,\r\n  hpBar: { bg: '#222', fill: '#4caf50', w: 20, h: 4, dx: -10, dy: -12 },\r\n};\r\n\r\nexport function getDefaultBounds() {\r\n  // Fixed logical map size for simulation and rendering\r\n  return { W: 1920, H: 1080 };\r\n}\r\n\r\nexport default { getDefaultBounds };\r\n", "// src/createSimWorker.ts - TypeScript helper to create and manage the sim Worker\r\nexport type SimMessage = any;\r\n\r\nexport function createSimWorker(url: string = './simWorker.js') {\r\n  const worker = new Worker(url, { type: 'module' });\r\n  const listeners = new Map<string, (msg: any) => void>();\r\n\r\n  worker.onmessage = (ev: MessageEvent) => {\r\n    const msg = ev.data;\r\n    const cb = listeners.get(msg && msg.type);\r\n    if (cb) cb(msg);\r\n  };\r\n\r\n  return {\r\n    post(msg: SimMessage) { worker.postMessage(msg); },\r\n    on(type: string, cb: (msg: any) => void) { listeners.set(type, cb); },\r\n    terminate() { worker.terminate(); }\r\n  };\r\n}\r\n\r\nexport default createSimWorker;\r\n", "export const SHIELD = {\r\n  ttl: 0.4, particleCount: 6, particleTTL: 0.5, particleColor: '#88ccff', particleSize: 2,\r\n  // arcWidth (radians) for shield hit visual/particle spread centered on hitAngle\r\n  // NOTE: Used in assetsConfig.ts visualStateDefaults and renderer logic. If not consumed, consider removing.\r\n  arcWidth: Math.PI / 6, // TODO: Ensure renderer/particle logic uses this or remove if redundant\r\n};\r\n\r\nexport const HEALTH = {\r\n  ttl: 0.6, particleCount: 8, particleTTL: 0.6, particleColor: '#ffb3b3', particleSize: 2.5,\r\n};\r\n\r\nexport const EXPLOSION = {\r\n  particleCount: 30, particleTTL: 1.2, particleColor: '#ffaa33', particleSize: 3, minSpeed: 20, maxSpeed: 140,\r\n  // TODO: Unify particle effect configs with assetsConfig.ts animations for maintainability\r\n};\r\n\r\nexport const FALLBACK_POSITIONS = [\r\n  { x: 100, y: 100, team: 'red' },\r\n  { x: 700, y: 500, team: 'blue' }\r\n];\r\n\r\nexport const STARS = { twinkle: true, redrawInterval: 500, count: 140 };\r\n\r\nexport default { SHIELD, HEALTH, EXPLOSION, STARS, FALLBACK_POSITIONS };\r\n", "// Basic asset templates for 2D top-down rendering with future 3D model placeholders.\r\n// Orientation: shapes face +X (to the right). Scale is in logical units; renderer\r\n// should scale to entity radius and rotate by entity heading if present.\r\n\r\nexport type PolygonShape = {\r\n  type: 'polygon';\r\n  points: number[][]; // [[x,y], ...]\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CircleShape = {\r\n  type: 'circle';\r\n  r: number;\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CompoundPart = PolygonShape | CircleShape;\r\n\r\nexport type CompoundShape = {\r\n  type: 'compound';\r\n  parts: CompoundPart[];\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type Shape2D = PolygonShape | CircleShape | CompoundShape;\r\nexport type TurretVisualConfig = {\r\n  kind: string;\r\n  position: [number, number]; // relative to ship center, in radius units\r\n};\r\n\r\nexport type Model3D = {\r\n  url?: string | undefined;\r\n  scale?: number | undefined;\r\n  type?: string | undefined;\r\n  mesh?: string | undefined;\r\n};\r\n\r\nexport type AssetsConfigType = {\r\n  meta: { orientation: string; coordinateSystem: string };\r\n  palette: Record<string, string>;\r\n  shapes2d: Record<string, Shape2D & { turrets?: TurretVisualConfig[] }>;\r\n  animations?: Record<string, any>;\r\n  damageStates?: Record<string, { opacity?: number; accentColor?: string }>;\r\n  visualStateDefaults?: Record<string, { engine?: string; shield?: string; damageParticles?: string }>;\r\n};\r\n\r\nexport const AssetsConfig: AssetsConfigType = {\r\n  meta: {\r\n    orientation: '+X',\r\n    coordinateSystem: 'topdown-2d',\r\n  },\r\n  palette: {\r\n    shipHull: '#b0b7c3',\r\n    shipAccent: '#6c7380',\r\n    bullet: '#ffd166',\r\n    turret: '#94a3b8',\r\n    // Scene background color used by renderers\r\n    background: '#0b1220',\r\n  },\r\n  // 2D vector shapes defined as polygons and circles. Points are unit-sized\r\n  // profiles (roughly radius 1). Renderer should multiply by entity radius or\r\n  // provided scale before drawing.\r\n  shapes2d: {\r\n    fighter: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [-0.8, 0.6], [-0.5, 0], [-0.8, -0.6]] },\r\n        { type: 'polygon', points: [[0.0, 0.35], [-0.6, 0.65], [-0.35, 0.0]] },\r\n        { type: 'polygon', points: [[0.0, -0.35], [-0.35, 0.0], [-0.6, -0.65]] },\r\n        { type: 'circle', r: 0.5 }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1, type: 'gltf', mesh: undefined }\r\n    },\r\n    corvette: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [0.4, 0.7], [-1.0, 0.6], [-1.2, 0], [-1.0, -0.6], [0.4, -0.7]] },\r\n        { type: 'polygon', points: [[1.4, 0.22], [1.2, 0.12], [1.2, -0.12], [1.4, -0.22]] },\r\n        { type: 'circle', r: 0.6 }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1.4, type: 'gltf', mesh: undefined }\r\n    },\r\n    frigate: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.3, 0], [0.7, 0.65], [-0.3, 1.0], [-1.3, 0.55], [-1.3, -0.55], [-0.3, -1.0], [0.7, -0.65]] },\r\n        { type: 'circle', r: 0.7 }\r\n      ],\r\n      strokeWidth: 0.1,\r\n      model3d: { url: undefined, scale: 1.8, type: 'gltf', mesh: undefined }\r\n    },\r\n    destroyer: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.8, 0], [1.0, 0.7], [0.2, 1.0], [-0.8, 0.9], [-1.8, 0.6], [-1.8, -0.6], [-0.8, -0.9], [0.2, -1.0], [1.0, -0.7]] },\r\n        { type: 'circle', r: 1.0 },\r\n        { type: 'polygon', points: [[2.0, 0.3], [1.8, 0.2], [1.8, -0.2], [2.0, -0.3]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 2.2, type: 'gltf', mesh: undefined },\r\n      turrets: [\r\n        { kind: 'basic', position: [1.2, 0.8] },\r\n        { kind: 'basic', position: [-1.2, 0.8] },\r\n        { kind: 'basic', position: [1.2, -0.8] },\r\n        { kind: 'basic', position: [-1.2, -0.8] },\r\n        { kind: 'basic', position: [0, 1.5] },\r\n        { kind: 'basic', position: [0, -1.5] }\r\n      ]\r\n    },\r\n    carrier: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[2.2, 0], [1.2, 1.2], [-1.0, 1.6], [-2.8, 1.2], [-3.2, 0], [-2.8, -1.2], [-1.0, -1.6], [1.2, -1.2]] },\r\n        { type: 'circle', r: 1.2 },\r\n        { type: 'polygon', points: [[2.6, 0.5], [2.2, 0.3], [2.2, -0.3], [2.6, -0.5]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 3.0, type: 'gltf', mesh: undefined },\r\n      turrets: [\r\n        { kind: 'basic', position: [2.0, 1.2] },\r\n        { kind: 'basic', position: [-2.0, 1.2] },\r\n        { kind: 'basic', position: [2.0, -1.2] },\r\n        { kind: 'basic', position: [-2.0, -1.2] }\r\n      ]\r\n    },\r\n    bulletSmall: { type: 'circle', r: 0.18 },\r\n    bulletMedium: { type: 'circle', r: 0.25 },\r\n    bulletLarge: { type: 'circle', r: 0.36 },\r\n    turretBasic: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'circle', r: 0.5 },\r\n        { type: 'polygon', points: [[-0.2, 0.2], [0.7, 0.2], [0.7, -0.2], [-0.2, -0.2]] }\r\n      ],\r\n      strokeWidth: 0.08\r\n    },\r\n    // Small effect/particle shapes for renderer-driven effects\r\n    particleSmall: { type: 'circle', r: 0.12 },\r\n    particleMedium: { type: 'circle', r: 0.22 },\r\n    explosionParticle: { type: 'circle', r: 0.32 },\r\n    shieldRing: { type: 'circle', r: 1.2 }\r\n  }\r\n};\r\n\r\n// Animations and visual defaults (align with JS AssetsConfig)\r\n(AssetsConfig as any).animations = {\r\n  engineFlare: {\r\n    type: 'polygon',\r\n    points: [ [0, 0], [-0.3, 0.15], [-0.5, 0], [-0.3, -0.15] ],\r\n    pulseRate: 8,\r\n    // configurable alpha multiplier for engine overlay\r\n    alpha: 0.4,\r\n    // local-space X offset (negative = behind ship)\r\n    offset: -0.9\r\n  },\r\n  shieldEffect: {\r\n    type: 'circle',\r\n    r: 1.2,\r\n    strokeWidth: 0.1,\r\n    color: '#88ccff',\r\n    pulseRate: 2,\r\n    // map shieldPct -> alpha = base + scale * shieldPct\r\n    alphaBase: 0.25,\r\n    alphaScale: 0.75\r\n  },\r\n  damageParticles: {\r\n    type: 'particles',\r\n    color: '#ff6b6b',\r\n    count: 6,\r\n    lifetime: 0.8,\r\n    spread: 0.6\r\n  }\r\n  ,\r\n  engineTrail: {\r\n    type: 'trail',\r\n    color: '#fffc00', // bright yellow for high contrast\r\n  maxLength: 40,    // much longer trail\r\n    width: 0.35,      // thicker trail line\r\n    fade: 0.35        // slower fading, more persistent\r\n  }\r\n};\r\n\r\n(AssetsConfig as any).damageStates = {\r\n  light: { opacity: 0.9, accentColor: '#b0b7c3' },\r\n  moderate: { opacity: 0.75, accentColor: '#d4a06a' },\r\n  heavy: { opacity: 0.5, accentColor: '#ff6b6b' }\r\n};\r\n\r\n(AssetsConfig as any).visualStateDefaults = {\r\n  fighter:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  corvette:  { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  frigate:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  destroyer: { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 },\r\n  carrier:   { engine: 'engineFlare', shield: 'shieldEffect', damageParticles: 'damageParticles', engineTrail: 'engineTrail', arcWidth: Math.PI / 12 }\r\n};\r\n\r\n// thresholds for mapping hpPct -> damage state key\r\n(AssetsConfig as any).damageThresholds = { moderate: 0.66, heavy: 0.33 };\r\n(AssetsConfig as any).shieldArcWidth = Math.PI / 12;\r\n\r\nexport function getVisualConfig(type: string) {\r\n  const shape = getShipAsset(type);\r\n  const visuals = (AssetsConfig as any).visualStateDefaults[type] || (AssetsConfig as any).visualStateDefaults.fighter;\r\n  return { shape, visuals, palette: AssetsConfig.palette, animations: (AssetsConfig as any).animations, damageStates: (AssetsConfig as any).damageStates } as any;\r\n}\r\n\r\nexport function getShipAsset(type: string): Shape2D {\r\n  return AssetsConfig.shapes2d[type] || AssetsConfig.shapes2d.fighter;\r\n}\r\n\r\nexport function getBulletAsset(kind: 'small' | 'medium' | 'large' = 'small'): Shape2D {\r\n  if (kind === 'large') return AssetsConfig.shapes2d.bulletLarge;\r\n  if (kind === 'medium') return AssetsConfig.shapes2d.bulletMedium;\r\n  return AssetsConfig.shapes2d.bulletSmall;\r\n}\r\n\r\nexport function getTurretAsset(_kind: 'basic' = 'basic'): Shape2D {\r\n  return AssetsConfig.shapes2d.turretBasic;\r\n}\r\n\r\nexport default AssetsConfig;\r\n", "// src/canvasrenderer.ts - TypeScript port of the simple Canvas2D renderer.\r\n// This mirrors the behavior in src/canvasrenderer.js but provides types so\r\n// other parts of the codebase can be migrated safely.\r\n\r\nimport { AssetsConfig, getShipAsset, getBulletAsset, getTurretAsset, getVisualConfig } from './config/assets/assetsConfig';\r\nimport { TeamsConfig } from './config/teamsConfig';\r\nimport { bulletKindForRadius, getDefaultShipType } from './config/entitiesConfig';\r\nimport { RendererConfig } from './config/rendererConfig';\r\nimport { shieldFlashes, healthFlashes } from './gamemanager';\r\n\r\nexport type AnyState = any;\r\n\r\nexport class CanvasRenderer {\r\n  canvas: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D | null = null;\r\n  bufferCanvas: HTMLCanvasElement;\r\n  bufferCtx: CanvasRenderingContext2D | null = null;\r\n  providesOwnLoop = false;\r\n  type = 'canvas';\r\n  // ratio between backing store pixels and CSS (logical) pixels\r\n  pixelRatio = 1;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n    // Create offscreen buffer sized at logical map \u00D7 renderer scale\r\n    this.bufferCanvas = document.createElement('canvas');\r\n    this.bufferCtx = this.bufferCanvas.getContext('2d');\r\n  }\r\n\r\n  init(): boolean {\r\n    this.ctx = this.canvas.getContext('2d');\r\n    // If running in a test environment (jsdom) getContext may be unimplemented.\r\n    // Provide a minimal no-op 2D context so renderState can still resize buffers and run logic.\r\n    if (!this.ctx) {\r\n      // create a lightweight no-op ctx that satisfies the subset used by the renderer\r\n      const noop = () => {};\r\n      const noOpCtx: any = {\r\n        setTransform: noop, imageSmoothingEnabled: true, clearRect: noop, save: noop, restore: noop,\r\n        fillRect: noop, beginPath: noop, moveTo: noop, lineTo: noop, closePath: noop,\r\n        fill: noop, stroke: noop, arc: noop, translate: noop, rotate: noop, drawImage: noop,\r\n        globalAlpha: 1, strokeStyle: '#000', fillStyle: '#000', lineWidth: 1, globalCompositeOperation: 'source-over'\r\n      };\r\n      this.ctx = noOpCtx as unknown as CanvasRenderingContext2D;\r\n    }\r\n    this.bufferCtx = this.bufferCanvas.getContext('2d') || this.ctx;\r\n    // bufferCtx must be present (either real or no-op) for renderState to proceed\r\n    if (!this.bufferCtx) return false;\r\n    // compute pixelRatio from renderScale only\r\n    try {\r\n      const renderScale = (RendererConfig && typeof (RendererConfig as any).renderScale === 'number') ? (RendererConfig as any).renderScale : 1;\r\n      this.pixelRatio = renderScale;\r\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // No scaling here; only when compositing buffer\r\n      this.ctx.imageSmoothingEnabled = true;\r\n    } catch (e) {\r\n      this.pixelRatio = 1;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  isRunning(): boolean { return false; }\r\n\r\n  renderState(state: AnyState, interpolation = 0): void {\r\n    // helper: draw a stroked ring (used for explosions / flashes)\r\n    function drawRing(x: number, y: number, R: number, color: string, alpha = 1.0, thickness = 2) {\r\n          try {\r\n            bufferCtx.save();\r\n            bufferCtx.globalAlpha = Math.max(0, Math.min(1, alpha));\r\n            bufferCtx.strokeStyle = color;\r\n            bufferCtx.lineWidth = thickness * renderScale;\r\n            bufferCtx.beginPath();\r\n            bufferCtx.arc(x * renderScale, y * renderScale, Math.max(1, R * renderScale), 0, Math.PI * 2);\r\n            bufferCtx.stroke();\r\n            bufferCtx.restore();\r\n          } catch (e) { /* ignore draw errors */ }\r\n    }\r\n    // --- Offscreen buffer rendering ---\r\n    // 1. Resize bufferCanvas to logical size \u00D7 renderer scale BEFORE any drawing\r\n    // 2. Draw all simulation visuals to bufferCanvas\r\n    // 3. Copy bufferCanvas to main canvas ONLY after all drawing is finished\r\n    const ctx = this.ctx!;\r\n    const bufferCtx = this.bufferCtx!;\r\n    if (!ctx || !bufferCtx) return;\r\n    const LOGICAL_W = 1920, LOGICAL_H = 1080;\r\n    const renderScale = (RendererConfig && typeof (RendererConfig as any).renderScale === 'number') ? (RendererConfig as any).renderScale : 1;\r\n    const fitScale = (RendererConfig as any)._fitScale || 1;\r\n    // Resize bufferCanvas if needed (before any drawing)\r\n    const bufferW = Math.round(LOGICAL_W * renderScale);\r\n    const bufferH = Math.round(LOGICAL_H * renderScale);\r\n    if (this.bufferCanvas.width !== bufferW || this.bufferCanvas.height !== bufferH) {\r\n      this.bufferCanvas.width = bufferW;\r\n      this.bufferCanvas.height = bufferH;\r\n      // After resizing, need to re-acquire bufferCtx\r\n      this.bufferCtx = this.bufferCanvas.getContext('2d');\r\n      if (!this.bufferCtx) return;\r\n    }\r\n    // Always use latest bufferCtx after possible resize\r\n    const activeBufferCtx = this.bufferCtx!;\r\n    // Draw simulation to bufferCanvas\r\n        activeBufferCtx.setTransform(1, 0, 0, 1, 0, 0); // No scaling here; scale coordinates instead\r\n    activeBufferCtx.clearRect(0, 0, bufferW, bufferH);\r\n    activeBufferCtx.save();\r\n    activeBufferCtx.fillStyle = (AssetsConfig.palette as any).background || '#0b1220';\r\n    activeBufferCtx.fillRect(0, 0, bufferW, bufferH);\r\n    activeBufferCtx.restore();\r\n\r\n    // helper: draw a polygon path from points (already scaled/rotated by transform)\r\n    function drawPolygon(points: number[][]) {\r\n      if (!points || points.length === 0) return;\r\n      activeBufferCtx.beginPath();\r\n      activeBufferCtx.moveTo(points[0][0] * renderScale, points[0][1] * renderScale);\r\n      for (let i = 1; i < points.length; i++) activeBufferCtx.lineTo(points[i][0] * renderScale, points[i][1] * renderScale);\r\n      activeBufferCtx.closePath();\r\n      activeBufferCtx.fill();\r\n    }\r\n\r\n    // background starCanvas if present\r\n    if (state && state.starCanvas) {\r\n      try {\r\n        activeBufferCtx.save();\r\n        activeBufferCtx.globalCompositeOperation = 'source-over';\r\n        activeBufferCtx.drawImage(state.starCanvas, 0, 0, bufferW, bufferH);\r\n        activeBufferCtx.restore();\r\n      } catch (e) { /* ignore draw errors */ }\r\n    }\r\n\r\n    // helper: current time for animation pulses\r\n    const now = (state && state.t) || 0;\r\n\r\n    // Spawn damage particles from recent damage events (renderer-owned particle bursts)\r\n    try {\r\n      const dmgAnim = AssetsConfig.animations && AssetsConfig.animations.damageParticles;\r\n      if (Array.isArray(state.damageEvents) && dmgAnim) {\r\n        state.particles = state.particles || [];\r\n        for (const ev of state.damageEvents) {\r\n          const count = dmgAnim.count || 6;\r\n          for (let i = 0; i < count; i++) {\r\n            const angle = Math.random() * Math.PI * 2;\r\n            const speed = (Math.random() * (dmgAnim.spread || 0.6));\r\n            state.particles.push({\r\n              x: ev.x || 0,\r\n              y: ev.y || 0,\r\n              vx: Math.cos(angle) * speed,\r\n              vy: Math.sin(angle) * speed,\r\n              r: 0.6 + Math.random() * 0.8,\r\n              color: dmgAnim.color || '#ff6b6b',\r\n              lifetime: dmgAnim.lifetime || 0.8,\r\n              age: 0,\r\n              shape: 'circle'\r\n            });\r\n          }\r\n        }\r\n        // clear damageEvents after spawning so they are one-shot\r\n        state.damageEvents = [];\r\n      }\r\n    } catch (e) { /* ignore particle spawn errors */ }\r\n\r\n    // Engine trail rendering (config-driven, per ship)\r\n    const engineTrailsEnabled = !!state.engineTrailsEnabled;\r\n    for (const s of state.ships || []) {\r\n      const sx = (s.x || 0) * renderScale;\r\n      const sy = (s.y || 0) * renderScale;\r\n      if (sx < 0 || sx >= bufferW || sy < 0 || sy >= bufferH) continue;\r\n      // Update trail history (store in s.trail)\r\n      if (engineTrailsEnabled) {\r\n        s.trail = s.trail || [];\r\n        // Only add new trail point if ship moved\r\n        const last = s.trail.length ? s.trail[s.trail.length - 1] : null;\r\n        if (!last || last.x !== s.x || last.y !== s.y) {\r\n          s.trail.push({ x: s.x, y: s.y });\r\n        }\r\n        // Limit trail length\r\n        const vconf = getVisualConfig(s.type || getDefaultShipType());\r\n        const trailName = (vconf.visuals && vconf.visuals.engineTrail) || 'engineTrail';\r\n        // No catch block needed here\r\n      }\r\n\r\n      // Draw engine trail (faded circles)\r\n      if (Array.isArray(s.trail)) {\r\n        for (let i = 0; i < s.trail.length; i++) {\r\n          const tx = s.trail[i].x || 0;\r\n          const ty = s.trail[i].y || 0;\r\n          const tAlpha = 0.2 + 0.5 * (i / s.trail.length);\r\n          const txx = tx * renderScale;\r\n          const tyy = ty * renderScale;\r\n          if (txx < 0 || txx >= bufferW || tyy < 0 || tyy >= bufferH) continue;\r\n          activeBufferCtx.save();\r\n          activeBufferCtx.globalAlpha = tAlpha;\r\n          activeBufferCtx.fillStyle = '#aee1ff';\r\n          activeBufferCtx.beginPath();\r\n          activeBufferCtx.arc(txx, tyy, 6 * renderScale, 0, Math.PI * 2);\r\n          activeBufferCtx.fill();\r\n          activeBufferCtx.restore();\r\n        }\r\n      }\r\n\r\n      // Draw ship hull (polygon, circle, or compound)\r\n      const vconf = getVisualConfig(s.type || getDefaultShipType());\r\n      const shape = getShipAsset(s.type || getDefaultShipType());\r\n      activeBufferCtx.save();\r\n      activeBufferCtx.translate((s.x || 0) * renderScale, (s.y || 0) * renderScale);\r\n      activeBufferCtx.rotate((s.angle || 0));\r\n      let teamColor = AssetsConfig.palette.shipHull || '#888';\r\n      if (s.team === 'red' && TeamsConfig.teams.red) teamColor = TeamsConfig.teams.red.color;\r\n      else if (s.team === 'blue' && TeamsConfig.teams.blue) teamColor = TeamsConfig.teams.blue.color;\r\n      activeBufferCtx.fillStyle = teamColor;\r\n      if (shape.type === 'circle') {\r\n        activeBufferCtx.beginPath();\r\n        activeBufferCtx.arc(0, 0, (s.radius || 12) * renderScale, 0, Math.PI * 2);\r\n        activeBufferCtx.fill();\r\n      } else if (shape.type === 'polygon') {\r\n        drawPolygon(shape.points as number[][]);\r\n      } else if (shape.type === 'compound') {\r\n        for (const part of shape.parts) {\r\n          if (part.type === 'circle') {\r\n            activeBufferCtx.beginPath();\r\n            activeBufferCtx.arc(0, 0, (part.r || 1) * (s.radius || 12) * renderScale, 0, Math.PI * 2);\r\n            activeBufferCtx.fill();\r\n          } else if (part.type === 'polygon') {\r\n            drawPolygon(part.points as number[][]);\r\n          }\r\n        }\r\n      }\r\n      // Draw all turrets at their configured positions\r\n      if (Array.isArray(s.turrets) && s.turrets.length > 0) {\r\n        for (const turret of s.turrets) {\r\n          if (!turret || !turret.position) continue;\r\n          const turretShape = getTurretAsset(turret.kind || 'basic');\r\n          // Always use latest config radius for turret position and scale\r\n          const shipType = s.type || 'fighter';\r\n          const shipCfg = require('./config/entitiesConfig').getShipConfig()[shipType];\r\n          const configRadius = shipCfg && typeof shipCfg.radius === 'number' ? shipCfg.radius : (s.radius || 12);\r\n          const turretScale = configRadius * renderScale * 0.5;\r\n          // Calculate turret position relative to ship center, rotated by ship angle\r\n          const angle = (s.angle || 0);\r\n          const [tx, ty] = turret.position;\r\n          const turretX = Math.cos(angle) * tx * configRadius - Math.sin(angle) * ty * configRadius;\r\n          const turretY = Math.sin(angle) * tx * configRadius + Math.cos(angle) * ty * configRadius;\r\n          activeBufferCtx.save();\r\n          activeBufferCtx.translate(turretX, turretY);\r\n          activeBufferCtx.rotate(0); // Optionally rotate for turret direction\r\n          activeBufferCtx.fillStyle = AssetsConfig.palette.turret || '#94a3b8';\r\n          if (turretShape.type === 'circle') {\r\n            activeBufferCtx.beginPath();\r\n            activeBufferCtx.arc(0, 0, (turretShape.r || 1) * turretScale, 0, Math.PI * 2);\r\n            activeBufferCtx.fill();\r\n          } else if (turretShape.type === 'polygon') {\r\n            activeBufferCtx.save();\r\n            activeBufferCtx.scale(turretScale, turretScale);\r\n            drawPolygon(turretShape.points as number[][]);\r\n            activeBufferCtx.restore();\r\n          } else if (turretShape.type === 'compound') {\r\n            for (const part of turretShape.parts) {\r\n              if (part.type === 'circle') {\r\n                activeBufferCtx.beginPath();\r\n                activeBufferCtx.arc(0, 0, (part.r || 1) * turretScale, 0, Math.PI * 2);\r\n                activeBufferCtx.fill();\r\n              } else if (part.type === 'polygon') {\r\n                activeBufferCtx.save();\r\n                activeBufferCtx.scale(turretScale, turretScale);\r\n                drawPolygon(part.points as number[][]);\r\n                activeBufferCtx.restore();\r\n              }\r\n            }\r\n          }\r\n          activeBufferCtx.restore();\r\n        }\r\n      }\r\n\r\n      // Draw shield effect (blue ring if shield > 0)\r\n      if (s.shield > 0) {\r\n        if (sx >= 0 && sx < bufferW && sy >= 0 && sy < bufferH) {\r\n          const shAnim = (AssetsConfig as any).animations && (AssetsConfig as any).animations.shieldEffect;\r\n          try {\r\n            if (shAnim) {\r\n              // pulse based on time\r\n              const pulse = (typeof shAnim.pulseRate === 'number') ? (0.5 + 0.5 * Math.sin(now * shAnim.pulseRate)) : 1.0;\r\n              const shieldNorm = Math.max(0, Math.min(1, (s.shield || 0) / (s.maxShield || s.shield || 1)));\r\n              const alphaBase = typeof shAnim.alphaBase === 'number' ? shAnim.alphaBase : (shAnim.alpha || 0.25);\r\n              const alphaScale = typeof shAnim.alphaScale === 'number' ? shAnim.alphaScale : 0.75;\r\n              const alpha = Math.max(0, Math.min(1, alphaBase + alphaScale * pulse * shieldNorm));\r\n              const R = (shAnim.r || 1.2) * (s.radius || 12);\r\n              activeBufferCtx.save();\r\n              activeBufferCtx.globalAlpha = alpha;\r\n              activeBufferCtx.strokeStyle = shAnim.color || '#3ab6ff';\r\n              activeBufferCtx.lineWidth = (shAnim.strokeWidth || 0.08) * (s.radius || 12) * renderScale;\r\n              activeBufferCtx.beginPath();\r\n              activeBufferCtx.arc((s.x || 0) * renderScale, (s.y || 0) * renderScale, Math.max(1, R * renderScale), 0, Math.PI * 2);\r\n              activeBufferCtx.stroke();\r\n              activeBufferCtx.restore();\r\n            } else {\r\n              drawRing(s.x, s.y, (s.radius || 12) * 1.2, '#3ab6ff', 0.5, 3 * renderScale);\r\n            }\r\n          } catch (e) { /* ignore shield draw errors */ }\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n    // Health hits: render freshest per-ship health flash using index (reddish rings)\r\n    try {\r\n      const nowT = (state && state.t) || 0;\r\n      for (const s of state.ships || []) {\r\n        try {\r\n          let flash: any = null;\r\n          const arr = Array.isArray(healthFlashes) ? healthFlashes.filter(f => f.id === s.id) : [];\r\n          let bestTs = -Infinity;\r\n          for (const f of arr) {\r\n            if (!f) continue;\r\n            const fTs = (typeof f._ts === 'number') ? f._ts : 0;\r\n            const fTtl = (typeof f.ttl === 'number') ? f.ttl : 0.4;\r\n            if (fTs + fTtl >= nowT - 1e-6 && fTs > bestTs) { bestTs = fTs; flash = f; }\r\n          }\r\n          if (flash) {\r\n            const ttl = flash.ttl || 0.4; const life = flash.life != null ? flash.life : ttl;\r\n            const t = Math.max(0, Math.min(1, life / ttl));\r\n            const R = 6 + (1 - t) * 18;\r\n            const alpha = 0.9 * t;\r\n            const fx = (flash.x || (s.x || 0)) * renderScale;\r\n            const fy = (flash.y || (s.y || 0)) * renderScale;\r\n            if (fx >= 0 && fx < bufferW && fy >= 0 && fy < bufferH) {\r\n              activeBufferCtx.save();\r\n              activeBufferCtx.globalAlpha = Math.max(0, Math.min(1, alpha));\r\n              activeBufferCtx.strokeStyle = '#ff7766';\r\n              activeBufferCtx.lineWidth = 2 * renderScale;\r\n              activeBufferCtx.beginPath();\r\n              activeBufferCtx.arc(fx, fy, Math.max(1, R * renderScale), 0, Math.PI * 2);\r\n              activeBufferCtx.stroke();\r\n              activeBufferCtx.restore();\r\n            }\r\n          }\r\n        } catch (e) {}\r\n      }\r\n    } catch (e) {}\r\n\r\n    // bullets\r\n    for (const b of state.bullets || []) {\r\n      try {\r\n        const bx = (b.x || 0) * renderScale;\r\n        const by = (b.y || 0) * renderScale;\r\n        if (bx < 0 || bx >= bufferW || by < 0 || by >= bufferH) continue;\r\n        const r = b.radius || b.bulletRadius || 1.5;\r\n        const kind = bulletKindForRadius((r / 6)) as any;\r\n        const shape = getBulletAsset(kind as any);\r\n        activeBufferCtx.save();\r\n        activeBufferCtx.translate(bx, by);\r\n        const px = Math.max(1, r * renderScale);\r\n        activeBufferCtx.fillStyle = AssetsConfig.palette.bullet;\r\n        if (shape.type === 'circle') {\r\n          activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, px, 0, Math.PI * 2); activeBufferCtx.fill();\r\n        } else if (shape.type === 'polygon') {\r\n          drawPolygon(shape.points as number[][]);\r\n        } else if (shape.type === 'compound') {\r\n          for (const part of shape.parts) {\r\n            if (part.type === 'circle') {\r\n              activeBufferCtx.beginPath();\r\n              activeBufferCtx.arc(0, 0, (part.r || 1) * px, 0, Math.PI * 2);\r\n              activeBufferCtx.fill();\r\n            } else if (part.type === 'polygon') {\r\n              drawPolygon(part.points as number[][]);\r\n            }\r\n          }\r\n        }\r\n        activeBufferCtx.restore();\r\n      } catch (e) {}\r\n    }\r\n    // particles\r\n    try {\r\n      const shapes = (AssetsConfig as any).shapes2d || {};\r\n      for (const p of state.particles || []) {\r\n        try {\r\n          const px = (p.x || 0) * renderScale;\r\n          const py = (p.y || 0) * renderScale;\r\n          if (px < 0 || px >= bufferW || py < 0 || py >= bufferH) continue;\r\n          activeBufferCtx.save();\r\n          const shapeName = p.assetShape || (p.r > 0.5 ? 'particleMedium' : 'particleSmall');\r\n          const shape = shapes[shapeName];\r\n          const color = p.color || '#ffdca8';\r\n          activeBufferCtx.fillStyle = color;\r\n          activeBufferCtx.globalAlpha = Math.max(0, Math.min(1, 1 - ((p.age || 0) / (p.lifetime || 1))));\r\n          activeBufferCtx.translate(px, py);\r\n          if (shape) {\r\n            if (shape.type === 'circle') {\r\n              const rr = (shape.r || 0.12) * (p.r || 1) * renderScale * 6; // scale up to canvas pixels\r\n              activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, rr, 0, Math.PI * 2); activeBufferCtx.fill();\r\n            } else if (shape.type === 'polygon') {\r\n              activeBufferCtx.beginPath();\r\n              const pts = shape.points || [];\r\n              if (pts.length) {\r\n                activeBufferCtx.moveTo((pts[0][0] || 0) * renderScale, (pts[0][1] || 0) * renderScale);\r\n                for (let i = 1; i < pts.length; i++) activeBufferCtx.lineTo((pts[i][0] || 0) * renderScale, (pts[i][1] || 0) * renderScale);\r\n                activeBufferCtx.closePath();\r\n                activeBufferCtx.fill();\r\n              }\r\n            } else if (shape.type === 'compound') {\r\n              for (const part of shape.parts || []) {\r\n                if (part.type === 'circle') {\r\n                  const rr = (part.r || 0.12) * (p.r || 1) * renderScale * 6;\r\n                  activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, rr, 0, Math.PI * 2); activeBufferCtx.fill();\r\n                } else if (part.type === 'polygon') {\r\n                  // draw polygon part\r\n                  activeBufferCtx.beginPath();\r\n                  const pts = part.points || [];\r\n                  if (pts.length) {\r\n                    activeBufferCtx.moveTo((pts[0][0] || 0) * renderScale, (pts[0][1] || 0) * renderScale);\r\n                    for (let i = 1; i < pts.length; i++) activeBufferCtx.lineTo((pts[i][0] || 0) * renderScale, (pts[i][1] || 0) * renderScale);\r\n                    activeBufferCtx.closePath();\r\n                    activeBufferCtx.fill();\r\n                  }\r\n                }\r\n              }\r\n            } else {\r\n              // fallback to simple circle\r\n              activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, (p.r || 2) * renderScale, 0, Math.PI * 2); activeBufferCtx.fill();\r\n            }\r\n          } else {\r\n            // fallback\r\n            activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, (p.r || 2) * renderScale, 0, Math.PI * 2); activeBufferCtx.fill();\r\n          }\r\n          activeBufferCtx.restore();\r\n        } catch (e) {}\r\n      }\r\n    } catch (e) { /* ignore particle render errors */ }\r\n\r\n    // Explosions (flashes) use explosionParticle if available\r\n    try {\r\n      const expShape = (AssetsConfig as any).shapes2d && (AssetsConfig as any).shapes2d.explosionParticle;\r\n      for (const ex of state.explosions || []) {\r\n        try {\r\n          const exx = (ex.x || 0) * renderScale;\r\n          const exy = (ex.y || 0) * renderScale;\r\n          const life = ex.life || 0.5; const ttl = ex.ttl || 0.5; const t = Math.max(0, Math.min(1, life / ttl));\r\n          const alpha = (1 - t) * 0.9;\r\n          activeBufferCtx.save();\r\n          activeBufferCtx.globalAlpha = alpha;\r\n          activeBufferCtx.translate(exx, exy);\r\n          activeBufferCtx.fillStyle = ex.color || '#ffd089';\r\n          if (expShape && expShape.type === 'circle') {\r\n            const rr = (expShape.r || 0.32) * (ex.scale || 1) * renderScale * 6;\r\n            activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, rr * (1 + (1 - t)), 0, Math.PI * 2); activeBufferCtx.fill();\r\n          } else {\r\n            activeBufferCtx.beginPath(); activeBufferCtx.arc(0, 0, Math.max(2, (ex.scale || 1) * 12 * (1 - t)), 0, Math.PI * 2); activeBufferCtx.fill();\r\n          }\r\n          activeBufferCtx.restore();\r\n        } catch (e) {}\r\n      }\r\n    } catch (e) {}\r\n\r\n    // --- Copy bufferCanvas to main canvas, scaling to fit window ---\r\n    // Only copy after all drawing is finished\r\n    ctx.save();\r\n    ctx.setTransform(1, 0, 0, 1, 0, 0); // Reset transform for drawImage\r\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    ctx.imageSmoothingEnabled = false;\r\n      // Copy buffer to canvas at 1:1 scaling; let CSS handle visual scaling if needed\r\n      ctx.drawImage(\r\n        this.bufferCanvas,\r\n        0, 0, this.bufferCanvas.width, this.bufferCanvas.height,\r\n        0, 0,\r\n        this.canvas.width,\r\n        this.canvas.height\r\n      );\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nexport default CanvasRenderer;\r\n", "import { DISPLAY_DEFAULTS } from './displayConfig';\r\n\r\nexport const RendererConfig = {\r\n  preferred: 'canvas' as 'canvas' | 'webgl',\r\n  allowUrlOverride: true,\r\n  allowWebGL: true,\r\n  renderScale: DISPLAY_DEFAULTS.renderScale,\r\n  displayScale: DISPLAY_DEFAULTS.displayScale,\r\n  dynamicScaleEnabled: false,\r\n  lastFrameTime: 0,\r\n  frameScore: 'green', // green, yellow, red\r\n  // UI overlays configuration\r\n  hpBar: DISPLAY_DEFAULTS.hpBar,\r\n};\r\n\r\nexport function getPreferredRenderer(): 'canvas' | 'webgl' {\r\n  try {\r\n    if (RendererConfig.allowUrlOverride && typeof window !== 'undefined' && window.location && window.location.search) {\r\n      const p = new URLSearchParams(window.location.search);\r\n      const r = p.get('renderer');\r\n      if (r === 'canvas' || r === 'webgl') return r;\r\n    }\r\n  } catch (e) {}\r\n  return RendererConfig.preferred;\r\n}\r\n\r\nexport default RendererConfig;\r\n", "// src/webglrenderer.ts - Minimal WebGL renderer stub ported from webglRenderer.js\r\n// Provides a typed, minimal WebGL renderer so the rest of the app can opt-in.\r\n\r\nimport { AssetsConfig, getShipAsset, getTurretAsset, getVisualConfig } from './config/assets/assetsConfig';\r\nimport { TeamsConfig } from './config/teamsConfig';\r\nimport { shieldFlashes, healthFlashes } from './gamemanager';\r\nimport { getDefaultShipType } from './config/entitiesConfig';\r\nimport { RendererConfig } from './config/rendererConfig';\r\n\r\nexport class WebGLRenderer {\r\n  // Fullscreen quad shader for blitting FBO to main canvas\r\n  private quadProg: WebGLProgram | null = null;\r\n  private quadVBO: WebGLBuffer | null = null;\r\n  private quadLoc_pos: number = -1;\r\n  private quadLoc_tex: WebGLUniformLocation | null = null;\r\n  // Offscreen framebuffer and texture for buffer rendering\r\n  private fbo: WebGLFramebuffer | null = null;\r\n  private fboTexture: WebGLTexture | null = null;\r\n  private _fboWidth: number = 0;\r\n  private _fboHeight: number = 0;\r\n\r\n  // Public accessors for tests/consumers (read-only)\r\n  public get fboWidth(): number { return this._fboWidth; }\r\n  public get fboHeight(): number { return this._fboHeight; }\r\n  canvas: HTMLCanvasElement;\r\n  gl: WebGL2RenderingContext | WebGLRenderingContext | null = null;\r\n  // simple GL program state for point rendering\r\n  private prog: WebGLProgram | null = null;\r\n  private attribLoc_pos: number = -1;\r\n  private attribLoc_size: number = -1;\r\n  private attribLoc_color: number = -1;\r\n  private vertexBuffer: WebGLBuffer | null = null;\r\n  providesOwnLoop = false;\r\n  type = 'webgl';\r\n  pixelRatio = 1;\r\n  // textured quad shader for rendering baked asset textures\r\n  private texProg: WebGLProgram | null = null;\r\n  private texVBO: WebGLBuffer | null = null;\r\n  private texAttrib_pos: number = -1;\r\n  private texAttrib_uv: number = -1;\r\n  private texLoc_tex: WebGLUniformLocation | null = null;\r\n  // map of shape keys to GL textures\r\n  private shapeTextures: Record<string, WebGLTexture | null> = {};\r\n  private shapeCanvasSize: number = 64;\r\n\r\n  // Public helpers to inspect the baked texture cache in tests or callers\r\n  public hasCachedTexture(key: string): boolean {\r\n    return !!this.shapeTextures[key];\r\n  }\r\n\r\n  public getCachedTexture(key: string): WebGLTexture | null {\r\n    return this.shapeTextures[key] || null;\r\n  }\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.canvas = canvas;\r\n  // FBO will be created in init or on first render\r\n  }\r\n\r\n  init(): boolean {\r\n      // Create fullscreen quad shader for blitting FBO\r\n      try {\r\n        const gl = this.gl as WebGLRenderingContext;\r\n        const vsQuad = `attribute vec2 a_pos; varying vec2 v_tex; void main(){ v_tex = (a_pos+1.0)*0.5; gl_Position = vec4(a_pos,0,1); }`;\r\n        const fsQuad = `precision mediump float; varying vec2 v_tex; uniform sampler2D u_tex; void main(){ gl_FragColor = texture2D(u_tex, v_tex); }`;\r\n        const compile = (src: string, type: number) => { const s = gl.createShader(type as any)!; gl.shaderSource(s, src); gl.compileShader(s); if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) { const info = gl.getShaderInfoLog(s); gl.deleteShader(s); throw new Error('Shader compile error: ' + info); } return s; };\r\n        const vsObj = compile(vsQuad, gl.VERTEX_SHADER);\r\n        const fsObj = compile(fsQuad, gl.FRAGMENT_SHADER);\r\n        const prog = gl.createProgram()!;\r\n        gl.attachShader(prog, vsObj); gl.attachShader(prog, fsObj); gl.linkProgram(prog);\r\n        if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) { throw new Error('Program link error: ' + gl.getProgramInfoLog(prog)); }\r\n        this.quadProg = prog;\r\n        this.quadLoc_pos = gl.getAttribLocation(prog, 'a_pos');\r\n        this.quadLoc_tex = gl.getUniformLocation(prog, 'u_tex');\r\n        // Create VBO for fullscreen quad\r\n        this.quadVBO = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVBO);\r\n        // Vertices: two triangles covering clip space\r\n        const quadVerts = new Float32Array([\r\n          -1, -1,  1, -1,  -1, 1,\r\n           1, -1,  1, 1,  -1, 1\r\n        ]);\r\n        gl.bufferData(gl.ARRAY_BUFFER, quadVerts, gl.STATIC_DRAW);\r\n      } catch (e) { this.quadProg = null; }\r\n    // Create textured-quad shader for drawing baked asset textures\r\n    try {\r\n      const gl = this.gl as WebGLRenderingContext;\r\n      const vs = `attribute vec2 a_pos; attribute vec2 a_uv; varying vec2 v_uv; void main(){ v_uv = a_uv; gl_Position = vec4(a_pos, 0.0, 1.0); }`;\r\n      const fs = `precision mediump float; varying vec2 v_uv; uniform sampler2D u_tex; void main(){ gl_FragColor = texture2D(u_tex, v_uv); }`;\r\n      const compile = (src: string, type: number) => { const s = gl.createShader(type as any)!; gl.shaderSource(s, src); gl.compileShader(s); if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) { const info = gl.getShaderInfoLog(s); gl.deleteShader(s); throw new Error('Shader compile error: ' + info); } return s; };\r\n      const vsObj = compile(vs, gl.VERTEX_SHADER);\r\n      const fsObj = compile(fs, gl.FRAGMENT_SHADER);\r\n      const prog = gl.createProgram()!;\r\n      gl.attachShader(prog, vsObj); gl.attachShader(prog, fsObj); gl.linkProgram(prog);\r\n      if (gl.getProgramParameter(prog, gl.LINK_STATUS)) {\r\n        this.texProg = prog;\r\n        this.texAttrib_pos = gl.getAttribLocation(prog, 'a_pos');\r\n        this.texAttrib_uv = gl.getAttribLocation(prog, 'a_uv');\r\n        this.texLoc_tex = gl.getUniformLocation(prog, 'u_tex');\r\n        this.texVBO = gl.createBuffer();\r\n      } else {\r\n        this.texProg = null;\r\n      }\r\n    } catch (e) { this.texProg = null; }\r\n    try {\r\n      // Prefer WebGL2, fall back to WebGL1\r\n      this.gl = this.canvas.getContext('webgl2') as WebGL2RenderingContext | null;\r\n      if (!this.gl) {\r\n        this.gl = (this.canvas.getContext('webgl') || this.canvas.getContext('experimental-webgl')) as WebGLRenderingContext | null;\r\n        if (!this.gl) return false;\r\n      }\r\n      const gl = this.gl as WebGLRenderingContext;\r\n      // Create offscreen framebuffer and texture at logical size \u00D7 renderer scale\r\n  const LOGICAL_W = 1920, LOGICAL_H = 1080;\r\n  const renderScale = (RendererConfig && typeof (RendererConfig.renderScale) === 'number') ? RendererConfig.renderScale : 1;\r\n  const bufferW = Math.round(LOGICAL_W * renderScale);\r\n  const bufferH = Math.round(LOGICAL_H * renderScale);\r\n      // Create texture for FBO\r\n      this.fboTexture = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, this.fboTexture);\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, bufferW, bufferH, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      // Create framebuffer\r\n      this.fbo = gl.createFramebuffer();\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.fboTexture, 0);\r\n  this._fboWidth = bufferW;\r\n  this._fboHeight = bufferH;\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      // set background from Assets palette.background when possible\r\n      try {\r\n        const bg = ((AssetsConfig.palette as any).background || '#0b1220').replace('#','');\r\n        const bigint = parseInt(bg.length===3? bg.split('').map((c:string)=>c+c).join(''): bg,16);\r\n        const r = ((bigint >> 16) & 255)/255; const g = ((bigint >> 8) & 255)/255; const b = (bigint & 255)/255;\r\n        gl.clearColor(r, g, b, 1.0);\r\n      } catch { gl.clearColor(0.02, 0.03, 0.06, 1.0); }\r\n      // enable alpha blending for overlays\r\n      try { gl.enable(gl.BLEND); gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA); } catch (e) {}\r\n      // compute pixelRatio to map logical (CSS) pixels to backing-store pixels\r\n      try {\r\n        const cssW = this.canvas.clientWidth || this.canvas.width || 1;\r\n        this.pixelRatio = (this.canvas.width || cssW) / cssW;\r\n      } catch (e) { this.pixelRatio = 1; }\r\n\r\n      // prepare a tiny GL program for drawing colored points representing ships\r\n      try {\r\n        const vs = `attribute vec2 a_pos; attribute float a_size; attribute vec4 a_color; varying vec4 v_color; void main(){ v_color=a_color; gl_Position = vec4(a_pos, 0.0, 1.0); gl_PointSize = a_size; }`;\r\n        const fs = `precision mediump float; varying vec4 v_color; void main(){ vec2 c = gl_PointCoord - vec2(0.5); if(length(c) > 0.5) discard; gl_FragColor = v_color; }`;\r\n        const compile = (src: string, type: number) => { const s = gl.createShader(type as any)!; gl.shaderSource(s, src); gl.compileShader(s); if (!gl.getShaderParameter(s, gl.COMPILE_STATUS)) { const info = gl.getShaderInfoLog(s); gl.deleteShader(s); throw new Error('Shader compile error: ' + info); } return s; };\r\n        const vsObj = compile(vs, gl.VERTEX_SHADER);\r\n        const fsObj = compile(fs, gl.FRAGMENT_SHADER);\r\n        const prog = gl.createProgram()!;\r\n        gl.attachShader(prog, vsObj); gl.attachShader(prog, fsObj); gl.linkProgram(prog);\r\n        if (!gl.getProgramParameter(prog, gl.LINK_STATUS)) { throw new Error('Program link error: ' + gl.getProgramInfoLog(prog)); }\r\n        this.prog = prog;\r\n        this.attribLoc_pos = gl.getAttribLocation(prog, 'a_pos');\r\n        this.attribLoc_size = gl.getAttribLocation(prog, 'a_size');\r\n        this.attribLoc_color = gl.getAttribLocation(prog, 'a_color');\r\n        this.vertexBuffer = gl.createBuffer();\r\n      } catch (e) {\r\n        // leave program null if shader compilation fails (fallback to minimal clear)\r\n        this.prog = null;\r\n      }\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Called when backing-store size (canvas.width/height) changes so\r\n  // the renderer can update internal scaling/viewport without a full re-init.\r\n  updateScale(): void {\r\n    if (!this.gl) return;\r\n    try {\r\n      const cssW = this.canvas.clientWidth || Math.round((this.canvas.width || 1) / (this.pixelRatio || 1));\r\n      this.pixelRatio = (this.canvas.width || cssW) / Math.max(1, cssW);\r\n      // set viewport in logical/backing pixels on next render\r\n      // TODO: Resize FBO if needed\r\n    } catch (e) { /* ignore */ }\r\n  }\r\n\r\n  isRunning(): boolean { return false; }\r\n\r\n  renderState(state: any, interpolation = 0): void {\r\n    // --- Ensure FBO is always resized to 1920x1080 \u00D7 renderScale before any drawing ---\r\n    if (!this.gl) return;\r\n    const gl = this.gl as WebGLRenderingContext;\r\n  const LOGICAL_W = 1920, LOGICAL_H = 1080;\r\n  const renderScale = (RendererConfig && typeof (RendererConfig.renderScale) === 'number') ? RendererConfig.renderScale : 1;\r\n  const bufferW = Math.round(LOGICAL_W * renderScale);\r\n  const bufferH = Math.round(LOGICAL_H * renderScale);\r\n  // If FBO size changed, recreate FBO and texture\r\n  if (this.fboWidth !== bufferW || this.fboHeight !== bufferH) {\r\n      // Delete old FBO/texture if present\r\n      if (this.fboTexture) gl.deleteTexture(this.fboTexture);\r\n      if (this.fbo) gl.deleteFramebuffer(this.fbo);\r\n      // Create new texture for FBO\r\n      this.fboTexture = gl.createTexture();\r\n      gl.bindTexture(gl.TEXTURE_2D, this.fboTexture);\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, bufferW, bufferH, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      // Create new framebuffer\r\n      this.fbo = gl.createFramebuffer();\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.fboTexture, 0);\r\n  this._fboWidth = bufferW;\r\n  this._fboHeight = bufferH;\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    }\r\n    // --- Render simulation to offscreen framebuffer ---\r\n    if (this.fbo && this.fboTexture) {\r\n  gl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\r\n  gl.viewport(0, 0, bufferW, bufferH);\r\n  gl.clear(gl.COLOR_BUFFER_BIT);\r\n        // If we have a simple GL program, draw ships as round points with simple overlays\r\n        if (this.prog && this.vertexBuffer) {\r\n          try {\r\n            // ...existing vertex packing and draw logic, but use fboWidth/fboHeight for logical size...\r\n            const w = bufferW;\r\n            const h = bufferH;\r\n            const ships = state.ships || [];\r\n            const verts: number[] = [];\r\n            const now = (state && state.t) || 0;\r\n            for (const s of ships) {\r\n              const x = (s.x || 0);\r\n              const y = (s.y || 0);\r\n              const clipX = (x / Math.max(1, LOGICAL_W)) * 2 - 1;\r\n              const clipY = 1 - (y / Math.max(1, LOGICAL_H)) * 2;\r\n              const radius = s.radius || 6;\r\n              const ps = Math.max(2, radius * 2);\r\n              const teamObj = (s.team === 'blue') ? TeamsConfig.teams.blue : TeamsConfig.teams.red;\r\n              const colorHex = (teamObj && teamObj.color) || AssetsConfig.palette.shipHull || '#888';\r\n              const hexToRgba = (hex: string) => {\r\n                const h = hex.replace('#',''); const bigint = parseInt(h.length===3? h.split('').map(c=>c+c).join(''): h,16);\r\n                const r = ((bigint >> 16) & 255)/255; const g = ((bigint >> 8) & 255)/255; const b = (bigint & 255)/255; return [r,g,b,1];\r\n              };\r\n              const baseColor = hexToRgba(colorHex);\r\n\r\n              // Try to draw a baked asset texture for the ship if available\r\n              try {\r\n                const shipAssetKey = (s.type || getDefaultShipType());\r\n                const shipTex = this.bakeShapeToTexture(shipAssetKey);\r\n                if (shipTex && this.texProg) {\r\n                  // compute quad size in clip-space\r\n                  const quadW = (radius * 2) / Math.max(1, w) * 2; // map px->clip\r\n                  const quadH = (radius * 2) / Math.max(1, h) * 2;\r\n                  this.drawTexturedQuad(shipTex, clipX, clipY, quadW, quadH);\r\n                  // continue to next ship (skip point draw)\r\n                  continue;\r\n                }\r\n              } catch (e) {}\r\n\r\n              // Ship hull (fallback to point draw)\r\n              verts.push(clipX, clipY, ps, baseColor[0], baseColor[1], baseColor[2], baseColor[3]);\r\n\r\n              // Engine trail (simple: draw faded points for trail)\r\n              if (Array.isArray(s.trail)) {\r\n                for (let i = 0; i < s.trail.length; i++) {\r\n                  const tx = s.trail[i].x || 0;\r\n                  const ty = s.trail[i].y || 0;\r\n                  const tClipX = (tx / Math.max(1, LOGICAL_W)) * 2 - 1;\r\n                  const tClipY = 1 - (ty / Math.max(1, LOGICAL_H)) * 2;\r\n                  const tAlpha = 0.2 + 0.5 * (i / s.trail.length);\r\n                  verts.push(tClipX, tClipY, Math.max(2, radius), 0.7, 0.7, 1.0, tAlpha);\r\n                }\r\n              }\r\n\r\n              // Shield effect (draw a blue ring if shield is up). Prefer shaderless textured ring if available\r\n              if (s.shield > 0) {\r\n                try {\r\n                  const shKey = 'shieldRing';\r\n                  const shTex = this.bakeShapeToTexture(shKey);\r\n                  if (shTex && this.texProg) {\r\n                    const quadW = (radius * 2.4) / Math.max(1, w) * 2;\r\n                    const quadH = (radius * 2.4) / Math.max(1, h) * 2;\r\n                    this.drawTexturedQuad(shTex, clipX, clipY, quadW, quadH);\r\n                  } else {\r\n                    verts.push(clipX, clipY, ps * 1.2, 0.3, 0.7, 1.0, 0.5);\r\n                  }\r\n                } catch (e) { verts.push(clipX, clipY, ps * 1.2, 0.3, 0.7, 1.0, 0.5); }\r\n              }\r\n\r\n              // Health/damage flash (draw a reddish ring if recent damage)\r\n              if (Array.isArray(healthFlashes)) {\r\n                const flash = healthFlashes.find(f => f.id === s.id);\r\n                if (flash && flash.ttl > 0) {\r\n                  verts.push(clipX, clipY, ps * 1.3, 1.0, 0.3, 0.3, 0.7);\r\n                }\r\n              }\r\n            }\r\n            // upload buffer and draw\r\n            const floatArr = new Float32Array(verts);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, floatArr, gl.DYNAMIC_DRAW);\r\n            gl.useProgram(this.prog as WebGLProgram);\r\n            const stride = 7 * 4; // 7 floats per vertex\r\n            gl.enableVertexAttribArray(this.attribLoc_pos);\r\n            gl.vertexAttribPointer(this.attribLoc_pos, 2, gl.FLOAT, false, stride, 0);\r\n            gl.enableVertexAttribArray(this.attribLoc_size);\r\n            gl.vertexAttribPointer(this.attribLoc_size, 1, gl.FLOAT, false, stride, 2 * 4);\r\n            gl.enableVertexAttribArray(this.attribLoc_color);\r\n            gl.vertexAttribPointer(this.attribLoc_color, 4, gl.FLOAT, false, stride, 3 * 4);\r\n            const count = Math.floor(floatArr.length / 7);\r\n            gl.drawArrays(gl.POINTS, 0, count);\r\n          } catch (e) {}\r\n        }\r\n      \r\n      // Draw bullets using baked textures if available\r\n      try {\r\n        const shapes = (AssetsConfig as any).shapes2d || {};\r\n        for (const b of state.bullets || []) {\r\n          try {\r\n            const bx = (b.x || 0);\r\n            const by = (b.y || 0);\r\n            const clipX = (bx / Math.max(1, LOGICAL_W)) * 2 - 1;\r\n            const clipY = 1 - (by / Math.max(1, LOGICAL_H)) * 2;\r\n            const r = b.radius || b.bulletRadius || 1.5;\r\n            const kind = b.kind || 'bullet';\r\n            const assetKey = `bullet_${kind}`;\r\n            const tex = this.bakeShapeToTexture(assetKey) || this.bakeShapeToTexture('bullet') || this.bakeShapeToTexture('particleSmall');\r\n            if (tex && this.texProg) {\r\n              const quadW = (r * 2) / Math.max(1, this.fboWidth) * 2;\r\n              const quadH = (r * 2) / Math.max(1, this.fboHeight) * 2;\r\n              this.drawTexturedQuad(tex, clipX, clipY, quadW, quadH);\r\n              continue;\r\n            }\r\n            // fallback: draw as point\r\n            // reuse vertex buffer path by pushing temporary verts\r\n            const clipSize = Math.max(1, r * 2);\r\n            const color = (AssetsConfig.palette && AssetsConfig.palette.bullet) || '#fff';\r\n            const hexToRgba = (hex: string) => { const h = hex.replace('#',''); const bigint = parseInt(h.length===3? h.split('').map(c=>c+c).join(''): h,16); const rr = ((bigint >> 16) & 255)/255; const gg = ((bigint >> 8) & 255)/255; const bcol = (bigint & 255)/255; return [rr,gg,bcol,1]; };\r\n            // pack into immediate draw via prog path: push 1 vertex and draw\r\n            const floatArr = new Float32Array([clipX, clipY, clipSize, 1,1,1,1]);\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, floatArr, gl.DYNAMIC_DRAW);\r\n            gl.useProgram(this.prog as WebGLProgram);\r\n            const stride = 7 * 4;\r\n            gl.enableVertexAttribArray(this.attribLoc_pos);\r\n            gl.vertexAttribPointer(this.attribLoc_pos, 2, gl.FLOAT, false, stride, 0);\r\n            gl.enableVertexAttribArray(this.attribLoc_size);\r\n            gl.vertexAttribPointer(this.attribLoc_size, 1, gl.FLOAT, false, stride, 2 * 4);\r\n            gl.enableVertexAttribArray(this.attribLoc_color);\r\n            gl.vertexAttribPointer(this.attribLoc_color, 4, gl.FLOAT, false, stride, 3 * 4);\r\n            gl.drawArrays(gl.POINTS, 0, 1);\r\n          } catch (e) {}\r\n        }\r\n      } catch (e) {}\r\n\r\n      // Draw particles and explosions from state using baked textures if possible\r\n      try {\r\n        for (const p of state.particles || []) {\r\n          try {\r\n            const px = (p.x || 0); const py = (p.y || 0);\r\n            const clipX = (px / Math.max(1, LOGICAL_W)) * 2 - 1;\r\n            const clipY = 1 - (py / Math.max(1, LOGICAL_H)) * 2;\r\n            const size = (p.r || 2);\r\n            const shapeKey = p.assetShape || (p.r > 0.5 ? 'particleMedium' : 'particleSmall');\r\n            const tex = this.bakeShapeToTexture(shapeKey) || this.bakeShapeToTexture('particleSmall');\r\n            if (tex && this.texProg) {\r\n              const quadW = (size * 2) / Math.max(1, this.fboWidth) * 2;\r\n              const quadH = (size * 2) / Math.max(1, this.fboHeight) * 2;\r\n              this.drawTexturedQuad(tex, clipX, clipY, quadW, quadH);\r\n            }\r\n          } catch (e) {}\r\n        }\r\n      } catch (e) {}\r\n\r\n      try {\r\n        for (const ex of state.explosions || []) {\r\n          try {\r\n            const exx = (ex.x || 0); const exy = (ex.y || 0);\r\n            const clipX = (exx / Math.max(1, LOGICAL_W)) * 2 - 1;\r\n            const clipY = 1 - (exy / Math.max(1, LOGICAL_H)) * 2;\r\n            const tex = this.bakeShapeToTexture('explosionParticle') || null;\r\n            const s = ex.scale || 1;\r\n            if (tex && this.texProg) {\r\n              const wq = (12 * s) / Math.max(1, this.fboWidth) * 2; const hq = (12 * s) / Math.max(1, this.fboHeight) * 2;\r\n              this.drawTexturedQuad(tex, clipX, clipY, wq, hq);\r\n            } else {\r\n              // fallback: very simple gl point\r\n              const floatArr = new Float32Array([clipX, clipY, Math.max(2, 12*s), 1,1,0.8,1]);\r\n              gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\r\n              gl.bufferData(gl.ARRAY_BUFFER, floatArr, gl.DYNAMIC_DRAW);\r\n              gl.useProgram(this.prog as WebGLProgram);\r\n              const stride = 7 * 4;\r\n              gl.enableVertexAttribArray(this.attribLoc_pos);\r\n              gl.vertexAttribPointer(this.attribLoc_pos, 2, gl.FLOAT, false, stride, 0);\r\n              gl.enableVertexAttribArray(this.attribLoc_size);\r\n              gl.vertexAttribPointer(this.attribLoc_size, 1, gl.FLOAT, false, stride, 2 * 4);\r\n              gl.enableVertexAttribArray(this.attribLoc_color);\r\n              gl.vertexAttribPointer(this.attribLoc_color, 4, gl.FLOAT, false, stride, 3 * 4);\r\n              gl.drawArrays(gl.POINTS, 0, 1);\r\n            }\r\n          } catch (e) {}\r\n        }\r\n      } catch (e) {}\r\n    }\r\n    // --- Blit/copy FBO to main canvas with fit-to-window scaling ---\r\n    if (this.fboTexture && this.quadProg && this.quadVBO && this.gl) {\r\n      const displayScale = (RendererConfig && typeof (RendererConfig.displayScale) === 'number') ? RendererConfig.displayScale : 1;\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n      // Set viewport to canvas size, scaled by displayScale\r\n      gl.viewport(0, 0, Math.round(this.canvas.width * displayScale), Math.round(this.canvas.height * displayScale));\r\n      gl.clear(gl.COLOR_BUFFER_BIT);\r\n      gl.useProgram(this.quadProg);\r\n      gl.activeTexture(gl.TEXTURE0);\r\n      gl.bindTexture(gl.TEXTURE_2D, this.fboTexture);\r\n      if (this.quadLoc_tex) gl.uniform1i(this.quadLoc_tex, 0);\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.quadVBO);\r\n      gl.enableVertexAttribArray(this.quadLoc_pos);\r\n      gl.vertexAttribPointer(this.quadLoc_pos, 2, gl.FLOAT, false, 0, 0);\r\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n      gl.disableVertexAttribArray(this.quadLoc_pos);\r\n    }\r\n    // --- End simulation rendering and buffer copy ---\r\n    // No redundant resizing or copying; buffer is always correct size before drawing, and copy happens once after drawing.\r\n    // Swallow outer render errors\r\n    try {} catch (e) {}\r\n  }\r\n\r\n  // Bake a 2D asset shape into a canvas and upload to a GL texture (cached)\r\n  private bakeShapeToTexture(key: string): WebGLTexture | null {\r\n    if (!this.gl) return null;\r\n    if (this.shapeTextures[key]) return this.shapeTextures[key];\r\n    try {\r\n      const gl = this.gl as WebGLRenderingContext;\r\n      const shapes = (AssetsConfig as any).shapes2d || {};\r\n      const shape = shapes[key];\r\n      const size = this.shapeCanvasSize;\r\n      const cvs = document.createElement('canvas'); cvs.width = size; cvs.height = size;\r\n      const ctx2 = cvs.getContext('2d')!;\r\n      ctx2.clearRect(0,0,size,size);\r\n      // draw centered at size/2, size/2 with scale\r\n      ctx2.translate(size/2, size/2);\r\n      const scale = size/4; // heuristic: asset units map to scale\r\n      ctx2.fillStyle = (AssetsConfig.palette && (AssetsConfig.palette.shipHull)) || '#eee';\r\n      if (!shape) {\r\n        // fallback circle\r\n        ctx2.beginPath(); ctx2.arc(0,0,Math.max(4,size*0.12),0,Math.PI*2); ctx2.fill();\r\n      } else if (shape.type === 'circle') {\r\n        ctx2.beginPath(); ctx2.arc(0,0,(shape.r || 0.5)*scale,0,Math.PI*2); ctx2.fill();\r\n      } else if (shape.type === 'polygon') {\r\n        const pts = shape.points || [] as number[][];\r\n        if (pts.length) {\r\n          ctx2.beginPath(); ctx2.moveTo((pts[0][0]||0)*scale,(pts[0][1]||0)*scale);\r\n          for (let i=1;i<pts.length;i++) ctx2.lineTo((pts[i][0]||0)*scale,(pts[i][1]||0)*scale);\r\n          ctx2.closePath(); ctx2.fill();\r\n        }\r\n      } else if (shape.type === 'compound') {\r\n        for (const part of shape.parts || []) {\r\n          if (part.type === 'circle') { ctx2.beginPath(); ctx2.arc(0,0,(part.r||0.5)*scale,0,Math.PI*2); ctx2.fill(); }\r\n          else if (part.type === 'polygon') { const pts = part.points || []; if (pts.length) { ctx2.beginPath(); ctx2.moveTo((pts[0][0]||0)*scale,(pts[0][1]||0)*scale); for (let i=1;i<pts.length;i++) ctx2.lineTo((pts[i][0]||0)*scale,(pts[i][1]||0)*scale); ctx2.closePath(); ctx2.fill(); } }\r\n        }\r\n      }\r\n      // upload to GL texture\r\n      const tex = gl.createTexture(); gl.bindTexture(gl.TEXTURE_2D, tex);\r\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, 0);\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, cvs);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n      this.shapeTextures[key] = tex;\r\n      return tex;\r\n    } catch (e) { return null; }\r\n  }\r\n\r\n  // Draw a textured quad at clip-space coordinates [-1..1] using the baked texture\r\n  private drawTexturedQuad(tex: WebGLTexture | null, clipX: number, clipY: number, clipW: number, clipH: number) {\r\n    if (!this.gl || !this.texProg || !tex) return;\r\n    try {\r\n      const gl = this.gl as WebGLRenderingContext;\r\n      gl.useProgram(this.texProg as WebGLProgram);\r\n      gl.activeTexture(gl.TEXTURE0); gl.bindTexture(gl.TEXTURE_2D, tex);\r\n      if (this.texLoc_tex) gl.uniform1i(this.texLoc_tex, 0);\r\n      // Build two-triangle VBO with pos/uv\r\n      const x1 = clipX - clipW/2; const x2 = clipX + clipW/2;\r\n      const y1 = clipY - clipH/2; const y2 = clipY + clipH/2;\r\n      // vertex format: posX,posY, u,v\r\n      const verts = new Float32Array([\r\n        x1,y1, 0,0,\r\n        x2,y1, 1,0,\r\n        x1,y2, 0,1,\r\n        x2,y1, 1,0,\r\n        x2,y2, 1,1,\r\n        x1,y2, 0,1\r\n      ]);\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, this.texVBO);\r\n      gl.bufferData(gl.ARRAY_BUFFER, verts, gl.DYNAMIC_DRAW);\r\n      const stride = 4 * 4; // 4 floats per vertex\r\n      gl.enableVertexAttribArray(this.texAttrib_pos);\r\n      gl.vertexAttribPointer(this.texAttrib_pos, 2, gl.FLOAT, false, stride, 0);\r\n      gl.enableVertexAttribArray(this.texAttrib_uv);\r\n      gl.vertexAttribPointer(this.texAttrib_uv, 2, gl.FLOAT, false, stride, 2 * 4);\r\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n      gl.disableVertexAttribArray(this.texAttrib_pos);\r\n      gl.disableVertexAttribArray(this.texAttrib_uv);\r\n    } catch (e) {}\r\n  }\r\n}\r\n", "// This allows the build to treat the app as TypeScript while we incrementally port internals.\r\n// main.ts \u2014 TypeScript entrypoint (ported from main.js). Uses TS imports so\r\n// the module graph resolves to .ts sources during migration.\r\nimport { createGameManager } from './gamemanager';\r\n// This allows the build to treat the app as TypeScript while we incrementally port internals.\r\n// main.ts \u2014 TypeScript entrypoint (ported from main.js). Uses TS imports so\r\n// the module graph resolves to .ts sources during migration.\r\nimport { CanvasRenderer } from './canvasrenderer';\r\nimport { WebGLRenderer } from './webglrenderer';\r\nimport { getDefaultBounds } from './config/displayConfig';\r\nimport { SIM } from './config/simConfig';\r\nimport { getPreferredRenderer, RendererConfig } from './config/rendererConfig';\r\n\r\n// Allow temporary extension of window.gm used by the app during migration.\r\ndeclare global {\r\n\tinterface Window { gm?: any; }\r\n}\r\n\r\nexport async function startApp(rootDocument: Document = document) {\r\n\tconst canvas = rootDocument.getElementById('world') as HTMLCanvasElement;\r\n\tconst ui: any = {\r\n\t\tstartPause: rootDocument.getElementById('startPause'),\r\n\t\treset: rootDocument.getElementById('reset'),\r\n\t\taddRed: rootDocument.getElementById('addRed'),\r\n\t\taddBlue: rootDocument.getElementById('addBlue'),\r\n\t\ttoggleTrails: rootDocument.getElementById('toggleTrails'),\r\n\t\tspeed: rootDocument.getElementById('speed'),\r\n\t\tredScore: rootDocument.getElementById('redScore'),\r\n\t\tblueScore: rootDocument.getElementById('blueScore'),\r\n\t\tstats: rootDocument.getElementById('stats'),\r\n\t\tcontinuousCheckbox: rootDocument.getElementById('continuousCheckbox'),\r\n\t\tseedBtn: rootDocument.getElementById('seedBtn'),\r\n\t\tformationBtn: rootDocument.getElementById('formationBtn'),\r\n\t};\r\n\r\n\ttry { if (ui.stats) ui.stats.textContent = 'Ships: 0 (R:0 B:0) Bullets: 0'; } catch (e) {}\r\n\r\n\t// Always use fixed logical bounds for simulation/game loop\r\n\tconst LOGICAL_BOUNDS = getDefaultBounds();\r\n\t// Only update backing store when renderScale changes\r\n\tfunction updateCanvasBackingStore() {\r\n\t\tconst dpr = window.devicePixelRatio || 1;\r\n\t\tconst renderScale = (RendererConfig && typeof (RendererConfig as any).renderScale === 'number') ? (RendererConfig as any).renderScale : 1;\r\n\t\tconst logicalW = LOGICAL_BOUNDS.W;\r\n\t\tconst logicalH = LOGICAL_BOUNDS.H;\r\n\t\tif (canvas) {\r\n\t\t\tconst bufferW = Math.round(logicalW * renderScale / dpr);\r\n\t\t\tconst bufferH = Math.round(logicalH * renderScale / dpr);\r\n\t\t\tcanvas.width = bufferW;\r\n\t\t\tcanvas.height = bufferH;\r\n\t\t\tcanvas.style.width = bufferW + 'px';\r\n\t\t\tcanvas.style.height = bufferH + 'px';\r\n\t\t\tconst dimsEl = document.getElementById('rendererDims');\r\n\t\t\tif (dimsEl) {\r\n\t\t\t\tdimsEl.textContent = `${canvas.width} x ${canvas.height} px @ ${dpr}x`;\r\n\t\t\t}\r\n\t\t}\r\n\t\t(RendererConfig as any)._renderScale = renderScale;\r\n\t\t(RendererConfig as any)._offsetX = 0;\r\n\t\t(RendererConfig as any)._offsetY = 0;\r\n\t\tconst scaleVal = rootDocument.getElementById('rendererScaleValue');\r\n\t\tif (scaleVal) scaleVal.textContent = renderScale.toFixed(2);\r\n\t}\r\n\r\n\t// Only update CSS size on window resize\r\n\tfunction fitCanvasToWindow() {\r\n\t\tconst winW = window.innerWidth;\r\n\t\tconst winH = window.innerHeight;\r\n\t\tconst bufferW = canvas ? canvas.width : LOGICAL_BOUNDS.W;\r\n\t\tconst bufferH = canvas ? canvas.height : LOGICAL_BOUNDS.H;\r\n\t\t// Compute scale to fit buffer into window, preserving aspect ratio\r\n\t\tconst scale = Math.min(winW / bufferW, winH / bufferH);\r\n\t\tconst scaledW = bufferW * scale;\r\n\t\tconst scaledH = bufferH * scale;\r\n\t\tconst offsetX = Math.round((winW - scaledW) / 2);\r\n\t\tconst offsetY = Math.round((winH - scaledH) / 2);\r\n\t\tif (canvas) {\r\n\t\t\t// Set width/height to buffer size, but use transform for scaling\r\n\t\t\tcanvas.style.width = `${bufferW}px`;\r\n\t\t\tcanvas.style.height = `${bufferH}px`;\r\n\t\t\tcanvas.style.position = 'absolute';\r\n\t\t\tcanvas.style.left = `${offsetX}px`;\r\n\t\t\tcanvas.style.top = `${offsetY}px`;\r\n\t\t\tcanvas.style.transformOrigin = 'top left';\r\n\t\t\tcanvas.style.transform = `scale(${scale})`;\r\n\t\t}\r\n\t\t// Prevent scrollbars\r\n\t\tdocument.body.style.overflow = 'hidden';\r\n\t}\r\n\t// Renderer scale slider and dynamic scaling wiring\r\n\tconst scaleSlider = rootDocument.getElementById('rendererScaleRange');\r\n\tconst dynamicCheckbox = rootDocument.getElementById('dynamicScaleCheckbox');\r\n\tlet internalScaleUpdate = false;\r\n\tif (scaleSlider) {\r\n\t\tscaleSlider.addEventListener('input', (ev: any) => {\r\n\t\t\tif (internalScaleUpdate) return; // ignore internal updates\r\n\t\t\tconst val = parseFloat(ev.target.value);\r\n\t\t\tif (!isNaN(val)) {\r\n\t\t\t\t(RendererConfig as any).renderScale = val;\r\n\t\t\t\t(RendererConfig as any).dynamicScaleEnabled = false;\r\n\t\t\t\tif (dynamicCheckbox) (dynamicCheckbox as HTMLInputElement).checked = false;\r\n\t\t\t\tupdateCanvasBackingStore();\r\n\t\t\t\tfitCanvasToWindow();\r\n\t\t\t}\r\n\t\t});\r\n\t\t// Set initial value display\r\n\t\tconst scaleVal = rootDocument.getElementById('rendererScaleValue');\r\n\t\tif (scaleVal) scaleVal.textContent = (scaleSlider as HTMLInputElement).value;\r\n\t\t// Ensure initial fit-to-window calculation uses current scale\r\n\t\tupdateCanvasBackingStore();\r\n\t\tfitCanvasToWindow();\r\n\t}\r\n\tif (dynamicCheckbox) {\r\n\t\tdynamicCheckbox.addEventListener('change', (ev: any) => {\r\n\t\t\tconst enabled = !!ev.target.checked;\r\n\t\t\t(RendererConfig as any).dynamicScaleEnabled = enabled;\r\n\t\t});\r\n\t(dynamicCheckbox as HTMLInputElement).checked = !!(RendererConfig as any).dynamicScaleEnabled;\r\n\t}\r\n\r\n\tfitCanvasToWindow();\r\n\twindow.addEventListener('resize', fitCanvasToWindow);\r\n\r\n\tlet renderer: any;\r\n\tconst pref = getPreferredRenderer();\r\n\tif (pref === 'webgl') {\r\n\t\ttry { const w = new WebGLRenderer(canvas); if (w && w.init && w.init()) renderer = w; } catch (e) {}\r\n\t}\r\n\tif (!renderer) { renderer = new CanvasRenderer(canvas); renderer.init && renderer.init(); }\r\n\r\n\ttry { window.gm = window.gm || {}; } catch (e) {}\r\n\t// Pass fixed logical bounds to game manager\r\n\tconst gm = createGameManager({ renderer, useWorker: false, seed: 12345 });\r\n\tif (gm && gm._internal) gm._internal.bounds = LOGICAL_BOUNDS;\r\n\ttry { if (typeof window !== 'undefined' && (window as any).gm) Object.assign((window as any).gm, gm); } catch (e) {}\r\n\r\n\t// Speed multiplier logic\r\n\tlet simSpeedMultiplier = 1;\r\n\tif (ui.speed) {\r\n\t\tui.speed.addEventListener('click', () => {\r\n\t\t\tsimSpeedMultiplier = simSpeedMultiplier >= 4 ? 0.25 : simSpeedMultiplier * 2;\r\n\t\t\tui.speed.textContent = `Speed: ${simSpeedMultiplier}\u00D7`;\r\n\t\t});\r\n\t\tui.speed.textContent = `Speed: ${simSpeedMultiplier}\u00D7`;\r\n\t}\r\n\r\n\t// Patch stepOnce to use multiplier\r\n\tif (gm && typeof gm.stepOnce === 'function') {\r\n\t\tconst origStepOnce = gm.stepOnce.bind(gm);\r\n\t\tgm.stepOnce = (dt = 0.016) => origStepOnce(dt * simSpeedMultiplier);\r\n\t}\r\n\r\n\t// Fleet formation logic\r\n\tif (ui.formationBtn) {\r\n\t\tui.formationBtn.addEventListener('click', () => {\r\n\t\t\tif (gm && typeof gm.formFleets === 'function') {\r\n\t\t\t\tgm.formFleets();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t// Engine trail UI toggle state\r\n\tlet engineTrailsEnabled = true;\r\n\tif (gm && gm._internal && gm._internal.state) {\r\n\t\tgm._internal.state.engineTrailsEnabled = engineTrailsEnabled;\r\n\t}\r\n\tif (ui.toggleTrails) {\r\n\t\tui.toggleTrails.addEventListener('click', () => {\r\n\t\t\tengineTrailsEnabled = !engineTrailsEnabled;\r\n\t\t\tif (gm && gm._internal && gm._internal.state) {\r\n\t\t\t\tgm._internal.state.engineTrailsEnabled = engineTrailsEnabled;\r\n\t\t\t}\r\n\t\t\tui.toggleTrails.textContent = engineTrailsEnabled ? '\u2604 Trails: On' : '\u2604 Trails: Off';\r\n\t\t});\r\n\t\tui.toggleTrails.textContent = engineTrailsEnabled ? '\u2604 Trails: On' : '\u2604 Trails: Off';\r\n\t}\r\n\r\n\ttry {\r\n\t\tconst host = (location && location.hostname) || '';\r\n\t\tconst urlParams = (typeof URLSearchParams !== 'undefined') ? new URLSearchParams(location.search) : null;\r\n\t\tconst autotest = (urlParams && urlParams.get('autotest') === '1') || !!((window as any).__AUTO_REINFORCE_DEV__);\r\n\t\tif ((host === '127.0.0.1' || host === 'localhost') && autotest) {\r\n\t\t\ttry { if (gm && typeof gm.setContinuousEnabled === 'function') gm.setContinuousEnabled(true); } catch (e) {}\r\n\t\t\ttry { if (gm && typeof gm.setReinforcementInterval === 'function') gm.setReinforcementInterval(0.01); } catch (e) {}\r\n\t\t\ttry { if (gm && typeof gm.stepOnce === 'function') gm.stepOnce(0.02); } catch (e) {}\r\n\t\t}\r\n\t} catch (e) {}\r\n\r\n\tlet lastReinforcementSummary = '';\r\n\ttry {\r\n\t\tif (gm && typeof gm.on === 'function') {\r\n\t\t\tgm.on('reinforcements', (msg: any) => {\r\n\t\t\t\tconst list = (msg && msg.spawned) || [];\r\n\t\t\t\tconst types = list.map((s: any) => s.type).filter(Boolean);\r\n\t\t\t\tconst summary = `Reinforcements: spawned ${list.length} ships (${types.join(', ')})`;\r\n\t\t\t\tlastReinforcementSummary = summary;\r\n\t\t\t\ttry { setTimeout(() => { lastReinforcementSummary = ''; }, 3000); } catch (e) {}\r\n\t\t\t\ttry { if (ui && ui.stats) ui.stats.textContent = `${ui.stats.textContent} | ${summary}`; } catch (e) {}\r\n\t\t\t});\r\n\t\t}\r\n\t} catch (e) {}\r\n\r\n\tconst workerIndicator = rootDocument.getElementById('workerIndicator');\r\n\tlet toastContainer = rootDocument.getElementById('toastContainer');\r\n\tif (!toastContainer) {\r\n\t\ttry {\r\n\t\t\ttoastContainer = rootDocument.createElement('div');\r\n\t\t\ttoastContainer.id = 'toastContainer';\r\n\t\t\ttoastContainer.style.position = 'fixed';\r\n\t\t\ttoastContainer.style.right = '16px';\r\n\t\t\ttoastContainer.style.top = '16px';\r\n\t\t\ttoastContainer.style.zIndex = '9999';\r\n\t\t\ttoastContainer.style.pointerEvents = 'none';\r\n\t\t\trootDocument.body.appendChild(toastContainer);\r\n\t\t} catch (e) { toastContainer = null; }\r\n\t}\r\n\r\n\tfunction showToast(msg: string, opts: any = {}) {\r\n\t\ttry {\r\n\t\t\tif (!toastContainer) return;\r\n\t\t\tconst ttl = (typeof opts.ttl === 'number') ? opts.ttl : 2000;\r\n\t\t\tconst el = rootDocument.createElement('div');\r\n\t\t\tel.style.background = 'rgba(20,20,30,0.9)';\r\n\t\t\tel.style.color = '#fff';\r\n\t\t\tel.style.padding = '8px 12px';\r\n\t\t\tel.style.marginTop = '6px';\r\n\t\t\tel.style.borderRadius = '6px';\r\n\t\t\tel.style.boxShadow = '0 2px 8px rgba(0,0,0,0.5)';\r\n\t\t\tel.style.fontFamily = 'sans-serif';\r\n\t\t\tel.style.fontSize = '13px';\r\n\t\t\tel.style.pointerEvents = 'auto';\r\n\t\t\tel.textContent = msg;\r\n\t\t\ttoastContainer.appendChild(el);\r\n\t\t\tsetTimeout(() => { try { el.style.transition = 'opacity 300ms ease'; el.style.opacity = '0'; } catch (e) {}; setTimeout(() => { try { if (el && el.parentNode) el.parentNode.removeChild(el); } catch (err) {} }, 350); }, ttl);\r\n\t\t} catch (e) {}\r\n\t}\r\n\r\n\ttry {\r\n\t\tif (gm && typeof gm.on === 'function') {\r\n\t\t\tgm.on('levelup', (m: any) => {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst ship = (m && m.ship) || null;\r\n\t\t\t\t\tconst lvl = (m && m.newLevel) || (m && m.newLevel === 0 ? 0 : undefined);\r\n\t\t\t\t\tconst who = ship && ship.team ? `${ship.team} ship` : 'Ship';\r\n\t\t\t\t\tconst msg = `${who} leveled up to ${lvl}`;\r\n\t\t\t\t\tshowToast(msg, { ttl: 2200 });\r\n\t\t\t\t} catch (e) {}\r\n\t\t\t});\r\n\t\t}\r\n\t} catch (e) {}\r\n\r\n\tif (workerIndicator) {\r\n\t\ttry { workerIndicator.textContent = (gm.isWorker && gm.isWorker()) ? 'Worker' : 'Main'; (function refresh() { try { workerIndicator.textContent = (gm.isWorker && gm.isWorker()) ? 'Worker' : 'Main'; requestAnimationFrame(refresh); } catch (e) {} }()); } catch (e) { workerIndicator.textContent = 'Unknown'; }\r\n\t}\r\n\r\n\ttry { ui.startPause.addEventListener('click', () => { if (gm.isRunning()) { gm.pause(); ui.startPause.textContent = '\u25B6 Start'; } else { gm.start(); ui.startPause.textContent = '\u23F8 Pause'; } }); } catch (e) {}\r\n\ttry { ui.reset.addEventListener('click', () => gm.reset()); } catch (e) {}\r\n\ttry { ui.addRed.addEventListener('click', () => gm.spawnShip('red')); } catch (e) {}\r\n\ttry { ui.addBlue.addEventListener('click', () => gm.spawnShip('blue')); } catch (e) {}\r\n\tfunction onSeedBtnClick() {\r\n\t\ttry {\r\n\t\t\tconst raw = (typeof window !== 'undefined' && typeof window.prompt === 'function') ? window.prompt('Enter new seed (leave blank for random):', '') : null;\r\n\t\t\tif (raw == null) return;\r\n\t\t\tconst trimmed = String(raw).trim();\r\n\t\t\tif (trimmed === '') { try { gm.reseed(); showToast('Reseeded with random seed'); } catch (e) {} return; }\r\n\t\t\tconst asNum = Number(trimmed);\r\n\t\t\tif (!Number.isFinite(asNum) || Math.floor(asNum) !== asNum) { try { showToast('Invalid seed. Please enter an integer.'); } catch (e) {} return; }\r\n\t\t\ttry { gm.reseed(asNum >>> 0); showToast(`Reseeded with ${asNum >>> 0}`); } catch (e) {}\r\n\t\t} catch (e) {}\r\n\t}\r\n\ttry { ui.seedBtn.addEventListener('click', onSeedBtnClick); } catch (e) {}\r\n\t// try { ui.formationBtn.addEventListener('click', () => gm.formFleets()); } catch (e) {}\r\n\ttry { if (ui.continuousCheckbox) { ui.continuousCheckbox.addEventListener('change', (ev: any) => { const v = !!ev.target.checked; if (gm && typeof gm.setContinuousEnabled === 'function') gm.setContinuousEnabled(v); }); } } catch (e) {}\r\n\r\n\tfunction uiTick() {\r\n\t\tconst startTick = performance.now();\r\n\t\tlet skipRender = false;\r\n\t\ttry {\r\n\t\t\tconst s = gm.snapshot();\r\n\t\t\tui.redScore.textContent = `Red ${gm.score.red}`;\r\n\t\t\tui.blueScore.textContent = `Blue ${gm.score.blue}`;\r\n\t\t\tconst redCount = s.ships.filter((sh: any) => sh.team === 'red').length;\r\n\t\t\tconst blueCount = s.ships.filter((sh: any) => sh.team === 'blue').length;\r\n\t\t\tui.stats.textContent = `Ships: ${s.ships.length} (R:${redCount} B:${blueCount}) Bullets: ${s.bullets.length}` + (lastReinforcementSummary ? ` | ${lastReinforcementSummary}` : '');\r\n\t\t} catch (e) {}\r\n\t\tconst endTick = performance.now();\r\n\t\tconst tickTime = endTick - startTick;\r\n\t\tif (tickTime > SIM.DT_MS) {\r\n\t\t\tskipRender = true;\r\n\t\t}\r\n\t\t// --- Dynamic buffer scaling logic ---\r\n\t\tconst dynamicEnabled = !!(RendererConfig as any).dynamicScaleEnabled;\r\n\t\tconst scaleSliderEl = rootDocument.getElementById('rendererScaleRange') as HTMLInputElement;\r\n\t\tconst scaleValEl = rootDocument.getElementById('rendererScaleValue');\r\n\t\t// Track frame time\r\n\t\tconst now = performance.now();\r\n\t\t(RendererConfig as any)._lastUiTick = (RendererConfig as any)._lastUiTick || now;\r\n\t\tconst dt = now - (RendererConfig as any)._lastUiTick;\r\n\t\t(RendererConfig as any)._lastUiTick = now;\r\n\t\t(RendererConfig as any).lastFrameTime = dt;\r\n\t\t// Score frame time\r\n\t\tlet frameScore = 'green';\r\n\t\tif (dt > 33) frameScore = 'red';\r\n\t\telse if (dt > 20) frameScore = 'yellow';\r\n\t\t(RendererConfig as any).frameScore = frameScore;\r\n\t\t// Color slider value for feedback\r\n\t\tif (scaleValEl) {\r\n\t\t\tscaleValEl.style.color = frameScore === 'green' ? '#4caf50' : frameScore === 'yellow' ? '#ffd600' : '#ff1744';\r\n\t\t}\r\n\t\t// Dynamic scaling logic\r\n\t\tif (dynamicEnabled && scaleSliderEl) {\r\n\t\t\tlet scale = (RendererConfig as any).renderScale;\r\n\t\t\t// If frame is slow, reduce scale; if fast, increase scale\r\n\t\t\tif (frameScore === 'red' && scale > 0.25) scale = Math.max(0.25, scale - 0.05);\r\n\t\t\telse if (frameScore === 'green' && scale < 2.0) scale = Math.min(2.0, scale + 0.01);\r\n\t\t\t// Only update if changed\r\n\t\t\tif (scale !== (RendererConfig as any).renderScale) {\r\n\t\t\t\t(RendererConfig as any).renderScale = scale;\r\n\t\t\t\tinternalScaleUpdate = true;\r\n\t\t\t\tscaleSliderEl.value = scale.toFixed(2);\r\n\t\t\t\tif (scaleValEl) scaleValEl.textContent = scale.toFixed(2);\r\n\t\t\t\tfitCanvasToWindow();\r\n\t\t\t\tinternalScaleUpdate = false;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!skipRender) {\r\n\t\t\trequestAnimationFrame(uiTick);\r\n\t\t} else {\r\n\t\t\t// Only update simulation, skip rendering for this frame\r\n\t\t\tsetTimeout(uiTick, SIM.DT_MS);\r\n\t\t}\r\n\t}\r\n\trequestAnimationFrame(uiTick);\r\n\treturn { gm, renderer };\r\n}\r\n\r\nif (typeof window !== 'undefined') {\r\n\tif (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', () => startApp(document));\r\n\telse startApp(document);\r\n}\r\n\r\nexport default startApp;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsPO,SAAS,gBAAgB;AAC9B,SAAO;AACT;AAmBO,SAAS,oBAAoB,GAAmB;AACrD,MAAI,IAAI,EAAG,QAAO;AAClB,MAAI,IAAI,IAAK,QAAO;AACpB,MAAI,IAAI,IAAK,QAAO;AACpB,SAAO;AACT;AAEO,SAAS,qBAA6B;AAC3C,SAAO,OAAO,KAAK,UAAU,EAAE,CAAC,KAAK;AACvC;AApRA,IAyEa,YAkLA,iBAQA,mBAmBN;AAtRP;AAAA;AAAA;AAyEO,IAAM,aAA4B;AAAA,MACvC,SAAS;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP,WAAW;AAAA,QACX,aAAa;AAAA,QACb,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS;AAAA,UACP;AAAA,YACE,QAAQ;AAAA,YACR,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,aAAa;AAAA;AAAA,YACb,cAAc;AAAA,YACd,WAAW;AAAA;AAAA,UACb;AAAA,QACF;AAAA,QACA,OAAO;AAAA,QACP,UAAU;AAAA,QACV,UAAU;AAAA,MACZ;AAAA,MACA,UAAU;AAAA,QACR,OAAO;AAAA,QACP,OAAO;AAAA,QACP,WAAW,KAAK,MAAM,KAAK,GAAG;AAAA,QAC9B,aAAa;AAAA,QACb,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,UAAU;AAAA;AAAA,QACV,UAAU;AAAA;AAAA,QACV,SAAS;AAAA,UACP;AAAA,YACE,QAAQ;AAAA,YACR,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,aAAa;AAAA;AAAA,YACb,cAAc;AAAA,YACd,WAAW;AAAA;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,MACA,SAAS;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP,WAAW,KAAK,MAAM,KAAK,GAAG;AAAA,QAC9B,aAAa;AAAA,QACb,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS;AAAA,UACP;AAAA,YACE,QAAQ;AAAA,YACR,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,aAAa;AAAA;AAAA,YACb,cAAc;AAAA,YACd,WAAW;AAAA;AAAA,UACb;AAAA,QACF;AAAA,QACA,OAAO;AAAA,QACP,UAAU;AAAA;AAAA,QACV,UAAU;AAAA;AAAA,MACZ;AAAA,MACA,WAAW;AAAA,QACT,OAAO;AAAA,QACP,OAAO;AAAA,QACP,WAAW,KAAK,MAAM,MAAM,GAAG;AAAA,QAC/B,aAAa;AAAA,QACb,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS,IAAI,MAAM,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,OAAO;AAAA,UACvC,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,aAAa;AAAA;AAAA,UACb,cAAc;AAAA,UACd,WAAW;AAAA;AAAA,QACb,EAAE;AAAA,QACF,OAAO;AAAA,QACP,UAAU;AAAA;AAAA,QACV,UAAU;AAAA;AAAA,QACV,SAAS;AAAA,UACP;AAAA,YACE,UAAU,CAAC,KAAK,GAAG;AAAA,YACnB,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UACZ;AAAA,UACA;AAAA,YACE,UAAU,CAAC,MAAM,GAAG;AAAA,YACpB,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UACZ;AAAA,UACA;AAAA,YACE,UAAU,CAAC,KAAK,IAAI;AAAA,YACpB,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UACZ;AAAA,UACA;AAAA,YACE,UAAU,CAAC,MAAM,IAAI;AAAA,YACrB,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UACZ;AAAA,UACA;AAAA,YACE,UAAU,CAAC,GAAG,GAAG;AAAA,YACjB,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UACZ;AAAA,UACA;AAAA,YACE,UAAU,CAAC,GAAG,IAAI;AAAA,YAClB,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AAAA,MACA,SAAS;AAAA,QACP,OAAO;AAAA,QACP,OAAO;AAAA,QACP,WAAW,KAAK,MAAM,MAAM,GAAG;AAAA,QAC/B,aAAa;AAAA,QACb,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS,IAAI,MAAM,CAAC,EAAE,KAAK,CAAC,EAAE,IAAI,OAAO;AAAA,UACvC,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,aAAa;AAAA;AAAA,UACb,cAAc;AAAA,UACd,WAAW;AAAA;AAAA,QACb,EAAE;AAAA,QACF,OAAO;AAAA,QACP,UAAU;AAAA;AAAA,QACV,UAAU;AAAA;AAAA,QACV,SAAS,EAAE,iBAAiB,KAAK,aAAa,GAAG,kBAAkB,EAAE;AAAA,QACrE,SAAS;AAAA,UACP;AAAA,YACE,UAAU,CAAC,GAAK,GAAG;AAAA,YACnB,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UACZ;AAAA,UACA;AAAA,YACE,UAAU,CAAC,IAAM,GAAG;AAAA,YACpB,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UACZ;AAAA,UACA;AAAA,YACE,UAAU,CAAC,GAAK,IAAI;AAAA,YACpB,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UACZ;AAAA,UACA;AAAA,YACE,UAAU,CAAC,IAAM,IAAI;AAAA,YACrB,MAAM;AAAA,YACN,WAAW;AAAA,YACX,UAAU;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAMO,IAAM,kBAAkB;AAAA,MAC7B,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,aAAa;AAAA,IACf;AAGO,IAAM,oBAAoB;AAAA,MAC/B,KAAK;AAAA,MACL,OAAO;AAAA,MACP,MAAM;AAAA,IACR;AAeA,IAAO,yBAAQ;AAAA;AAAA;;;ACtRf;;;ACCA;;;ACAA,IAAI,QAAQ;AAEL,SAAS,MAAM,OAAe,GAAG;AAEtC,UAAQ,SAAS;AACnB;AAGA,SAAS,WAAW,GAAW;AAC7B,SAAO,WAAW;AAChB,QAAI,KAAK,KAAK,gBAAgB;AAC9B,QAAI,KAAK,KAAK,IAAK,MAAM,IAAK,IAAI,CAAC;AACnC,SAAK,IAAI,KAAK,KAAK,IAAK,MAAM,GAAI,IAAI,EAAE;AACxC,aAAS,IAAK,MAAM,QAAS,KAAK;AAAA,EACpC;AACF;AAEO,SAAS,UAAkB;AAChC,QAAM,IAAI,WAAW,KAAK;AAE1B,UAAS,QAAQ,eAAgB;AACjC,SAAO,EAAE;AACX;AAEO,SAAS,OAAO,KAAa,KAAqB;AACvD,SAAO,OAAO,MAAM,OAAO,QAAQ;AACrC;;;ADxBO,IAAM,cAAc;AAAA,EACzB,OAAO;AAAA,IACL,KAAK,EAAE,IAAI,OAAO,OAAO,WAAW,OAAO,MAAM;AAAA,IACjD,MAAM,EAAE,IAAI,QAAQ,OAAO,WAAW,OAAO,OAAO;AAAA,EACtD;AAAA,EACA,cAAc;AAAA,IACZ,SAAS,MAAM;AAGb,YAAM,UAAU,cAAc;AAC9B,YAAM,QAAQ,OAAO,KAAK,WAAW,CAAC,CAAC;AAEvC,YAAM,gBAAwC,CAAC;AAC/C,iBAAW,KAAK,OAAO;AACrB,YAAI,MAAM,UAAW,eAAc,CAAC,IAAI;AAAA,iBAC/B,MAAM,WAAY,eAAc,CAAC,IAAI;AAAA,iBACrC,MAAM,UAAW,eAAc,CAAC,IAAI;AAAA,iBACpC,MAAM,YAAa,eAAc,CAAC,IAAI;AAAA,iBACtC,MAAM,UAAW,eAAc,CAAC,IAAI;AAAA,YACxC,eAAc,CAAC,IAAI;AAAA,MAC1B;AACA,aAAO;AAAA,IACT,GAAG;AAAA,IACH,SAAS;AAAA,IACT,QAAQ,EAAE,GAAG,IAAI,GAAG,IAAI;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,yBAAyB;AAAA,IACvB,SAAS;AAAA,IACT,aAAa;AAAA,IACb,SAAS;AAAA,IACT,UAAU;AAAA,IACV,WAAW;AAAA,EACb;AACF;AAGA,SAASA,YAAW,MAAc;AAChC,MAAI,IAAI,SAAS;AACjB,SAAO,WAAY;AACjB,SAAK;AACL,QAAI,IAAI,KAAK,KAAK,IAAK,MAAM,IAAK,IAAI,CAAC;AACvC,SAAK,IAAI,KAAK,KAAK,IAAK,MAAM,GAAI,KAAK,CAAC;AACxC,aAAS,IAAK,MAAM,QAAS,KAAK;AAAA,EACpC;AACF;AAEA,SAAS,gBAAgB,GAAW;AAClC,MAAI,IAAI,eAAe;AACvB,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AACjC,SAAK,EAAE,WAAW,CAAC;AACnB,QAAI,KAAK,KAAK,GAAG,QAAQ,MAAM;AAAA,EACjC;AACA,SAAO,MAAM;AACf;AAEO,SAAS,qBACd,OAAO,GACP,SAAyB,OACzB,SAAS,EAAE,GAAG,KAAK,GAAG,IAAI,GAC1B,aACA,UAAe,CAAC,GAChB;AACA,QAAM,MAAM,OAAO,OAAO,CAAC,GAAG,YAAY,cAAc,QAAQ,SAAS,CAAC,CAAC;AAC3E,QAAM,UAAU,QAAQ,WAAW,IAAI;AACvC,QAAM,SAAS,OAAO,OAAO,CAAC,GAAG,IAAI,QAAQ,QAAQ,UAAU,CAAC,CAAC;AACjE,QAAM,UAAU,OAAO,IAAI;AAC3B,QAAM,QAAQ,WAAW,QAAQ,OAAO,IAAI,OAAO,OAAO,IAAI;AAC9D,QAAM,MAAMA,aAAY,SAAS,KAAK,gBAAgB,MAAM,CAAC;AAC7D,QAAM,MAAa,CAAC;AACpB,aAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,IAAI,MAAM,GAAG;AACtD,aAAS,IAAI,GAAG,IAAK,OAAkB,KAAK;AAC1C,YAAM,IAAI,UAAU,KAAK,KAAK,IAAI,CAAC;AACnC,YAAM,QAAQ,IAAI,IAAI,KAAK,KAAK;AAChC,YAAM,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,QAAQ,OAAO,KAAK;AAC9D,YAAM,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,IAAI,QAAQ,OAAO,KAAK;AAC9D,YAAM,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,OAAO,IAAI,MAAM,QAAQ,EAAE,CAAC;AAC3D,YAAM,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,OAAO,IAAI,MAAM,UAAU,EAAE,CAAC;AAC7D,UAAI,OAAO,gBAAgB;AACzB,YAAI,KAAK,YAAY,MAAM,GAAG,GAAG,MAAM,CAAC;AAAA,UACrC,KAAI,KAAK,EAAE,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC;AAAA,IAC5C;AAAA,EACF;AACA,SAAO;AACT;AAEO,SAAS,kBACd,OAAO,GACP,SAAS,EAAE,GAAG,KAAK,GAAG,IAAI,GAC1B,aACA,UAAe,CAAC,GAChB;AACA,QAAM,MAAM,qBAAqB,MAAM,OAAO,QAAQ,aAAa,OAAO;AAC1E,QAAM,OAAO;AAAA,IACX,OAAO;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,SAAO,IAAI,OAAO,IAAI;AACxB;AAEO,SAAS,qBACd,OAAO,GACP,QAAa,CAAC,GACd,UAAe,CAAC,GAChB;AACA,QAAM,MAAM,OAAO,OAAO,CAAC,GAAG,YAAY,yBAAyB,OAAO;AAE1E,MAAI,CAAC,IAAI,QAAS,QAAO,CAAC;AAC1B,QAAM,eAAuC,CAAC;AAC9C,MAAI,MAAM,QAAQ,MAAM,KAAK,GAAG;AAC9B,eAAW,KAAK,MAAM,OAAO;AAC3B,UAAI,CAAC,KAAK,CAAC,EAAE,KAAM;AACnB,YAAM,KAAK,OAAO,EAAE,OAAO,WAAW,EAAE,KAAK;AAC7C,mBAAa,EAAE,IAAI,KAAK,aAAa,EAAE,IAAI,KAAK,KAAK;AAAA,IACvD;AAAA,EACF;AACA,QAAM,QAAQ,OAAO,KAAK,YAAY,KAAK;AAC3C,MAAI,MAAM,WAAW,EAAG,QAAO,CAAC;AAChC,aAAW,KAAK,OAAO;AACrB,QAAI,CAAC,aAAa,CAAC,GAAG;AACpB,YAAM,OAAO,MAAM,SAAS,CAAC,GAAG;AAAA,QAC9B,CAAC,MAAW,KAAK,EAAE,SAAS;AAAA,MAC9B,EAAE;AACF,mBAAa,CAAC,IAAI,MAAM,IAAI,MAAM;AAAA,IACpC;AAAA,EACF;AACA,MAAI,UAAU,MAAM,CAAC;AACrB,MAAI,YAAY,MAAM,CAAC;AACvB,aAAW,KAAK,OAAO;AACrB,QAAI,aAAa,CAAC,IAAI,aAAa,OAAO,EAAG,WAAU;AACvD,QAAI,aAAa,CAAC,IAAI,aAAa,SAAS,EAAG,aAAY;AAAA,EAC7D;AACA,QAAM,QAAQ,MAAM,OAAO,CAAC,GAAG,MAAM,KAAK,aAAa,CAAC,KAAK,IAAI,CAAC,KAAK;AACvE,QAAM,gBAAgB,aAAa,OAAO,KAAK,KAAK;AACpD,MAAI,eAAe,MAAM,IAAI,aAAa;AACxC,UAAM,SAAgB,CAAC;AACvB,UAAM,MAAMA,aAAY,SAAS,KAAK,gBAAgB,OAAO,CAAC;AAE9D,UAAM,iBACJ,MAAM,QAAQ,IAAI,SAAS,KAAK,IAAI,UAAU,SAC1C,IAAI,YACJ,OAAO,KAAK,YAAY,aAAa,UAAU,EAAE,SAAS,EAAE,CAAC;AAEnE,UAAM,YACJ,eAAe,YAAY,gBAAgB,YAAY,aAAa,SAChE,YAAY,aAAa,SACzB,CAAC;AACP,UAAM,UAAU,eAAe;AAAA,MAAI,CAAC,MAClC,KAAK,IAAI,GAAG,OAAQ,UAAkB,CAAC,CAAC,KAAK,CAAC;AAAA,IAChD;AACA,UAAM,cACJ,QAAQ,OAAO,CAAC,GAAW,MAAc,IAAI,GAAG,CAAC,KACjD,eAAe,UACf;AAEF,UAAM,eAAe,MAAM;AACzB,YAAM,IAAI,IAAI,IAAI;AAClB,UAAI,MAAM;AACV,eAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC9C,eAAO,QAAQ,CAAC;AAChB,YAAI,IAAI,IAAK,QAAO,eAAe,CAAC;AAAA,MACtC;AACA,aAAO,eAAe,eAAe,SAAS,CAAC;AAAA,IACjD;AAEA,UAAM,aAAa,KAAK,IAAI,GAAG,KAAK,MAAM,OAAO,IAAI,OAAO,KAAK,CAAC,CAAC;AACnE,UAAM,aAAa,KAAK,IAAI,GAAG,KAAK,MAAM,IAAI,IAAI,UAAU,IAAI,CAAC;AAEjE,UAAM,IAAI,QAAQ,UAAU,EAAE,GAAG,KAAK,GAAG,IAAI;AAC7C,UAAM,UAAU,EAAE,IAAI;AACtB,UAAM,QAAQ,YAAY,QAAQ,EAAE,IAAI,OAAO,EAAE,IAAI;AACrD,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACnC,YAAM,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,IAAI,MAAM,SAAS,IAAI,IAAI,OAAO,GAAG,CAAC;AACvE,YAAM,IAAI,KAAK;AAAA,QACb;AAAA,QACA,KAAK,IAAI,EAAE,IAAI,MAAM,WAAW,IAAI,IAAI,OAAO,GAAG;AAAA,MACpD;AACA,YAAM,OACJ,MAAM,QAAQ,IAAI,SAAS,KAAK,IAAI,UAAU,SAC1C,eAAe,KAAK,MAAM,IAAI,IAAI,eAAe,MAAM,CAAC,KACxD,mBAAmB,IACnB,aAAa;AACnB,aAAO,KAAK,EAAE,MAAM,MAAM,SAAS,GAAG,EAAE,CAAC;AAAA,IAC3C;AAEA,WAAO;AAAA,EACT;AACA,SAAO,CAAC;AACV;AAGO,IAAM,eAAe;AAQrB,SAAS,oCACd,QAAa,CAAC,GACd,UAAe,CAAC,GAChB;AACA,QAAM,OAAO,KAAK,MAAM,QAAQ,IAAI,UAAU,MAAM;AACpD,SAAO,qBAAqB,MAAM,OAAO,OAAO;AAClD;;;ADnNA,IAAI,SAAS;AACN,SAAS,QAAgB;AAC9B,SAAO;AACT;AAuCO,SAAS,WACd,OAA2B,QAC3B,IAAI,GACJ,IAAI,GACJ,OAAO,cACD;AACN,QAAM,UAAU,cAAc;AAC9B,QAAM,iBAAiB,OAAO,KAAK,WAAW,CAAC,CAAC;AAChD,QAAM,eACJ,QAAQ,QAAQ,IAAI,IAChB,OACA,eAAe,SACb,eAAe,CAAC,IAChB,mBAAmB;AAC3B,QAAM,MAAO,QAAQ,YAAY,KAC/B,QAAQ,mBAAmB,CAAC;AAC9B,SAAO;AAAA,IACL,IAAI,MAAM;AAAA,IACV,MAAM;AAAA,IACN;AAAA,IACA;AAAA,IACA,IAAI;AAAA,IACJ,IAAI;AAAA,IACJ,IAAI,IAAI;AAAA,IACR,OAAO,IAAI;AAAA,IACX,QAAQ,IAAI,aAAa;AAAA,IACzB,WAAW,IAAI,aAAa;AAAA,IAC5B;AAAA,IACA,IAAI;AAAA,IACJ,OAAO;AAAA,IACP,SAAS,KAAK,MAAM,KAAK,UAAU,IAAI,WAAW,CAAC,CAAC,CAAC;AAAA,IACrD,OAAO,IAAI,SAAS;AAAA,IACpB,cAAc;AAAA;AAAA,IACd,UAAU;AAAA;AAAA,IACV,UAAU;AAAA;AAAA,IACV,UAAU,IAAI,YAAY;AAAA,IAC1B,QAAQ,IAAI,UAAU;AAAA,IACtB,UAAU,IAAI,YAAY;AAAA,IAC1B,OAAO;AAAA,EACT;AACF;AAcO,SAAS,aACd,GACA,GACA,IACA,IACA,OAAO,cACP,UAAyB,MACzB,SAAS,GACT,MAAM,GACE;AACR,SAAO;AAAA,IACL,IAAI,MAAM;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAYO,SAAS,mBAA8B;AAC5C,SAAO;AAAA,IACL,GAAG;AAAA,IACH,OAAO,CAAC;AAAA,IACR,SAAS,CAAC;AAAA,IACV,YAAY,CAAC;AAAA,IACb,YAAY,CAAC;AAAA,IACb,YAAY,CAAC;AAAA,IACb,qBAAqB;AAAA,EACvB;AACF;;;AGzIA;;;ACAO,IAAM,gBAAgB;AAAA,EAC3B,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,kBAAkB;AAAA,EAClB,WAAW;AAAA,EACX,YAAY;AACd;;;ACPA;AA8BA,SAAS,KAAK,IAAY,IAAY;AACpC,SAAO,KAAK,KAAK,KAAK;AACxB;AACA,SAAS,WAAW,GAAa,KAAa;AAC5C,QAAM,KAAK,KAAK,EAAE,MAAM,GAAG,EAAE,MAAM,CAAC;AACpC,QAAM,OAAO,MAAM;AACnB,MAAI,KAAK,QAAQ,KAAK,GAAG;AACvB,UAAM,MAAM,MAAM,KAAK,KAAK,EAAE;AAC9B,MAAE,MAAM,EAAE,MAAM,KAAK;AACrB,MAAE,MAAM,EAAE,MAAM,KAAK;AAAA,EACvB;AACF;AAIA,SAAS,cAAc,MAAgB,IAAc,SAAS,GAAG;AAC/D,MAAI,MAAM,GAAG,KAAK,MAAM,KAAK,KAAK;AAClC,MAAI,MAAM,GAAG,KAAK,MAAM,KAAK,KAAK;AAClC,QAAM,IAAI,KAAK,MAAM,IAAI,EAAE,KAAK;AAChC,QAAM;AACN,QAAM;AACN,MAAI,SAAS,GAAG;AACd,UAAM,MAAM,KAAK,MAAM,IAAI,EAAE;AAC7B,UAAM,SAAS,OAAO,CAAC,QAAQ,MAAM;AACrC,UAAM,KAAK,MAAM;AACjB,WAAO,EAAE,GAAG,KAAK,IAAI,EAAE,GAAG,GAAG,KAAK,IAAI,EAAE,EAAE;AAAA,EAC5C;AACA,SAAO,EAAE,GAAG,IAAI,GAAG,GAAG;AACxB;AAEA,SAAS,QAAQ,OAAc,MAAgB,QAAkB,IAAY;AAE3E,MAAI,MAAM,QAAQ,KAAK,OAAO,KAAK,KAAK,QAAQ,SAAS,GAAG;AAC1D,eAAW,KAAK,KAAK,SAAS;AAC5B,UAAI,OAAO,EAAE,SAAS,SAAU,GAAE,OAAO;AACzC,QAAE,QAAQ;AACV,UAAI,EAAE,OAAO,EAAG;AAChB,YAAM,SAAS,OAAO,EAAE,WAAW,WAAW,EAAE,SAAS;AACzD,YAAM,MAAM,cAAc,MAAM,QAAQ,MAAM;AAC9C,YAAM,QAAQ,OAAO,EAAE,gBAAgB,WAAW,EAAE,cAAc,gBAAgB;AAClF,YAAM,MAAM,OAAO,EAAE,WAAW,WAC5B,EAAE,SACF,OAAO,KAAK,WAAW,WACrB,KAAK,SACL,OAAO,KAAK,QAAQ,WAClB,KAAK,MACL,gBAAgB;AACxB,YAAM,MAAM,OAAO,EAAE,cAAc,WAAW,EAAE,YAAY,gBAAgB;AAC5E,YAAM,SAAS,OAAO,EAAE,iBAAiB,WAAW,EAAE,eAAe,gBAAgB;AACrF,YAAM,KAAK,IAAI,IAAI;AACnB,YAAM,KAAK,IAAI,IAAI;AACnB,YAAM,IAAI,OAAO;AAAA,QACf;AAAA,UACE,KAAK,KAAK;AAAA,UACV,KAAK,KAAK;AAAA,UACV;AAAA,UACA;AAAA,UACA,KAAK,QAAQ;AAAA,UACb,KAAK,MAAM;AAAA,UACX;AAAA,UACA;AAAA,QACF;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AACA,YAAM,QAAQ,KAAK,CAAC;AACpB,YAAM,OAAO,OAAO,EAAE,SAAS,YAAY,EAAE,OAAO,IAAI,EAAE,OAAO;AACjE,QAAE,OAAO,IAAI;AAAA,IACf;AAAA,EACF;AAEA,MAAI,MAAM,QAAQ,KAAK,OAAO,KAAK,KAAK,QAAQ,SAAS,GAAG;AAC1D,eAAW,CAAC,GAAG,MAAM,KAAK,KAAK,QAAQ,QAAQ,GAAG;AAChD,UAAI,CAAC,OAAQ;AACb,UAAI,OAAO,OAAO,SAAS,SAAU,QAAO,OAAO;AACnD,aAAO,QAAQ;AACf,UAAI,OAAO,OAAO,EAAG;AAErB,UAAI,eAAgC;AACpC,UAAI,OAAO,cAAc,WAAW;AAClC,cAAM,WAAW,MAAM,SAAS,CAAC,GAAG;AAAA,UAClC,CAAC,OAAO,MAAM,GAAG,SAAS,KAAK;AAAA,QACjC;AACA,YAAI,UAAU;AACd,mBAAW,SAAS,SAAS;AAC3B,gBAAM,MAAM,MAAM,KAAK,MAAM,KAAK,KAAK;AACvC,gBAAM,MAAM,MAAM,KAAK,MAAM,KAAK,KAAK;AACvC,gBAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,cAAI,KAAK,SAAS;AAChB,sBAAU;AACV,2BAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF,WAAW,OAAO,cAAc,UAAU;AACxC,cAAM,WAAW,MAAM,SAAS,CAAC,GAAG;AAAA,UAClC,CAAC,OAAO,MAAM,GAAG,SAAS,KAAK;AAAA,QACjC;AACA,YAAI,QAAQ;AACV,yBAAe,QAAQ,KAAK,MAAM,QAAQ,IAAI,QAAQ,MAAM,CAAC;AAAA,MACjE,WAAW,OAAO,cAAc,SAAS;AAEvC,YAAI,KAAK,QAAQ,KAAK,KAAK,YAAY,MAAM;AAC3C,0BACG,MAAM,SAAS,CAAC,GAAG;AAAA,YAClB,CAAC,OAAO,MAAM,GAAG,OAAO,KAAK,KAAK;AAAA,UACpC,KAAK;AAAA,QACT;AAAA,MACF,OAAO;AAEL,cAAM,WAAW,MAAM,SAAS,CAAC,GAAG;AAAA,UAClC,CAAC,OAAO,MAAM,GAAG,SAAS,KAAK;AAAA,QACjC;AACA,YAAI,UAAU;AACd,mBAAW,SAAS,SAAS;AAC3B,gBAAM,MAAM,MAAM,KAAK,MAAM,KAAK,KAAK;AACvC,gBAAM,MAAM,MAAM,KAAK,MAAM,KAAK,KAAK;AACvC,gBAAM,KAAK,KAAK,KAAK,KAAK;AAC1B,cAAI,KAAK,SAAS;AAChB,sBAAU;AACV,2BAAe;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AACA,UAAI,CAAC,aAAc;AAEnB,YAAM,SAAS,OAAO,OAAO,WAAW,WAAW,OAAO,SAAS;AACnE,YAAM,MAAM,cAAc,MAAM,cAAc,MAAM;AACpD,YAAM,QAAQ,OAAO,OAAO,gBAAgB,WAAW,OAAO,cAAc,gBAAgB;AAC5F,YAAM,MAAM,OAAO,OAAO,WAAW,WACjC,OAAO,SACP,OAAO,KAAK,WAAW,WACrB,KAAK,SACL,gBAAgB;AACtB,YAAM,MAAM,OAAO,OAAO,cAAc,WAAW,OAAO,YAAY,gBAAgB;AACtF,YAAM,SAAS,OAAO,OAAO,iBAAiB,WAAW,OAAO,eAAe,gBAAgB;AAE/F,YAAM,QAAQ,KAAK,SAAS;AAE5B,YAAM,WAAW,KAAK,QAAQ;AAC9B,YAAM,UAAU,8DAAmC,cAAc,EAAE,QAAQ;AAC3E,YAAM,eAAe,WAAW,OAAO,QAAQ,WAAW,WAAW,QAAQ,SAAU,KAAK,UAAU;AACtG,YAAM,CAAC,IAAI,EAAE,IAAI,OAAO,YAAY,CAAC,GAAG,CAAC;AACzC,YAAM,WACH,KAAK,KAAK,KACX,KAAK,IAAI,KAAK,IAAI,KAAK,eACvB,KAAK,IAAI,KAAK,IAAI,KAAK;AACzB,YAAM,WACH,KAAK,KAAK,KACX,KAAK,IAAI,KAAK,IAAI,KAAK,eACvB,KAAK,IAAI,KAAK,IAAI,KAAK;AACzB,YAAM,KAAK,IAAI,IAAI;AACnB,YAAM,KAAK,IAAI,IAAI;AACnB,YAAM,IAAI,OAAO;AAAA,QACf;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,KAAK,QAAQ;AAAA,UACb,KAAK,MAAM;AAAA,UACX;AAAA,UACA;AAAA,QACF;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AACA,YAAM,QAAQ,KAAK,CAAC;AACpB,aAAO,OACL,OAAO,OAAO,aAAa,YAAY,OAAO,WAAW,IACrD,OAAO,WACP;AAAA,IACR;AAAA,EACF;AACF;AAEA,SAAS,kBAAkB,GAAa;AACtC,MAAI,CAAC,EAAE,MAAM;AACX,MAAE,OAAO,EAAE,OAAO,QAAQ,eAAe,GAAG,UAAU,KAAK;AAAA,EAC7D;AACA,SAAO,EAAE;AACX;AAEA,SAAS,gBAAgB,OAAc,MAAgB;AACrD,QAAM,WAAW,MAAM,SAAS,CAAC,GAAG;AAAA,IAClC,CAAC,OAAO,MAAM,GAAG,SAAS,KAAK;AAAA,EACjC;AACA,MAAI,CAAC,QAAQ,OAAQ,QAAO;AAC5B,QAAM,MAAM,KAAK,MAAM,QAAQ,IAAI,QAAQ,MAAM;AACjD,SAAO,QAAQ,GAAG;AACpB;AAkBO,SAAS,cACd,OACA,IACA,SAAS,EAAE,GAAG,KAAK,GAAG,IAAI,GAC1B;AACA,MAAI,CAAC,SAAS,CAAC,MAAM,QAAQ,MAAM,KAAK,EAAG;AAC3C,aAAW,KAAK,MAAM,OAAO;AAC3B,UAAM,KAAK,kBAAkB,CAAC;AAC9B,OAAG,gBAAgB,KAAK,IAAI,IAAI,GAAG,iBAAiB,KAAK,EAAE;AAE3D,QAAI,SAA0B;AAC9B,QAAI,GAAG,YAAY;AACjB,gBACG,MAAM,SAAS,CAAC,GAAG,KAAK,CAAC,OAAO,MAAM,GAAG,OAAO,GAAG,QAAQ,KAAK;AACrE,QAAI,CAAC,OAAQ,UAAS,gBAAgB,OAAO,CAAC;AAC9C,QAAI,OAAQ,IAAG,WAAW,OAAO;AAGjC,UAAM,WAAW,OAAO,EAAE,UAAU,WAAW,EAAE,QAAQ;AACzD,UAAM,WAAW,OAAO,EAAE,aAAa,WAAW,EAAE,WAAW;AAC/D,MAAE,WAAW,OAAO,EAAE,aAAa,WAAW,EAAE,WAAW;AAC3D,MAAE,WAAW,OAAO,EAAE,aAAa,WAAW,EAAE,WAAW;AAE3D,QAAI,CAAC,QAAQ;AAEX,QAAE,WAAW;AACb,QAAE,WAAW;AACb,SAAG,QAAQ;AAAA,IACb,OAAO;AACL,UAAI,GAAG,iBAAiB,GAAG;AACzB,cAAM,UAAU,EAAE,MAAM,KAAK,KAAK,IAAI,GAAG,EAAE,SAAS,CAAC;AACrD,cAAM,MAAM,QAAQ;AACpB,YAAI,SAAS,cAAc,oBAAoB,MAAM,cAAc,UAAW,IAAG,QAAQ;AAAA,iBAChF,MAAM,cAAc,WAAY,IAAG,QAAQ;AAAA,YAC/C,IAAG,QAAQ;AAChB,WAAG,gBAAgB,cAAc,mBAAmB,QAAQ,KAAK,cAAc,mBAAmB,cAAc;AAAA,MAClH;AAGA,YAAM,MAAM,OAAO,KAAK,MAAM,EAAE,KAAK;AACrC,YAAM,MAAM,OAAO,KAAK,MAAM,EAAE,KAAK;AACrC,YAAM,eAAe,KAAK,MAAM,IAAI,EAAE;AACtC,YAAM,eAAe,OAAO,EAAE,UAAU,WAAW,EAAE,QAAQ;AAC7D,UAAI,KAAK,eAAe;AACxB,aAAO,KAAK,CAAC,KAAK,GAAI,OAAM,KAAK,KAAK;AACtC,aAAO,KAAK,KAAK,GAAI,OAAM,KAAK,KAAK;AAErC,YAAM,eAAe,KAAK,KAAK;AAC/B,YAAM,WAAW,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,KAAK,YAAY,CAAC;AAE5D,UAAI,GAAG,UAAU,UAAU;AACzB,UAAE,WAAW;AACb,UAAE,WAAW;AACb,gBAAQ,OAAO,GAAG,QAAQ,EAAE;AAAA,MAC9B,WAAW,GAAG,UAAU,SAAS;AAC/B,UAAE,WAAW;AAEb,cAAM,YAAY,KAAK;AAAA,WACpB,EAAE,KAAK,MAAM,OAAO,KAAK;AAAA,WACzB,EAAE,KAAK,MAAM,OAAO,KAAK;AAAA,QAC5B;AACA,YAAI,SAAS,YAAY;AACzB,eAAO,SAAS,CAAC,KAAK,GAAI,WAAU,KAAK,KAAK;AAC9C,eAAO,SAAS,KAAK,GAAI,WAAU,KAAK,KAAK;AAC7C,UAAE,WAAW,KAAK,IAAI,IAAI,KAAK,IAAI,GAAG,SAAS,YAAY,CAAC;AAAA,MAC9D,OAAO;AACL,UAAE,WAAW;AACb,UAAE,WAAW;AAAA,MACf;AAAA,IACF;AACA,eAAW,GAAG,QAAQ;AAAA,EACxB;AACF;;;ACvTO,IAAM,cAAc;AAAA,EACzB,aAAa;AAAA,EACb,WAAW;AAAA,EACX,WAAW,CAAC,UAAkB,MAAM,KAAK,IAAI,MAAM,QAAQ,CAAC;AAAA,EAC5D,mBAAmB,CAAC,UAAkB,KAAK,IAAI,KAAM,OAAO,OAAO,KAAK,KAAK,KAAK,CAAC;AAAA,EACnF,oBAAoB;AAAA,EACpB,uBAAuB;AAAA,EACvB,sBAAsB;AAAA,EACtB,sBAAsB;AACxB;;;ACTO,IAAM,MAAM,EAAE,OAAO,IAAI,YAAY,IAAI;AAMzC,IAAM,mBAA2E;AAAA,EACtF,OAAO;AAAA,EACP,SAAS;AACX;;;ACCA,SAAS,MAAM,GAA6B,GAA6B;AACvE,QAAM,KAAK,EAAE,IAAI,EAAE;AACnB,QAAM,KAAK,EAAE,IAAI,EAAE;AACnB,SAAO,KAAK,KAAK,KAAK;AACxB;AAEO,SAAS,aAAa,OAAY,WAAmB,QAAgB;AAE1E,QAAM,KAAK,MAAM,KAAK,KAAK;AAG3B,WAAS,KAAK,MAAM,WAAW,CAAC,GAAG,SAAS,GAAG,KAAK,GAAG,KAAK;AAC1D,UAAM,IAAI,MAAM,QAAQ,CAAC;AACzB,MAAE,MAAM,EAAE,MAAM,KAAK;AACrB,MAAE,MAAM,EAAE,MAAM,KAAK;AACrB,MAAE,OAAO,EAAE,OAAO,KAAK;AACvB,QAAI,OAAO,EAAE,IAAI,KAAK,EAAE,KAAK,OAAO;AACpC,QAAI,OAAO,EAAE,IAAI,KAAK,EAAE,KAAK,OAAO;AACpC,QAAI,cAAc,QAAQ;AAC1B,QAAI,SAAS;AACb,QAAI,EAAE,OAAO,EAAG,UAAS;AAAA,aAChB,aAAa;AACpB,cAAQ,iBAAiB,SAAS;AAAA,QAChC,KAAK;AACH,mBAAS;AACT;AAAA,QACF,KAAK;AACH,cAAI,EAAE,IAAI,EAAG,GAAE,KAAK,OAAO;AAC3B,cAAI,EAAE,KAAK,OAAO,EAAG,GAAE,KAAK,OAAO;AACnC,cAAI,EAAE,IAAI,EAAG,GAAE,KAAK,OAAO;AAC3B,cAAI,EAAE,KAAK,OAAO,EAAG,GAAE,KAAK,OAAO;AACnC;AAAA,QACF,KAAK;AACH,cAAI,MAAM;AACR,cAAE,KAAK,EAAE,EAAE,MAAM;AACjB,cAAE,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,OAAO,GAAG,EAAE,CAAC,CAAC;AAAA,UAC3C;AACA,cAAI,MAAM;AACR,cAAE,KAAK,EAAE,EAAE,MAAM;AACjB,cAAE,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,OAAO,GAAG,EAAE,CAAC,CAAC;AAAA,UAC3C;AACA;AAAA,MACJ;AAAA,IACF;AACA,QAAI,OAAQ,OAAM,QAAQ,OAAO,GAAG,CAAC;AAAA,EACvC;AAEA,WAAS,UAAU,KAAYC,SAAgB;AAC7C,QAAI,CAAC,MAAM,QAAQ,GAAG,EAAG,QAAO;AAChC,WAAO,IAAI;AAAA,MACT,CAAC,MACC,OAAO,EAAE,MAAM,YACf,OAAO,EAAE,MAAM,YACf,EAAE,KAAK,KACP,EAAE,IAAIA,QAAO,KACb,EAAE,KAAK,KACP,EAAE,IAAIA,QAAO;AAAA,IACjB;AAAA,EACF;AACA,MAAI,MAAM,QAAQ,MAAM,UAAU;AAElC,QAAI,MAAM,WAAW;AACnB,YAAM,YAAY,MAAM,UAAU,OAAO,CAAC,MAAW;AACnD,UAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,KAAK;AAClC,eAAO,EAAE,OAAO;AAAA,MAClB,CAAC;AAAA,IACH;AAAA;AACA,MAAI,MAAM,YAAY;AACpB,UAAM,aAAa,MAAM,WAAW,OAAO,CAAC,MAAW;AACrD,QAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,KAAK;AAClC,aAAO,EAAE,OAAO;AAAA,IAClB,CAAC;AAAA,EACH;AACE,QAAM,aAAa,UAAU,MAAM,YAAY,MAAM;AACvD,MAAI,MAAM,QAAQ,MAAM,UAAU;AAChC,UAAM,aAAa,UAAU,MAAM,YAAY,MAAM;AACvD,MAAI,MAAM,QAAQ,MAAM,UAAU;AAChC,UAAM,aAAa,UAAU,MAAM,YAAY,MAAM;AACvD,MAAI,MAAM,QAAQ,MAAM,YAAY;AAClC,UAAM,eAAe,UAAU,MAAM,cAAc,MAAM;AAG3D,WAAS,MAAM,MAAM,SAAS,CAAC,GAAG,SAAS,GAAG,MAAM,GAAG,MAAM;AAC3D,UAAM,IAAI,MAAM,MAAM,EAAE;AAExB,UAAM,WAAW,OAAO,EAAE,aAAa,WAAW,EAAE,WAAW;AAC/D,UAAM,WAAW,OAAO,EAAE,aAAa,WAAW,EAAE,WAAW;AAC/D,UAAM,QAAQ,OAAO,EAAE,UAAU,WAAW,EAAE,QAAQ;AACtD,UAAM,WAAW,OAAO,EAAE,aAAa,WAAW,EAAE,WAAW;AAC/D,UAAM,WAAW,OAAO,EAAE,aAAa,WAAW,EAAE,WAAW;AAC/D,UAAM,QAAQ,OAAO,EAAE,UAAU,WAAW,EAAE,QAAQ;AAGtD,UAAM,UAAU,WAAW,KAAK,IAAI,QAAQ,IAAI;AAChD,QAAI,aAAa,GAAG;AAClB,UAAI,IAAI,QAAQ,KAAK,KAAK,QAAQ,IAAI;AACtC,aAAO,IAAI,CAAC,KAAK,GAAI,MAAK,KAAK,KAAK;AACpC,aAAO,IAAI,KAAK,GAAI,MAAK,KAAK,KAAK;AACnC,QAAE,QAAQ;AAAA,IACZ;AAGA,UAAM,cAAc,QAAQ;AAC5B,QAAI,cAAc,GAAG;AACnB,QAAE,MAAM,EAAE,MAAM,KAAK,KAAK,IAAI,EAAE,SAAS,CAAC,IAAI,cAAc;AAC5D,QAAE,MAAM,EAAE,MAAM,KAAK,KAAK,IAAI,EAAE,SAAS,CAAC,IAAI,cAAc;AAAA,IAC9D;AAGA,UAAM,WAAW,OAAO,EAAE,aAAa,WAAW,EAAE,WAAW;AAC/D,MAAE,MAAM,EAAE,MAAM,KAAK;AACrB,MAAE,MAAM,EAAE,MAAM,KAAK;AAGrB,eAAW,GAAG,QAAQ;AAGtB,MAAE,MAAM,EAAE,MAAM,KAAK;AACrB,MAAE,MAAM,EAAE,MAAM,KAAK;AAErB,UAAM,IAAI,OAAO,EAAE,WAAW,WAAW,EAAE,SAAS;AACpD,QAAI,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,OAAO,IAAI;AACxC,QAAI,OAAO,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,OAAO,IAAI;AACxC,QAAI,cAAc,QAAQ;AAC1B,QAAI,SAAS;AACb,QAAI,aAAa;AACf,cAAQ,iBAAiB,OAAO;AAAA,QAC9B,KAAK;AACH,mBAAS;AACT;AAAA,QACF,KAAK;AACH,cAAI,EAAE,IAAI,CAAC,EAAG,GAAE,KAAK,OAAO,IAAI,IAAI;AACpC,cAAI,EAAE,IAAI,OAAO,IAAI,EAAG,GAAE,KAAK,OAAO,IAAI,IAAI;AAC9C,cAAI,EAAE,IAAI,CAAC,EAAG,GAAE,KAAK,OAAO,IAAI,IAAI;AACpC,cAAI,EAAE,IAAI,OAAO,IAAI,EAAG,GAAE,KAAK,OAAO,IAAI,IAAI;AAC9C;AAAA,QACF,KAAK;AACH,cAAI,MAAM;AACR,cAAE,KAAK,EAAE,EAAE,MAAM;AACjB,cAAE,IAAI,KAAK,IAAI,CAAC,GAAG,KAAK,IAAI,OAAO,IAAI,GAAG,EAAE,CAAC,CAAC;AAAA,UAChD;AACA,cAAI,MAAM;AACR,cAAE,KAAK,EAAE,EAAE,MAAM;AACjB,cAAE,IAAI,KAAK,IAAI,CAAC,GAAG,KAAK,IAAI,OAAO,IAAI,GAAG,EAAE,CAAC,CAAC;AAAA,UAChD;AACA;AAAA,MACJ;AAAA,IACF;AACA,QAAI,OAAQ,OAAM,MAAM,OAAO,IAAI,CAAC;AAAA,EACtC;AAGA,WAAS,MAAM,MAAM,WAAW,CAAC,GAAG,SAAS,GAAG,MAAM,GAAG,MAAM;AAC7D,UAAM,IAAI,MAAM,QAAQ,EAAE;AAC1B,aAAS,MAAM,MAAM,SAAS,CAAC,GAAG,SAAS,GAAG,MAAM,GAAG,MAAM;AAC3D,YAAM,IAAI,MAAM,MAAM,EAAE;AACxB,UAAI,EAAE,SAAS,EAAE,KAAM;AACvB,YAAM,KAAK,EAAE,UAAU,MAAM,EAAE,UAAU;AACzC,UAAI,MAAM,GAAG,CAAC,KAAK,IAAI,GAAG;AACxB,cAAM,WACJ,OAAO,EAAE,YAAY,YAAY,OAAO,EAAE,YAAY,YACjD,MAAM,SAAS,CAAC,GAAG,KAAK,CAAC,OAAY,GAAG,OAAO,EAAE,OAAO,IACzD;AACN,YAAI,gBAAgB;AACpB,YAAI,gBAAgB;AACpB,cAAM,SAAS,EAAE,UAAU;AAC3B,YAAI,SAAS,GAAG;AACd,gBAAM,WAAW,KAAK,IAAI,QAAQ,EAAE,UAAU,CAAC;AAC/C,YAAE,SAAS,SAAS;AACpB,gBAAM,WAAW,KAAK;AAAA,aACnB,EAAE,KAAK,MAAM,EAAE,KAAK;AAAA,aACpB,EAAE,KAAK,MAAM,EAAE,KAAK;AAAA,UACvB;AACA,WAAC,MAAM,eAAe,CAAC,GAAG,KAAK;AAAA,YAC7B,IAAI,EAAE;AAAA,YACN,MAAM,EAAE;AAAA,YACR,MAAM,EAAE;AAAA,YACR,MAAM,EAAE;AAAA,YACR,QAAQ;AAAA,YACR;AAAA,UACF,CAAC;AAED,WAAC,MAAM,iBAAiB,CAAC,GAAG,KAAK;AAAA,YAC/B,IAAI,EAAE;AAAA,YACN,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,GAAG,EAAE;AAAA,YACL,GAAG,EAAE;AAAA,YACL,MAAM,EAAE;AAAA,YACR,YAAY,YAAY,SAAS;AAAA,UACnC,CAAC;AACD,gBAAM,aAAa,EAAE,UAAU,KAAK;AACpC,cAAI,YAAY,GAAG;AACjB,cAAE,MAAM;AACR,aAAC,MAAM,eAAe,CAAC,GAAG,KAAK;AAAA,cAC7B,IAAI,EAAE;AAAA,cACN,MAAM,EAAE;AAAA,cACR,MAAM,EAAE;AAAA,cACR,MAAM,EAAE;AAAA,cACR,QAAQ;AAAA,YACV,CAAC;AAED,aAAC,MAAM,iBAAiB,CAAC,GAAG,KAAK;AAAA,cAC/B,IAAI,EAAE;AAAA,cACN,MAAM;AAAA,cACN,QAAQ;AAAA,cACR,GAAG,EAAE;AAAA,cACL,GAAG,EAAE;AAAA,cACL,MAAM,EAAE;AAAA,cACR,YAAY,YAAY,SAAS;AAAA,YACnC,CAAC;AAAA,UACH;AACA,0BAAgB;AAChB,0BAAgB,KAAK,IAAI,IAAI,EAAE,UAAU,KAAK,QAAQ;AAAA,QACxD,OAAO;AACL,YAAE,MAAM,EAAE,UAAU;AACpB,WAAC,MAAM,eAAe,CAAC,GAAG,KAAK;AAAA,YAC7B,IAAI,EAAE;AAAA,YACN,MAAM,EAAE;AAAA,YACR,MAAM,EAAE;AAAA,YACR,MAAM,EAAE;AAAA,YACR,QAAQ,EAAE,UAAU;AAAA,UACtB,CAAC;AAED,WAAC,MAAM,iBAAiB,CAAC,GAAG,KAAK;AAAA,YAC/B,IAAI,EAAE;AAAA,YACN,MAAM;AAAA,YACN,QAAQ,EAAE,UAAU;AAAA,YACpB,GAAG,EAAE;AAAA,YACL,GAAG,EAAE;AAAA,YACL,MAAM,EAAE;AAAA,YACR,YAAY,YAAY,SAAS;AAAA,UACnC,CAAC;AACD,0BAAgB,EAAE,UAAU;AAAA,QAC9B;AAGA,UAAE,YAAY,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,EAAE,MAAM,MAAM,EAAE,SAAS,EAAE,CAAC;AACnE,UAAE,gBACA,OAAO,EAAE,cAAc,YAAY,EAAE,YAAY,IAC7C,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,EAAE,UAAU,KAAK,EAAE,SAAS,CAAC,IACtD;AAEN,YAAI,UAAU;AACZ,mBAAS,MACN,SAAS,MAAM,MACf,gBAAgB,kBAAkB,YAAe,eAAe;AACnE,kBACG,SAAS,MAAM,MAAM,YAAe,UAAU,SAAS,SAAS,CAAC,GAClE;AACA,qBAAS,MAAM,YAAe,UAAU,SAAS,SAAS,CAAC;AAC3D,qBAAS,SAAS,SAAS,SAAS,KAAK;AAEzC,kBAAM,gBAAgB,CAACC,IAAQC,SAC7B,OAAOD,OAAM,aAAaA,GAAEC,IAAG,IAAID,MAAK;AAC1C,kBAAM,MAAM,SAAS,SAAS;AAC9B,kBAAM,WAAW;AAAA,cACf,YAAe;AAAA,cACf;AAAA,YACF;AACA,kBAAM,WAAW;AAAA,cACf,YAAe;AAAA,cACf;AAAA,YACF;AACA,kBAAM,YAAY;AAAA,cAChB,YAAe;AAAA,cACf;AAAA,YACF;AACA,kBAAM,cAAc;AAAA,cACjB,YAAuB;AAAA,cACxB;AAAA,YACF;AACA,kBAAM,cAAc;AAAA,cACjB,YAAuB;AAAA,cACxB;AAAA,YACF;AAEA,kBAAM,QAAQ,IAAI;AAClB,kBAAM,QAAQ,IAAI;AAClB,kBAAM,SAAS,IAAI;AAEnB,qBAAS,SAAS,SAAS,SAAS,KAAK;AACzC,qBAAS,KAAK,KAAK,IAAI,SAAS,QAAQ,SAAS,MAAM,KAAK,KAAK;AACjE,gBAAI,OAAO,SAAS,cAAc,UAAU;AAC1C,uBAAS,aAAa,SAAS,aAAa,KAAK;AACjD,uBAAS,SAAS,KAAK;AAAA,gBACrB,SAAS;AAAA,iBACR,SAAS,UAAU,KAAK;AAAA,cAC3B;AAAA,YACF;AACA,gBAAI,MAAM,QAAQ,SAAS,OAAO,GAAG;AACnC,yBAAW,KAAK,SAAS,SAAS;AAChC,oBAAI,OAAO,EAAE,WAAW,SAAU,GAAE,UAAU;AAAA,cAChD;AAAA,YACF;AAEA,gBACE,OAAO,gBAAgB,YACvB,OAAO,SAAS,UAAU;AAE1B,uBAAS,QAAQ,SAAS,SAAS,IAAI;AACzC,gBACE,OAAO,gBAAgB,YACvB,OAAO,SAAS,gBAAgB;AAEhC,uBAAS,cAAc,SAAS,eAAe,IAAI;AAAA,UACvD;AAAA,QACF;AACA,cAAM,QAAQ,OAAO,IAAI,CAAC;AAC1B,YAAI,EAAE,MAAM,GAAG;AAEb,kBAAQ;AAAA,YACN;AAAA,YACA,YAAY,SAAS;AAAA,YACrB;AAAA,YACA,YAAY,SAAS;AAAA,UACvB;AACA,cAAI,UAAU;AACZ,qBAAS,MAAM,SAAS,MAAM,MAAM,YAAe,aAAa;AAEhE,oBAAQ;AAAA,cACN;AAAA,cACA,SAAS;AAAA,cACT;AAAA,cACA,SAAS;AAAA,YACX;AACA,oBACG,SAAS,MAAM,MAChB,YAAe,UAAU,SAAS,SAAS,CAAC,GAC5C;AACA,uBAAS,MAAM,YAAe,UAAU,SAAS,SAAS,CAAC;AAC3D,uBAAS,SAAS,SAAS,SAAS,KAAK;AAEzC,oBAAM,gBAAgB,CAACA,IAAQC,SAC7B,OAAOD,OAAM,aAAaA,GAAEC,IAAG,IAAID,MAAK;AAC1C,oBAAM,MAAM,SAAS,SAAS;AAC9B,oBAAM,WAAW;AAAA,gBACf,YAAe;AAAA,gBACf;AAAA,cACF;AACA,oBAAM,WAAW;AAAA,gBACf,YAAe;AAAA,gBACf;AAAA,cACF;AACA,oBAAM,YAAY;AAAA,gBAChB,YAAe;AAAA,gBACf;AAAA,cACF;AACA,oBAAM,cAAc;AAAA,gBACjB,YAAuB;AAAA,gBACxB;AAAA,cACF;AACA,oBAAM,cAAc;AAAA,gBACjB,YAAuB;AAAA,gBACxB;AAAA,cACF;AAEA,oBAAM,QAAQ,IAAI;AAClB,oBAAM,QAAQ,IAAI;AAClB,oBAAM,SAAS,IAAI;AACnB,uBAAS,SAAS,SAAS,SAAS,KAAK;AACzC,uBAAS,KAAK,KAAK;AAAA,gBACjB,SAAS;AAAA,iBACR,SAAS,MAAM,KAAK;AAAA,cACvB;AACA,kBAAI,OAAO,SAAS,cAAc,UAAU;AAC1C,yBAAS,aAAa,SAAS,aAAa,KAAK;AACjD,yBAAS,SAAS,KAAK;AAAA,kBACrB,SAAS;AAAA,mBACR,SAAS,UAAU,KAAK;AAAA,gBAC3B;AAAA,cACF;AACA,kBAAI,MAAM,QAAQ,SAAS,OAAO,GAAG;AACnC,2BAAW,KAAK,SAAS,SAAS;AAChC,sBAAI,OAAO,EAAE,WAAW,SAAU,GAAE,UAAU;AAAA,gBAChD;AAAA,cACF;AAEA,kBACE,OAAO,gBAAgB,YACvB,OAAO,SAAS,UAAU;AAE1B,yBAAS,QAAQ,SAAS,SAAS,IAAI;AACzC,kBACE,OAAO,gBAAgB,YACvB,OAAO,SAAS,gBAAgB;AAEhC,yBAAS,cAAc,SAAS,eAAe,IAAI;AAAA,YACvD;AAAA,UACF;AACA,WAAC,MAAM,eAAe,CAAC,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,MAAM,EAAE,KAAK,CAAC;AAC/D,gBAAM,MAAM,OAAO,IAAI,CAAC;AAAA,QAC1B;AACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAGA,aAAW,KAAK,MAAM,SAAS,CAAC,GAAG;AACjC,QAAI,EAAE;AACJ,QAAE,SAAS,KAAK;AAAA,QACd,EAAE;AAAA,SACD,EAAE,UAAU,MAAM,EAAE,eAAe,KAAK;AAAA,MAC3C;AAAA,EACJ;AAGA,aAAW,KAAK,MAAM,SAAS,CAAC,GAAG;AACjC,MAAE,YAAY,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,EAAE,MAAM,MAAM,EAAE,SAAS,EAAE,CAAC;AACnE,MAAE,gBACA,OAAO,EAAE,cAAc,YAAY,EAAE,YAAY,IAC7C,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,EAAE,UAAU,KAAK,EAAE,SAAS,CAAC,IACtD;AAAA,EACR;AAEA,SAAO;AACT;;;AC5aO,IAAM,mBAAmB;AAAA,EAC9B,YAAY,EAAE,GAAG,MAAM,GAAG,KAAK;AAAA,EAC/B,aAAa;AAAA,EACb,cAAc;AAAA,EACd,OAAO,EAAE,IAAI,QAAQ,MAAM,WAAW,GAAG,IAAI,GAAG,GAAG,IAAI,KAAK,IAAI,IAAI;AACtE;AAEO,SAAS,mBAAmB;AAEjC,SAAO,EAAE,GAAG,MAAM,GAAG,KAAK;AAC5B;;;ACPO,SAAS,gBAAgB,MAAc,kBAAkB;AAC9D,QAAM,SAAS,IAAI,OAAO,KAAK,EAAE,MAAM,SAAS,CAAC;AACjD,QAAM,YAAY,oBAAI,IAAgC;AAEtD,SAAO,YAAY,CAAC,OAAqB;AACvC,UAAM,MAAM,GAAG;AACf,UAAM,KAAK,UAAU,IAAI,OAAO,IAAI,IAAI;AACxC,QAAI,GAAI,IAAG,GAAG;AAAA,EAChB;AAEA,SAAO;AAAA,IACL,KAAK,KAAiB;AAAE,aAAO,YAAY,GAAG;AAAA,IAAG;AAAA,IACjD,GAAG,MAAc,IAAwB;AAAE,gBAAU,IAAI,MAAM,EAAE;AAAA,IAAG;AAAA,IACpE,YAAY;AAAE,aAAO,UAAU;AAAA,IAAG;AAAA,EACpC;AACF;;;AClBO,IAAM,SAAS;AAAA,EACpB,KAAK;AAAA,EAAK,eAAe;AAAA,EAAG,aAAa;AAAA,EAAK,eAAe;AAAA,EAAW,cAAc;AAAA;AAAA;AAAA,EAGtF,UAAU,KAAK,KAAK;AAAA;AACtB;AAEO,IAAM,SAAS;AAAA,EACpB,KAAK;AAAA,EAAK,eAAe;AAAA,EAAG,aAAa;AAAA,EAAK,eAAe;AAAA,EAAW,cAAc;AACxF;AAEO,IAAM,YAAY;AAAA,EACvB,eAAe;AAAA,EAAI,aAAa;AAAA,EAAK,eAAe;AAAA,EAAW,cAAc;AAAA,EAAG,UAAU;AAAA,EAAI,UAAU;AAAA;AAE1G;AAEO,IAAM,qBAAqB;AAAA,EAChC,EAAE,GAAG,KAAK,GAAG,KAAK,MAAM,MAAM;AAAA,EAC9B,EAAE,GAAG,KAAK,GAAG,KAAK,MAAM,OAAO;AACjC;AAEO,IAAM,QAAQ,EAAE,SAAS,MAAM,gBAAgB,KAAK,OAAO,IAAI;;;ARAtE;AAUO,IAAM,QAAe,CAAC;AACtB,IAAM,UAAiB,CAAC;AACxB,IAAM,YAAmB,CAAC;AAE1B,IAAM,UAAiB,CAAC;AACxB,IAAM,gBAAuB,CAAC;AAC9B,IAAM,gBAAuB,CAAC;AAC9B,IAAM,eAAsB,CAAC;AAE7B,IAAM,SAAS;AAAA,EACpB,QAAQ,EAAE,GAAG,OAAO;AAAA,EACpB,QAAQ,EAAE,GAAG,OAAO;AAAA,EACpB,WAAW,EAAE,GAAG,UAAU;AAAA,EAC1B,OAAO,EAAE,GAAG,MAAM;AACpB;AAEA,IAAIE,SAAuB;AAC3B,IAAI,yBAAiC,YAAY,yBAAyB,YAAY;AACtF,IAAI,4BAA4B;AAiEzB,SAAS,gBAAgB,GAAa;AAC3C,QAAM,IAAI,UAAU,QAAQ,CAAC;AAC7B,MAAI,MAAM,GAAI,WAAU,OAAO,GAAG,CAAC;AACnC,IAAE,QAAQ;AACV,eAAa,KAAK,CAAC;AACrB;AA2EO,SAAS,yBAAyB,SAAiB;AACxD,2BAAyB,OAAO,OAAO,MAAM,YAAY,yBAAyB,YAAY;AAChG;AACO,SAAS,2BAA2B;AACzC,SAAO;AACT;AAEA,SAAS,iBACP,KACA,MACA,MACA;AACA,QAAM,MAAM,IAAI,IAAI,IAAI,KAAK,CAAC;AAC9B,aAAW,MAAM,IAAI,MAAM,GAAG;AAC5B,QAAI;AACF,UAAI,OAAO,OAAO,WAAY,IAAG,IAAI;AAAA,IACvC,SAAS,GAAG;AAAA,IAAC;AAAA,EACf;AACF;AAEA,SAAS,sBACP,IACA,OACA,oBAAyB,CAAC,GACC;AAC3B,+BAA6B;AAC7B,MAAI,6BAA6B,wBAAwB;AACvD,gCAA4B;AAC5B,QAAI;AACF,UAAI,OAAO,wCAAwC,YAAY;AAC7D,cAAM,SAAS,oCAAoC,OAAO;AAAA,UACxD,GAAG;AAAA,UACH,QAAQ,iBAAiB;AAAA,UACzB,SAAS;AAAA,QACX,CAAC;AACD,YAAI,MAAM,QAAQ,MAAM,KAAK,OAAO,QAAQ;AAC1C,gBAAM,UAAiB,CAAC;AACxB,qBAAW,KAAK,QAAQ;AACtB,gBAAI;AACF,oBAAM,OAAO;AAAA,gBACX,EAAE,QAAQ,mBAAmB;AAAA,gBAC7B,EAAE,KAAK;AAAA,gBACP,EAAE,KAAK;AAAA,gBACP,EAAE,QAAQ;AAAA,cACZ;AACA,oBAAM,MAAM,KAAK,IAAI;AACrB,sBAAQ,KAAK,IAAI;AAAA,YACnB,SAAS,GAAG;AAAA,YAAC;AAAA,UACf;AACA,iBAAO,EAAE,QAAQ;AAAA,QACnB;AAAA,MACF;AACA,YAAM,WAAW,mBAAmB;AACpC,YAAM,IAAI;AAAA,QACR;AAAA,QACA,mBAAmB,CAAC,EAAE;AAAA,QACtB,mBAAmB,CAAC,EAAE;AAAA,QACtB,mBAAmB,CAAC,EAAE;AAAA,MACxB;AACA,YAAM,IAAI;AAAA,QACR;AAAA,QACA,mBAAmB,CAAC,EAAE;AAAA,QACtB,mBAAmB,CAAC,EAAE;AAAA,QACtB,mBAAmB,CAAC,EAAE;AAAA,MACxB;AACA,YAAM,MAAM,KAAK,CAAC;AAClB,YAAM,MAAM,KAAK,CAAC;AAClB,aAAO,EAAE,SAAS,CAAC,GAAG,CAAC,EAAE;AAAA,IAC3B,SAAS,GAAG;AACV,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AASO,SAAS,kBAAkB;AAAA,EAChC,YAAY;AAAA,EACZ,WAAW;AAAA,EACX,OAAO;AAAA,EACP,iBAAiB;AACnB,IAAwB,CAAC,GAAG;AAC1B,MAAI,QAAQ,iBAAiB;AAC7B,MAAI,UAAU;AACd,QAAM,YAAY,oBAAI,IAAwB;AAC9C,QAAM,iBAA6B,CAAC;AACpC,MAAI,YAAiB;AACrB,MAAI,cAAc;AAClB,MAAI,oBAAyE;AAAA,IAC3E,SAAS,CAAC;AAAA,IACV,WAAW;AAAA,IACX,SAAS,CAAC;AAAA,EACZ;AACA,MAAI,aAAa;AACjB,MAAI,oBAAyB,CAAC;AAE9B,WAAS,KAAK,MAAc,KAAU;AACpC,qBAAiB,WAAW,MAAM,GAAG;AAAA,EACvC;AACA,WAAS,cAAc;AACrB,WAAO,QAAQ;AAAA,EACjB;AAEA,MAAI;AACF,QAAI,WAAW;AACb,YAAM,UAAU,0BAA0B;AAC1C,UAAI;AACJ,UAAI;AAEF,uBAAe,OAAO,gBAAgB,eAAe,YAAY,MAC7D,IAAI,IAAI,kBAAkB,YAAY,GAAG,EAAE,OAC3C;AAAA,MACN,SAAS,GAAG;AACV,uBAAe;AAAA,MACjB;AACA,kBAAY,QAAQ,YAAY;AAChC,gBAAU,MACR,UAAU,GAAG,SAAS,MAAM;AAC1B,sBAAc;AACd,mBAAW,MAAM,eAAe,MAAM,GAAG;AACvC,cAAI;AACF,eAAG;AAAA,UACL,SAAS,GAAG;AAAA,UAAC;AAAA,QACf;AAAA,MACF,CAAC;AACH,gBAAU,MACR,UAAU,GAAG,YAAY,CAAC,MAAW;AACnC,YAAI,KAAK,EAAE,MAAO,SAAQ,EAAE;AAAA,MAC9B,CAAC;AACH,gBAAU,MACR,UAAU,GAAG,kBAAkB,CAAC,MAAW;AACzC,aAAK,kBAAkB,CAAC;AAAA,MAC1B,CAAC;AACH,UAAI;AACF,kBAAU,KAAK;AAAA,UACb,MAAM;AAAA,UACN;AAAA,UACA,QAAQ,iBAAiB;AAAA,UACzB,SAAS,IAAI;AAAA,UACb;AAAA,QACF,CAAC;AACD,kBAAU,KAAK,EAAE,MAAM,QAAQ,CAAC;AAAA,MAClC,SAAS,GAAG;AAAA,MAAC;AAAA,IACf;AAAA,EACF,SAAS,GAAG;AACV,gBAAY;AAAA,EACd;AAEA,WAAS,iBAAiB,IAAY;AACpC,UAAM,SAAS,sBAAsB,IAAI,OAAO,iBAAiB;AACjE,QAAI,UAAU,MAAM,QAAQ,OAAO,OAAO,KAAK,OAAO,QAAQ,QAAQ;AACpE,0BAAoB;AAAA,QAClB,SAAS,OAAO;AAAA,QAChB,WAAW,KAAK,IAAI;AAAA,QACpB,SAAS,EAAE,GAAG,kBAAkB;AAAA,MAClC;AACA,WAAK,kBAAkB,EAAE,SAAS,OAAO,QAAQ,CAAC;AAAA,IACpD;AAAA,EACF;AAEA,WAAS,KAAK,WAAmB;AAE/B,UAAM,YAAY,KAAK,IAAI,WAAW,IAAI;AAC1C,QAAI,CAAC,WAAW;AAEd,UAAI;AACF,sBAAc,OAAO,WAAW,iBAAiB,CAAC;AAAA,MACpD,SAAS,GAAG;AAAA,MAAC;AACb,UAAI;AACF,qBAAa,OAAO,WAAW,iBAAiB,CAAC;AAAA,MACnD,SAAS,GAAG;AAAA,MAAC;AAAA,IACf,OAAO;AACL,UAAI;AACF,kBAAU,QAAQ,UAAU,KAAK,EAAE,MAAM,kBAAkB,CAAC;AAAA,MAC9D,SAAS,GAAG;AAAA,MAAC;AAAA,IACf;AACA,qBAAiB,SAAS;AAE1B,UAAM,OAAO,GAAG,MAAM,QAAQ,GAAG,MAAM,MAAM,OAAO,CAAC,MAAW,EAAE,KAAK,CAAC,CAAC;AACzE,YAAQ,OAAO,GAAG,QAAQ,QAAQ,GAAG,MAAM,QAAQ,OAAO,CAAC,MAAW,EAAE,MAAM,CAAC,CAAC;AAEhF,aAAS,IAAI,UAAU,SAAS,GAAG,KAAK,GAAG,KAAK;AAC9C,YAAM,IAAI,UAAU,CAAC;AACrB,QAAE,QAAQ,EAAE,QAAQ,EAAE,OAAO,KAAK;AAClC,UAAI,EAAE,QAAQ,EAAG,iBAAgB,CAAC;AAAA,IACpC;AAEA,aAAS,MAAM,KAAY,IAAY;AACrC,eAAS,IAAI,IAAI,SAAS,GAAG,KAAK,GAAG,KAAK;AACxC,cAAM,KAAK,IAAI,CAAC;AAChB,WAAG,QAAQ,GAAG,QAAQ,GAAG,OAAO,KAAK;AACrC,YAAI,GAAG,QAAQ,EAAG,KAAI,OAAO,GAAG,CAAC;AAAA,MACnC;AAAA,IACF;AACA,UAAM,SAAS,SAAS;AACxB,UAAM,eAAe,SAAS;AAC9B,UAAM,eAAe,SAAS;AAC9B,QAAI,YAAY,OAAO,SAAS,gBAAgB,YAAY;AAC1D,UAAI;AACF,iBAAS,YAAY;AAAA,UACnB,OAAO,MAAM;AAAA,UACb,SAAS,MAAM;AAAA,UACf;AAAA,UACA;AAAA,UACA;AAAA,UACA,GAAG,MAAM;AAAA,QACX,CAAC;AAAA,MACH,SAAS,GAAG;AAAA,MAAC;AAAA,IACf;AAAA,EACF;AAEA,MAAI,OACF,OAAO,gBAAgB,eAAe,YAAY,MAC9C,YAAY,IAAI,IAChB,KAAK,IAAI;AACf,MAAI,MAAM;AACV,WAAS,UAAU;AACjB,QAAI,CAAC,QAAS;AACd,UAAM,MACJ,OAAO,gBAAgB,eAAe,YAAY,MAC9C,YAAY,IAAI,IAChB,KAAK,IAAI;AACf,WAAO,MAAM;AACb,WAAO;AACP,QAAI,MAAM,IAAK,OAAM;AACrB,WAAO,OAAO,IAAI,OAAO;AACvB,WAAK,IAAI,QAAQ,GAAI;AACrB,aAAO,IAAI;AAAA,IACb;AACA,QAAI;AACF,4BAAsB,OAAO;AAAA,IAC/B,SAAS,GAAG;AACd,iBAAW,SAAS,IAAI,KAAK;AAAA,IAC3B;AAAA,EACF;AAEA,WAAS,GAAG,KAAa,IAAc;AACrC,UAAM,MAAM,UAAU,IAAI,GAAG,KAAK,CAAC;AACnC,QAAI,KAAK,EAAE;AACX,cAAU,IAAI,KAAK,GAAG;AAAA,EACxB;AACA,WAAS,IAAI,KAAa,IAAc;AACtC,UAAM,MAAM,UAAU,IAAI,GAAG,KAAK,CAAC;AACnC,UAAM,IAAI,IAAI,QAAQ,EAAE;AACxB,QAAI,MAAM,GAAI,KAAI,OAAO,GAAG,CAAC;AAAA,EAC/B;AACA,WAAS,QAAQ;AACf,QAAI,CAAC,SAAS;AACZ,gBAAU;AACV,aACE,OAAO,gBAAgB,eAAe,YAAY,MAC9C,YAAY,IAAI,IAChB,KAAK,IAAI;AACf,cAAQ;AAAA,IACV;AAAA,EACF;AACA,WAAS,QAAQ;AACf,cAAU;AAAA,EACZ;AACA,WAAS,eAAe;AACtB,YAAQ,iBAAiB;AACzB,QAAI;AACF,UAAI;AACF,kBAAU,KAAK,EAAE,MAAM,WAAW,KAAK,YAAY,MAAM,EAAE,MAAM,EAAE,CAAC;AAAA,MACtE,SAAS,GAAG;AAAA,MAAC;AAAA,EACjB;AACA,WAAS,SAAS,KAAK,IAAI,QAAQ,KAAM;AACvC,UAAM,IAAI,OAAO,EAAE,KAAK,IAAI,QAAQ;AACpC,SAAK,CAAC;AAAA,EACR;AACA,WAAS,qBAAqB,IAAa,OAAO;AAChD,iBAAa,CAAC,CAAC;AACf,QAAI,WAAW;AACb,UAAI;AACF,kBAAU,KAAK,EAAE,MAAM,iBAAiB,OAAO,CAAC,CAAC,EAAE,CAAC;AAAA,MACtD,SAAS,GAAG;AAAA,MAAC;AAAA,IACf,OAAO;AACL,UAAI,YAAY;AACd,cAAM,SAAS;AAAA,UACb,IAAI,QAAQ;AAAA,UACZ;AAAA,UACA;AAAA,QACF;AACA,YAAI,UAAU,MAAM,QAAQ,OAAO,OAAO,KAAK,OAAO,QAAQ,QAAQ;AACpE,8BAAoB;AAAA,YAClB,SAAS,OAAO;AAAA,YAChB,WAAW,KAAK,IAAI;AAAA,YACpB,SAAS,EAAE,GAAG,kBAAkB;AAAA,UAClC;AACA,eAAK,kBAAkB,EAAE,SAAS,OAAO,QAAQ,CAAC;AAAA,QACpD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,WAAS,sBAAsB;AAC7B,WAAO,CAAC,CAAC;AAAA,EACX;AACA,WAAS,qBAAqB,OAAY,CAAC,GAAG;AAC5C,wBAAoB,EAAE,GAAG,mBAAmB,GAAG,KAAK;AACpD,QAAI;AACF,UAAI;AACF,kBAAU,KAAK;AAAA,UACb,MAAM;AAAA,UACN,MAAM;AAAA,QACR,CAAC;AAAA,MACH,SAAS,GAAG;AAAA,MAAC;AAAA,EACjB;AACA,WAAS,uBAAuB;AAC9B,WAAO,EAAE,GAAG,kBAAkB;AAAA,EAChC;AACA,WAAS,gCAAgC,SAAiB;AACxD,6BAAyB,OAAO;AAChC,QAAI;AACF,UAAI;AACF,kBAAU,KAAK,EAAE,MAAM,4BAA4B,QAAQ,CAAC;AAAA,MAC9D,SAAS,GAAG;AAAA,MAAC;AAAA,EACjB;AACA,WAAS,kCAAkC;AACzC,WAAO,yBAAyB;AAAA,EAClC;AACA,WAAS,YAAY;AACnB,WAAO;AAAA,EACT;AACA,WAAS,WAAW;AAClB,WAAO,CAAC,CAAC,aAAa,CAAC,CAAC;AAAA,EAC1B;AACA,WAAS,cAAc,IAAc;AACnC,QAAI,OAAO,OAAO,WAAY,gBAAe,KAAK,EAAE;AAAA,EACtD;AACA,WAAS,eAAe,IAAc;AACpC,UAAM,IAAI,eAAe,QAAQ,EAAE;AACnC,QAAI,MAAM,GAAI,gBAAe,OAAO,GAAG,CAAC;AAAA,EAC1C;AACA,WAAS,UAAU,OAAe,OAAO;AACvC,QAAI;AACF,YAAM,OAAO,mBAAmB;AAChC,YAAM,IAAI,iBAAiB;AAC3B,YAAM,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,IAAI,MAAM,QAAQ,IAAI,EAAE,CAAC,CAAC;AAC3D,YAAM,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,EAAE,IAAI,MAAM,QAAQ,IAAI,EAAE,CAAC,CAAC;AAC3D,YAAM,OAAO,WAAW,MAAM,GAAG,GAAG,IAAI;AACxC,YAAM,MAAM,KAAK,IAAI;AACrB,aAAO;AAAA,IACT,SAAS,GAAG;AACV,aAAO;AAAA,IACT;AAAA,EACF;AAGA,WAAS,aAAa;AACpB,QAAI;AAEF,YAAM,MAAM,SAAS;AAErB,YAAM,SAAS,iBAAiB;AAChC,YAAMC,QAAO,KAAK,MAAM,QAAQ,IAAI,UAAU,MAAM;AACpD,YAAMC,SAAQ,kBAAkBD,OAAM,QAAQ,UAAU;AACxD,iBAAW,QAAQC,QAAO;AACxB,cAAM,MAAM,KAAK,IAAI;AAAA,MACvB;AAAA,IACF,SAAS,GAAG;AAAA,IAEZ;AAAA,EACF;AACA,WAAS,cAAc,UAAkB,KAAK,MAAM,QAAQ,IAAI,UAAU,GAAG;AAC3E,IAAAC,SAAQ,YAAY;AACpB,UAAMA,MAAK;AACX,QAAI;AACF,UAAI;AACF,kBAAU,KAAK,EAAE,MAAM,WAAW,MAAMA,OAAM,CAAC;AAAA,MACjD,SAAS,GAAG;AAAA,MAAC;AAAA,EACjB;AACA,WAAS,uBAAuB;AAC9B,WAAO,EAAE,GAAG,kBAAkB;AAAA,EAChC;AACA,WAAS,WAAW;AAClB,WAAO;AAAA,MACL,OAAO,MAAM,MAAM,MAAM;AAAA,MACzB,SAAS,MAAM,QAAQ,MAAM;AAAA,MAC7B,GAAG,MAAM;AAAA,IACX;AAAA,EACF;AACA,QAAM,QAAQ,EAAE,KAAK,GAAG,MAAM,EAAE;AAChC,QAAM,WAAW,EAAE,OAAO,QAAQ,iBAAiB,EAAE;AAErD,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,0BAA0B;AAAA,IAC1B,0BAA0B;AAAA,IAC1B;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,EACb;AACF;;;AShjBO,IAAM,eAAiC;AAAA,EAC5C,MAAM;AAAA,IACJ,aAAa;AAAA,IACb,kBAAkB;AAAA,EACpB;AAAA,EACA,SAAS;AAAA,IACP,UAAU;AAAA,IACV,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,QAAQ;AAAA;AAAA,IAER,YAAY;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AAAA,IACR,SAAS;AAAA,MACP,MAAM;AAAA,MACN,OAAO;AAAA,QACL,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE;AAAA,QAC5E,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,GAAK,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,OAAO,CAAG,CAAC,EAAE;AAAA,QACrE,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,GAAK,KAAK,GAAG,CAAC,OAAO,CAAG,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;AAAA,QACvE,EAAE,MAAM,UAAU,GAAG,IAAI;AAAA,MAC3B;AAAA,MACA,aAAa;AAAA,MACb,SAAS,EAAE,KAAK,QAAW,OAAO,GAAG,MAAM,QAAQ,MAAM,OAAU;AAAA,IACrE;AAAA,IACA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,QACL,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,IAAM,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,IAAM,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE;AAAA,QACrG,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE;AAAA,QAClF,EAAE,MAAM,UAAU,GAAG,IAAI;AAAA,MAC3B;AAAA,MACA,aAAa;AAAA,MACb,SAAS,EAAE,KAAK,QAAW,OAAO,KAAK,MAAM,QAAQ,MAAM,OAAU;AAAA,IACvE;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,OAAO;AAAA,QACL,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,MAAM,CAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,MAAM,EAAI,GAAG,CAAC,KAAK,KAAK,CAAC,EAAE;AAAA,QACzH,EAAE,MAAM,UAAU,GAAG,IAAI;AAAA,MAC3B;AAAA,MACA,aAAa;AAAA,MACb,SAAS,EAAE,KAAK,QAAW,OAAO,KAAK,MAAM,QAAQ,MAAM,OAAU;AAAA,IACvE;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,OAAO;AAAA,QACL,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAK,GAAG,GAAG,CAAC,KAAK,CAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,KAAK,EAAI,GAAG,CAAC,GAAK,IAAI,CAAC,EAAE;AAAA,QAC9I,EAAE,MAAM,UAAU,GAAG,EAAI;AAAA,QACzB,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,GAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,GAAK,IAAI,CAAC,EAAE;AAAA,MAChF;AAAA,MACA,aAAa;AAAA,MACb,SAAS,EAAE,KAAK,QAAW,OAAO,KAAK,MAAM,QAAQ,MAAM,OAAU;AAAA,MACrE,SAAS;AAAA,QACP,EAAE,MAAM,SAAS,UAAU,CAAC,KAAK,GAAG,EAAE;AAAA,QACtC,EAAE,MAAM,SAAS,UAAU,CAAC,MAAM,GAAG,EAAE;AAAA,QACvC,EAAE,MAAM,SAAS,UAAU,CAAC,KAAK,IAAI,EAAE;AAAA,QACvC,EAAE,MAAM,SAAS,UAAU,CAAC,MAAM,IAAI,EAAE;AAAA,QACxC,EAAE,MAAM,SAAS,UAAU,CAAC,GAAG,GAAG,EAAE;AAAA,QACpC,EAAE,MAAM,SAAS,UAAU,CAAC,GAAG,IAAI,EAAE;AAAA,MACvC;AAAA,IACF;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,OAAO;AAAA,QACL,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,IAAM,GAAG,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,IAAM,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE;AAAA,QAChI,EAAE,MAAM,UAAU,GAAG,IAAI;AAAA,QACzB,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE;AAAA,MAChF;AAAA,MACA,aAAa;AAAA,MACb,SAAS,EAAE,KAAK,QAAW,OAAO,GAAK,MAAM,QAAQ,MAAM,OAAU;AAAA,MACrE,SAAS;AAAA,QACP,EAAE,MAAM,SAAS,UAAU,CAAC,GAAK,GAAG,EAAE;AAAA,QACtC,EAAE,MAAM,SAAS,UAAU,CAAC,IAAM,GAAG,EAAE;AAAA,QACvC,EAAE,MAAM,SAAS,UAAU,CAAC,GAAK,IAAI,EAAE;AAAA,QACvC,EAAE,MAAM,SAAS,UAAU,CAAC,IAAM,IAAI,EAAE;AAAA,MAC1C;AAAA,IACF;AAAA,IACA,aAAa,EAAE,MAAM,UAAU,GAAG,KAAK;AAAA,IACvC,cAAc,EAAE,MAAM,UAAU,GAAG,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,GAAG,KAAK;AAAA,IACvC,aAAa;AAAA,MACX,MAAM;AAAA,MACN,OAAO;AAAA,QACL,EAAE,MAAM,UAAU,GAAG,IAAI;AAAA,QACzB,EAAE,MAAM,WAAW,QAAQ,CAAC,CAAC,MAAM,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE;AAAA,MAClF;AAAA,MACA,aAAa;AAAA,IACf;AAAA;AAAA,IAEA,eAAe,EAAE,MAAM,UAAU,GAAG,KAAK;AAAA,IACzC,gBAAgB,EAAE,MAAM,UAAU,GAAG,KAAK;AAAA,IAC1C,mBAAmB,EAAE,MAAM,UAAU,GAAG,KAAK;AAAA,IAC7C,YAAY,EAAE,MAAM,UAAU,GAAG,IAAI;AAAA,EACvC;AACF;AAGC,aAAqB,aAAa;AAAA,EACjC,aAAa;AAAA,IACX,MAAM;AAAA,IACN,QAAQ,CAAE,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,KAAK,CAAE;AAAA,IACzD,WAAW;AAAA;AAAA,IAEX,OAAO;AAAA;AAAA,IAEP,QAAQ;AAAA,EACV;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,GAAG;AAAA,IACH,aAAa;AAAA,IACb,OAAO;AAAA,IACP,WAAW;AAAA;AAAA,IAEX,WAAW;AAAA,IACX,YAAY;AAAA,EACd;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,OAAO;AAAA,IACP,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,EACV;AAAA,EAEA,aAAa;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA;AAAA,IACT,WAAW;AAAA;AAAA,IACT,OAAO;AAAA;AAAA,IACP,MAAM;AAAA;AAAA,EACR;AACF;AAEC,aAAqB,eAAe;AAAA,EACnC,OAAO,EAAE,SAAS,KAAK,aAAa,UAAU;AAAA,EAC9C,UAAU,EAAE,SAAS,MAAM,aAAa,UAAU;AAAA,EAClD,OAAO,EAAE,SAAS,KAAK,aAAa,UAAU;AAChD;AAEC,aAAqB,sBAAsB;AAAA,EAC1C,SAAW,EAAE,QAAQ,eAAe,QAAQ,gBAAgB,iBAAiB,mBAAmB,aAAa,eAAe,UAAU,KAAK,KAAK,GAAG;AAAA,EACnJ,UAAW,EAAE,QAAQ,eAAe,QAAQ,gBAAgB,iBAAiB,mBAAmB,aAAa,eAAe,UAAU,KAAK,KAAK,GAAG;AAAA,EACnJ,SAAW,EAAE,QAAQ,eAAe,QAAQ,gBAAgB,iBAAiB,mBAAmB,aAAa,eAAe,UAAU,KAAK,KAAK,GAAG;AAAA,EACnJ,WAAW,EAAE,QAAQ,eAAe,QAAQ,gBAAgB,iBAAiB,mBAAmB,aAAa,eAAe,UAAU,KAAK,KAAK,GAAG;AAAA,EACnJ,SAAW,EAAE,QAAQ,eAAe,QAAQ,gBAAgB,iBAAiB,mBAAmB,aAAa,eAAe,UAAU,KAAK,KAAK,GAAG;AACrJ;AAGC,aAAqB,mBAAmB,EAAE,UAAU,MAAM,OAAO,KAAK;AACtE,aAAqB,iBAAiB,KAAK,KAAK;AAE1C,SAAS,gBAAgB,MAAc;AAC5C,QAAM,QAAQ,aAAa,IAAI;AAC/B,QAAM,UAAW,aAAqB,oBAAoB,IAAI,KAAM,aAAqB,oBAAoB;AAC7G,SAAO,EAAE,OAAO,SAAS,SAAS,aAAa,SAAS,YAAa,aAAqB,YAAY,cAAe,aAAqB,aAAa;AACzJ;AAEO,SAAS,aAAa,MAAuB;AAClD,SAAO,aAAa,SAAS,IAAI,KAAK,aAAa,SAAS;AAC9D;AAEO,SAAS,eAAe,OAAqC,SAAkB;AACpF,MAAI,SAAS,QAAS,QAAO,aAAa,SAAS;AACnD,MAAI,SAAS,SAAU,QAAO,aAAa,SAAS;AACpD,SAAO,aAAa,SAAS;AAC/B;AAEO,SAAS,eAAe,QAAiB,SAAkB;AAChE,SAAO,aAAa,SAAS;AAC/B;;;ACzNA;;;ACJO,IAAM,iBAAiB;AAAA,EAC5B,WAAW;AAAA,EACX,kBAAkB;AAAA,EAClB,YAAY;AAAA,EACZ,aAAa,iBAAiB;AAAA,EAC9B,cAAc,iBAAiB;AAAA,EAC/B,qBAAqB;AAAA,EACrB,eAAe;AAAA,EACf,YAAY;AAAA;AAAA;AAAA,EAEZ,OAAO,iBAAiB;AAC1B;AAEO,SAAS,uBAA2C;AACzD,MAAI;AACF,QAAI,eAAe,oBAAoB,OAAO,WAAW,eAAe,OAAO,YAAY,OAAO,SAAS,QAAQ;AACjH,YAAM,IAAI,IAAI,gBAAgB,OAAO,SAAS,MAAM;AACpD,YAAM,IAAI,EAAE,IAAI,UAAU;AAC1B,UAAI,MAAM,YAAY,MAAM,QAAS,QAAO;AAAA,IAC9C;AAAA,EACF,SAAS,GAAG;AAAA,EAAC;AACb,SAAO,eAAe;AACxB;;;ADZO,IAAM,iBAAN,MAAqB;AAAA,EAC1B;AAAA,EACA,MAAuC;AAAA,EACvC;AAAA,EACA,YAA6C;AAAA,EAC7C,kBAAkB;AAAA,EAClB,OAAO;AAAA;AAAA,EAEP,aAAa;AAAA,EAEb,YAAY,QAA2B;AACrC,SAAK,SAAS;AAEd,SAAK,eAAe,SAAS,cAAc,QAAQ;AACnD,SAAK,YAAY,KAAK,aAAa,WAAW,IAAI;AAAA,EACpD;AAAA,EAEA,OAAgB;AACd,SAAK,MAAM,KAAK,OAAO,WAAW,IAAI;AAGtC,QAAI,CAAC,KAAK,KAAK;AAEb,YAAM,OAAO,MAAM;AAAA,MAAC;AACpB,YAAM,UAAe;AAAA,QACnB,cAAc;AAAA,QAAM,uBAAuB;AAAA,QAAM,WAAW;AAAA,QAAM,MAAM;AAAA,QAAM,SAAS;AAAA,QACvF,UAAU;AAAA,QAAM,WAAW;AAAA,QAAM,QAAQ;AAAA,QAAM,QAAQ;AAAA,QAAM,WAAW;AAAA,QACxE,MAAM;AAAA,QAAM,QAAQ;AAAA,QAAM,KAAK;AAAA,QAAM,WAAW;AAAA,QAAM,QAAQ;AAAA,QAAM,WAAW;AAAA,QAC/E,aAAa;AAAA,QAAG,aAAa;AAAA,QAAQ,WAAW;AAAA,QAAQ,WAAW;AAAA,QAAG,0BAA0B;AAAA,MAClG;AACA,WAAK,MAAM;AAAA,IACb;AACA,SAAK,YAAY,KAAK,aAAa,WAAW,IAAI,KAAK,KAAK;AAE5D,QAAI,CAAC,KAAK,UAAW,QAAO;AAE5B,QAAI;AACF,YAAM,cAAe,kBAAkB,OAAQ,eAAuB,gBAAgB,WAAa,eAAuB,cAAc;AACxI,WAAK,aAAa;AAClB,WAAK,IAAI,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACtC,WAAK,IAAI,wBAAwB;AAAA,IACnC,SAAS,GAAG;AACV,WAAK,aAAa;AAAA,IACpB;AACA,WAAO;AAAA,EACT;AAAA,EAEA,YAAqB;AAAE,WAAO;AAAA,EAAO;AAAA,EAErC,YAAY,OAAiB,gBAAgB,GAAS;AAEpD,aAAS,SAAS,GAAW,GAAW,GAAW,OAAe,QAAQ,GAAK,YAAY,GAAG;AACxF,UAAI;AACF,kBAAU,KAAK;AACf,kBAAU,cAAc,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,CAAC;AACtD,kBAAU,cAAc;AACxB,kBAAU,YAAY,YAAY;AAClC,kBAAU,UAAU;AACpB,kBAAU,IAAI,IAAI,aAAa,IAAI,aAAa,KAAK,IAAI,GAAG,IAAI,WAAW,GAAG,GAAG,KAAK,KAAK,CAAC;AAC5F,kBAAU,OAAO;AACjB,kBAAU,QAAQ;AAAA,MACpB,SAAS,GAAG;AAAA,MAA2B;AAAA,IAC7C;AAKA,UAAM,MAAM,KAAK;AACjB,UAAM,YAAY,KAAK;AACvB,QAAI,CAAC,OAAO,CAAC,UAAW;AACxB,UAAM,YAAY,MAAM,YAAY;AACpC,UAAM,cAAe,kBAAkB,OAAQ,eAAuB,gBAAgB,WAAa,eAAuB,cAAc;AACxI,UAAM,WAAY,eAAuB,aAAa;AAEtD,UAAM,UAAU,KAAK,MAAM,YAAY,WAAW;AAClD,UAAM,UAAU,KAAK,MAAM,YAAY,WAAW;AAClD,QAAI,KAAK,aAAa,UAAU,WAAW,KAAK,aAAa,WAAW,SAAS;AAC/E,WAAK,aAAa,QAAQ;AAC1B,WAAK,aAAa,SAAS;AAE3B,WAAK,YAAY,KAAK,aAAa,WAAW,IAAI;AAClD,UAAI,CAAC,KAAK,UAAW;AAAA,IACvB;AAEA,UAAM,kBAAkB,KAAK;AAEzB,oBAAgB,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACjD,oBAAgB,UAAU,GAAG,GAAG,SAAS,OAAO;AAChD,oBAAgB,KAAK;AACrB,oBAAgB,YAAa,aAAa,QAAgB,cAAc;AACxE,oBAAgB,SAAS,GAAG,GAAG,SAAS,OAAO;AAC/C,oBAAgB,QAAQ;AAGxB,aAAS,YAAY,QAAoB;AACvC,UAAI,CAAC,UAAU,OAAO,WAAW,EAAG;AACpC,sBAAgB,UAAU;AAC1B,sBAAgB,OAAO,OAAO,CAAC,EAAE,CAAC,IAAI,aAAa,OAAO,CAAC,EAAE,CAAC,IAAI,WAAW;AAC7E,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK,iBAAgB,OAAO,OAAO,CAAC,EAAE,CAAC,IAAI,aAAa,OAAO,CAAC,EAAE,CAAC,IAAI,WAAW;AACrH,sBAAgB,UAAU;AAC1B,sBAAgB,KAAK;AAAA,IACvB;AAGA,QAAI,SAAS,MAAM,YAAY;AAC7B,UAAI;AACF,wBAAgB,KAAK;AACrB,wBAAgB,2BAA2B;AAC3C,wBAAgB,UAAU,MAAM,YAAY,GAAG,GAAG,SAAS,OAAO;AAClE,wBAAgB,QAAQ;AAAA,MAC1B,SAAS,GAAG;AAAA,MAA2B;AAAA,IACzC;AAGA,UAAM,MAAO,SAAS,MAAM,KAAM;AAGlC,QAAI;AACF,YAAM,UAAU,aAAa,cAAc,aAAa,WAAW;AACnE,UAAI,MAAM,QAAQ,MAAM,YAAY,KAAK,SAAS;AAChD,cAAM,YAAY,MAAM,aAAa,CAAC;AACtC,mBAAW,MAAM,MAAM,cAAc;AACnC,gBAAM,QAAQ,QAAQ,SAAS;AAC/B,mBAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC9B,kBAAM,QAAQ,KAAK,OAAO,IAAI,KAAK,KAAK;AACxC,kBAAM,QAAS,KAAK,OAAO,KAAK,QAAQ,UAAU;AAClD,kBAAM,UAAU,KAAK;AAAA,cACnB,GAAG,GAAG,KAAK;AAAA,cACX,GAAG,GAAG,KAAK;AAAA,cACX,IAAI,KAAK,IAAI,KAAK,IAAI;AAAA,cACtB,IAAI,KAAK,IAAI,KAAK,IAAI;AAAA,cACtB,GAAG,MAAM,KAAK,OAAO,IAAI;AAAA,cACzB,OAAO,QAAQ,SAAS;AAAA,cACxB,UAAU,QAAQ,YAAY;AAAA,cAC9B,KAAK;AAAA,cACL,OAAO;AAAA,YACT,CAAC;AAAA,UACH;AAAA,QACF;AAEA,cAAM,eAAe,CAAC;AAAA,MACxB;AAAA,IACF,SAAS,GAAG;AAAA,IAAqC;AAGjD,UAAM,sBAAsB,CAAC,CAAC,MAAM;AACpC,eAAW,KAAK,MAAM,SAAS,CAAC,GAAG;AACjC,YAAM,MAAM,EAAE,KAAK,KAAK;AACxB,YAAM,MAAM,EAAE,KAAK,KAAK;AACxB,UAAI,KAAK,KAAK,MAAM,WAAW,KAAK,KAAK,MAAM,QAAS;AAExD,UAAI,qBAAqB;AACvB,UAAE,QAAQ,EAAE,SAAS,CAAC;AAEtB,cAAM,OAAO,EAAE,MAAM,SAAS,EAAE,MAAM,EAAE,MAAM,SAAS,CAAC,IAAI;AAC5D,YAAI,CAAC,QAAQ,KAAK,MAAM,EAAE,KAAK,KAAK,MAAM,EAAE,GAAG;AAC7C,YAAE,MAAM,KAAK,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,CAAC;AAAA,QACjC;AAEA,cAAMC,SAAQ,gBAAgB,EAAE,QAAQ,mBAAmB,CAAC;AAC5D,cAAM,YAAaA,OAAM,WAAWA,OAAM,QAAQ,eAAgB;AAAA,MAEpE;AAGA,UAAI,MAAM,QAAQ,EAAE,KAAK,GAAG;AAC1B,iBAAS,IAAI,GAAG,IAAI,EAAE,MAAM,QAAQ,KAAK;AACvC,gBAAM,KAAK,EAAE,MAAM,CAAC,EAAE,KAAK;AAC3B,gBAAM,KAAK,EAAE,MAAM,CAAC,EAAE,KAAK;AAC3B,gBAAM,SAAS,MAAM,OAAO,IAAI,EAAE,MAAM;AACxC,gBAAM,MAAM,KAAK;AACjB,gBAAM,MAAM,KAAK;AACjB,cAAI,MAAM,KAAK,OAAO,WAAW,MAAM,KAAK,OAAO,QAAS;AAC5D,0BAAgB,KAAK;AACrB,0BAAgB,cAAc;AAC9B,0BAAgB,YAAY;AAC5B,0BAAgB,UAAU;AAC1B,0BAAgB,IAAI,KAAK,KAAK,IAAI,aAAa,GAAG,KAAK,KAAK,CAAC;AAC7D,0BAAgB,KAAK;AACrB,0BAAgB,QAAQ;AAAA,QAC1B;AAAA,MACF;AAGA,YAAM,QAAQ,gBAAgB,EAAE,QAAQ,mBAAmB,CAAC;AAC5D,YAAM,QAAQ,aAAa,EAAE,QAAQ,mBAAmB,CAAC;AACzD,sBAAgB,KAAK;AACrB,sBAAgB,WAAW,EAAE,KAAK,KAAK,cAAc,EAAE,KAAK,KAAK,WAAW;AAC5E,sBAAgB,OAAQ,EAAE,SAAS,CAAE;AACrC,UAAI,YAAY,aAAa,QAAQ,YAAY;AACjD,UAAI,EAAE,SAAS,SAAS,YAAY,MAAM,IAAK,aAAY,YAAY,MAAM,IAAI;AAAA,eACxE,EAAE,SAAS,UAAU,YAAY,MAAM,KAAM,aAAY,YAAY,MAAM,KAAK;AACzF,sBAAgB,YAAY;AAC5B,UAAI,MAAM,SAAS,UAAU;AAC3B,wBAAgB,UAAU;AAC1B,wBAAgB,IAAI,GAAG,IAAI,EAAE,UAAU,MAAM,aAAa,GAAG,KAAK,KAAK,CAAC;AACxE,wBAAgB,KAAK;AAAA,MACvB,WAAW,MAAM,SAAS,WAAW;AACnC,oBAAY,MAAM,MAAoB;AAAA,MACxC,WAAW,MAAM,SAAS,YAAY;AACpC,mBAAW,QAAQ,MAAM,OAAO;AAC9B,cAAI,KAAK,SAAS,UAAU;AAC1B,4BAAgB,UAAU;AAC1B,4BAAgB,IAAI,GAAG,IAAI,KAAK,KAAK,MAAM,EAAE,UAAU,MAAM,aAAa,GAAG,KAAK,KAAK,CAAC;AACxF,4BAAgB,KAAK;AAAA,UACvB,WAAW,KAAK,SAAS,WAAW;AAClC,wBAAY,KAAK,MAAoB;AAAA,UACvC;AAAA,QACF;AAAA,MACF;AAEA,UAAI,MAAM,QAAQ,EAAE,OAAO,KAAK,EAAE,QAAQ,SAAS,GAAG;AACpD,mBAAW,UAAU,EAAE,SAAS;AAC9B,cAAI,CAAC,UAAU,CAAC,OAAO,SAAU;AACjC,gBAAM,cAAc,eAAe,OAAO,QAAQ,OAAO;AAEzD,gBAAM,WAAW,EAAE,QAAQ;AAC3B,gBAAM,UAAU,8DAAmC,cAAc,EAAE,QAAQ;AAC3E,gBAAM,eAAe,WAAW,OAAO,QAAQ,WAAW,WAAW,QAAQ,SAAU,EAAE,UAAU;AACnG,gBAAM,cAAc,eAAe,cAAc;AAEjD,gBAAM,QAAS,EAAE,SAAS;AAC1B,gBAAM,CAAC,IAAI,EAAE,IAAI,OAAO;AACxB,gBAAM,UAAU,KAAK,IAAI,KAAK,IAAI,KAAK,eAAe,KAAK,IAAI,KAAK,IAAI,KAAK;AAC7E,gBAAM,UAAU,KAAK,IAAI,KAAK,IAAI,KAAK,eAAe,KAAK,IAAI,KAAK,IAAI,KAAK;AAC7E,0BAAgB,KAAK;AACrB,0BAAgB,UAAU,SAAS,OAAO;AAC1C,0BAAgB,OAAO,CAAC;AACxB,0BAAgB,YAAY,aAAa,QAAQ,UAAU;AAC3D,cAAI,YAAY,SAAS,UAAU;AACjC,4BAAgB,UAAU;AAC1B,4BAAgB,IAAI,GAAG,IAAI,YAAY,KAAK,KAAK,aAAa,GAAG,KAAK,KAAK,CAAC;AAC5E,4BAAgB,KAAK;AAAA,UACvB,WAAW,YAAY,SAAS,WAAW;AACzC,4BAAgB,KAAK;AACrB,4BAAgB,MAAM,aAAa,WAAW;AAC9C,wBAAY,YAAY,MAAoB;AAC5C,4BAAgB,QAAQ;AAAA,UAC1B,WAAW,YAAY,SAAS,YAAY;AAC1C,uBAAW,QAAQ,YAAY,OAAO;AACpC,kBAAI,KAAK,SAAS,UAAU;AAC1B,gCAAgB,UAAU;AAC1B,gCAAgB,IAAI,GAAG,IAAI,KAAK,KAAK,KAAK,aAAa,GAAG,KAAK,KAAK,CAAC;AACrE,gCAAgB,KAAK;AAAA,cACvB,WAAW,KAAK,SAAS,WAAW;AAClC,gCAAgB,KAAK;AACrB,gCAAgB,MAAM,aAAa,WAAW;AAC9C,4BAAY,KAAK,MAAoB;AACrC,gCAAgB,QAAQ;AAAA,cAC1B;AAAA,YACF;AAAA,UACF;AACA,0BAAgB,QAAQ;AAAA,QAC1B;AAAA,MACF;AAGA,UAAI,EAAE,SAAS,GAAG;AAChB,YAAI,MAAM,KAAK,KAAK,WAAW,MAAM,KAAK,KAAK,SAAS;AACtD,gBAAM,SAAU,aAAqB,cAAe,aAAqB,WAAW;AACpF,cAAI;AACF,gBAAI,QAAQ;AAEV,oBAAM,QAAS,OAAO,OAAO,cAAc,WAAa,MAAM,MAAM,KAAK,IAAI,MAAM,OAAO,SAAS,IAAK;AACxG,oBAAM,aAAa,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,EAAE,UAAU,MAAM,EAAE,aAAa,EAAE,UAAU,EAAE,CAAC;AAC5F,oBAAM,YAAY,OAAO,OAAO,cAAc,WAAW,OAAO,YAAa,OAAO,SAAS;AAC7F,oBAAM,aAAa,OAAO,OAAO,eAAe,WAAW,OAAO,aAAa;AAC/E,oBAAM,QAAQ,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,YAAY,aAAa,QAAQ,UAAU,CAAC;AAClF,oBAAM,KAAK,OAAO,KAAK,QAAQ,EAAE,UAAU;AAC3C,8BAAgB,KAAK;AACrB,8BAAgB,cAAc;AAC9B,8BAAgB,cAAc,OAAO,SAAS;AAC9C,8BAAgB,aAAa,OAAO,eAAe,SAAS,EAAE,UAAU,MAAM;AAC9E,8BAAgB,UAAU;AAC1B,8BAAgB,KAAK,EAAE,KAAK,KAAK,cAAc,EAAE,KAAK,KAAK,aAAa,KAAK,IAAI,GAAG,IAAI,WAAW,GAAG,GAAG,KAAK,KAAK,CAAC;AACpH,8BAAgB,OAAO;AACvB,8BAAgB,QAAQ;AAAA,YAC1B,OAAO;AACL,uBAAS,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,MAAM,KAAK,WAAW,KAAK,IAAI,WAAW;AAAA,YAC5E;AAAA,UACF,SAAS,GAAG;AAAA,UAAkC;AAAA,QAChD;AAAA,MACF;AAAA,IAEF;AAGA,QAAI;AACF,YAAM,OAAQ,SAAS,MAAM,KAAM;AACnC,iBAAW,KAAK,MAAM,SAAS,CAAC,GAAG;AACjC,YAAI;AACF,cAAI,QAAa;AACjB,gBAAM,MAAM,MAAM,QAAQ,aAAa,IAAI,cAAc,OAAO,OAAK,EAAE,OAAO,EAAE,EAAE,IAAI,CAAC;AACvF,cAAI,SAAS;AACb,qBAAW,KAAK,KAAK;AACnB,gBAAI,CAAC,EAAG;AACR,kBAAM,MAAO,OAAO,EAAE,QAAQ,WAAY,EAAE,MAAM;AAClD,kBAAM,OAAQ,OAAO,EAAE,QAAQ,WAAY,EAAE,MAAM;AACnD,gBAAI,MAAM,QAAQ,OAAO,QAAQ,MAAM,QAAQ;AAAE,uBAAS;AAAK,sBAAQ;AAAA,YAAG;AAAA,UAC5E;AACA,cAAI,OAAO;AACT,kBAAM,MAAM,MAAM,OAAO;AAAK,kBAAM,OAAO,MAAM,QAAQ,OAAO,MAAM,OAAO;AAC7E,kBAAM,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,OAAO,GAAG,CAAC;AAC7C,kBAAM,IAAI,KAAK,IAAI,KAAK;AACxB,kBAAM,QAAQ,MAAM;AACpB,kBAAM,MAAM,MAAM,MAAM,EAAE,KAAK,MAAM;AACrC,kBAAM,MAAM,MAAM,MAAM,EAAE,KAAK,MAAM;AACrC,gBAAI,MAAM,KAAK,KAAK,WAAW,MAAM,KAAK,KAAK,SAAS;AACtD,8BAAgB,KAAK;AACrB,8BAAgB,cAAc,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,CAAC;AAC5D,8BAAgB,cAAc;AAC9B,8BAAgB,YAAY,IAAI;AAChC,8BAAgB,UAAU;AAC1B,8BAAgB,IAAI,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,WAAW,GAAG,GAAG,KAAK,KAAK,CAAC;AACxE,8BAAgB,OAAO;AACvB,8BAAgB,QAAQ;AAAA,YAC1B;AAAA,UACF;AAAA,QACF,SAAS,GAAG;AAAA,QAAC;AAAA,MACf;AAAA,IACF,SAAS,GAAG;AAAA,IAAC;AAGb,eAAW,KAAK,MAAM,WAAW,CAAC,GAAG;AACnC,UAAI;AACF,cAAM,MAAM,EAAE,KAAK,KAAK;AACxB,cAAM,MAAM,EAAE,KAAK,KAAK;AACxB,YAAI,KAAK,KAAK,MAAM,WAAW,KAAK,KAAK,MAAM,QAAS;AACxD,cAAM,IAAI,EAAE,UAAU,EAAE,gBAAgB;AACxC,cAAM,OAAO,oBAAqB,IAAI,CAAE;AACxC,cAAM,QAAQ,eAAe,IAAW;AACxC,wBAAgB,KAAK;AACrB,wBAAgB,UAAU,IAAI,EAAE;AAChC,cAAM,KAAK,KAAK,IAAI,GAAG,IAAI,WAAW;AACtC,wBAAgB,YAAY,aAAa,QAAQ;AACjD,YAAI,MAAM,SAAS,UAAU;AAC3B,0BAAgB,UAAU;AAAG,0BAAgB,IAAI,GAAG,GAAG,IAAI,GAAG,KAAK,KAAK,CAAC;AAAG,0BAAgB,KAAK;AAAA,QACnG,WAAW,MAAM,SAAS,WAAW;AACnC,sBAAY,MAAM,MAAoB;AAAA,QACxC,WAAW,MAAM,SAAS,YAAY;AACpC,qBAAW,QAAQ,MAAM,OAAO;AAC9B,gBAAI,KAAK,SAAS,UAAU;AAC1B,8BAAgB,UAAU;AAC1B,8BAAgB,IAAI,GAAG,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,KAAK,KAAK,CAAC;AAC5D,8BAAgB,KAAK;AAAA,YACvB,WAAW,KAAK,SAAS,WAAW;AAClC,0BAAY,KAAK,MAAoB;AAAA,YACvC;AAAA,UACF;AAAA,QACF;AACA,wBAAgB,QAAQ;AAAA,MAC1B,SAAS,GAAG;AAAA,MAAC;AAAA,IACf;AAEA,QAAI;AACF,YAAM,SAAU,aAAqB,YAAY,CAAC;AAClD,iBAAW,KAAK,MAAM,aAAa,CAAC,GAAG;AACrC,YAAI;AACF,gBAAM,MAAM,EAAE,KAAK,KAAK;AACxB,gBAAM,MAAM,EAAE,KAAK,KAAK;AACxB,cAAI,KAAK,KAAK,MAAM,WAAW,KAAK,KAAK,MAAM,QAAS;AACxD,0BAAgB,KAAK;AACrB,gBAAM,YAAY,EAAE,eAAe,EAAE,IAAI,MAAM,mBAAmB;AAClE,gBAAM,QAAQ,OAAO,SAAS;AAC9B,gBAAM,QAAQ,EAAE,SAAS;AACzB,0BAAgB,YAAY;AAC5B,0BAAgB,cAAc,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAM,EAAE,OAAO,MAAM,EAAE,YAAY,EAAG,CAAC;AAC7F,0BAAgB,UAAU,IAAI,EAAE;AAChC,cAAI,OAAO;AACT,gBAAI,MAAM,SAAS,UAAU;AAC3B,oBAAM,MAAM,MAAM,KAAK,SAAS,EAAE,KAAK,KAAK,cAAc;AAC1D,8BAAgB,UAAU;AAAG,8BAAgB,IAAI,GAAG,GAAG,IAAI,GAAG,KAAK,KAAK,CAAC;AAAG,8BAAgB,KAAK;AAAA,YACnG,WAAW,MAAM,SAAS,WAAW;AACnC,8BAAgB,UAAU;AAC1B,oBAAM,MAAM,MAAM,UAAU,CAAC;AAC7B,kBAAI,IAAI,QAAQ;AACd,gCAAgB,QAAQ,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,cAAc,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,WAAW;AACrF,yBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,IAAK,iBAAgB,QAAQ,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,cAAc,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,WAAW;AAC1H,gCAAgB,UAAU;AAC1B,gCAAgB,KAAK;AAAA,cACvB;AAAA,YACF,WAAW,MAAM,SAAS,YAAY;AACpC,yBAAW,QAAQ,MAAM,SAAS,CAAC,GAAG;AACpC,oBAAI,KAAK,SAAS,UAAU;AAC1B,wBAAM,MAAM,KAAK,KAAK,SAAS,EAAE,KAAK,KAAK,cAAc;AACzD,kCAAgB,UAAU;AAAG,kCAAgB,IAAI,GAAG,GAAG,IAAI,GAAG,KAAK,KAAK,CAAC;AAAG,kCAAgB,KAAK;AAAA,gBACnG,WAAW,KAAK,SAAS,WAAW;AAElC,kCAAgB,UAAU;AAC1B,wBAAM,MAAM,KAAK,UAAU,CAAC;AAC5B,sBAAI,IAAI,QAAQ;AACd,oCAAgB,QAAQ,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,cAAc,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,WAAW;AACrF,6BAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,IAAK,iBAAgB,QAAQ,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,cAAc,IAAI,CAAC,EAAE,CAAC,KAAK,KAAK,WAAW;AAC1H,oCAAgB,UAAU;AAC1B,oCAAgB,KAAK;AAAA,kBACvB;AAAA,gBACF;AAAA,cACF;AAAA,YACF,OAAO;AAEL,8BAAgB,UAAU;AAAG,8BAAgB,IAAI,GAAG,IAAI,EAAE,KAAK,KAAK,aAAa,GAAG,KAAK,KAAK,CAAC;AAAG,8BAAgB,KAAK;AAAA,YACzH;AAAA,UACF,OAAO;AAEL,4BAAgB,UAAU;AAAG,4BAAgB,IAAI,GAAG,IAAI,EAAE,KAAK,KAAK,aAAa,GAAG,KAAK,KAAK,CAAC;AAAG,4BAAgB,KAAK;AAAA,UACzH;AACA,0BAAgB,QAAQ;AAAA,QAC1B,SAAS,GAAG;AAAA,QAAC;AAAA,MACf;AAAA,IACF,SAAS,GAAG;AAAA,IAAsC;AAGlD,QAAI;AACF,YAAM,WAAY,aAAqB,YAAa,aAAqB,SAAS;AAClF,iBAAW,MAAM,MAAM,cAAc,CAAC,GAAG;AACvC,YAAI;AACF,gBAAM,OAAO,GAAG,KAAK,KAAK;AAC1B,gBAAM,OAAO,GAAG,KAAK,KAAK;AAC1B,gBAAM,OAAO,GAAG,QAAQ;AAAK,gBAAM,MAAM,GAAG,OAAO;AAAK,gBAAM,IAAI,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,OAAO,GAAG,CAAC;AACrG,gBAAM,SAAS,IAAI,KAAK;AACxB,0BAAgB,KAAK;AACrB,0BAAgB,cAAc;AAC9B,0BAAgB,UAAU,KAAK,GAAG;AAClC,0BAAgB,YAAY,GAAG,SAAS;AACxC,cAAI,YAAY,SAAS,SAAS,UAAU;AAC1C,kBAAM,MAAM,SAAS,KAAK,SAAS,GAAG,SAAS,KAAK,cAAc;AAClE,4BAAgB,UAAU;AAAG,4BAAgB,IAAI,GAAG,GAAG,MAAM,KAAK,IAAI,KAAK,GAAG,KAAK,KAAK,CAAC;AAAG,4BAAgB,KAAK;AAAA,UACnH,OAAO;AACL,4BAAgB,UAAU;AAAG,4BAAgB,IAAI,GAAG,GAAG,KAAK,IAAI,IAAI,GAAG,SAAS,KAAK,MAAM,IAAI,EAAE,GAAG,GAAG,KAAK,KAAK,CAAC;AAAG,4BAAgB,KAAK;AAAA,UAC5I;AACA,0BAAgB,QAAQ;AAAA,QAC1B,SAAS,GAAG;AAAA,QAAC;AAAA,MACf;AAAA,IACF,SAAS,GAAG;AAAA,IAAC;AAIb,QAAI,KAAK;AACT,QAAI,aAAa,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACjC,QAAI,UAAU,GAAG,GAAG,KAAK,OAAO,OAAO,KAAK,OAAO,MAAM;AACzD,QAAI,wBAAwB;AAE1B,QAAI;AAAA,MACF,KAAK;AAAA,MACL;AAAA,MAAG;AAAA,MAAG,KAAK,aAAa;AAAA,MAAO,KAAK,aAAa;AAAA,MACjD;AAAA,MAAG;AAAA,MACH,KAAK,OAAO;AAAA,MACZ,KAAK,OAAO;AAAA,IACd;AACF,QAAI,QAAQ;AAAA,EACd;AACF;;;AEzcA;AAGO,IAAM,gBAAN,MAAoB;AAAA;AAAA,EAEjB,WAAgC;AAAA,EAChC,UAA8B;AAAA,EAC9B,cAAsB;AAAA,EACtB,cAA2C;AAAA;AAAA,EAE3C,MAA+B;AAAA,EAC/B,aAAkC;AAAA,EAClC,YAAoB;AAAA,EACpB,aAAqB;AAAA;AAAA,EAG7B,IAAW,WAAmB;AAAE,WAAO,KAAK;AAAA,EAAW;AAAA,EACvD,IAAW,YAAoB;AAAE,WAAO,KAAK;AAAA,EAAY;AAAA,EACzD;AAAA,EACA,KAA4D;AAAA;AAAA,EAEpD,OAA4B;AAAA,EAC5B,gBAAwB;AAAA,EACxB,iBAAyB;AAAA,EACzB,kBAA0B;AAAA,EAC1B,eAAmC;AAAA,EAC3C,kBAAkB;AAAA,EAClB,OAAO;AAAA,EACP,aAAa;AAAA;AAAA,EAEL,UAA+B;AAAA,EAC/B,SAA6B;AAAA,EAC7B,gBAAwB;AAAA,EACxB,eAAuB;AAAA,EACvB,aAA0C;AAAA;AAAA,EAE1C,gBAAqD,CAAC;AAAA,EACtD,kBAA0B;AAAA;AAAA,EAG3B,iBAAiB,KAAsB;AAC5C,WAAO,CAAC,CAAC,KAAK,cAAc,GAAG;AAAA,EACjC;AAAA,EAEO,iBAAiB,KAAkC;AACxD,WAAO,KAAK,cAAc,GAAG,KAAK;AAAA,EACpC;AAAA,EAEA,YAAY,QAA2B;AACrC,SAAK,SAAS;AAAA,EAEhB;AAAA,EAEA,OAAgB;AAEZ,QAAI;AACF,YAAM,KAAK,KAAK;AAChB,YAAM,SAAS;AACf,YAAM,SAAS;AACf,YAAM,UAAU,CAAC,KAAa,SAAiB;AAAE,cAAM,IAAI,GAAG,aAAa,IAAW;AAAI,WAAG,aAAa,GAAG,GAAG;AAAG,WAAG,cAAc,CAAC;AAAG,YAAI,CAAC,GAAG,mBAAmB,GAAG,GAAG,cAAc,GAAG;AAAE,gBAAM,OAAO,GAAG,iBAAiB,CAAC;AAAG,aAAG,aAAa,CAAC;AAAG,gBAAM,IAAI,MAAM,2BAA2B,IAAI;AAAA,QAAG;AAAE,eAAO;AAAA,MAAG;AACnT,YAAM,QAAQ,QAAQ,QAAQ,GAAG,aAAa;AAC9C,YAAM,QAAQ,QAAQ,QAAQ,GAAG,eAAe;AAChD,YAAM,OAAO,GAAG,cAAc;AAC9B,SAAG,aAAa,MAAM,KAAK;AAAG,SAAG,aAAa,MAAM,KAAK;AAAG,SAAG,YAAY,IAAI;AAC/E,UAAI,CAAC,GAAG,oBAAoB,MAAM,GAAG,WAAW,GAAG;AAAE,cAAM,IAAI,MAAM,yBAAyB,GAAG,kBAAkB,IAAI,CAAC;AAAA,MAAG;AAC3H,WAAK,WAAW;AAChB,WAAK,cAAc,GAAG,kBAAkB,MAAM,OAAO;AACrD,WAAK,cAAc,GAAG,mBAAmB,MAAM,OAAO;AAEtD,WAAK,UAAU,GAAG,aAAa;AAC/B,SAAG,WAAW,GAAG,cAAc,KAAK,OAAO;AAE3C,YAAM,YAAY,IAAI,aAAa;AAAA,QACjC;AAAA,QAAI;AAAA,QAAK;AAAA,QAAG;AAAA,QAAK;AAAA,QAAI;AAAA,QACpB;AAAA,QAAG;AAAA,QAAK;AAAA,QAAG;AAAA,QAAI;AAAA,QAAI;AAAA,MACtB,CAAC;AACD,SAAG,WAAW,GAAG,cAAc,WAAW,GAAG,WAAW;AAAA,IAC1D,SAAS,GAAG;AAAE,WAAK,WAAW;AAAA,IAAM;AAEtC,QAAI;AACF,YAAM,KAAK,KAAK;AAChB,YAAM,KAAK;AACX,YAAM,KAAK;AACX,YAAM,UAAU,CAAC,KAAa,SAAiB;AAAE,cAAM,IAAI,GAAG,aAAa,IAAW;AAAI,WAAG,aAAa,GAAG,GAAG;AAAG,WAAG,cAAc,CAAC;AAAG,YAAI,CAAC,GAAG,mBAAmB,GAAG,GAAG,cAAc,GAAG;AAAE,gBAAM,OAAO,GAAG,iBAAiB,CAAC;AAAG,aAAG,aAAa,CAAC;AAAG,gBAAM,IAAI,MAAM,2BAA2B,IAAI;AAAA,QAAG;AAAE,eAAO;AAAA,MAAG;AACnT,YAAM,QAAQ,QAAQ,IAAI,GAAG,aAAa;AAC1C,YAAM,QAAQ,QAAQ,IAAI,GAAG,eAAe;AAC5C,YAAM,OAAO,GAAG,cAAc;AAC9B,SAAG,aAAa,MAAM,KAAK;AAAG,SAAG,aAAa,MAAM,KAAK;AAAG,SAAG,YAAY,IAAI;AAC/E,UAAI,GAAG,oBAAoB,MAAM,GAAG,WAAW,GAAG;AAChD,aAAK,UAAU;AACf,aAAK,gBAAgB,GAAG,kBAAkB,MAAM,OAAO;AACvD,aAAK,eAAe,GAAG,kBAAkB,MAAM,MAAM;AACrD,aAAK,aAAa,GAAG,mBAAmB,MAAM,OAAO;AACrD,aAAK,SAAS,GAAG,aAAa;AAAA,MAChC,OAAO;AACL,aAAK,UAAU;AAAA,MACjB;AAAA,IACF,SAAS,GAAG;AAAE,WAAK,UAAU;AAAA,IAAM;AACnC,QAAI;AAEF,WAAK,KAAK,KAAK,OAAO,WAAW,QAAQ;AACzC,UAAI,CAAC,KAAK,IAAI;AACZ,aAAK,KAAM,KAAK,OAAO,WAAW,OAAO,KAAK,KAAK,OAAO,WAAW,oBAAoB;AACzF,YAAI,CAAC,KAAK,GAAI,QAAO;AAAA,MACvB;AACA,YAAM,KAAK,KAAK;AAEpB,YAAM,YAAY,MAAM,YAAY;AACpC,YAAM,cAAe,kBAAkB,OAAQ,eAAe,gBAAiB,WAAY,eAAe,cAAc;AACxH,YAAM,UAAU,KAAK,MAAM,YAAY,WAAW;AAClD,YAAM,UAAU,KAAK,MAAM,YAAY,WAAW;AAE9C,WAAK,aAAa,GAAG,cAAc;AACnC,SAAG,YAAY,GAAG,YAAY,KAAK,UAAU;AAC7C,SAAG,WAAW,GAAG,YAAY,GAAG,GAAG,MAAM,SAAS,SAAS,GAAG,GAAG,MAAM,GAAG,eAAe,IAAI;AAC7F,SAAG,cAAc,GAAG,YAAY,GAAG,oBAAoB,GAAG,MAAM;AAChE,SAAG,cAAc,GAAG,YAAY,GAAG,oBAAoB,GAAG,MAAM;AAChE,SAAG,cAAc,GAAG,YAAY,GAAG,gBAAgB,GAAG,aAAa;AACnE,SAAG,cAAc,GAAG,YAAY,GAAG,gBAAgB,GAAG,aAAa;AAEnE,WAAK,MAAM,GAAG,kBAAkB;AAChC,SAAG,gBAAgB,GAAG,aAAa,KAAK,GAAG;AAC3C,SAAG,qBAAqB,GAAG,aAAa,GAAG,mBAAmB,GAAG,YAAY,KAAK,YAAY,CAAC;AACnG,WAAK,YAAY;AACjB,WAAK,aAAa;AACd,SAAG,gBAAgB,GAAG,aAAa,IAAI;AAEvC,UAAI;AACF,cAAM,MAAO,aAAa,QAAgB,cAAc,WAAW,QAAQ,KAAI,EAAE;AACjF,cAAM,SAAS,SAAS,GAAG,WAAS,IAAG,GAAG,MAAM,EAAE,EAAE,IAAI,CAAC,MAAW,IAAE,CAAC,EAAE,KAAK,EAAE,IAAG,IAAG,EAAE;AACxF,cAAM,KAAM,UAAU,KAAM,OAAK;AAAK,cAAM,KAAM,UAAU,IAAK,OAAK;AAAK,cAAM,KAAK,SAAS,OAAK;AACpG,WAAG,WAAW,GAAG,GAAG,GAAG,CAAG;AAAA,MAC5B,QAAQ;AAAE,WAAG,WAAW,MAAM,MAAM,MAAM,CAAG;AAAA,MAAG;AAEhD,UAAI;AAAE,WAAG,OAAO,GAAG,KAAK;AAAG,WAAG,UAAU,GAAG,WAAW,GAAG,mBAAmB;AAAA,MAAG,SAAS,GAAG;AAAA,MAAC;AAE5F,UAAI;AACF,cAAM,OAAO,KAAK,OAAO,eAAe,KAAK,OAAO,SAAS;AAC7D,aAAK,cAAc,KAAK,OAAO,SAAS,QAAQ;AAAA,MAClD,SAAS,GAAG;AAAE,aAAK,aAAa;AAAA,MAAG;AAGnC,UAAI;AACF,cAAM,KAAK;AACX,cAAM,KAAK;AACX,cAAM,UAAU,CAAC,KAAa,SAAiB;AAAE,gBAAM,IAAI,GAAG,aAAa,IAAW;AAAI,aAAG,aAAa,GAAG,GAAG;AAAG,aAAG,cAAc,CAAC;AAAG,cAAI,CAAC,GAAG,mBAAmB,GAAG,GAAG,cAAc,GAAG;AAAE,kBAAM,OAAO,GAAG,iBAAiB,CAAC;AAAG,eAAG,aAAa,CAAC;AAAG,kBAAM,IAAI,MAAM,2BAA2B,IAAI;AAAA,UAAG;AAAE,iBAAO;AAAA,QAAG;AACnT,cAAM,QAAQ,QAAQ,IAAI,GAAG,aAAa;AAC1C,cAAM,QAAQ,QAAQ,IAAI,GAAG,eAAe;AAC5C,cAAM,OAAO,GAAG,cAAc;AAC9B,WAAG,aAAa,MAAM,KAAK;AAAG,WAAG,aAAa,MAAM,KAAK;AAAG,WAAG,YAAY,IAAI;AAC/E,YAAI,CAAC,GAAG,oBAAoB,MAAM,GAAG,WAAW,GAAG;AAAE,gBAAM,IAAI,MAAM,yBAAyB,GAAG,kBAAkB,IAAI,CAAC;AAAA,QAAG;AAC3H,aAAK,OAAO;AACZ,aAAK,gBAAgB,GAAG,kBAAkB,MAAM,OAAO;AACvD,aAAK,iBAAiB,GAAG,kBAAkB,MAAM,QAAQ;AACzD,aAAK,kBAAkB,GAAG,kBAAkB,MAAM,SAAS;AAC3D,aAAK,eAAe,GAAG,aAAa;AAAA,MACtC,SAAS,GAAG;AAEV,aAAK,OAAO;AAAA,MACd;AACA,aAAO;AAAA,IACT,SAAS,GAAG;AACV,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA,EAIA,cAAoB;AAClB,QAAI,CAAC,KAAK,GAAI;AACd,QAAI;AACF,YAAM,OAAO,KAAK,OAAO,eAAe,KAAK,OAAO,KAAK,OAAO,SAAS,MAAM,KAAK,cAAc,EAAE;AACpG,WAAK,cAAc,KAAK,OAAO,SAAS,QAAQ,KAAK,IAAI,GAAG,IAAI;AAAA,IAGlE,SAAS,GAAG;AAAA,IAAe;AAAA,EAC7B;AAAA,EAEA,YAAqB;AAAE,WAAO;AAAA,EAAO;AAAA,EAErC,YAAY,OAAY,gBAAgB,GAAS;AAE/C,QAAI,CAAC,KAAK,GAAI;AACd,UAAM,KAAK,KAAK;AAClB,UAAM,YAAY,MAAM,YAAY;AACpC,UAAM,cAAe,kBAAkB,OAAQ,eAAe,gBAAiB,WAAY,eAAe,cAAc;AACxH,UAAM,UAAU,KAAK,MAAM,YAAY,WAAW;AAClD,UAAM,UAAU,KAAK,MAAM,YAAY,WAAW;AAElD,QAAI,KAAK,aAAa,WAAW,KAAK,cAAc,SAAS;AAEzD,UAAI,KAAK,WAAY,IAAG,cAAc,KAAK,UAAU;AACrD,UAAI,KAAK,IAAK,IAAG,kBAAkB,KAAK,GAAG;AAE3C,WAAK,aAAa,GAAG,cAAc;AACnC,SAAG,YAAY,GAAG,YAAY,KAAK,UAAU;AAC7C,SAAG,WAAW,GAAG,YAAY,GAAG,GAAG,MAAM,SAAS,SAAS,GAAG,GAAG,MAAM,GAAG,eAAe,IAAI;AAC7F,SAAG,cAAc,GAAG,YAAY,GAAG,oBAAoB,GAAG,MAAM;AAChE,SAAG,cAAc,GAAG,YAAY,GAAG,oBAAoB,GAAG,MAAM;AAChE,SAAG,cAAc,GAAG,YAAY,GAAG,gBAAgB,GAAG,aAAa;AACnE,SAAG,cAAc,GAAG,YAAY,GAAG,gBAAgB,GAAG,aAAa;AAEnE,WAAK,MAAM,GAAG,kBAAkB;AAChC,SAAG,gBAAgB,GAAG,aAAa,KAAK,GAAG;AAC3C,SAAG,qBAAqB,GAAG,aAAa,GAAG,mBAAmB,GAAG,YAAY,KAAK,YAAY,CAAC;AACnG,WAAK,YAAY;AACjB,WAAK,aAAa;AACd,SAAG,gBAAgB,GAAG,aAAa,IAAI;AAAA,IACzC;AAEA,QAAI,KAAK,OAAO,KAAK,YAAY;AACnC,SAAG,gBAAgB,GAAG,aAAa,KAAK,GAAG;AAC3C,SAAG,SAAS,GAAG,GAAG,SAAS,OAAO;AAClC,SAAG,MAAM,GAAG,gBAAgB;AAEtB,UAAI,KAAK,QAAQ,KAAK,cAAc;AAClC,YAAI;AAEF,gBAAM,IAAI;AACV,gBAAM,IAAI;AACV,gBAAMC,SAAQ,MAAM,SAAS,CAAC;AAC9B,gBAAM,QAAkB,CAAC;AACzB,gBAAM,MAAO,SAAS,MAAM,KAAM;AAClC,qBAAW,KAAKA,QAAO;AACrB,kBAAM,IAAK,EAAE,KAAK;AAClB,kBAAM,IAAK,EAAE,KAAK;AAClB,kBAAM,QAAS,IAAI,KAAK,IAAI,GAAG,SAAS,IAAK,IAAI;AACjD,kBAAM,QAAQ,IAAK,IAAI,KAAK,IAAI,GAAG,SAAS,IAAK;AACjD,kBAAM,SAAS,EAAE,UAAU;AAC3B,kBAAM,KAAK,KAAK,IAAI,GAAG,SAAS,CAAC;AACjC,kBAAM,UAAW,EAAE,SAAS,SAAU,YAAY,MAAM,OAAO,YAAY,MAAM;AACjF,kBAAM,WAAY,WAAW,QAAQ,SAAU,aAAa,QAAQ,YAAY;AAChF,kBAAM,YAAY,CAAC,QAAgB;AACjC,oBAAMC,KAAI,IAAI,QAAQ,KAAI,EAAE;AAAG,oBAAM,SAAS,SAASA,GAAE,WAAS,IAAGA,GAAE,MAAM,EAAE,EAAE,IAAI,OAAG,IAAE,CAAC,EAAE,KAAK,EAAE,IAAGA,IAAE,EAAE;AAC3G,oBAAM,KAAM,UAAU,KAAM,OAAK;AAAK,oBAAM,KAAM,UAAU,IAAK,OAAK;AAAK,oBAAM,KAAK,SAAS,OAAK;AAAK,qBAAO,CAAC,GAAE,GAAE,GAAE,CAAC;AAAA,YAC1H;AACA,kBAAM,YAAY,UAAU,QAAQ;AAGpC,gBAAI;AACF,oBAAM,eAAgB,EAAE,QAAQ,mBAAmB;AACnD,oBAAM,UAAU,KAAK,mBAAmB,YAAY;AACpD,kBAAI,WAAW,KAAK,SAAS;AAE3B,sBAAM,QAAS,SAAS,IAAK,KAAK,IAAI,GAAG,CAAC,IAAI;AAC9C,sBAAM,QAAS,SAAS,IAAK,KAAK,IAAI,GAAG,CAAC,IAAI;AAC9C,qBAAK,iBAAiB,SAAS,OAAO,OAAO,OAAO,KAAK;AAEzD;AAAA,cACF;AAAA,YACF,SAAS,GAAG;AAAA,YAAC;AAGb,kBAAM,KAAK,OAAO,OAAO,IAAI,UAAU,CAAC,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC,GAAG,UAAU,CAAC,CAAC;AAGnF,gBAAI,MAAM,QAAQ,EAAE,KAAK,GAAG;AAC1B,uBAAS,IAAI,GAAG,IAAI,EAAE,MAAM,QAAQ,KAAK;AACvC,sBAAM,KAAK,EAAE,MAAM,CAAC,EAAE,KAAK;AAC3B,sBAAM,KAAK,EAAE,MAAM,CAAC,EAAE,KAAK;AAC3B,sBAAM,SAAU,KAAK,KAAK,IAAI,GAAG,SAAS,IAAK,IAAI;AACnD,sBAAM,SAAS,IAAK,KAAK,KAAK,IAAI,GAAG,SAAS,IAAK;AACnD,sBAAM,SAAS,MAAM,OAAO,IAAI,EAAE,MAAM;AACxC,sBAAM,KAAK,QAAQ,QAAQ,KAAK,IAAI,GAAG,MAAM,GAAG,KAAK,KAAK,GAAK,MAAM;AAAA,cACvE;AAAA,YACF;AAGA,gBAAI,EAAE,SAAS,GAAG;AAChB,kBAAI;AACF,sBAAM,QAAQ;AACd,sBAAM,QAAQ,KAAK,mBAAmB,KAAK;AAC3C,oBAAI,SAAS,KAAK,SAAS;AACzB,wBAAM,QAAS,SAAS,MAAO,KAAK,IAAI,GAAG,CAAC,IAAI;AAChD,wBAAM,QAAS,SAAS,MAAO,KAAK,IAAI,GAAG,CAAC,IAAI;AAChD,uBAAK,iBAAiB,OAAO,OAAO,OAAO,OAAO,KAAK;AAAA,gBACzD,OAAO;AACL,wBAAM,KAAK,OAAO,OAAO,KAAK,KAAK,KAAK,KAAK,GAAK,GAAG;AAAA,gBACvD;AAAA,cACF,SAAS,GAAG;AAAE,sBAAM,KAAK,OAAO,OAAO,KAAK,KAAK,KAAK,KAAK,GAAK,GAAG;AAAA,cAAG;AAAA,YACxE;AAGA,gBAAI,MAAM,QAAQ,aAAa,GAAG;AAChC,oBAAM,QAAQ,cAAc,KAAK,OAAK,EAAE,OAAO,EAAE,EAAE;AACnD,kBAAI,SAAS,MAAM,MAAM,GAAG;AAC1B,sBAAM,KAAK,OAAO,OAAO,KAAK,KAAK,GAAK,KAAK,KAAK,GAAG;AAAA,cACvD;AAAA,YACF;AAAA,UACF;AAEA,gBAAM,WAAW,IAAI,aAAa,KAAK;AACvC,aAAG,WAAW,GAAG,cAAc,KAAK,YAAY;AAChD,aAAG,WAAW,GAAG,cAAc,UAAU,GAAG,YAAY;AACxD,aAAG,WAAW,KAAK,IAAoB;AACvC,gBAAM,SAAS,IAAI;AACnB,aAAG,wBAAwB,KAAK,aAAa;AAC7C,aAAG,oBAAoB,KAAK,eAAe,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACxE,aAAG,wBAAwB,KAAK,cAAc;AAC9C,aAAG,oBAAoB,KAAK,gBAAgB,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC7E,aAAG,wBAAwB,KAAK,eAAe;AAC/C,aAAG,oBAAoB,KAAK,iBAAiB,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC9E,gBAAM,QAAQ,KAAK,MAAM,SAAS,SAAS,CAAC;AAC5C,aAAG,WAAW,GAAG,QAAQ,GAAG,KAAK;AAAA,QACnC,SAAS,GAAG;AAAA,QAAC;AAAA,MACf;AAGF,UAAI;AACF,cAAM,SAAU,aAAqB,YAAY,CAAC;AAClD,mBAAW,KAAK,MAAM,WAAW,CAAC,GAAG;AACnC,cAAI;AACF,kBAAM,KAAM,EAAE,KAAK;AACnB,kBAAM,KAAM,EAAE,KAAK;AACnB,kBAAM,QAAS,KAAK,KAAK,IAAI,GAAG,SAAS,IAAK,IAAI;AAClD,kBAAM,QAAQ,IAAK,KAAK,KAAK,IAAI,GAAG,SAAS,IAAK;AAClD,kBAAM,IAAI,EAAE,UAAU,EAAE,gBAAgB;AACxC,kBAAM,OAAO,EAAE,QAAQ;AACvB,kBAAM,WAAW,UAAU,IAAI;AAC/B,kBAAM,MAAM,KAAK,mBAAmB,QAAQ,KAAK,KAAK,mBAAmB,QAAQ,KAAK,KAAK,mBAAmB,eAAe;AAC7H,gBAAI,OAAO,KAAK,SAAS;AACvB,oBAAM,QAAS,IAAI,IAAK,KAAK,IAAI,GAAG,KAAK,QAAQ,IAAI;AACrD,oBAAM,QAAS,IAAI,IAAK,KAAK,IAAI,GAAG,KAAK,SAAS,IAAI;AACtD,mBAAK,iBAAiB,KAAK,OAAO,OAAO,OAAO,KAAK;AACrD;AAAA,YACF;AAGA,kBAAM,WAAW,KAAK,IAAI,GAAG,IAAI,CAAC;AAClC,kBAAM,QAAS,aAAa,WAAW,aAAa,QAAQ,UAAW;AACvE,kBAAM,YAAY,CAAC,QAAgB;AAAE,oBAAM,IAAI,IAAI,QAAQ,KAAI,EAAE;AAAG,oBAAM,SAAS,SAAS,EAAE,WAAS,IAAG,EAAE,MAAM,EAAE,EAAE,IAAI,OAAG,IAAE,CAAC,EAAE,KAAK,EAAE,IAAG,GAAE,EAAE;AAAG,oBAAM,MAAO,UAAU,KAAM,OAAK;AAAK,oBAAM,MAAO,UAAU,IAAK,OAAK;AAAK,oBAAM,QAAQ,SAAS,OAAK;AAAK,qBAAO,CAAC,IAAG,IAAG,MAAK,CAAC;AAAA,YAAG;AAExR,kBAAM,WAAW,IAAI,aAAa,CAAC,OAAO,OAAO,UAAU,GAAE,GAAE,GAAE,CAAC,CAAC;AACnE,eAAG,WAAW,GAAG,cAAc,KAAK,YAAY;AAChD,eAAG,WAAW,GAAG,cAAc,UAAU,GAAG,YAAY;AACxD,eAAG,WAAW,KAAK,IAAoB;AACvC,kBAAM,SAAS,IAAI;AACnB,eAAG,wBAAwB,KAAK,aAAa;AAC7C,eAAG,oBAAoB,KAAK,eAAe,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACxE,eAAG,wBAAwB,KAAK,cAAc;AAC9C,eAAG,oBAAoB,KAAK,gBAAgB,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC7E,eAAG,wBAAwB,KAAK,eAAe;AAC/C,eAAG,oBAAoB,KAAK,iBAAiB,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC9E,eAAG,WAAW,GAAG,QAAQ,GAAG,CAAC;AAAA,UAC/B,SAAS,GAAG;AAAA,UAAC;AAAA,QACf;AAAA,MACF,SAAS,GAAG;AAAA,MAAC;AAGb,UAAI;AACF,mBAAW,KAAK,MAAM,aAAa,CAAC,GAAG;AACrC,cAAI;AACF,kBAAM,KAAM,EAAE,KAAK;AAAI,kBAAM,KAAM,EAAE,KAAK;AAC1C,kBAAM,QAAS,KAAK,KAAK,IAAI,GAAG,SAAS,IAAK,IAAI;AAClD,kBAAM,QAAQ,IAAK,KAAK,KAAK,IAAI,GAAG,SAAS,IAAK;AAClD,kBAAM,OAAQ,EAAE,KAAK;AACrB,kBAAM,WAAW,EAAE,eAAe,EAAE,IAAI,MAAM,mBAAmB;AACjE,kBAAM,MAAM,KAAK,mBAAmB,QAAQ,KAAK,KAAK,mBAAmB,eAAe;AACxF,gBAAI,OAAO,KAAK,SAAS;AACvB,oBAAM,QAAS,OAAO,IAAK,KAAK,IAAI,GAAG,KAAK,QAAQ,IAAI;AACxD,oBAAM,QAAS,OAAO,IAAK,KAAK,IAAI,GAAG,KAAK,SAAS,IAAI;AACzD,mBAAK,iBAAiB,KAAK,OAAO,OAAO,OAAO,KAAK;AAAA,YACvD;AAAA,UACF,SAAS,GAAG;AAAA,UAAC;AAAA,QACf;AAAA,MACF,SAAS,GAAG;AAAA,MAAC;AAEb,UAAI;AACF,mBAAW,MAAM,MAAM,cAAc,CAAC,GAAG;AACvC,cAAI;AACF,kBAAM,MAAO,GAAG,KAAK;AAAI,kBAAM,MAAO,GAAG,KAAK;AAC9C,kBAAM,QAAS,MAAM,KAAK,IAAI,GAAG,SAAS,IAAK,IAAI;AACnD,kBAAM,QAAQ,IAAK,MAAM,KAAK,IAAI,GAAG,SAAS,IAAK;AACnD,kBAAM,MAAM,KAAK,mBAAmB,mBAAmB,KAAK;AAC5D,kBAAM,IAAI,GAAG,SAAS;AACtB,gBAAI,OAAO,KAAK,SAAS;AACvB,oBAAM,KAAM,KAAK,IAAK,KAAK,IAAI,GAAG,KAAK,QAAQ,IAAI;AAAG,oBAAM,KAAM,KAAK,IAAK,KAAK,IAAI,GAAG,KAAK,SAAS,IAAI;AAC1G,mBAAK,iBAAiB,KAAK,OAAO,OAAO,IAAI,EAAE;AAAA,YACjD,OAAO;AAEL,oBAAM,WAAW,IAAI,aAAa,CAAC,OAAO,OAAO,KAAK,IAAI,GAAG,KAAG,CAAC,GAAG,GAAE,GAAE,KAAI,CAAC,CAAC;AAC9E,iBAAG,WAAW,GAAG,cAAc,KAAK,YAAY;AAChD,iBAAG,WAAW,GAAG,cAAc,UAAU,GAAG,YAAY;AACxD,iBAAG,WAAW,KAAK,IAAoB;AACvC,oBAAM,SAAS,IAAI;AACnB,iBAAG,wBAAwB,KAAK,aAAa;AAC7C,iBAAG,oBAAoB,KAAK,eAAe,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACxE,iBAAG,wBAAwB,KAAK,cAAc;AAC9C,iBAAG,oBAAoB,KAAK,gBAAgB,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC7E,iBAAG,wBAAwB,KAAK,eAAe;AAC/C,iBAAG,oBAAoB,KAAK,iBAAiB,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC9E,iBAAG,WAAW,GAAG,QAAQ,GAAG,CAAC;AAAA,YAC/B;AAAA,UACF,SAAS,GAAG;AAAA,UAAC;AAAA,QACf;AAAA,MACF,SAAS,GAAG;AAAA,MAAC;AAAA,IACf;AAEA,QAAI,KAAK,cAAc,KAAK,YAAY,KAAK,WAAW,KAAK,IAAI;AAC/D,YAAM,eAAgB,kBAAkB,OAAQ,eAAe,iBAAkB,WAAY,eAAe,eAAe;AAC3H,SAAG,gBAAgB,GAAG,aAAa,IAAI;AAEvC,SAAG,SAAS,GAAG,GAAG,KAAK,MAAM,KAAK,OAAO,QAAQ,YAAY,GAAG,KAAK,MAAM,KAAK,OAAO,SAAS,YAAY,CAAC;AAC7G,SAAG,MAAM,GAAG,gBAAgB;AAC5B,SAAG,WAAW,KAAK,QAAQ;AAC3B,SAAG,cAAc,GAAG,QAAQ;AAC5B,SAAG,YAAY,GAAG,YAAY,KAAK,UAAU;AAC7C,UAAI,KAAK,YAAa,IAAG,UAAU,KAAK,aAAa,CAAC;AACtD,SAAG,WAAW,GAAG,cAAc,KAAK,OAAO;AAC3C,SAAG,wBAAwB,KAAK,WAAW;AAC3C,SAAG,oBAAoB,KAAK,aAAa,GAAG,GAAG,OAAO,OAAO,GAAG,CAAC;AACjE,SAAG,WAAW,GAAG,WAAW,GAAG,CAAC;AAChC,SAAG,yBAAyB,KAAK,WAAW;AAAA,IAC9C;AAIA,QAAI;AAAA,IAAC,SAAS,GAAG;AAAA,IAAC;AAAA,EACpB;AAAA;AAAA,EAGQ,mBAAmB,KAAkC;AAC3D,QAAI,CAAC,KAAK,GAAI,QAAO;AACrB,QAAI,KAAK,cAAc,GAAG,EAAG,QAAO,KAAK,cAAc,GAAG;AAC1D,QAAI;AACF,YAAM,KAAK,KAAK;AAChB,YAAM,SAAU,aAAqB,YAAY,CAAC;AAClD,YAAM,QAAQ,OAAO,GAAG;AACxB,YAAM,OAAO,KAAK;AAClB,YAAM,MAAM,SAAS,cAAc,QAAQ;AAAG,UAAI,QAAQ;AAAM,UAAI,SAAS;AAC7E,YAAM,OAAO,IAAI,WAAW,IAAI;AAChC,WAAK,UAAU,GAAE,GAAE,MAAK,IAAI;AAE5B,WAAK,UAAU,OAAK,GAAG,OAAK,CAAC;AAC7B,YAAM,QAAQ,OAAK;AACnB,WAAK,YAAa,aAAa,WAAY,aAAa,QAAQ,YAAc;AAC9E,UAAI,CAAC,OAAO;AAEV,aAAK,UAAU;AAAG,aAAK,IAAI,GAAE,GAAE,KAAK,IAAI,GAAE,OAAK,IAAI,GAAE,GAAE,KAAK,KAAG,CAAC;AAAG,aAAK,KAAK;AAAA,MAC/E,WAAW,MAAM,SAAS,UAAU;AAClC,aAAK,UAAU;AAAG,aAAK,IAAI,GAAE,IAAG,MAAM,KAAK,OAAK,OAAM,GAAE,KAAK,KAAG,CAAC;AAAG,aAAK,KAAK;AAAA,MAChF,WAAW,MAAM,SAAS,WAAW;AACnC,cAAM,MAAM,MAAM,UAAU,CAAC;AAC7B,YAAI,IAAI,QAAQ;AACd,eAAK,UAAU;AAAG,eAAK,QAAQ,IAAI,CAAC,EAAE,CAAC,KAAG,KAAG,QAAO,IAAI,CAAC,EAAE,CAAC,KAAG,KAAG,KAAK;AACvE,mBAAS,IAAE,GAAE,IAAE,IAAI,QAAO,IAAK,MAAK,QAAQ,IAAI,CAAC,EAAE,CAAC,KAAG,KAAG,QAAO,IAAI,CAAC,EAAE,CAAC,KAAG,KAAG,KAAK;AACpF,eAAK,UAAU;AAAG,eAAK,KAAK;AAAA,QAC9B;AAAA,MACF,WAAW,MAAM,SAAS,YAAY;AACpC,mBAAW,QAAQ,MAAM,SAAS,CAAC,GAAG;AACpC,cAAI,KAAK,SAAS,UAAU;AAAE,iBAAK,UAAU;AAAG,iBAAK,IAAI,GAAE,IAAG,KAAK,KAAG,OAAK,OAAM,GAAE,KAAK,KAAG,CAAC;AAAG,iBAAK,KAAK;AAAA,UAAG,WACnG,KAAK,SAAS,WAAW;AAAE,kBAAM,MAAM,KAAK,UAAU,CAAC;AAAG,gBAAI,IAAI,QAAQ;AAAE,mBAAK,UAAU;AAAG,mBAAK,QAAQ,IAAI,CAAC,EAAE,CAAC,KAAG,KAAG,QAAO,IAAI,CAAC,EAAE,CAAC,KAAG,KAAG,KAAK;AAAG,uBAAS,IAAE,GAAE,IAAE,IAAI,QAAO,IAAK,MAAK,QAAQ,IAAI,CAAC,EAAE,CAAC,KAAG,KAAG,QAAO,IAAI,CAAC,EAAE,CAAC,KAAG,KAAG,KAAK;AAAG,mBAAK,UAAU;AAAG,mBAAK,KAAK;AAAA,YAAG;AAAA,UAAE;AAAA,QACzR;AAAA,MACF;AAEA,YAAM,MAAM,GAAG,cAAc;AAAG,SAAG,YAAY,GAAG,YAAY,GAAG;AACjE,SAAG,YAAY,GAAG,gCAAgC,CAAC;AACnD,SAAG,WAAW,GAAG,YAAY,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,eAAe,GAAG;AACvE,SAAG,cAAc,GAAG,YAAY,GAAG,oBAAoB,GAAG,MAAM;AAChE,SAAG,cAAc,GAAG,YAAY,GAAG,oBAAoB,GAAG,MAAM;AAChE,SAAG,cAAc,GAAG,YAAY,GAAG,gBAAgB,GAAG,aAAa;AACnE,SAAG,cAAc,GAAG,YAAY,GAAG,gBAAgB,GAAG,aAAa;AACnE,WAAK,cAAc,GAAG,IAAI;AAC1B,aAAO;AAAA,IACT,SAAS,GAAG;AAAE,aAAO;AAAA,IAAM;AAAA,EAC7B;AAAA;AAAA,EAGQ,iBAAiB,KAA0B,OAAe,OAAe,OAAe,OAAe;AAC7G,QAAI,CAAC,KAAK,MAAM,CAAC,KAAK,WAAW,CAAC,IAAK;AACvC,QAAI;AACF,YAAM,KAAK,KAAK;AAChB,SAAG,WAAW,KAAK,OAAuB;AAC1C,SAAG,cAAc,GAAG,QAAQ;AAAG,SAAG,YAAY,GAAG,YAAY,GAAG;AAChE,UAAI,KAAK,WAAY,IAAG,UAAU,KAAK,YAAY,CAAC;AAEpD,YAAM,KAAK,QAAQ,QAAM;AAAG,YAAM,KAAK,QAAQ,QAAM;AACrD,YAAM,KAAK,QAAQ,QAAM;AAAG,YAAM,KAAK,QAAQ,QAAM;AAErD,YAAM,QAAQ,IAAI,aAAa;AAAA,QAC7B;AAAA,QAAG;AAAA,QAAI;AAAA,QAAE;AAAA,QACT;AAAA,QAAG;AAAA,QAAI;AAAA,QAAE;AAAA,QACT;AAAA,QAAG;AAAA,QAAI;AAAA,QAAE;AAAA,QACT;AAAA,QAAG;AAAA,QAAI;AAAA,QAAE;AAAA,QACT;AAAA,QAAG;AAAA,QAAI;AAAA,QAAE;AAAA,QACT;AAAA,QAAG;AAAA,QAAI;AAAA,QAAE;AAAA,MACX,CAAC;AACD,SAAG,WAAW,GAAG,cAAc,KAAK,MAAM;AAC1C,SAAG,WAAW,GAAG,cAAc,OAAO,GAAG,YAAY;AACrD,YAAM,SAAS,IAAI;AACnB,SAAG,wBAAwB,KAAK,aAAa;AAC7C,SAAG,oBAAoB,KAAK,eAAe,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACxE,SAAG,wBAAwB,KAAK,YAAY;AAC5C,SAAG,oBAAoB,KAAK,cAAc,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3E,SAAG,WAAW,GAAG,WAAW,GAAG,CAAC;AAChC,SAAG,yBAAyB,KAAK,aAAa;AAC9C,SAAG,yBAAyB,KAAK,YAAY;AAAA,IAC/C,SAAS,GAAG;AAAA,IAAC;AAAA,EACf;AACF;;;ACveA,eAAsB,SAAS,eAAyB,UAAU;AACjE,QAAM,SAAS,aAAa,eAAe,OAAO;AAClD,QAAM,KAAU;AAAA,IACf,YAAY,aAAa,eAAe,YAAY;AAAA,IACpD,OAAO,aAAa,eAAe,OAAO;AAAA,IAC1C,QAAQ,aAAa,eAAe,QAAQ;AAAA,IAC5C,SAAS,aAAa,eAAe,SAAS;AAAA,IAC9C,cAAc,aAAa,eAAe,cAAc;AAAA,IACxD,OAAO,aAAa,eAAe,OAAO;AAAA,IAC1C,UAAU,aAAa,eAAe,UAAU;AAAA,IAChD,WAAW,aAAa,eAAe,WAAW;AAAA,IAClD,OAAO,aAAa,eAAe,OAAO;AAAA,IAC1C,oBAAoB,aAAa,eAAe,oBAAoB;AAAA,IACpE,SAAS,aAAa,eAAe,SAAS;AAAA,IAC9C,cAAc,aAAa,eAAe,cAAc;AAAA,EACzD;AAEA,MAAI;AAAE,QAAI,GAAG,MAAO,IAAG,MAAM,cAAc;AAAA,EAAiC,SAAS,GAAG;AAAA,EAAC;AAGzF,QAAM,iBAAiB,iBAAiB;AAExC,WAAS,2BAA2B;AACnC,UAAM,MAAM,OAAO,oBAAoB;AACvC,UAAM,cAAe,kBAAkB,OAAQ,eAAuB,gBAAgB,WAAa,eAAuB,cAAc;AACxI,UAAM,WAAW,eAAe;AAChC,UAAM,WAAW,eAAe;AAChC,QAAI,QAAQ;AACX,YAAM,UAAU,KAAK,MAAM,WAAW,cAAc,GAAG;AACvD,YAAM,UAAU,KAAK,MAAM,WAAW,cAAc,GAAG;AACvD,aAAO,QAAQ;AACf,aAAO,SAAS;AAChB,aAAO,MAAM,QAAQ,UAAU;AAC/B,aAAO,MAAM,SAAS,UAAU;AAChC,YAAM,SAAS,SAAS,eAAe,cAAc;AACrD,UAAI,QAAQ;AACX,eAAO,cAAc,GAAG,OAAO,KAAK,MAAM,OAAO,MAAM,SAAS,GAAG;AAAA,MACpE;AAAA,IACD;AACA,IAAC,eAAuB,eAAe;AACvC,IAAC,eAAuB,WAAW;AACnC,IAAC,eAAuB,WAAW;AACnC,UAAM,WAAW,aAAa,eAAe,oBAAoB;AACjE,QAAI,SAAU,UAAS,cAAc,YAAY,QAAQ,CAAC;AAAA,EAC3D;AAGA,WAAS,oBAAoB;AAC5B,UAAM,OAAO,OAAO;AACpB,UAAM,OAAO,OAAO;AACpB,UAAM,UAAU,SAAS,OAAO,QAAQ,eAAe;AACvD,UAAM,UAAU,SAAS,OAAO,SAAS,eAAe;AAExD,UAAM,QAAQ,KAAK,IAAI,OAAO,SAAS,OAAO,OAAO;AACrD,UAAM,UAAU,UAAU;AAC1B,UAAM,UAAU,UAAU;AAC1B,UAAM,UAAU,KAAK,OAAO,OAAO,WAAW,CAAC;AAC/C,UAAM,UAAU,KAAK,OAAO,OAAO,WAAW,CAAC;AAC/C,QAAI,QAAQ;AAEX,aAAO,MAAM,QAAQ,GAAG,OAAO;AAC/B,aAAO,MAAM,SAAS,GAAG,OAAO;AAChC,aAAO,MAAM,WAAW;AACxB,aAAO,MAAM,OAAO,GAAG,OAAO;AAC9B,aAAO,MAAM,MAAM,GAAG,OAAO;AAC7B,aAAO,MAAM,kBAAkB;AAC/B,aAAO,MAAM,YAAY,SAAS,KAAK;AAAA,IACxC;AAEA,aAAS,KAAK,MAAM,WAAW;AAAA,EAChC;AAEA,QAAM,cAAc,aAAa,eAAe,oBAAoB;AACpE,QAAM,kBAAkB,aAAa,eAAe,sBAAsB;AAC1E,MAAI,sBAAsB;AAC1B,MAAI,aAAa;AAChB,gBAAY,iBAAiB,SAAS,CAAC,OAAY;AAClD,UAAI,oBAAqB;AACzB,YAAM,MAAM,WAAW,GAAG,OAAO,KAAK;AACtC,UAAI,CAAC,MAAM,GAAG,GAAG;AAChB,QAAC,eAAuB,cAAc;AACtC,QAAC,eAAuB,sBAAsB;AAC9C,YAAI,gBAAiB,CAAC,gBAAqC,UAAU;AACrE,iCAAyB;AACzB,0BAAkB;AAAA,MACnB;AAAA,IACD,CAAC;AAED,UAAM,WAAW,aAAa,eAAe,oBAAoB;AACjE,QAAI,SAAU,UAAS,cAAe,YAAiC;AAEvE,6BAAyB;AACzB,sBAAkB;AAAA,EACnB;AACA,MAAI,iBAAiB;AACpB,oBAAgB,iBAAiB,UAAU,CAAC,OAAY;AACvD,YAAM,UAAU,CAAC,CAAC,GAAG,OAAO;AAC5B,MAAC,eAAuB,sBAAsB;AAAA,IAC/C,CAAC;AACF,IAAC,gBAAqC,UAAU,CAAC,CAAE,eAAuB;AAAA,EAC1E;AAEA,oBAAkB;AAClB,SAAO,iBAAiB,UAAU,iBAAiB;AAEnD,MAAI;AACJ,QAAM,OAAO,qBAAqB;AAClC,MAAI,SAAS,SAAS;AACrB,QAAI;AAAE,YAAM,IAAI,IAAI,cAAc,MAAM;AAAG,UAAI,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAG,YAAW;AAAA,IAAG,SAAS,GAAG;AAAA,IAAC;AAAA,EACpG;AACA,MAAI,CAAC,UAAU;AAAE,eAAW,IAAI,eAAe,MAAM;AAAG,aAAS,QAAQ,SAAS,KAAK;AAAA,EAAG;AAE1F,MAAI;AAAE,WAAO,KAAK,OAAO,MAAM,CAAC;AAAA,EAAG,SAAS,GAAG;AAAA,EAAC;AAEhD,QAAM,KAAK,kBAAkB,EAAE,UAAU,WAAW,OAAO,MAAM,MAAM,CAAC;AACxE,MAAI,MAAM,GAAG,UAAW,IAAG,UAAU,SAAS;AAC9C,MAAI;AAAE,QAAI,OAAO,WAAW,eAAgB,OAAe,GAAI,QAAO,OAAQ,OAAe,IAAI,EAAE;AAAA,EAAG,SAAS,GAAG;AAAA,EAAC;AAGnH,MAAI,qBAAqB;AACzB,MAAI,GAAG,OAAO;AACb,OAAG,MAAM,iBAAiB,SAAS,MAAM;AACxC,2BAAqB,sBAAsB,IAAI,OAAO,qBAAqB;AAC3E,SAAG,MAAM,cAAc,UAAU,kBAAkB;AAAA,IACpD,CAAC;AACD,OAAG,MAAM,cAAc,UAAU,kBAAkB;AAAA,EACpD;AAGA,MAAI,MAAM,OAAO,GAAG,aAAa,YAAY;AAC5C,UAAM,eAAe,GAAG,SAAS,KAAK,EAAE;AACxC,OAAG,WAAW,CAAC,KAAK,UAAU,aAAa,KAAK,kBAAkB;AAAA,EACnE;AAGA,MAAI,GAAG,cAAc;AACpB,OAAG,aAAa,iBAAiB,SAAS,MAAM;AAC/C,UAAI,MAAM,OAAO,GAAG,eAAe,YAAY;AAC9C,WAAG,WAAW;AAAA,MACf;AAAA,IACD,CAAC;AAAA,EACF;AAGA,MAAI,sBAAsB;AAC1B,MAAI,MAAM,GAAG,aAAa,GAAG,UAAU,OAAO;AAC7C,OAAG,UAAU,MAAM,sBAAsB;AAAA,EAC1C;AACA,MAAI,GAAG,cAAc;AACpB,OAAG,aAAa,iBAAiB,SAAS,MAAM;AAC/C,4BAAsB,CAAC;AACvB,UAAI,MAAM,GAAG,aAAa,GAAG,UAAU,OAAO;AAC7C,WAAG,UAAU,MAAM,sBAAsB;AAAA,MAC1C;AACA,SAAG,aAAa,cAAc,sBAAsB,sBAAiB;AAAA,IACtE,CAAC;AACD,OAAG,aAAa,cAAc,sBAAsB,sBAAiB;AAAA,EACtE;AAEA,MAAI;AACH,UAAM,OAAQ,YAAY,SAAS,YAAa;AAChD,UAAM,YAAa,OAAO,oBAAoB,cAAe,IAAI,gBAAgB,SAAS,MAAM,IAAI;AACpG,UAAM,WAAY,aAAa,UAAU,IAAI,UAAU,MAAM,OAAQ,CAAC,CAAG,OAAe;AACxF,SAAK,SAAS,eAAe,SAAS,gBAAgB,UAAU;AAC/D,UAAI;AAAE,YAAI,MAAM,OAAO,GAAG,yBAAyB,WAAY,IAAG,qBAAqB,IAAI;AAAA,MAAG,SAAS,GAAG;AAAA,MAAC;AAC3G,UAAI;AAAE,YAAI,MAAM,OAAO,GAAG,6BAA6B,WAAY,IAAG,yBAAyB,IAAI;AAAA,MAAG,SAAS,GAAG;AAAA,MAAC;AACnH,UAAI;AAAE,YAAI,MAAM,OAAO,GAAG,aAAa,WAAY,IAAG,SAAS,IAAI;AAAA,MAAG,SAAS,GAAG;AAAA,MAAC;AAAA,IACpF;AAAA,EACD,SAAS,GAAG;AAAA,EAAC;AAEb,MAAI,2BAA2B;AAC/B,MAAI;AACH,QAAI,MAAM,OAAO,GAAG,OAAO,YAAY;AACtC,SAAG,GAAG,kBAAkB,CAAC,QAAa;AACrC,cAAM,OAAQ,OAAO,IAAI,WAAY,CAAC;AACtC,cAAM,QAAQ,KAAK,IAAI,CAAC,MAAW,EAAE,IAAI,EAAE,OAAO,OAAO;AACzD,cAAM,UAAU,2BAA2B,KAAK,MAAM,WAAW,MAAM,KAAK,IAAI,CAAC;AACjF,mCAA2B;AAC3B,YAAI;AAAE,qBAAW,MAAM;AAAE,uCAA2B;AAAA,UAAI,GAAG,GAAI;AAAA,QAAG,SAAS,GAAG;AAAA,QAAC;AAC/E,YAAI;AAAE,cAAI,MAAM,GAAG,MAAO,IAAG,MAAM,cAAc,GAAG,GAAG,MAAM,WAAW,MAAM,OAAO;AAAA,QAAI,SAAS,GAAG;AAAA,QAAC;AAAA,MACvG,CAAC;AAAA,IACF;AAAA,EACD,SAAS,GAAG;AAAA,EAAC;AAEb,QAAM,kBAAkB,aAAa,eAAe,iBAAiB;AACrE,MAAI,iBAAiB,aAAa,eAAe,gBAAgB;AACjE,MAAI,CAAC,gBAAgB;AACpB,QAAI;AACH,uBAAiB,aAAa,cAAc,KAAK;AACjD,qBAAe,KAAK;AACpB,qBAAe,MAAM,WAAW;AAChC,qBAAe,MAAM,QAAQ;AAC7B,qBAAe,MAAM,MAAM;AAC3B,qBAAe,MAAM,SAAS;AAC9B,qBAAe,MAAM,gBAAgB;AACrC,mBAAa,KAAK,YAAY,cAAc;AAAA,IAC7C,SAAS,GAAG;AAAE,uBAAiB;AAAA,IAAM;AAAA,EACtC;AAEA,WAAS,UAAU,KAAa,OAAY,CAAC,GAAG;AAC/C,QAAI;AACH,UAAI,CAAC,eAAgB;AACrB,YAAM,MAAO,OAAO,KAAK,QAAQ,WAAY,KAAK,MAAM;AACxD,YAAM,KAAK,aAAa,cAAc,KAAK;AAC3C,SAAG,MAAM,aAAa;AACtB,SAAG,MAAM,QAAQ;AACjB,SAAG,MAAM,UAAU;AACnB,SAAG,MAAM,YAAY;AACrB,SAAG,MAAM,eAAe;AACxB,SAAG,MAAM,YAAY;AACrB,SAAG,MAAM,aAAa;AACtB,SAAG,MAAM,WAAW;AACpB,SAAG,MAAM,gBAAgB;AACzB,SAAG,cAAc;AACjB,qBAAe,YAAY,EAAE;AAC7B,iBAAW,MAAM;AAAE,YAAI;AAAE,aAAG,MAAM,aAAa;AAAsB,aAAG,MAAM,UAAU;AAAA,QAAK,SAAS,GAAG;AAAA,QAAC;AAAC;AAAE,mBAAW,MAAM;AAAE,cAAI;AAAE,gBAAI,MAAM,GAAG,WAAY,IAAG,WAAW,YAAY,EAAE;AAAA,UAAG,SAAS,KAAK;AAAA,UAAC;AAAA,QAAE,GAAG,GAAG;AAAA,MAAG,GAAG,GAAG;AAAA,IAC/N,SAAS,GAAG;AAAA,IAAC;AAAA,EACd;AAEA,MAAI;AACH,QAAI,MAAM,OAAO,GAAG,OAAO,YAAY;AACtC,SAAG,GAAG,WAAW,CAAC,MAAW;AAC5B,YAAI;AACH,gBAAM,OAAQ,KAAK,EAAE,QAAS;AAC9B,gBAAM,MAAO,KAAK,EAAE,aAAc,KAAK,EAAE,aAAa,IAAI,IAAI;AAC9D,gBAAM,MAAM,QAAQ,KAAK,OAAO,GAAG,KAAK,IAAI,UAAU;AACtD,gBAAM,MAAM,GAAG,GAAG,kBAAkB,GAAG;AACvC,oBAAU,KAAK,EAAE,KAAK,KAAK,CAAC;AAAA,QAC7B,SAAS,GAAG;AAAA,QAAC;AAAA,MACd,CAAC;AAAA,IACF;AAAA,EACD,SAAS,GAAG;AAAA,EAAC;AAEb,MAAI,iBAAiB;AACpB,QAAI;AAAE,sBAAgB,cAAe,GAAG,YAAY,GAAG,SAAS,IAAK,WAAW;AAAQ,OAAC,SAAS,UAAU;AAAE,YAAI;AAAE,0BAAgB,cAAe,GAAG,YAAY,GAAG,SAAS,IAAK,WAAW;AAAQ,gCAAsB,OAAO;AAAA,QAAG,SAAS,GAAG;AAAA,QAAC;AAAA,MAAE,GAAE;AAAA,IAAI,SAAS,GAAG;AAAE,sBAAgB,cAAc;AAAA,IAAW;AAAA,EACnT;AAEA,MAAI;AAAE,OAAG,WAAW,iBAAiB,SAAS,MAAM;AAAE,UAAI,GAAG,UAAU,GAAG;AAAE,WAAG,MAAM;AAAG,WAAG,WAAW,cAAc;AAAA,MAAW,OAAO;AAAE,WAAG,MAAM;AAAG,WAAG,WAAW,cAAc;AAAA,MAAW;AAAA,IAAE,CAAC;AAAA,EAAG,SAAS,GAAG;AAAA,EAAC;AAC9M,MAAI;AAAE,OAAG,MAAM,iBAAiB,SAAS,MAAM,GAAG,MAAM,CAAC;AAAA,EAAG,SAAS,GAAG;AAAA,EAAC;AACzE,MAAI;AAAE,OAAG,OAAO,iBAAiB,SAAS,MAAM,GAAG,UAAU,KAAK,CAAC;AAAA,EAAG,SAAS,GAAG;AAAA,EAAC;AACnF,MAAI;AAAE,OAAG,QAAQ,iBAAiB,SAAS,MAAM,GAAG,UAAU,MAAM,CAAC;AAAA,EAAG,SAAS,GAAG;AAAA,EAAC;AACrF,WAAS,iBAAiB;AACzB,QAAI;AACH,YAAM,MAAO,OAAO,WAAW,eAAe,OAAO,OAAO,WAAW,aAAc,OAAO,OAAO,4CAA4C,EAAE,IAAI;AACrJ,UAAI,OAAO,KAAM;AACjB,YAAM,UAAU,OAAO,GAAG,EAAE,KAAK;AACjC,UAAI,YAAY,IAAI;AAAE,YAAI;AAAE,aAAG,OAAO;AAAG,oBAAU,2BAA2B;AAAA,QAAG,SAAS,GAAG;AAAA,QAAC;AAAE;AAAA,MAAQ;AACxG,YAAM,QAAQ,OAAO,OAAO;AAC5B,UAAI,CAAC,OAAO,SAAS,KAAK,KAAK,KAAK,MAAM,KAAK,MAAM,OAAO;AAAE,YAAI;AAAE,oBAAU,wCAAwC;AAAA,QAAG,SAAS,GAAG;AAAA,QAAC;AAAE;AAAA,MAAQ;AAChJ,UAAI;AAAE,WAAG,OAAO,UAAU,CAAC;AAAG,kBAAU,iBAAiB,UAAU,CAAC,EAAE;AAAA,MAAG,SAAS,GAAG;AAAA,MAAC;AAAA,IACvF,SAAS,GAAG;AAAA,IAAC;AAAA,EACd;AACA,MAAI;AAAE,OAAG,QAAQ,iBAAiB,SAAS,cAAc;AAAA,EAAG,SAAS,GAAG;AAAA,EAAC;AAEzE,MAAI;AAAE,QAAI,GAAG,oBAAoB;AAAE,SAAG,mBAAmB,iBAAiB,UAAU,CAAC,OAAY;AAAE,cAAM,IAAI,CAAC,CAAC,GAAG,OAAO;AAAS,YAAI,MAAM,OAAO,GAAG,yBAAyB,WAAY,IAAG,qBAAqB,CAAC;AAAA,MAAG,CAAC;AAAA,IAAG;AAAA,EAAE,SAAS,GAAG;AAAA,EAAC;AAE1O,WAAS,SAAS;AACjB,UAAM,YAAY,YAAY,IAAI;AAClC,QAAI,aAAa;AACjB,QAAI;AACH,YAAM,IAAI,GAAG,SAAS;AACtB,SAAG,SAAS,cAAc,OAAO,GAAG,MAAM,GAAG;AAC7C,SAAG,UAAU,cAAc,QAAQ,GAAG,MAAM,IAAI;AAChD,YAAM,WAAW,EAAE,MAAM,OAAO,CAAC,OAAY,GAAG,SAAS,KAAK,EAAE;AAChE,YAAM,YAAY,EAAE,MAAM,OAAO,CAAC,OAAY,GAAG,SAAS,MAAM,EAAE;AAClE,SAAG,MAAM,cAAc,UAAU,EAAE,MAAM,MAAM,OAAO,QAAQ,MAAM,SAAS,cAAc,EAAE,QAAQ,MAAM,MAAM,2BAA2B,MAAM,wBAAwB,KAAK;AAAA,IAChL,SAAS,GAAG;AAAA,IAAC;AACb,UAAM,UAAU,YAAY,IAAI;AAChC,UAAM,WAAW,UAAU;AAC3B,QAAI,WAAW,IAAI,OAAO;AACzB,mBAAa;AAAA,IACd;AAEA,UAAM,iBAAiB,CAAC,CAAE,eAAuB;AACjD,UAAM,gBAAgB,aAAa,eAAe,oBAAoB;AACtE,UAAM,aAAa,aAAa,eAAe,oBAAoB;AAEnE,UAAM,MAAM,YAAY,IAAI;AAC5B,IAAC,eAAuB,cAAe,eAAuB,eAAe;AAC7E,UAAM,KAAK,MAAO,eAAuB;AACzC,IAAC,eAAuB,cAAc;AACtC,IAAC,eAAuB,gBAAgB;AAExC,QAAI,aAAa;AACjB,QAAI,KAAK,GAAI,cAAa;AAAA,aACjB,KAAK,GAAI,cAAa;AAC/B,IAAC,eAAuB,aAAa;AAErC,QAAI,YAAY;AACf,iBAAW,MAAM,QAAQ,eAAe,UAAU,YAAY,eAAe,WAAW,YAAY;AAAA,IACrG;AAEA,QAAI,kBAAkB,eAAe;AACpC,UAAI,QAAS,eAAuB;AAEpC,UAAI,eAAe,SAAS,QAAQ,KAAM,SAAQ,KAAK,IAAI,MAAM,QAAQ,IAAI;AAAA,eACpE,eAAe,WAAW,QAAQ,EAAK,SAAQ,KAAK,IAAI,GAAK,QAAQ,IAAI;AAElF,UAAI,UAAW,eAAuB,aAAa;AAClD,QAAC,eAAuB,cAAc;AACtC,8BAAsB;AACtB,sBAAc,QAAQ,MAAM,QAAQ,CAAC;AACrC,YAAI,WAAY,YAAW,cAAc,MAAM,QAAQ,CAAC;AACxD,0BAAkB;AAClB,8BAAsB;AAAA,MACvB;AAAA,IACD;AACA,QAAI,CAAC,YAAY;AAChB,4BAAsB,MAAM;AAAA,IAC7B,OAAO;AAEN,iBAAW,QAAQ,IAAI,KAAK;AAAA,IAC7B;AAAA,EACD;AACA,wBAAsB,MAAM;AAC5B,SAAO,EAAE,IAAI,SAAS;AACvB;AAEA,IAAI,OAAO,WAAW,aAAa;AAClC,MAAI,SAAS,eAAe,UAAW,UAAS,iBAAiB,oBAAoB,MAAM,SAAS,QAAQ,CAAC;AAAA,MACxG,UAAS,QAAQ;AACvB;AAEA,IAAO,eAAQ;",
  "names": ["mulberry32", "bounds", "s", "lvl", "_seed", "seed", "ships", "_seed", "vconf", "ships", "h"]
}
