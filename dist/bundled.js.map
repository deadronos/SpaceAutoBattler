{
  "version": 3,
  "sources": ["../src/config/assets/assetsConfig.ts", "../src/config/entitiesConfig.js", "../src/entities.js", "../src/rng.js", "../src/config/progressionConfig.js", "../src/simulate.js", "../src/config/displayConfig.js", "../src/createSimWorker.js", "../src/config/gamemanagerConfig.js", "../src/behavior.js", "../src/gamemanager.js", "../src/config/teamsConfig.js", "../src/canvasrenderer.js", "../src/webglrenderer.js", "../src/config/rendererConfig.js", "../src/main.js"],
  "sourcesContent": ["// Basic asset templates for 2D top-down rendering with future 3D model placeholders.\r\n// Orientation: shapes face +X (to the right). Scale is in logical units; renderer\r\n// should scale to entity radius and rotate by entity heading if present.\r\n\r\nexport type PolygonShape = {\r\n  type: 'polygon';\r\n  points: number[][]; // [[x,y], ...]\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CircleShape = {\r\n  type: 'circle';\r\n  r: number;\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type CompoundPart = PolygonShape | CircleShape;\r\n\r\nexport type CompoundShape = {\r\n  type: 'compound';\r\n  parts: CompoundPart[];\r\n  strokeWidth?: number;\r\n  model3d?: Model3D | undefined;\r\n};\r\n\r\nexport type Shape2D = PolygonShape | CircleShape | CompoundShape;\r\n\r\nexport type Model3D = {\r\n  url?: string | undefined;\r\n  scale?: number | undefined;\r\n  type?: string | undefined;\r\n  mesh?: string | undefined;\r\n};\r\n\r\nexport type AssetsConfigType = {\r\n  meta: { orientation: string; coordinateSystem: string };\r\n  palette: Record<string, string>;\r\n  shapes2d: Record<string, Shape2D>;\r\n};\r\n\r\nexport const AssetsConfig: AssetsConfigType = {\r\n  meta: {\r\n    orientation: '+X',\r\n    coordinateSystem: 'topdown-2d',\r\n  },\r\n  palette: {\r\n    shipHull: '#b0b7c3',\r\n    shipAccent: '#6c7380',\r\n    bullet: '#ffd166',\r\n    turret: '#94a3b8',\r\n  },\r\n  // 2D vector shapes defined as polygons and circles. Points are unit-sized\r\n  // profiles (roughly radius 1). Renderer should multiply by entity radius or\r\n  // provided scale before drawing.\r\n  shapes2d: {\r\n    fighter: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.2, 0], [-0.8, 0.6], [-0.5, 0], [-0.8, -0.6]] },\r\n        { type: 'polygon', points: [[0.0, 0.35], [-0.6, 0.65], [-0.35, 0.0]] },\r\n        { type: 'polygon', points: [[0.0, -0.35], [-0.35, 0.0], [-0.6, -0.65]] }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1, type: 'gltf', mesh: undefined }\r\n    },\r\n    corvette: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.0, 0], [0.2, 0.6], [-0.9, 0.5], [-1.1, 0], [-0.9, -0.5], [0.2, -0.6]] },\r\n        { type: 'polygon', points: [[1.2, 0.18], [1.0, 0.1], [1.0, -0.1], [1.2, -0.18]] }\r\n      ],\r\n      strokeWidth: 0.08,\r\n      model3d: { url: undefined, scale: 1.4, type: 'gltf', mesh: undefined }\r\n    },\r\n    frigate: {\r\n      type: 'polygon',\r\n      points: [[1.1, 0], [0.6, 0.55], [-0.2, 0.8], [-1.2, 0.45], [-1.2, -0.45], [-0.2, -0.8], [0.6, -0.55]],\r\n      strokeWidth: 0.1,\r\n      model3d: { url: undefined, scale: 1.8, type: 'gltf', mesh: undefined }\r\n    },\r\n    destroyer: {\r\n      type: 'polygon',\r\n      points: [[1.4, 0], [0.8, 0.5], [0.1, 0.7], [-0.6, 0.6], [-1.4, 0.4], [-1.4, -0.4], [-0.6, -0.6], [0.1, -0.7], [0.8, -0.5]],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 2.2, type: 'gltf', mesh: undefined }\r\n    },\r\n    carrier: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'polygon', points: [[1.1, 0], [0.6, 0.7], [-0.5, 0.9], [-1.4, 0.7], [-1.6, 0], [-1.4, -0.7], [-0.5, -0.9], [0.6, -0.7]] },\r\n        { type: 'polygon', points: [[1.4, 0.25], [1.1, 0.15], [1.1, -0.15], [1.4, -0.25]] }\r\n      ],\r\n      strokeWidth: 0.12,\r\n      model3d: { url: undefined, scale: 3.0, type: 'gltf', mesh: undefined }\r\n    },\r\n    bulletSmall: { type: 'circle', r: 0.18 },\r\n    bulletMedium: { type: 'circle', r: 0.25 },\r\n    bulletLarge: { type: 'circle', r: 0.36 },\r\n    turretBasic: {\r\n      type: 'compound',\r\n      parts: [\r\n        { type: 'circle', r: 0.5 },\r\n        { type: 'polygon', points: [[-0.2, 0.2], [0.7, 0.2], [0.7, -0.2], [-0.2, -0.2]] }\r\n      ],\r\n      strokeWidth: 0.08\r\n    }\r\n  }\r\n};\r\n\r\nexport function getShipAsset(type: string): Shape2D {\r\n  return AssetsConfig.shapes2d[type] || AssetsConfig.shapes2d.fighter;\r\n}\r\n\r\nexport function getBulletAsset(kind: 'small' | 'medium' | 'large' = 'small'): Shape2D {\r\n  if (kind === 'large') return AssetsConfig.shapes2d.bulletLarge;\r\n  if (kind === 'medium') return AssetsConfig.shapes2d.bulletMedium;\r\n  return AssetsConfig.shapes2d.bulletSmall;\r\n}\r\n\r\nexport function getTurretAsset(_kind: 'basic' = 'basic'): Shape2D {\r\n  return AssetsConfig.shapes2d.turretBasic;\r\n}\r\n\r\nexport default AssetsConfig;\r\n", "// Copied from spec/entitiesConfig.js - ship-type defaults and helpers\r\nimport { getShipAsset, getBulletAsset, getTurretAsset } from './assets/assetsConfig';\r\nexport const ShipConfig = {\r\n  fighter: {\r\n    maxHp: 15,\r\n    armor: 0,\r\n    maxShield: 8,\r\n    shieldRegen: 1.0,\r\n    dmg: 3,\r\n    radius: 4,\r\n    cannons: [\r\n      { damage: 3, rate: 3, spread: 0.1, muzzleSpeed: 300, bulletRadius: 1.5, bulletTTL: 1.2 }\r\n    ],\r\n    accel: 600,\r\n    turnRate: 6,\r\n  },\r\n  corvette: {\r\n    maxHp: 50,\r\n    armor: 0,\r\n    maxShield: Math.round(50 * 0.6),\r\n    shieldRegen: 0.5,\r\n    dmg: 5,\r\n    radius: 8,\r\n    accel: 200,\r\n    turnRate: 3,\r\n    cannons: [ { damage: 6, rate: 1.2, spread: 0.05, muzzleSpeed: 220, bulletRadius: 2, bulletTTL: 2.0 } ],\r\n  },\r\n  frigate: {\r\n    maxHp: 80,\r\n    armor: 1,\r\n    maxShield: Math.round(80 * 0.6),\r\n    shieldRegen: 0.4,\r\n    dmg: 8,\r\n    radius: 12,\r\n    cannons: [ { damage: 8, rate: 1.0, spread: 0.06, muzzleSpeed: 200, bulletRadius: 2.5, bulletTTL: 2.2 } ],\r\n    accel: 120,\r\n    turnRate: 2.2,\r\n  },\r\n  destroyer: {\r\n    maxHp: 120,\r\n    armor: 2,\r\n    maxShield: Math.round(120 * 0.6),\r\n    shieldRegen: 0.3,\r\n    dmg: 12,\r\n    radius: 16,\r\n    cannons: new Array(6).fill(0).map(() => ({ damage: 6, rate: 0.8, spread: 0.08, muzzleSpeed: 240, bulletRadius: 2.5, bulletTTL: 2.4 })),\r\n    accel: 80,\r\n    turnRate: 1.6,\r\n  },\r\n  carrier: {\r\n    maxHp: 200,\r\n    armor: 3,\r\n    maxShield: Math.round(200 * 0.6),\r\n    shieldRegen: 0.2,\r\n    dmg: 2,\r\n    radius: 24,\r\n    cannons: new Array(4).fill(0).map(() => ({ damage: 4, rate: 0.6, spread: 0.12, muzzleSpeed: 180, bulletRadius: 3, bulletTTL: 2.8 })),\r\n    accel: 40,\r\n    turnRate: 0.8,\r\n    carrier: { fighterCooldown: 1.5, maxFighters: 6, spawnPerCooldown: 2 }\r\n  }\r\n};\r\n\r\nexport default ShipConfig;\r\n\r\nexport function setShipConfig(newCfg = {}) {\r\n  function merge(target, src) {\r\n    for (const k of Object.keys(src)) {\r\n      const sv = src[k];\r\n      if (sv && typeof sv === 'object' && !Array.isArray(sv)) {\r\n        if (!target[k] || typeof target[k] !== 'object') target[k] = {};\r\n        merge(target[k], sv);\r\n      } else if (Array.isArray(sv)) {\r\n        target[k] = sv.map(item => (item && typeof item === 'object' ? Object.assign({}, item) : item));\r\n      } else if (['number', 'string', 'boolean'].includes(typeof sv)) {\r\n        target[k] = sv;\r\n      }\r\n    }\r\n  }\r\n  merge(ShipConfig, newCfg);\r\n}\r\n\r\nexport function getShipConfig() {\r\n  return JSON.parse(JSON.stringify(ShipConfig));\r\n}\r\n\r\n// Visual mapping configuration and helpers\r\nexport const VisualMappingConfig = {\r\n  // thresholds to map bulletRadius to an asset kind\r\n  bulletRadiusThresholds: [\r\n    { threshold: 0.22, kind: 'small' },\r\n    { threshold: 0.32, kind: 'medium' },\r\n    { threshold: Infinity, kind: 'large' }\r\n  ],\r\n  defaultTurretKind: 'basic',\r\n  shipAssetKey: {\r\n    fighter: 'fighter',\r\n    corvette: 'corvette',\r\n    frigate: 'frigate',\r\n    destroyer: 'destroyer',\r\n    carrier: 'carrier'\r\n  }\r\n};\r\n\r\nexport function bulletKindForRadius(r = 0.2) {\r\n  for (const t of VisualMappingConfig.bulletRadiusThresholds) {\r\n    if (r <= t.threshold) return t.kind;\r\n  }\r\n  return 'small';\r\n}\r\n\r\nexport function getBulletAssetForCannon(cannon = {}) {\r\n  const r = typeof cannon.bulletRadius === 'number' ? cannon.bulletRadius : (typeof cannon.radius === 'number' ? cannon.radius : 0.2);\r\n  const kind = bulletKindForRadius(r);\r\n  return getBulletAsset(kind);\r\n}\r\n\r\nexport function getShipAssetForType(type = 'fighter') {\r\n  const key = VisualMappingConfig.shipAssetKey[type] || type;\r\n  return getShipAsset(key);\r\n}\r\n\r\nexport function getTurretAssetForShip(_shipType = 'fighter') {\r\n  return getTurretAsset(VisualMappingConfig.defaultTurretKind);\r\n}\r\n\r\nexport function getVisualsForShipType(type = 'fighter', cannon = undefined) {\r\n  return {\r\n    hull: getShipAssetForType(type),\r\n    turret: getTurretAssetForShip(type),\r\n    bullet: getBulletAssetForCannon(cannon)\r\n  };\r\n}\r\n", "// entities.js - catalog of ships, bullets, cannon configs and simple factories\r\nimport { getShipConfig } from './config/entitiesConfig.js';\r\n\r\nlet nextId = 1;\r\nexport function genId() { return nextId++; }\r\n\r\nexport function createShip(type = 'fighter', x = 0, y = 0, team = 'red') {\r\n  const cfg = getShipConfig()[type] || getShipConfig().fighter;\r\n  return {\r\n    id: genId(),\r\n    type,\r\n    x, y,\r\n    vx: 0, vy: 0,\r\n    hp: cfg.maxHp,\r\n    maxHp: cfg.maxHp,\r\n    shield: cfg.maxShield || 0,\r\n    maxShield: cfg.maxShield || 0,\r\n    team,\r\n    xp: 0,\r\n    level: 1,\r\n    cannons: JSON.parse(JSON.stringify(cfg.cannons || [])),\r\n    accel: cfg.accel || 0,\r\n    turnRate: cfg.turnRate || 0,\r\n    radius: cfg.radius || 6,\r\n  };\r\n}\r\n\r\nexport function createBullet(x, y, vx, vy, team = 'red', ownerId = null, damage = 1, ttl = 2.0) {\r\n  return {\r\n    id: genId(),\r\n    x, y, vx, vy, team, ownerId, damage, ttl\r\n  };\r\n}\r\n\r\nexport function makeInitialState() {\r\n  return {\r\n    t: 0,\r\n    ships: [],\r\n    bullets: [],\r\n    explosions: [],\r\n    shieldHits: [],\r\n    healthHits: [],\r\n  };\r\n}\r\n\r\nexport default { createShip, createBullet, makeInitialState };\r\n", "// rng.js - lightweight deterministic seeded RNG utilities\r\nlet _seed = 1;\r\n\r\nexport function srand(seed = 1) {\r\n  // store as 32-bit unsigned\r\n  _seed = seed >>> 0;\r\n}\r\n\r\n// mulberry32 PRNG\r\nfunction mulberry32(a) {\r\n  return function() {\r\n    let t = a += 0x6D2B79F5;\r\n    t = Math.imul(t ^ t >>> 15, t | 1);\r\n    t ^= t + Math.imul(t ^ t >>> 7, t | 61);\r\n    return ((t ^ t >>> 14) >>> 0) / 4294967296;\r\n  }\r\n}\r\n\r\nexport function srandom() {\r\n  const f = mulberry32(_seed);\r\n  // advance seed deterministically\r\n  _seed = (_seed + 0x9E3779B1) >>> 0;\r\n  return f();\r\n}\r\n\r\nexport function srange(min, max) {\r\n  return min + (max - min) * srandom();\r\n}\r\n\r\nexport function srangeInt(min, max) {\r\n  // exclusive upper bound to match rng.ts and common expectations\r\n  return Math.floor(srange(min, max));\r\n}\r\n\r\nexport default { srand, srandom, srange, srangeInt };\r\n", "// Copied from spec/progressionConfig.js - XP and progression constants\r\nexport const progression = {\r\n  xpPerDamage: 1,\r\n  xpPerKill: 50,\r\n  xpToLevel: (level) => 100 + level * 50,\r\n  // percent-per-level scalars (fractions)\r\n  hpPercentPerLevel: 0.10,\r\n  dmgPercentPerLevel: 0.08,\r\n  shieldPercentPerLevel: 0.06,\r\n};\r\n\r\nexport default progression;\r\n", "// simulate.js - deterministic fixed-step simulation logic\r\nimport { srange, srand } from './rng.js';\r\nimport { progression as progressionCfg } from './config/progressionConfig.js';\r\n\r\n// Configurable sim constants (exported for tests)\r\nexport const SIM_DT_MS = 16; // default fixed-step in ms\r\nexport const MAX_ACC_MS = 250; // clamp accumulator\r\n\r\n// simple distance helper\r\nfunction dist2(a, b) { const dx = a.x - b.x; const dy = a.y - b.y; return dx*dx + dy*dy; }\r\n\r\nexport function simulateStep(state, dtSeconds, bounds) {\r\n  // Advance time\r\n  state.t += dtSeconds;\r\n\r\n  // Move bullets\r\n  for (let i = state.bullets.length - 1; i >= 0; i--) {\r\n    const b = state.bullets[i];\r\n    b.x += b.vx * dtSeconds;\r\n    b.y += b.vy * dtSeconds;\r\n    b.ttl -= dtSeconds;\r\n    if (b.ttl <= 0) state.bullets.splice(i, 1);\r\n  }\r\n\r\n  // Move ships (very small integration)\r\n  for (const s of state.ships) {\r\n    s.x += (s.vx || 0) * dtSeconds;\r\n    s.y += (s.vy || 0) * dtSeconds;\r\n    // wrap-around toroidal field\r\n    if (s.x < 0) s.x += bounds.W; if (s.x > bounds.W) s.x -= bounds.W;\r\n    if (s.y < 0) s.y += bounds.H; if (s.y > bounds.H) s.y -= bounds.H;\r\n  }\r\n\r\n  // Bullet collisions (brute force): bullet -> ship\r\n  for (let bi = state.bullets.length - 1; bi >= 0; bi--) {\r\n    const b = state.bullets[bi];\r\n    for (let si = state.ships.length - 1; si >= 0; si--) {\r\n      const s = state.ships[si];\r\n      if (s.team === b.team) continue; // friendly fire off\r\n      const r = (s.radius || 6) + (b.radius || 1);\r\n      if (dist2(b, s) <= r * r) {\r\n        // track attacker (if present) for XP awards\r\n        const attacker = typeof b.ownerId === 'number' || typeof b.ownerId === 'string'\r\n          ? state.ships.find(sh => sh.id === b.ownerId) || undefined\r\n          : undefined;\r\n        let dealtToShield = 0;\r\n        let dealtToHealth = 0;\r\n        // apply to shield first\r\n        const shield = s.shield || 0;\r\n        if (shield > 0) {\r\n          const absorbed = Math.min(shield, b.damage);\r\n          s.shield -= absorbed;\r\n          state.shieldHits.push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: absorbed });\r\n          // reduce remaining damage\r\n          const remaining = b.damage - absorbed;\r\n          if (remaining > 0) {\r\n            s.hp -= remaining;\r\n            state.healthHits.push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: remaining });\r\n          }\r\n          dealtToShield = absorbed;\r\n          dealtToHealth = Math.max(0, (b.damage || 0) - absorbed);\r\n        } else {\r\n          s.hp -= b.damage;\r\n          state.healthHits.push({ id: s.id, hitX: b.x, hitY: b.y, team: s.team, amount: b.damage });\r\n          dealtToHealth = (b.damage || 0);\r\n        }\r\n        // XP: award for damage dealt (shield + health)\r\n        if (attacker) {\r\n          attacker.xp = (attacker.xp || 0) + (dealtToShield + dealtToHealth) * (progressionCfg.xpPerDamage || 0);\r\n          // Handle level-ups while XP exceeds thresholds\r\n          while ((attacker.xp || 0) >= progressionCfg.xpToLevel((attacker.level || 1))) {\r\n            attacker.xp -= progressionCfg.xpToLevel((attacker.level || 1));\r\n            attacker.level = (attacker.level || 1) + 1;\r\n            // Apply simple per-level scaling\r\n            const hpMul = 1 + (progressionCfg.hpPercentPerLevel || 0);\r\n            const shMul = 1 + (progressionCfg.shieldPercentPerLevel || 0);\r\n            const dmgMul = 1 + (progressionCfg.dmgPercentPerLevel || 0);\r\n            attacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n            attacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n            if (typeof attacker.maxShield === 'number') {\r\n              attacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n              attacker.shield = Math.min(attacker.maxShield, (attacker.shield || 0) * shMul);\r\n            }\r\n            if (Array.isArray(attacker.cannons)) {\r\n              for (const c of attacker.cannons) {\r\n                if (typeof c.damage === 'number') c.damage *= dmgMul;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        // remove bullet\r\n        state.bullets.splice(bi, 1);\r\n        if (s.hp <= 0) {\r\n          // kill credit\r\n          if (attacker) {\r\n            attacker.xp = (attacker.xp || 0) + (progressionCfg.xpPerKill || 0);\r\n            while ((attacker.xp || 0) >= progressionCfg.xpToLevel((attacker.level || 1))) {\r\n              attacker.xp -= progressionCfg.xpToLevel((attacker.level || 1));\r\n              attacker.level = (attacker.level || 1) + 1;\r\n              const hpMul = 1 + (progressionCfg.hpPercentPerLevel || 0);\r\n              const shMul = 1 + (progressionCfg.shieldPercentPerLevel || 0);\r\n              const dmgMul = 1 + (progressionCfg.dmgPercentPerLevel || 0);\r\n              attacker.maxHp = (attacker.maxHp || 0) * hpMul;\r\n              attacker.hp = Math.min(attacker.maxHp, (attacker.hp || 0) * hpMul);\r\n              if (typeof attacker.maxShield === 'number') {\r\n                attacker.maxShield = (attacker.maxShield || 0) * shMul;\r\n                attacker.shield = Math.min(attacker.maxShield, (attacker.shield || 0) * shMul);\r\n              }\r\n              if (Array.isArray(attacker.cannons)) {\r\n                for (const c of attacker.cannons) {\r\n                  if (typeof c.damage === 'number') c.damage *= dmgMul;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          state.explosions.push({ x: s.x, y: s.y, team: s.team });\r\n          // remove ship\r\n          state.ships.splice(si, 1);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // simple per-step shield regen\r\n  for (const s of state.ships) {\r\n    if (s.maxShield) s.shield = Math.min(s.maxShield, (s.shield || 0) + (s.shieldRegen || 0) * dtSeconds);\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default { simulateStep, SIM_DT_MS };\r\n", "export function getDefaultBounds() {\r\n  return { W: Math.max(800, window.innerWidth), H: Math.max(600, window.innerHeight) };\r\n}\r\n\r\nexport default { getDefaultBounds };\r\n", "// createSimWorker.js - helper to create and manage the sim Worker\r\nexport function createSimWorker(url = './simWorker.js') {\r\n  const worker = new Worker(url, { type: 'module' });\r\n  const listeners = new Map();\r\n\r\n  worker.onmessage = (ev) => {\r\n    const msg = ev.data;\r\n    const cb = listeners.get(msg.type);\r\n    if (cb) cb(msg);\r\n  };\r\n\r\n  return {\r\n    post(msg) { worker.postMessage(msg); },\r\n    on(type, cb) { listeners.set(type, cb); },\r\n    terminate() { worker.terminate(); }\r\n  };\r\n}\r\n\r\nexport default createSimWorker;\r\n", "// Minimal manager configuration - copied/adapted from spec\r\nexport const SHIELD = {\r\n  ttl: 0.4,\r\n  particleCount: 6,\r\n  particleTTL: 0.5,\r\n  particleColor: '#88ccff',\r\n  particleSize: 2,\r\n};\r\n\r\nexport const HEALTH = {\r\n  ttl: 0.6,\r\n  particleCount: 8,\r\n  particleTTL: 0.6,\r\n  particleColor: '#ffb3b3',\r\n  particleSize: 2.5,\r\n};\r\n\r\nexport const EXPLOSION = {\r\n  particleCount: 30,\r\n  particleTTL: 1.2,\r\n  particleColor: '#ffaa33',\r\n  particleSize: 3,\r\n  minSpeed: 20,\r\n  maxSpeed: 140,\r\n};\r\n\r\nexport const STARS = {\r\n  twinkle: true,\r\n  redrawInterval: 500,\r\n};\r\n\r\nexport default { SHIELD, HEALTH, EXPLOSION, STARS };\r\n", "// behavior.js - deterministic, simple AI for steering and firing\r\n// Uses seeded RNG for any randomness so results are reproducible.\r\nimport { srandom, srange } from './rng.js';\r\nimport { createBullet } from './entities.js';\r\n\r\n// Small helpers\r\nfunction len2(vx, vy) { return vx*vx + vy*vy; }\r\nfunction clampSpeed(s, max) {\r\n  const v2 = len2(s.vx || 0, s.vy || 0);\r\n  const max2 = max * max;\r\n  if (v2 > max2 && v2 > 0) {\r\n    const inv = max / Math.sqrt(v2);\r\n    s.vx *= inv; s.vy *= inv;\r\n  }\r\n}\r\n\r\nfunction findNearestEnemy(state, ship) {\r\n  let best = null; let bestD2 = Infinity;\r\n  for (const other of state.ships) {\r\n    if (other === ship) continue;\r\n    if (other.team === ship.team) continue;\r\n    const dx = other.x - ship.x; const dy = other.y - ship.y;\r\n    const d2 = dx*dx + dy*dy;\r\n    if (d2 < bestD2) { bestD2 = d2; best = other; }\r\n  }\r\n  return best;\r\n}\r\n\r\n// Aim vector with tiny deterministic spread\r\nfunction aimWithSpread(from, to, spread = 0) {\r\n  let dx = to.x - from.x; let dy = to.y - from.y;\r\n  const d = Math.hypot(dx, dy) || 1;\r\n  dx /= d; dy /= d;\r\n  if (spread > 0) {\r\n    const ang = Math.atan2(dy, dx);\r\n    const jitter = (srange(-spread, spread));\r\n    const na = ang + jitter;\r\n    return { x: Math.cos(na), y: Math.sin(na) };\r\n  }\r\n  return { x: dx, y: dy };\r\n}\r\n\r\n// Fire cannons using per-cannon cooldowns based on `rate` (shots/sec)\r\nfunction tryFire(state, ship, target, dt) {\r\n  if (!Array.isArray(ship.cannons) || ship.cannons.length === 0) return;\r\n  for (const c of ship.cannons) {\r\n    // prepare cooldown storage on the cannon instance\r\n    if (typeof c.__cd !== 'number') c.__cd = 0;\r\n    c.__cd -= dt;\r\n    if (c.__cd > 0) continue;\r\n    // simple LOS/aim check \u2014 always fire if we have a target\r\n    const spread = typeof c.spread === 'number' ? c.spread : 0;\r\n    const dir = aimWithSpread(ship, target, spread);\r\n    const speed = typeof c.muzzleSpeed === 'number' ? c.muzzleSpeed : 240;\r\n    const dmg = typeof c.damage === 'number' ? c.damage : 3;\r\n    const ttl = typeof c.bulletTTL === 'number' ? c.bulletTTL : 2.0;\r\n    const radius = typeof c.bulletRadius === 'number' ? c.bulletRadius : 1.5;\r\n    const vx = dir.x * speed;\r\n    const vy = dir.y * speed;\r\n    const b = Object.assign(\r\n      createBullet(ship.x, ship.y, vx, vy, ship.team, ship.id, dmg, ttl),\r\n      { radius }\r\n    );\r\n    state.bullets.push(b);\r\n    const rate = (typeof c.rate === 'number' && c.rate > 0) ? c.rate : 1;\r\n    c.__cd = 1 / rate;\r\n  }\r\n}\r\n\r\nexport function applySimpleAI(state, dt, bounds = { W: 800, H: 600 }) {\r\n  if (!state || !Array.isArray(state.ships)) return;\r\n  for (const s of state.ships) {\r\n    // Steering towards nearest enemy\r\n    const enemy = findNearestEnemy(state, s);\r\n    if (enemy) {\r\n      // Accelerate towards enemy using ship.accel if present\r\n      const accel = typeof s.accel === 'number' ? s.accel : 100;\r\n      const aim = aimWithSpread(s, enemy, 0); // no spread for steering\r\n      s.vx = (s.vx || 0) + aim.x * accel * dt;\r\n      s.vy = (s.vy || 0) + aim.y * accel * dt;\r\n      // Fire if off cooldown\r\n      tryFire(state, s, enemy, dt);\r\n    } else {\r\n      // Idle drift with tiny deterministic noise\r\n      s.vx = (s.vx || 0) + (srange(-1, 1) * 8) * dt;\r\n      s.vy = (s.vy || 0) + (srange(-1, 1) * 8) * dt;\r\n    }\r\n    // Clamp max speed to keep motion sane\r\n    const maxSpeed = 160;\r\n    clampSpeed(s, maxSpeed);\r\n  }\r\n}\r\n\r\nexport default { applySimpleAI };\r\n", "// gamemanager.js - orchestrates simulateStep, simple behavior, and exposes API\r\nimport { makeInitialState, createShip, createBullet } from './entities.js';\r\nimport { simulateStep, SIM_DT_MS } from './simulate.js';\r\nimport { srand, srange, srandom } from './rng.js';\r\nimport { getDefaultBounds } from './config/displayConfig.js';\r\nimport { createSimWorker } from './createSimWorker.js';\r\nimport { SHIELD, HEALTH, EXPLOSION, STARS } from './config/gamemanagerConfig.js';\r\nimport { setShipConfig, getShipConfig } from './config/entitiesConfig.js';\r\nimport { applySimpleAI } from './behavior.js';\r\n\r\nexport function createGameManager({ renderer, canvas, seed = 12345 } = {}) {\r\n  let state = makeInitialState();\r\n  let running = false;\r\n  let score = { red: 0, blue: 0 };\r\n  const bounds = getDefaultBounds();\r\n  srand(seed);\r\n  // Try to run simulation in a worker when available\r\n  let simWorker = null;\r\n  // Transient visual effects for the renderer (persist across frames with TTL)\r\n  const flashes = []; // explosions\r\n  const shieldFlashes = [];\r\n  const healthFlashes = [];\r\n  try {\r\n    simWorker = createSimWorker(new URL('./simWorker.js', import.meta.url).href);\r\n    simWorker.on('ready', () => console.log('sim worker ready'));\r\n    simWorker.on('snapshot', (m) => {\r\n      // replace authoritative local state with worker snapshot for rendering\r\n      if (m && m.state) state = m.state;\r\n    });\r\n    simWorker.on('error', (m) => console.error('sim worker error', m));\r\n    // initialize worker\r\n    simWorker.post({ type: 'init', seed, bounds, simDtMs: SIM_DT_MS, state });\r\n    // start the worker simulation loop so snapshots advance over time\r\n    simWorker.post({ type: 'start' });\r\n  } catch (e) {\r\n    simWorker = null; // fallback to main-thread sim\r\n  }\r\n\r\n  function step(dtSeconds) {\r\n    // basic AI & local firing only when no worker (main-thread simulation)\r\n    if (!simWorker) {\r\n      // Apply the same AI as the worker for parity\r\n      try { applySimpleAI(state, dtSeconds, bounds); } catch (e) {}\r\n    }\r\n\r\n    if (simWorker) {\r\n      // worker is authoritative \u2014 ask for one snapshot after letting the worker run\r\n      simWorker.post({ type: 'snapshotRequest' });\r\n    } else {\r\n      simulateStep(state, dtSeconds, bounds);\r\n    }\r\n    // process transient events into effect buffers with TTL for rendering\r\n    // Copy events before scoring consumes them\r\n    if (Array.isArray(state.explosions)) {\r\n      for (const ex of state.explosions) {\r\n        flashes.push({ x: ex.x, y: ex.y, team: ex.team, ttl: EXPLOSION.particleTTL || 0.6, life: EXPLOSION.particleTTL || 0.6 });\r\n      }\r\n    }\r\n    if (Array.isArray(state.shieldHits)) {\r\n      for (const h of state.shieldHits) {\r\n        shieldFlashes.push({ x: h.hitX || h.x, y: h.hitY || h.y, team: h.team, amount: h.amount, ttl: SHIELD.ttl || 0.4, life: SHIELD.ttl || 0.4 });\r\n      }\r\n      state.shieldHits.length = 0; // events consumed into effect buffer\r\n    }\r\n    if (Array.isArray(state.healthHits)) {\r\n      for (const h of state.healthHits) {\r\n        healthFlashes.push({ x: h.hitX || h.x, y: h.hitY || h.y, team: h.team, amount: h.amount, ttl: HEALTH.ttl || 0.6, life: HEALTH.ttl || 0.6 });\r\n      }\r\n      state.healthHits.length = 0;\r\n    }\r\n\r\n    // reconciliate events for score (consume explosions after buffering for visuals)\r\n    while (state.explosions.length) {\r\n      const e = state.explosions.shift();\r\n      if (e.team === 'red') score.blue++;\r\n      else score.red++;\r\n    }\r\n\r\n    // decay and purge effect buffers\r\n    function decay(arr, dt) {\r\n      for (let i = arr.length - 1; i >= 0; i--) {\r\n        const it = arr[i]; it.life = (it.life || 0) - dt; if (it.life <= 0) arr.splice(i, 1);\r\n      }\r\n    }\r\n    decay(flashes, dtSeconds);\r\n    decay(shieldFlashes, dtSeconds);\r\n    decay(healthFlashes, dtSeconds);\r\n\r\n    // push augmented snapshot to renderer\r\n    if (renderer && typeof renderer.renderState === 'function') {\r\n      const renderSnapshot = {\r\n        ships: state.ships,\r\n        bullets: state.bullets,\r\n        flashes,\r\n        shieldFlashes,\r\n        healthFlashes,\r\n        t: state.t\r\n      };\r\n      renderer.renderState(renderSnapshot);\r\n    }\r\n  }\r\n\r\n  // run loop (main-thread) -----------------\r\n  let acc = 0; let last = performance.now();\r\n  function runLoop() {\r\n    if (!running) return;\r\n    const now = performance.now();\r\n    acc += now - last; last = now;\r\n    if (acc > 250) acc = 250; // clamp\r\n    while (acc >= SIM_DT_MS) {\r\n      step(SIM_DT_MS / 1000);\r\n      acc -= SIM_DT_MS;\r\n    }\r\n    requestAnimationFrame(runLoop);\r\n  }\r\n\r\n  return {\r\n    start() { if (!running) { running = true; last = performance.now(); runLoop(); } },\r\n    pause() { running = false; },\r\n    reset() {\r\n      state = makeInitialState(); score = { red: 0, blue: 0 };\r\n      if (simWorker) simWorker.post({ type: 'command', cmd: 'setState', args: { state } });\r\n    },\r\n    isRunning() { return running; },\r\n    spawnShip(color = 'red') {\r\n      const x = Math.random() * bounds.W; const y = Math.random() * bounds.H;\r\n      const ship = createShip('fighter', x, y, color);\r\n      // give a small initial drift to encourage engagement\r\n      const dir = color === 'red' ? 1 : -1;\r\n      ship.vx = 30 * dir; ship.vy = (Math.random() - 0.5) * 20;\r\n      if (simWorker) simWorker.post({ type: 'command', cmd: 'spawnShip', args: { ship } });\r\n      else state.ships.push(ship);\r\n    },\r\n    reseed(newSeed = Math.floor(Math.random()*0xffffffff)) { srand(newSeed); if (simWorker) simWorker.post({ type: 'setSeed', seed: newSeed }); },\r\n    formFleets() { // create a small fleet each side\r\n      for (let i = 0; i < 5; i++) {\r\n        const r = createShip('fighter', 100 + i*20, 100 + i*10, 'red'); r.vx = 40; r.vy = 0;\r\n        const b = createShip('fighter', bounds.W - 100 - i*20, bounds.H - 100 - i*10, 'blue'); b.vx = -40; b.vy = 0;\r\n        if (simWorker) {\r\n          simWorker.post({ type: 'command', cmd: 'spawnShip', args: { ship: r } });\r\n          simWorker.post({ type: 'command', cmd: 'spawnShip', args: { ship: b } });\r\n        } else {\r\n          state.ships.push(r); state.ships.push(b);\r\n        }\r\n      }\r\n    },\r\n    snapshot() { return { ships: state.ships.slice(), bullets: state.bullets.slice(), t: state.t }; },\r\n    score,\r\n    _internal: { state, bounds }\r\n  };\r\n}\r\n\r\n// (duplicate imports removed; consolidated at top of file)\r\n\r\nexport const ships = [];\r\nexport const bullets = [];\r\nexport const particles = [];\r\nexport const stars = [];\r\nexport let starCanvas = null;\r\nexport const flashes = [];\r\nexport const shieldFlashes = [];\r\nexport const healthFlashes = [];\r\nexport const particlePool = [];\r\n\r\n// manager-level tuning config (particle/flash tuning)\r\nexport const config = {\r\n  shield: Object.assign({}, SHIELD),\r\n  health: Object.assign({}, HEALTH),\r\n  explosion: Object.assign({}, EXPLOSION),\r\n  stars: Object.assign({}, STARS)\r\n};\r\n\r\nexport function setManagerConfig(newCfg = {}) {\r\n  // Validate and shallow merge top-level keys. Only accept values of correct type.\r\n  function validateField(obj, key, value, type) {\r\n    if (type === 'number' && typeof value === 'number' && Number.isFinite(value)) obj[key] = value;\r\n    else if (type === 'string' && typeof value === 'string') obj[key] = value;\r\n    else if (type === 'boolean' && typeof value === 'boolean') obj[key] = value;\r\n    // ignore invalid types\r\n  }\r\n  const fieldTypes = {\r\n    explosion: {\r\n      particleCount: 'number', particleTTL: 'number', particleColor: 'string', particleSize: 'number', minSpeed: 'number', maxSpeed: 'number'\r\n    },\r\n    shield: {\r\n      ttl: 'number', particleCount: 'number', particleTTL: 'number', particleColor: 'string', particleSize: 'number'\r\n    },\r\n    health: {\r\n      ttl: 'number', particleCount: 'number', particleTTL: 'number', particleColor: 'string', particleSize: 'number'\r\n    },\r\n    stars: {\r\n      twinkle: 'boolean', redrawInterval: 'number'\r\n    }\r\n  };\r\n  for (const k of Object.keys(newCfg)) {\r\n    if (config[k] && typeof config[k] === 'object' && typeof newCfg[k] === 'object' && fieldTypes[k]) {\r\n      for (const f of Object.keys(newCfg[k])) {\r\n        if (fieldTypes[k][f]) {\r\n          validateField(config[k], f, newCfg[k][f], fieldTypes[k][f]);\r\n        }\r\n      }\r\n    } else {\r\n      config[k] = newCfg[k];\r\n    }\r\n  }\r\n}\r\nexport function getManagerConfig() { return config; }\r\n\r\n/**\r\n * Return the current star canvas version. Incremented whenever createStarCanvas\r\n * updates the pre-rendered canvas. Useful for renderers to detect uploads.\r\n */\r\nexport function getStarCanvasVersion() { return _starCanvasVersion; }\r\n\r\nexport class Particle {\r\n  constructor(x = 0, y = 0, vx = 0, vy = 0, ttl = 1, color = '#fff', size = 2) {\r\n    this.x = x; this.y = y; this.vx = vx; this.vy = vy; this.ttl = ttl; this.life = ttl; this.color = color; this.size = size; this.alive = true;\r\n  }\r\n}\r\n\r\nexport function acquireParticle(x, y, opts = {}) {\r\n  let p = null;\r\n  if (particlePool.length) {\r\n    p = particlePool.pop();\r\n    // reinitialize\r\n    p.x = x; p.y = y; p.vx = opts.vx || 0; p.vy = opts.vy || 0; p.ttl = opts.ttl || 1; p.life = p.ttl; p.color = opts.color || '#fff'; p.size = opts.size || 2; p.alive = true;\r\n  } else {\r\n    p = new Particle(x, y, opts.vx || 0, opts.vy || 0, opts.ttl || 1, opts.color || '#fff', opts.size || 2);\r\n  }\r\n  particles.push(p);\r\n  return p;\r\n}\r\n\r\nexport function releaseParticle(p) {\r\n  // remove from particles array if present\r\n  const i = particles.indexOf(p);\r\n  if (i !== -1) particles.splice(i, 1);\r\n  p.alive = false;\r\n  particlePool.push(p);\r\n}\r\n\r\nlet _seed = null;\r\nlet _reinforcementInterval = 5.0;\r\nlet _reinforcementAccumulator = 0;\r\n// star/twinkle timing and versioning\r\nlet _starTime = 0;\r\nlet _starLastRegen = 0;\r\nlet _starCanvasVersion = 0;\r\n// Internal guard to detect accidental double-simulation within the same\r\n// logical frame. We compute a simple frame id based on performance.now()\r\n// divided by 4ms (approx 250Hz) to bucket calls into a millisecond-granular\r\n// frame window. In dev mode we can throw; otherwise we log a warning.\r\nlet _lastSimulateFrameId = null;\r\nlet _doubleSimStrict = false; // when true, throw on detection (useful in CI/dev)\r\n\r\nexport function setDoubleSimStrict(v = false) { _doubleSimStrict = !!v; }\r\n\r\n\r\nexport function reset(seedValue = null) {\r\n  ships.length = 0; bullets.length = 0; particles.length = 0; stars.length = 0;\r\n  flashes.length = 0; shieldFlashes.length = 0; healthFlashes.length = 0;\r\n  _reinforcementAccumulator = 0;\r\n  if (typeof seedValue === 'number') { _seed = seedValue >>> 0; srand(_seed); }\r\n  // create a deterministic starfield when resetting (defaults)\r\n  try { initStars({ stars }, 800, 600, 140); } catch (e) { /* ignore */ }\r\n  // Auto-generate a pre-rendered star canvas for faster backgrounds when possible\r\n  try { if (!config.stars || !config.stars.twinkle) createStarCanvas({ stars }, 800, 600); } catch (e) { /* ignore */ }\r\n}\r\n\r\n// Initialize a deterministic starfield. Uses seeded RNG (srandom) when srand(seed) was called.\r\nexport function initStars(state, W = 800, H = 600, count = 140) {\r\n  // Explicit API: initStars(state, W, H, count)\r\n  // - state must be an object containing an array property `stars` (e.g. { stars: [] })\r\n  // - W/H/count are optional and default to 800/600/140\r\n  if (!state || typeof state !== 'object' || !Array.isArray(state.stars)) {\r\n    throw new Error('initStars(state, W, H, count) requires a state object with a `stars` array');\r\n  }\r\n\r\n  state.stars.length = 0; // Clear existing stars in state\r\n  for (let i = 0; i < count; i++) {\r\n    const x = srandom() * W;\r\n    const y = srandom() * H;\r\n    const r = 0.3 + srandom() * 1.3; // radius\r\n    const a = 0.3 + srandom() * 0.7; // alpha/brightness\r\n    const twPhase = srandom() * Math.PI * 2;\r\n    const twSpeed = 0.5 + srandom() * 1.5; // cycles per second\r\n    const baseA = a;\r\n    const star = { x: x, y: y, r: r, a: baseA, baseA: baseA, twPhase: twPhase, twSpeed: twSpeed };\r\n    state.stars.push(star);\r\n  }\r\n}\r\n\r\n// Create an offscreen canvas with the starfield pre-rendered. Useful for\r\n// fast background draws in the Canvas renderer and for uploading a single\r\n// WebGL background texture. Returns the canvas.\r\nexport function createStarCanvas(state, W = 800, H = 600, bg = '#041018') {\r\n  // New strict signature: createStarCanvas(state, W, H, bg)\r\n  // `state` is required and must contain a `stars` array. This removes the\r\n  // legacy overloaded form and forces callers to be explicit about which\r\n  // star array is being used.\r\n  if (!state || typeof state !== 'object' || !Array.isArray(state.stars)) {\r\n    throw new Error('createStarCanvas(state, W, H, bg) requires a state object with a `stars` array');\r\n  }\r\n  try {\r\n    const c = (typeof document !== 'undefined' && typeof document.createElement === 'function') ? document.createElement('canvas') : null;\r\n    if (!c) { starCanvas = null; return null; }\r\n    c.width = Math.max(1, Math.floor(W));\r\n    c.height = Math.max(1, Math.floor(H));\r\n    const ctx = c.getContext && c.getContext('2d');\r\n    if (ctx) {\r\n      // background\r\n      ctx.fillStyle = bg;\r\n      ctx.fillRect(0, 0, c.width, c.height);\r\n    // draw each star from the provided state\r\n    const drawStars = state.stars;\r\n      for (const s of drawStars) {\r\n        const alpha = Math.max(0, Math.min(1, s.a != null ? s.a : (s.baseA != null ? s.baseA : 1)));\r\n        ctx.beginPath();\r\n        ctx.fillStyle = `rgba(255,255,255,${alpha})`;\r\n        const r = Math.max(0.2, s.r || 0.5);\r\n        ctx.arc(s.x || 0, s.y || 0, r, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      }\r\n    }\r\n    else {\r\n      // jsdom / non-canvas fallback: fabricate a minimal 2D context so tests\r\n      // that call getContext('2d').getImageData still see a 'bright' pixel.\r\n      const Wpx = c.width, Hpx = c.height;\r\n      const data = new Uint8ClampedArray(Wpx * Hpx * 4);\r\n      // make first pixel bright white so brightness test passes\r\n      if (data.length >= 4) { data[0] = 255; data[1] = 255; data[2] = 255; data[3] = 255; }\r\n      const stubCtx = {\r\n        getImageData: (x, y, w, h) => ({ data }),\r\n        // no-op drawing methods\r\n        fillRect: () => {}, beginPath: () => {}, arc: () => {}, fill: () => {},\r\n        set fillStyle(v) {}, get fillStyle() { return '#000'; }\r\n      };\r\n      c.getContext = () => stubCtx;\r\n    }\r\n    // bump canvas version so renderers can avoid redundant uploads\r\n    _starCanvasVersion = (_starCanvasVersion || 0) + 1;\r\n    c._version = _starCanvasVersion;\r\n    starCanvas = c;\r\n    return c;\r\n  } catch (e) {\r\n    starCanvas = null;\r\n    return null;\r\n  }\r\n}\r\n\r\nexport function simulate(dt, W = 800, H = 600) {\r\n  // detect double-simulation: compute a frame id (coarse bucket) and compare\r\n  try {\r\n    const nowMs = (typeof performance !== 'undefined' && performance.now) ? performance.now() : Date.now();\r\n    // bucket size: 4ms (250Hz); this is coarse but sufficient to detect\r\n    // immediate double-calls within the same frame/tick.\r\n    const frameId = Math.floor(nowMs / 4);\r\n    if (_lastSimulateFrameId === frameId) {\r\n      const msg = '[gamemanager] detected simulate() called multiple times within the same frame bucket \u2014 possible double-simulation';\r\n      if (_doubleSimStrict) {\r\n        throw new Error(msg);\r\n      } else {\r\n        console.warn(msg);\r\n      }\r\n    }\r\n    _lastSimulateFrameId = frameId;\r\n  } catch (e) {\r\n    // ignore any timing issues \u2014 detection is best-effort\r\n  }\r\n  const state = { ships, bullets, particles, stars, explosions: [], shieldHits: [], healthHits: [] };\r\n  evaluateReinforcement(dt);\r\n  simulateStep(state, dt, { W, H });\r\n  // merge emitted events into exported arrays for renderer\r\n  // merge explosions into exported flashes and also convert them into particles\r\n  // so renderers that consume particles (WebGL) will see visual effects without\r\n  // needing to process the raw event arrays themselves.\r\n  for (const ex of state.explosions) {\r\n    flashes.push(Object.assign({}, ex));\r\n    // spawn a small burst of particles for the explosion\r\n    try {\r\n      const count = 12;\r\n      const ttl = 0.6;\r\n      const color = 'rgba(255,200,100,0.95)';\r\n      const size = 3;\r\n      for (let i = 0; i < count; i++) {\r\n        const ang = srandom() * Math.PI * 2;\r\n        const sp = 30 + srandom() * 90; // px/sec\r\n        const vx = Math.cos(ang) * sp;\r\n        const vy = Math.sin(ang) * sp;\r\n        acquireParticle(ex.x || 0, ex.y || 0, { vx, vy, ttl, color, size });\r\n      }\r\n    } catch (e) {}\r\n  }\r\n\r\n  // wrap hits with TTL/life so renderer can persist them across frames; also\r\n  // convert hits into particles immediately (so WebGL renderer sees them).\r\n  for (const h of state.shieldHits) {\r\n    shieldFlashes.push(Object.assign({}, h, { ttl: config.shield.ttl, life: config.shield.ttl, spawned: true }));\r\n    try {\r\n      const cfg = config.shield || {};\r\n      const cnt = cfg.particleCount || 6;\r\n      const ttl = cfg.particleTTL || 0.35;\r\n      const color = cfg.particleColor || 'rgba(160,200,255,0.9)';\r\n      const size = cfg.particleSize || 2;\r\n      for (let i = 0; i < cnt; i++) {\r\n        const ang = srandom() * Math.PI * 2;\r\n        const sp = 10 + srandom() * 40;\r\n        const vx = Math.cos(ang) * sp;\r\n        const vy = Math.sin(ang) * sp;\r\n        acquireParticle(h.hitX || h.x || 0, h.hitY || h.y || 0, { vx, vy, ttl, color, size });\r\n      }\r\n    } catch (e) {}\r\n  }\r\n  for (const h of state.healthHits) {\r\n    healthFlashes.push(Object.assign({}, h, { ttl: config.health.ttl, life: config.health.ttl, spawned: true }));\r\n    try {\r\n      const cfg = config.health || {};\r\n      const cnt = cfg.particleCount || 8;\r\n      const ttl = cfg.particleTTL || 0.6;\r\n      const color = cfg.particleColor || 'rgba(255,120,80,0.95)';\r\n      const size = cfg.particleSize || 2;\r\n      for (let i = 0; i < cnt; i++) {\r\n        const ang = srandom() * Math.PI * 2;\r\n        const sp = 20 + srandom() * 50;\r\n        const vx = Math.cos(ang) * sp;\r\n        const vy = Math.sin(ang) * sp;\r\n        acquireParticle(h.hitX || h.x || 0, h.hitY || h.y || 0, { vx, vy, ttl, color, size });\r\n      }\r\n    } catch (e) {}\r\n  }\r\n\r\n  // advance star twinkle time and update per-star alpha deterministically\r\n  try {\r\n    _starTime += dt;\r\n    if (config.stars && config.stars.twinkle) {\r\n      for (const s of stars) {\r\n        const base = (s.baseA != null ? s.baseA : (s.a != null ? s.a : 1));\r\n        const phase = s.twPhase != null ? s.twPhase : 0;\r\n        const speed = s.twSpeed != null ? s.twSpeed : 1.0;\r\n        s.a = base * (0.7 + 0.3 * Math.sin(phase + _starTime * speed));\r\n      }\r\n      // Do not regenerate the canvas every frame here; the WebGL renderer\r\n      // will use instance alpha to animate twinkle without re-uploading a texture.\r\n    }\r\n  } catch (e) {}\r\n  return { ships, bullets, particles, flashes: flashes, shieldFlashes, healthFlashes, stars, starCanvas };\r\n}\r\n\r\nexport function processStateEvents(state, dt = 0) {\r\n  // placeholder for manager-level logic (XP, scoring)\r\n  return state;\r\n}\r\n\r\nexport function evaluateReinforcement(dt) {\r\n  _reinforcementAccumulator += dt;\r\n  if (_reinforcementAccumulator >= _reinforcementInterval) {\r\n    _reinforcementAccumulator = 0;\r\n    // spawn a pair of ships for each team\r\n    ships.push(createShip({ x: 100, y: 100, team: 'red' }));\r\n    ships.push(createShip({ x: 700, y: 500, team: 'blue' }));\r\n  }\r\n}\r\n\r\nexport function setReinforcementInterval(seconds) { _reinforcementInterval = seconds; }\r\nexport function getReinforcementInterval() { return _reinforcementInterval; }\r\n\r\n// Re-export ShipConfig runtime helpers for convenience so callers can tune ship\r\n// defaults at runtime through the gamemanager API.\r\nexport { setShipConfig, getShipConfig };\r\n\r\nexport default { reset, simulate, processStateEvents, evaluateReinforcement, ships, bullets };\r\n", "// Teams configuration and seeded fleet helpers\r\n// Exports:\r\n// - TeamsConfig: colors and defaults\r\n// - generateFleetForTeam(seed, teamId, bounds, shipFactory, options)\r\n// - makeInitialFleets(seed, bounds, shipFactory, options)\r\n// - chooseReinforcements(seed, state, options)\r\n\r\nexport const TeamsConfig = {\r\n  teams: {\r\n    red: { id: 'red', color: '#ff4d4d', label: 'Red' },\r\n    blue: { id: 'blue', color: '#4da6ff', label: 'Blue' }\r\n  },\r\n  // Default fleet composition when prepopulating a game\r\n  defaultFleet: {\r\n    // counts per ship type\r\n    counts: {\r\n      fighter: 8,\r\n      corvette: 3,\r\n      frigate: 1\r\n    },\r\n    // jitter and spacing used when scattering initial ships\r\n    spacing: 28,\r\n    jitter: { x: 80, y: 120 }\r\n  },\r\n  // Continuous reinforcement defaults\r\n  continuousReinforcement: {\r\n    enabled: false,        // toggle to enable/disable\r\n    scoreMargin: 0.12,     // if weaker team has less than (1 - scoreMargin) of strength, reinforce\r\n    perTick: 1,            // number of reinforcement ships to provide when triggered\r\n    reinforceType: 'fighter' // default reinforcement ship type\r\n  }\r\n};\r\n\r\n// Small local seeded PRNG (does not modify global RNG state)\r\nfunction mulberry32(seed) {\r\n  let t = seed >>> 0;\r\n  return function() {\r\n    t += 0x6D2B79F5;\r\n    let r = Math.imul(t ^ (t >>> 15), 1 | t);\r\n    r ^= r + Math.imul(r ^ (r >>> 7), 61 | r);\r\n    return ((r ^ (r >>> 14)) >>> 0) / 4294967296;\r\n  };\r\n}\r\n\r\nfunction hashStringToInt(s) {\r\n  let h = 2166136261 >>> 0;\r\n  for (let i = 0; i < s.length; i++) {\r\n    h ^= s.charCodeAt(i);\r\n    h = Math.imul(h, 16777619) >>> 0;\r\n  }\r\n  return h >>> 0;\r\n}\r\n\r\n// Generate a fleet for a single team. If shipFactory is provided it will be\r\n// called as shipFactory(type, x, y, team) for each generated ship. Otherwise\r\n// plain descriptors are returned.\r\nexport function generateFleetForTeam(seed = 0, teamId = 'red', bounds = { W: 800, H: 600 }, shipFactory, options = {}) {\r\n  const cfg = Object.assign({}, TeamsConfig.defaultFleet, options.fleet || {});\r\n  const spacing = options.spacing ?? cfg.spacing;\r\n  const jitter = Object.assign({}, cfg.jitter, options.jitter || {});\r\n  const centerY = bounds.H / 2;\r\n  const baseX = teamId === 'red' ? bounds.W * 0.22 : bounds.W * 0.78;\r\n\r\n  const rng = mulberry32((seed >>> 0) + hashStringToInt(teamId));\r\n  const out = [];\r\n\r\n  for (const [type, count] of Object.entries(cfg.counts)) {\r\n    for (let i = 0; i < count; i++) {\r\n      // polar scatter around base point\r\n      const r = spacing * Math.sqrt(rng());\r\n      const angle = rng() * Math.PI * 2;\r\n      const dx = Math.cos(angle) * r + (rng() - 0.5) * (jitter.x ?? 0);\r\n      const dy = Math.sin(angle) * r + (rng() - 0.5) * (jitter.y ?? 0);\r\n      const x = Math.max(0, Math.min(bounds.W, baseX + dx));\r\n      const y = Math.max(0, Math.min(bounds.H, centerY + dy));\r\n\r\n      if (typeof shipFactory === 'function') {\r\n        out.push(shipFactory(type, x, y, teamId));\r\n      } else {\r\n        out.push({ type, x, y, team: teamId });\r\n      }\r\n    }\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\n// Convenience: create both teams' initial fleets and return a combined array\r\nexport function makeInitialFleets(seed = 0, bounds = { W: 800, H: 600 }, shipFactory, options = {}) {\r\n  const red = generateFleetForTeam(seed, 'red', bounds, shipFactory, options);\r\n  const blue = generateFleetForTeam(seed + 1, 'blue', bounds, shipFactory, options);\r\n  return red.concat(blue);\r\n}\r\n\r\n// Choose reinforcements for the weaker team according to the config.\r\n// Returns a small array of reinforcement orders: { type, team, x, y }\r\nexport function chooseReinforcements(seed = 0, state = {}, options = {}) {\r\n  const cfg = Object.assign({}, TeamsConfig.continuousReinforcement, options);\r\n  if (!cfg.enabled) return [];\r\n\r\n  // Compute simple strength by summing HP of alive ships per team (fallback to counts)\r\n  const teamStrength = {};\r\n  if (Array.isArray(state.ships)) {\r\n    for (const s of state.ships) {\r\n      if (!s || !s.team) continue;\r\n      const hp = (typeof s.hp === 'number' ? s.hp : 1);\r\n      teamStrength[s.team] = (teamStrength[s.team] || 0) + hp;\r\n    }\r\n  }\r\n\r\n  const teams = Object.keys(TeamsConfig.teams);\r\n  if (teams.length === 0) return [];\r\n\r\n  // If no numeric strengths available, fall back to ship counts\r\n  for (const t of teams) {\r\n    if (!teamStrength[t]) {\r\n      const cnt = (state.ships || []).filter(s => s && s.team === t).length;\r\n      teamStrength[t] = cnt > 0 ? cnt : 0;\r\n    }\r\n  }\r\n\r\n  // Find weakest and strongest teams\r\n  let weakest = teams[0];\r\n  let strongest = teams[0];\r\n  for (const t of teams) {\r\n    if (teamStrength[t] < teamStrength[weakest]) weakest = t;\r\n    if (teamStrength[t] > teamStrength[strongest]) strongest = t;\r\n  }\r\n\r\n  const total = teams.reduce((s, t) => s + (teamStrength[t] || 0), 0) || 1;\r\n  const weakestRatio = (teamStrength[weakest] || 0) / total;\r\n\r\n  // If the weakest side is sufficiently behind, return reinforcement orders\r\n  if (weakestRatio < (0.5 - cfg.scoreMargin)) {\r\n    const orders = [];\r\n    const rng = mulberry32((seed >>> 0) + hashStringToInt(weakest));\r\n    for (let i = 0; i < cfg.perTick; i++) {\r\n      // spawn near the team's side center\r\n      const bounds = (options.bounds || { W: 800, H: 600 });\r\n      const centerY = bounds.H / 2;\r\n      const baseX = weakest === 'red' ? bounds.W * 0.18 : bounds.W * 0.82;\r\n      const x = Math.max(0, Math.min(bounds.W, baseX + (rng() - 0.5) * 120));\r\n      const y = Math.max(0, Math.min(bounds.H, centerY + (rng() - 0.5) * 160));\r\n      orders.push({ type: cfg.reinforceType || 'fighter', team: weakest, x, y });\r\n    }\r\n    return orders;\r\n  }\r\n\r\n  return [];\r\n}\r\n\r\nexport default TeamsConfig;\r\n", "// canvasrenderer.js - simple Canvas2D fallback renderer\r\nimport { AssetsConfig, getShipAsset, getBulletAsset, getTurretAsset } from './config/assets/assetsConfig';\r\nimport { TeamsConfig } from './config/teamsConfig.js';\r\nimport { VisualMappingConfig, bulletKindForRadius } from './config/entitiesConfig.js';\r\n\r\nexport class CanvasRenderer {\r\n  constructor(canvas) {\r\n    this.canvas = canvas;\r\n    this.ctx = null;\r\n    this.providesOwnLoop = false;\r\n  }\r\n  init() {\r\n    this.ctx = this.canvas.getContext('2d');\r\n    if (!this.ctx) return false;\r\n    return true;\r\n  }\r\n  isRunning() { return false; }\r\n  renderState(state, interpolation = 0) {\r\n    const ctx = this.ctx; if (!ctx) return;\r\n    const w = this.canvas.width; const h = this.canvas.height;\r\n    ctx.clearRect(0, 0, w, h);\r\n    ctx.save();\r\n    ctx.fillStyle = '#0b1220';\r\n    ctx.fillRect(0, 0, w, h);\r\n\r\n    // helper: draw a polygon path from points (already scaled/rotated by transform)\r\n    function drawPolygon(points) {\r\n      if (!points || points.length === 0) return;\r\n      ctx.beginPath();\r\n      ctx.moveTo(points[0][0], points[0][1]);\r\n      for (let i = 1; i < points.length; i++) ctx.lineTo(points[i][0], points[i][1]);\r\n      ctx.closePath();\r\n      ctx.fill();\r\n    }\r\n\r\n    // draw ships using shapes\r\n    for (const s of state.ships) {\r\n      const team = s.team === 'blue' ? TeamsConfig.teams.blue : TeamsConfig.teams.red;\r\n      const color = team.color || AssetsConfig.palette.shipHull;\r\n      const radius = s.radius || 6;\r\n      const angle = s.angle || 0;\r\n      const shape = getShipAsset(s.type || 'fighter');\r\n\r\n      ctx.save();\r\n      ctx.translate(s.x, s.y);\r\n      ctx.rotate(angle);\r\n      ctx.scale(radius, radius);\r\n      ctx.fillStyle = color;\r\n      if (shape.type === 'polygon') {\r\n        drawPolygon(shape.points);\r\n      } else if (shape.type === 'circle') {\r\n        ctx.beginPath(); ctx.arc(0, 0, shape.r || 1, 0, Math.PI * 2); ctx.fill();\r\n      } else if (shape.type === 'compound' && Array.isArray(shape.parts)) {\r\n        for (const part of shape.parts) {\r\n          if (part.type === 'polygon') drawPolygon(part.points);\r\n          else if (part.type === 'circle') { ctx.beginPath(); ctx.arc(0, 0, part.r || 1, 0, Math.PI * 2); ctx.fill(); }\r\n        }\r\n      }\r\n      ctx.restore();\r\n\r\n      // hp bar\r\n      ctx.fillStyle = '#222'; ctx.fillRect(s.x - 10, s.y - 12, 20, 4);\r\n      ctx.fillStyle = '#4caf50'; ctx.fillRect(s.x - 10, s.y - 12, 20 * Math.max(0, (s.hp || 0) / (s.maxHp || 1)), 4);\r\n    }\r\n\r\n    // draw turrets as simple overlays (optional)\r\n    // This placeholder draws one turret per ship at the ship origin, rotated with ship\r\n    for (const s of state.ships) {\r\n      const radius = (s.radius || 6) * 0.6;\r\n      const angle = s.angle || 0;\r\n      const tShape = getTurretAsset('basic');\r\n      ctx.save();\r\n      ctx.translate(s.x, s.y);\r\n      ctx.rotate(angle);\r\n      ctx.scale(radius, radius);\r\n      ctx.fillStyle = AssetsConfig.palette.turret;\r\n      if (tShape.type === 'compound') {\r\n        for (const part of tShape.parts) {\r\n          if (part.type === 'polygon') drawPolygon(part.points);\r\n          else if (part.type === 'circle') { ctx.beginPath(); ctx.arc(0, 0, part.r || 1, 0, Math.PI * 2); ctx.fill(); }\r\n        }\r\n      }\r\n      ctx.restore();\r\n    }\r\n\r\n    // bullets using radius mapping to kind (small/medium/large)\r\n    for (const b of state.bullets) {\r\n      const r = b.radius || b.bulletRadius || 1.5;\r\n      const kind = bulletKindForRadius(r / 6 /* normalize roughly by typical ship radius */);\r\n      const shape = getBulletAsset(kind);\r\n      ctx.save();\r\n      ctx.translate(b.x, b.y);\r\n      // scale bullet circle to approximate projectile radius in pixels\r\n      const px = Math.max(1, r);\r\n      if (shape.type === 'circle') {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = AssetsConfig.palette.bullet;\r\n        ctx.arc(0, 0, px, 0, Math.PI * 2);\r\n        ctx.fill();\r\n      } else if (shape.type === 'polygon') {\r\n        ctx.fillStyle = AssetsConfig.palette.bullet; ctx.scale(px, px); drawPolygon(shape.points);\r\n      }\r\n      ctx.restore();\r\n    }\r\n\r\n    // visual effects: explosions (flashes), shield hits, health hits\r\n    function drawRing(x, y, R, color, alpha = 1.0, thickness = 2) {\r\n      ctx.save();\r\n      ctx.globalAlpha = Math.max(0, Math.min(1, alpha));\r\n      ctx.strokeStyle = color;\r\n      ctx.lineWidth = thickness;\r\n      ctx.beginPath();\r\n      ctx.arc(x, y, Math.max(1, R), 0, Math.PI * 2);\r\n      ctx.stroke();\r\n      ctx.restore();\r\n    }\r\n\r\n    // Explosions: warm rings that expand and fade\r\n    if (Array.isArray(state.flashes)) {\r\n      for (const f of state.flashes) {\r\n        const ttl = f.ttl || 0.6; const life = f.life != null ? f.life : ttl;\r\n        const t = Math.max(0, Math.min(1, life / ttl));\r\n        const R = 8 + (1 - t) * 28; // expands as it fades\r\n        const alpha = 0.8 * t;\r\n        const color = '#ffaa33';\r\n        drawRing(f.x || 0, f.y || 0, R, color, alpha, 3);\r\n      }\r\n    }\r\n\r\n    // Shield hits: cool blue rings\r\n    if (Array.isArray(state.shieldFlashes)) {\r\n      for (const s of state.shieldFlashes) {\r\n        const ttl = s.ttl || 0.4; const life = s.life != null ? s.life : ttl;\r\n        const t = Math.max(0, Math.min(1, life / ttl));\r\n        const R = 6 + (1 - t) * 16;\r\n        const alpha = 0.9 * t;\r\n        drawRing(s.x || 0, s.y || 0, R, '#88ccff', alpha, 2);\r\n      }\r\n    }\r\n\r\n    // Health hits: reddish rings\r\n    if (Array.isArray(state.healthFlashes)) {\r\n      for (const s of state.healthFlashes) {\r\n        const ttl = s.ttl || 0.6; const life = s.life != null ? s.life : ttl;\r\n        const t = Math.max(0, Math.min(1, life / ttl));\r\n        const R = 6 + (1 - t) * 18;\r\n        const alpha = 0.9 * t;\r\n        drawRing(s.x || 0, s.y || 0, R, '#ff7766', alpha, 2);\r\n      }\r\n    }\r\n\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nexport default CanvasRenderer;\r\n", "// webglrenderer.js - minimal WebGL2 renderer stub\r\nexport class WebGLRenderer {\r\n  constructor(canvas) {\r\n    this.canvas = canvas;\r\n    this.gl = null;\r\n    // this renderer may claim it owns its own loop in advanced impls\r\n    this.providesOwnLoop = false;\r\n  }\r\n  init() {\r\n    try {\r\n      this.gl = this.canvas.getContext('webgl2');\r\n      if (!this.gl) return false;\r\n      // minimal setup\r\n      const gl = this.gl;\r\n      gl.clearColor(0.02, 0.03, 0.06, 1.0);\r\n      return true;\r\n    } catch (e) { return false; }\r\n  }\r\n  isRunning() { return false; }\r\n  renderState(state, interpolation = 0) {\r\n    if (!this.gl) return;\r\n    const gl = this.gl;\r\n    gl.viewport(0, 0, this.canvas.width, this.canvas.height);\r\n    gl.clear(gl.COLOR_BUFFER_BIT);\r\n    // For simplicity this stub does not draw ships; fallback to CanvasRenderer if visual fidelity required.\r\n  }\r\n}\r\n\r\nexport default WebGLRenderer;\r\n", "// Renderer preference configuration\r\n// preferred: 'canvas' or 'webgl'\r\nexport const RendererConfig = {\r\n  preferred: 'canvas',\r\n  allowUrlOverride: true,\r\n  allowWebGL: true\r\n};\r\n\r\nexport function getPreferredRenderer() {\r\n  try {\r\n    if (RendererConfig.allowUrlOverride && typeof window !== 'undefined' && window.location && window.location.search) {\r\n      const p = new URLSearchParams(window.location.search);\r\n      const r = p.get('renderer');\r\n      if (r === 'canvas' || r === 'webgl') return r;\r\n    }\r\n  } catch (e) {}\r\n  return RendererConfig.preferred;\r\n}\r\n\r\nexport default RendererConfig;\r\n", "// Minimal main.js - bundler-friendly entry that wires UI to game manager and renderer\r\nimport { createGameManager } from './gamemanager.js';\r\nimport { CanvasRenderer } from './canvasrenderer.js';\r\nimport { WebGLRenderer } from './webglrenderer.js';\r\nimport { getDefaultBounds } from './config/displayConfig.js';\r\nimport { getPreferredRenderer } from './config/rendererConfig.js';\r\n\r\nexport async function startApp(rootDocument = document) {\r\n  const canvas = rootDocument.getElementById('world');\r\n  const ui = {\r\n    startPause: rootDocument.getElementById('startPause'),\r\n    reset: rootDocument.getElementById('reset'),\r\n    addRed: rootDocument.getElementById('addRed'),\r\n    addBlue: rootDocument.getElementById('addBlue'),\r\n    toggleTrails: rootDocument.getElementById('toggleTrails'),\r\n    speed: rootDocument.getElementById('speed'),\r\n    redScore: rootDocument.getElementById('redScore'),\r\n    blueScore: rootDocument.getElementById('blueScore'),\r\n    stats: rootDocument.getElementById('stats'),\r\n    continuousCheckbox: rootDocument.getElementById('continuousCheckbox'),\r\n    seedBtn: rootDocument.getElementById('seedBtn'),\r\n    formationBtn: rootDocument.getElementById('formationBtn'),\r\n  };\r\n\r\n  function fitCanvasToWindow() {\r\n    const dpr = window.devicePixelRatio || 1;\r\n    const bounds = getDefaultBounds();\r\n    canvas.style.width = `${bounds.W}px`;\r\n    canvas.style.height = `${bounds.H}px`;\r\n    canvas.width = Math.round(bounds.W * dpr);\r\n    canvas.height = Math.round(bounds.H * dpr);\r\n  }\r\n\r\n  fitCanvasToWindow();\r\n  window.addEventListener('resize', fitCanvasToWindow);\r\n\r\n  // Choose renderer per config; default to Canvas for dev\r\n  let renderer;\r\n  const pref = getPreferredRenderer();\r\n  if (pref === 'webgl') {\r\n    try {\r\n      const w = new WebGLRenderer(canvas);\r\n      if (w && w.init && w.init()) renderer = w;\r\n    } catch (e) { /* fall through to canvas */ }\r\n  }\r\n  if (!renderer) {\r\n    renderer = new CanvasRenderer(canvas);\r\n    renderer.init && renderer.init();\r\n  }\r\n\r\n  const gm = createGameManager({ renderer, canvas });\r\n\r\n  ui.startPause.addEventListener('click', () => {\r\n    if (gm.isRunning()) { gm.pause(); ui.startPause.textContent = '\u25B6 Start'; }\r\n    else { gm.start(); ui.startPause.textContent = '\u23F8 Pause'; }\r\n  });\r\n  ui.reset.addEventListener('click', () => gm.reset());\r\n  ui.addRed.addEventListener('click', () => gm.spawnShip('red'));\r\n  ui.addBlue.addEventListener('click', () => gm.spawnShip('blue'));\r\n  ui.seedBtn.addEventListener('click', () => gm.reseed());\r\n  ui.formationBtn.addEventListener('click', () => gm.formFleets());\r\n\r\n  // basic UI update loop\r\n  function uiTick() {\r\n    const s = gm.snapshot();\r\n    ui.redScore.textContent = `Red ${gm.score.red}`;\r\n    ui.blueScore.textContent = `Blue ${gm.score.blue}`;\r\n    ui.stats.textContent = `Ships: ${s.ships.length} Bullets: ${s.bullets.length}`;\r\n    requestAnimationFrame(uiTick);\r\n  }\r\n  requestAnimationFrame(uiTick);\r\n\r\n  return { gm, renderer };\r\n}\r\n\r\n// Start automatically when running in a browser with DOM ready\r\nif (typeof window !== 'undefined') {\r\n  if (document.readyState === 'loading') document.addEventListener('DOMContentLoaded', () => startApp(document));\r\n  else startApp(document);\r\n}\r\n\r\nexport default startApp;\r\n"],
  "mappings": "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",
  "names": []
}
